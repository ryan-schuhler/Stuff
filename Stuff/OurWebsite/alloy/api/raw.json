{"majorversion": 3, "filemap": {"datatype_el-GR.js": {"classlist": [], "name": "datatype_el-GR.js", "module": "datatype"}, "aui-event-min.js": {"name": "aui-event-min.js", "classlist": [], "module": "aui-event", "guessedname": "B", "guessedtype": "function", "method": "B"}, "aui-base-min.js": {"name": "aui-base-min.js", "classlist": [], "module": "aui-autocomplete", "guessedname": "AUI_config", "guessedtype": "function", "method": "AUI_config"}, "datatype-date-format_th.js": {"classlist": [], "name": "datatype-date-format_th.js", "module": "datatype"}, "datatype_en-JO.js": {"classlist": [], "name": "datatype_en-JO.js", "module": "datatype"}, "get-debug.js": {"classlist": ["Get"], "name": "get-debug.js", "module": "yui"}, "datatype_th.js": {"classlist": [], "name": "datatype_th.js", "module": "datatype"}, "datatype-date-format_ru-RU.js": {"classlist": [], "name": "datatype-date-format_ru-RU.js", "module": "datatype"}, "aui-io-request-min.js": {"name": "aui-io-request-min.js", "classlist": [], "module": "aui-io", "guessedname": "G", "guessedtype": "function", "method": "G"}, "aui-calendar-datepicker-select-debug.js": {"classlist": ["DatePickerSelect"], "name": "aui-calendar-datepicker-select-debug.js", "module": "aui-calendar"}, "datatype-date-format_en-US.js": {"classlist": [], "name": "datatype-date-format_en-US.js", "module": "datatype"}, "aui-event-debug.js": {"classlist": ["AUI~event~input"], "name": "aui-event-debug.js", "module": "aui-event"}, "base-base.js": {"classlist": ["Base"], "name": "base-base.js", "module": "base"}, "console-filters-min.js": {"classlist": [], "name": "console-filters-min.js", "module": "console-filters"}, "loader-min.js": {"classlist": [], "name": "loader-min.js", "module": "loader"}, "aui-sortable-min.js": {"name": "aui-sortable-min.js", "classlist": [], "module": "aui-resize", "guessedname": "G", "guessedtype": "function", "method": "G"}, "widget-stack.js": {"classlist": ["WidgetStack"], "name": "widget-stack.js", "module": "widget-stack"}, "aui-calendar-base-min.js": {"name": "aui-calendar-base-min.js", "classlist": [], "module": "aui-calendar", "guessedname": "u", "guessedtype": "function", "method": "u"}, "datatype_el.js": {"classlist": [], "name": "datatype_el.js", "module": "datatype"}, "datatype_de-AT.js": {"classlist": [], "name": "datatype_de-AT.js", "module": "datatype"}, "widget-position-align.js": {"classlist": ["WidgetPositionAlign"], "name": "widget-position-align.js", "module": "widget-position-align"}, "swfdetect.js": {"classlist": [], "name": "swfdetect.js", "module": "swfdetect"}, "aui-io.js": {"classlist": ["IORequest", "A.io", "A.Plugin.IO"], "name": "aui-io.js", "module": "aui-io"}, "array-invoke-min.js": {"classlist": [], "name": "array-invoke-min.js", "module": "collection"}, "datatype_en.js": {"classlist": [], "name": "datatype_en.js", "module": "datatype"}, "datatype-date-debug.js": {"classlist": ["DataType.Date", "DataType.Date.Locale"], "name": "datatype-date-debug.js", "module": "datatype"}, "base-base-debug.js": {"classlist": ["Base"], "name": "base-base-debug.js", "module": "base"}, "slider-base-min.js": {"classlist": [], "name": "slider-base-min.js", "module": "slider"}, "io-xdr.js": {"classlist": [], "name": "io-xdr.js", "module": "io"}, "test-min.js": {"classlist": [], "name": "test-min.js", "module": "test"}, "dd-drop.js": {"classlist": ["DD.Drop"], "name": "dd-drop.js", "module": "dd"}, "attribute-debug.js": {"classlist": ["State", "Attribute"], "name": "attribute-debug.js", "module": "attribute"}, "aui-overlay-context-panel-debug.js": {"classlist": ["OverlayContextPanel", "OverlayContextPanelManager"], "name": "aui-overlay-context-panel-debug.js", "module": "aui-overlay"}, "stylesheet-debug.js": {"classlist": ["StyleSheet"], "name": "stylesheet-debug.js", "module": "stylesheet"}, "async-queue-debug.js": {"classlist": ["AsyncQueue"], "name": "async-queue-debug.js", "module": "async-queue"}, "tabview-plugin.js": {"classlist": [], "name": "tabview-plugin.js", "module": "tabview"}, "event-custom-complex.js": {"classlist": ["EventFacade"], "name": "event-custom-complex.js", "module": "event-custom"}, "datatype-date_fr-CA.js": {"classlist": [], "name": "datatype-date_fr-CA.js", "module": "datatype"}, "datatype_vi.js": {"classlist": [], "name": "datatype_vi.js", "module": "datatype"}, "dd-ddm-debug.js": {"classlist": [], "name": "dd-ddm-debug.js", "module": "dd"}, "datatype_es-PY.js": {"classlist": [], "name": "datatype_es-PY.js", "module": "datatype"}, "queue-promote-debug.js": {"classlist": [], "name": "queue-promote-debug.js", "module": "queue-promote"}, "datatype_pt.js": {"classlist": [], "name": "datatype_pt.js", "module": "datatype"}, "overlay-min.js": {"classlist": [], "name": "overlay-min.js", "module": "overlay"}, "dataschema-base-debug.js": {"classlist": ["DataSchema.Base"], "name": "dataschema-base-debug.js", "module": "dataschema"}, "anim-curve.js": {"classlist": [], "name": "anim-curve.js", "module": "anim"}, "node-aria-debug.js": {"classlist": [], "name": "node-aria-debug.js", "module": "align-plugin"}, "datatype-date_ru-RU.js": {"classlist": [], "name": "datatype-date_ru-RU.js", "module": "datatype"}, "aui-dialog-debug.js": {"classlist": ["Dialog", "DialogManager", "DialogMask"], "name": "aui-dialog-debug.js", "module": "aui-dialog"}, "base-min.js": {"classlist": [], "name": "base-min.js", "module": "base"}, "io-xdr-debug.js": {"classlist": [], "name": "io-xdr-debug.js", "module": "io"}, "aui-paginator-debug.js": {"classlist": ["Paginator"], "name": "aui-paginator-debug.js", "module": "aui-paginator"}, "anim-curve-min.js": {"classlist": [], "name": "anim-curve-min.js", "module": "anim"}, "anim-xy-min.js": {"classlist": [], "name": "anim-xy-min.js", "module": "anim"}, "slider-value-range-debug.js": {"classlist": ["SliderValueRange"], "name": "slider-value-range-debug.js", "module": "slider"}, "array-invoke-debug.js": {"classlist": ["YUI~array~invoke"], "name": "array-invoke-debug.js", "module": "collection"}, "loader-yui3.js": {"classlist": [], "name": "loader-yui3.js", "module": "loader"}, "collection-debug.js": {"classlist": ["YUI~array~extras", "ArrayList", "ArrayList~add", "ArrayList~filter", "YUI~array~invoke"], "name": "collection-debug.js", "module": "collection"}, "aui-image-viewer-gallery.js": {"classlist": ["ImageGallery"], "name": "aui-image-viewer-gallery.js", "module": "aui-image-viewer"}, "selector-css2-debug.js": {"classlist": [], "name": "selector-css2-debug.js", "module": "dom"}, "aui-tree-view-debug.js": {"classlist": ["TreeView", "TreeViewDD"], "name": "aui-tree-view-debug.js", "module": "aui-tree"}, "aui-calendar-datepicker-select-min.js": {"name": "aui-calendar-datepicker-select-min.js", "classlist": [], "module": "aui-calendar", "guessedname": "R", "guessedtype": "function", "method": "R"}, "base-pluginhost-debug.js": {"classlist": [], "name": "base-pluginhost-debug.js", "module": "base"}, "aui-live-search.js": {"classlist": ["LiveSearch"], "name": "aui-live-search.js", "module": "aui-live-search"}, "slider-base.js": {"classlist": ["SliderBase"], "name": "slider-base.js", "module": "slider"}, "widget-stdmod-debug.js": {"classlist": ["WidgetStdMod"], "name": "widget-stdmod-debug.js", "module": "widget-stack"}, "aui-overlay.js": {"classlist": ["OverlayBase", "OverlayContext", "OverlayContextManager", "OverlayContextPanel", "OverlayContextPanelManager", "OverlayManager", "OverlayMask"], "name": "aui-overlay.js", "module": "aui-overlay"}, "datatype-date-format_en-CA.js": {"classlist": [], "name": "datatype-date-format_en-CA.js", "module": "datatype"}, "loader-yui3-debug.js": {"classlist": [], "name": "loader-yui3-debug.js", "module": "loader"}, "tabview-min.js": {"classlist": [], "name": "tabview-min.js", "module": "tabview"}, "aui-state-interaction-debug.js": {"classlist": [], "name": "aui-state-interaction-debug.js", "module": "aui-resize"}, "range-slider-debug.js": {"classlist": ["Slider"], "name": "range-slider-debug.js", "module": "slider"}, "datatype.js": {"classlist": [], "name": "datatype.js", "module": "datatype"}, "aui-toolbar-debug.js": {"classlist": ["Toolbar"], "name": "aui-toolbar-debug.js", "module": "aui-toolbar"}, "datatype_es-PE.js": {"classlist": [], "name": "datatype_es-PE.js", "module": "datatype"}, "aui-datatype.js": {"classlist": ["DataType.Boolean", "DataType.String"], "name": "aui-datatype.js", "module": "aui-datatype"}, "dump.js": {"classlist": ["YUI~dump"], "name": "dump.js", "module": "dump"}, "slider-value-range.js": {"classlist": ["SliderValueRange"], "name": "slider-value-range.js", "module": "slider"}, "dataschema-min.js": {"classlist": [], "name": "dataschema-min.js", "module": "dataschema"}, "datatype-date-format_fr-FR.js": {"classlist": [], "name": "datatype-date-format_fr-FR.js", "module": "datatype"}, "arraylist-filter-min.js": {"classlist": [], "name": "arraylist-filter-min.js", "module": "collection"}, "datasource-arrayschema.js": {"classlist": ["DataSourceArraySchema"], "name": "datasource-arrayschema.js", "module": "datasource"}, "datasource-xmlschema.js": {"classlist": ["DataSourceXMLSchema"], "name": "datasource-xmlschema.js", "module": "datasource"}, "loader-yui3-min.js": {"classlist": [], "name": "loader-yui3-min.js", "module": "loader"}, "aui-rating-min.js": {"name": "aui-rating-min.js", "classlist": [], "module": "aui-rating", "guessedname": "S", "guessedtype": "function", "method": "S"}, "value-change-debug.js": {"classlist": [], "name": "value-change-debug.js", "module": "test"}, "aui-calendar.js": {"classlist": ["Calendar", "CalendarManager", "DatePickerSelect"], "name": "aui-calendar.js", "module": "aui-calendar"}, "async-queue.js": {"classlist": ["AsyncQueue"], "name": "async-queue.js", "module": "async-queue"}, "dataschema-base.js": {"classlist": ["DataSchema.Base"], "name": "dataschema-base.js", "module": "dataschema"}, "aui-node-debug.js": {"classlist": ["A.Node", "A.NodeList", "A.HTML5"], "name": "aui-node-debug.js", "module": "aui-node"}, "datasource-get-debug.js": {"classlist": ["DataSource.Get"], "name": "datasource-get-debug.js", "module": "datasource"}, "intl.js": {"classlist": ["Intl"], "name": "intl.js", "module": "intl"}, "datatype-date-format_en-IE.js": {"classlist": [], "name": "datatype-date-format_en-IE.js", "module": "datatype"}, "datatype-date_ko-KR.js": {"classlist": [], "name": "datatype-date_ko-KR.js", "module": "datatype"}, "console.js": {"classlist": [], "name": "console.js", "module": "console"}, "aui-form-validator-debug.js": {"classlist": [], "name": "aui-form-validator-debug.js", "module": "aui-event"}, "aui-image-viewer-gallery-debug.js": {"classlist": ["ImageGallery"], "name": "aui-image-viewer-gallery-debug.js", "module": "aui-image-viewer"}, "datatype_nl.js": {"classlist": [], "name": "datatype_nl.js", "module": "datatype"}, "aui-carousel-debug.js": {"classlist": [], "name": "aui-carousel-debug.js", "module": "aui-calendar"}, "compat-debug.js": {"classlist": [], "name": "compat-debug.js", "module": "collection"}, "datatype-date_sv.js": {"classlist": [], "name": "datatype-date_sv.js", "module": "datatype"}, "aui-event-input.js": {"classlist": ["AUI~event~input"], "name": "aui-event-input.js", "module": "aui-event"}, "profiler.js": {"classlist": ["Profiler"], "name": "profiler.js", "module": "profiler"}, "datatype_ar-JO.js": {"classlist": [], "name": "datatype_ar-JO.js", "module": "datatype"}, "aui-node-base.js": {"classlist": ["A.Node", "A.NodeList"], "name": "aui-node-base.js", "module": "aui-node"}, "datatype-date-format_id.js": {"classlist": [], "name": "datatype-date-format_id.js", "module": "datatype"}, "datatype_fi-FI.js": {"classlist": [], "name": "datatype_fi-FI.js", "module": "datatype"}, "datatype-date-format_en-NZ.js": {"classlist": [], "name": "datatype-date-format_en-NZ.js", "module": "datatype"}, "anim-easing.js": {"classlist": ["Easing"], "name": "anim-easing.js", "module": "anim"}, "datatype_en-MY.js": {"classlist": [], "name": "datatype_en-MY.js", "module": "datatype"}, "history-min.js": {"classlist": [], "name": "history-min.js", "module": "history"}, "datatype_zh-Hans-CN.js": {"classlist": [], "name": "datatype_zh-Hans-CN.js", "module": "datatype"}, "datatype-date.js": {"classlist": [], "name": "datatype-date.js", "module": "datatype"}, "aui-parse-content-min.js": {"name": "aui-parse-content-min.js", "classlist": [], "module": "aui-parse-content", "guessedname": "N", "guessedtype": "function", "method": "N"}, "event-custom-complex-debug.js": {"classlist": ["EventFacade"], "name": "event-custom-complex-debug.js", "module": "event-custom"}, "aui-loading-mask-min.js": {"name": "aui-loading-mask-min.js", "classlist": [], "module": "aui-loading-mask", "guessedname": "H", "guessedtype": "function", "method": "H"}, "tabview.js": {"classlist": ["TabView", "Tab"], "name": "tabview.js", "module": "tabview"}, "widget-position-debug.js": {"classlist": ["WidgetPosition"], "name": "widget-position-debug.js", "module": "widget-position-constrain"}, "aui-base.js": {"classlist": [], "name": "aui-base.js", "module": "aui-autocomplete"}, "aui-progressbar.js": {"classlist": ["ProgressBar"], "name": "aui-progressbar.js", "module": "aui-progressbar"}, "cache-debug.js": {"classlist": ["Cache"], "name": "cache-debug.js", "module": "cache"}, "datatype_hi.js": {"classlist": [], "name": "datatype_hi.js", "module": "datatype"}, "datatype_nb.js": {"classlist": [], "name": "datatype_nb.js", "module": "datatype"}, "aui-portal-layout-min.js": {"name": "aui-portal-layout-min.js", "classlist": [], "module": "aui-portal-layout", "guessedname": "AP", "guessedtype": "function", "method": "AP"}, "node-focusmanager-debug.js": {"classlist": ["plugin.NodeFocusManager"], "name": "node-focusmanager-debug.js", "module": "node-focusmanager"}, "datatype_es-UY.js": {"classlist": [], "name": "datatype_es-UY.js", "module": "datatype"}, "aui-char-counter.js": {"classlist": ["CharCounter"], "name": "aui-char-counter.js", "module": "aui-char-counter"}, "imageloader-debug.js": {"classlist": ["ImgLoadGroup", "ImgLoadImgObj"], "name": "imageloader-debug.js", "module": "imageloader"}, "aui-rating-debug.js": {"classlist": ["Rating", "ThumbRating"], "name": "aui-rating-debug.js", "module": "aui-rating"}, "datatype_ca.js": {"classlist": [], "name": "datatype_ca.js", "module": "datatype"}, "yui-later.js": {"classlist": [], "name": "yui-later.js", "module": "yui"}, "json-stringify.js": {"classlist": [], "name": "json-stringify.js", "module": "json"}, "aui-tabs-debug.js": {"classlist": [], "name": "aui-tabs-debug.js", "module": "aui-resize"}, "event-key-min.js": {"classlist": [], "name": "event-key-min.js", "module": "event"}, "datatype-date-format_ca.js": {"classlist": [], "name": "datatype-date-format_ca.js", "module": "datatype"}, "dd-drag.js": {"classlist": ["DD.Drag"], "name": "dd-drag.js", "module": "dd"}, "aui-form-combobox.js": {"classlist": [], "name": "aui-form-combobox.js", "module": "aui-event"}, "dd-drop-debug.js": {"classlist": ["DD.Drop"], "name": "dd-drop-debug.js", "module": "dd"}, "datatype-date-format_de.js": {"classlist": [], "name": "datatype-date-format_de.js", "module": "datatype"}, "attribute-base-debug.js": {"classlist": ["State", "Attribute"], "name": "attribute-base-debug.js", "module": "attribute"}, "datatype_es-EC.js": {"classlist": [], "name": "datatype_es-EC.js", "module": "datatype"}, "aui-node-fx-debug.js": {"classlist": [], "name": "aui-node-fx-debug.js", "module": "aui-node"}, "datatype-date_ru.js": {"classlist": [], "name": "datatype-date_ru.js", "module": "datatype"}, "dataschema-array-min.js": {"classlist": [], "name": "dataschema-array-min.js", "module": "dataschema"}, "loader-base.js": {"classlist": ["Loader"], "name": "loader-base.js", "module": "loader"}, "aui-resize.js": {"classlist": ["Resize"], "name": "aui-resize.js", "module": "aui-resize"}, "array-extras-min.js": {"classlist": [], "name": "array-extras-min.js", "module": "collection"}, "datatype-date-format_zh-Hant-TW.js": {"classlist": [], "name": "datatype-date-format_zh-Hant-TW.js", "module": "datatype"}, "datatype-date_ca.js": {"classlist": [], "name": "datatype-date_ca.js", "module": "datatype"}, "yui-throttle-min.js": {"classlist": [], "name": "yui-throttle-min.js", "module": "yui"}, "aui-tooltip.js": {"classlist": ["Tooltip"], "name": "aui-tooltip.js", "module": "aui-tooltip"}, "aui-image-viewer-base.js": {"classlist": ["ImageViewer", "ImageViewerMask"], "name": "aui-image-viewer-base.js", "module": "aui-image-viewer"}, "datatype_id-ID.js": {"classlist": [], "name": "datatype_id-ID.js", "module": "datatype"}, "dd-drop-plugin-min.js": {"classlist": [], "name": "dd-drop-plugin-min.js", "module": "dd"}, "aui-nested-list-debug.js": {"classlist": ["NestedList"], "name": "aui-nested-list-debug.js", "module": "aui-nested-list"}, "datatype_en-SG.js": {"classlist": [], "name": "datatype_en-SG.js", "module": "datatype"}, "datasource-xmlschema-min.js": {"classlist": [], "name": "datasource-xmlschema-min.js", "module": "datasource"}, "aui-toolbar-min.js": {"name": "aui-toolbar-min.js", "classlist": [], "module": "aui-toolbar", "guessedname": "L", "guessedtype": "function", "method": "L"}, "datatype-date_id-ID.js": {"classlist": [], "name": "datatype-date_id-ID.js", "module": "datatype"}, "datasource-jsonschema.js": {"classlist": ["DataSourceJSONSchema"], "name": "datasource-jsonschema.js", "module": "datasource"}, "event-key-debug.js": {"classlist": [], "name": "event-key-debug.js", "module": "event"}, "aui-overlay-base-debug.js": {"classlist": ["OverlayBase"], "name": "aui-overlay-base-debug.js", "module": "aui-overlay"}, "aui-image-viewer-base-debug.js": {"classlist": ["ImageViewer", "ImageViewerMask"], "name": "aui-image-viewer-base-debug.js", "module": "aui-image-viewer"}, "datatype-date-format_es-BO.js": {"classlist": [], "name": "datatype-date-format_es-BO.js", "module": "datatype"}, "dataschema-xml-debug.js": {"classlist": ["DataSchema.XML"], "name": "dataschema-xml-debug.js", "module": "dataschema"}, "datatype-date-parse.js": {"classlist": [], "name": "datatype-date-parse.js", "module": "datatype"}, "aui-form-base.js": {"classlist": [], "name": "aui-form-base.js", "module": "aui-event"}, "aui-chart.js": {"classlist": [], "name": "aui-chart.js", "module": "aui-char-counter"}, "json-min.js": {"classlist": [], "name": "json-min.js", "module": "json"}, "datatype_ja-JP.js": {"classlist": [], "name": "datatype_ja-JP.js", "module": "datatype"}, "dataschema-array-debug.js": {"classlist": ["DataSchema.Array"], "name": "dataschema-array-debug.js", "module": "dataschema"}, "datatype_es-CL.js": {"classlist": [], "name": "datatype_es-CL.js", "module": "datatype"}, "dd-drop-plugin.js": {"classlist": ["Plugin.Drop"], "name": "dd-drop-plugin.js", "module": "dd"}, "datatype-date_ko.js": {"classlist": [], "name": "datatype-date_ko.js", "module": "datatype"}, "event-custom.js": {"classlist": ["Do", "Do.Method", "Do.AlterArgs", "Do.AlterReturn", "Do.Halt", "Do.Prevent", "Do.Error", "EventHandle", "CustomEvent", "Subscriber", "EventTarget", "EventFacade"], "name": "event-custom.js", "module": "event-custom"}, "datatype-date_sv-SE.js": {"classlist": [], "name": "datatype-date_sv-SE.js", "module": "datatype"}, "widget-position-align-debug.js": {"classlist": ["WidgetPositionAlign"], "name": "widget-position-align-debug.js", "module": "widget-parent"}, "datatype-date-format_nl.js": {"classlist": [], "name": "datatype-date-format_nl.js", "module": "datatype"}, "aui-sortable.js": {"classlist": [], "name": "aui-sortable.js", "module": "aui-resize"}, "aui-image-viewer-base-min.js": {"name": "aui-image-viewer-base-min.js", "classlist": [], "module": "aui-image-viewer", "guessedname": "AJ", "guessedtype": "function", "method": "AJ"}, "datatype-date-format_es-PE.js": {"classlist": [], "name": "datatype-date-format_es-PE.js", "module": "datatype"}, "aui-node-fx-min.js": {"name": "aui-node-fx-min.js", "classlist": [], "module": "aui-node", "guessedname": "D", "guessedtype": "function", "method": "D"}, "datatype-date_th-TH.js": {"classlist": [], "name": "datatype-date_th-TH.js", "module": "datatype"}, "event-delegate-min.js": {"classlist": [], "name": "event-delegate-min.js", "module": "event"}, "attribute.js": {"classlist": ["State", "Attribute"], "name": "attribute.js", "module": "attribute"}, "shim-plugin-debug.js": {"classlist": ["Plugin.Shim"], "name": "shim-plugin-debug.js", "module": "node"}, "event-mouseenter.js": {"classlist": [], "name": "event-mouseenter.js", "module": "event"}, "datatype-date_es-CL.js": {"classlist": [], "name": "datatype-date_es-CL.js", "module": "datatype"}, "datatype-date-format_el.js": {"classlist": [], "name": "datatype-date-format_el.js", "module": "datatype"}, "selector.js": {"classlist": ["Selector"], "name": "selector.js", "module": "dom"}, "datatype-date-format_en.js": {"classlist": [], "name": "datatype-date-format_en.js", "module": "datatype"}, "datatype-date-format_ko.js": {"classlist": [], "name": "datatype-date-format_ko.js", "module": "datatype"}, "dd-scroll.js": {"classlist": ["DD.Scroll", "Plugin.DDWindowScroll", "Plugin.DDNodeScroll"], "name": "dd-scroll.js", "module": "dd"}, "aui-min.js": {"classlist": [], "name": "aui-min.js", "module": "yui"}, "querystring-stringify-simple-min.js": {"classlist": [], "name": "querystring-stringify-simple-min.js", "module": "querystring"}, "event-mouseenter-debug.js": {"classlist": [], "name": "event-mouseenter-debug.js", "module": "event"}, "datatype-date_vi-VN.js": {"classlist": [], "name": "datatype-date_vi-VN.js", "module": "datatype"}, "slider.js": {"classlist": ["SliderBase", "SliderValueRange", "ClickableRail", "Slider"], "name": "slider.js", "module": "slider"}, "aui-form-textarea-min.js": {"name": "aui-form-textarea-min.js", "classlist": [], "module": "aui-event", "guessedname": "F", "guessedtype": "function", "method": "F"}, "datatype-date_en-PH.js": {"classlist": [], "name": "datatype-date_en-PH.js", "module": "datatype"}, "swf-debug.js": {"classlist": ["YAHOO.widget.SWF"], "name": "swf-debug.js", "module": "swf"}, "async-queue-min.js": {"classlist": [], "name": "async-queue-min.js", "module": "async-queue"}, "datatype_ro.js": {"classlist": [], "name": "datatype_ro.js", "module": "datatype"}, "anim-easing-debug.js": {"classlist": ["Easing"], "name": "anim-easing-debug.js", "module": "anim"}, "aui-overlay-context-panel-min.js": {"name": "aui-overlay-context-panel-min.js", "classlist": [], "module": "aui-overlay", "guessedname": "I", "guessedtype": "function", "method": "I"}, "datatype-date-format_fi-FI.js": {"classlist": [], "name": "datatype-date-format_fi-FI.js", "module": "datatype"}, "slider-value-range-min.js": {"classlist": [], "name": "slider-value-range-min.js", "module": "slider"}, "arraylist-min.js": {"classlist": [], "name": "arraylist-min.js", "module": "collection"}, "aui-image-viewer-debug.js": {"classlist": ["ImageViewer", "ImageViewerMask", "ImageGallery"], "name": "aui-image-viewer-debug.js", "module": "aui-image-viewer"}, "collection.js": {"classlist": ["YUI~array~extras", "ArrayList", "ArrayList~add", "ArrayList~filter", "YUI~array~invoke"], "name": "collection.js", "module": "collection"}, "json.js": {"classlist": ["JSON"], "name": "json.js", "module": "json"}, "widget-anim-debug.js": {"classlist": ["Plugin.WidgetAnim"], "name": "widget-anim-debug.js", "module": "widget-anim"}, "aui-delayed-task-debug.js": {"classlist": ["DelayedTask"], "name": "aui-delayed-task-debug.js", "module": "aui-delayed-task"}, "datatype-date_hi.js": {"classlist": [], "name": "datatype-date_hi.js", "module": "datatype"}, "yui-later-debug.js": {"classlist": [], "name": "yui-later-debug.js", "module": "yui"}, "datatype-date-format_ja.js": {"classlist": [], "name": "datatype-date-format_ja.js", "module": "datatype"}, "aui-tree-node.js": {"classlist": ["TreeNode", "TreeNodeIO", "TreeNodeCheck", "TreeNodeTask"], "name": "aui-tree-node.js", "module": "aui-tree"}, "dd-plugin-debug.js": {"classlist": ["Plugin.Drag"], "name": "dd-plugin-debug.js", "module": "dd"}, "base-build-debug.js": {"classlist": [], "name": "base-build-debug.js", "module": "base"}, "aui-overlay-manager-debug.js": {"classlist": ["OverlayManager"], "name": "aui-overlay-manager-debug.js", "module": "aui-overlay"}, "dom.js": {"classlist": ["DOM", "Selector"], "name": "dom.js", "module": "dom"}, "dom-style.js": {"classlist": [], "name": "dom-style.js", "module": "dom"}, "queue-promote-min.js": {"classlist": [], "name": "queue-promote-min.js", "module": "queue-promote"}, "aui-overlay-debug.js": {"classlist": ["OverlayBase", "OverlayContext", "OverlayContextManager", "OverlayContextPanel", "OverlayContextPanelManager", "OverlayManager", "OverlayMask"], "name": "aui-overlay-debug.js", "module": "aui-overlay"}, "widget-stdmod.js": {"classlist": ["WidgetStdMod"], "name": "widget-stdmod.js", "module": "widget-stdmod"}, "datatype-date-format.js": {"classlist": [], "name": "datatype-date-format.js", "module": "datatype"}, "event-custom-base-min.js": {"classlist": [], "name": "event-custom-base-min.js", "module": "event-custom"}, "datatype-date_zh-Hant-TW.js": {"classlist": [], "name": "datatype-date_zh-Hant-TW.js", "module": "datatype"}, "event-resize.js": {"classlist": [], "name": "event-resize.js", "module": "event"}, "aui-progressbar-min.js": {"name": "aui-progressbar-min.js", "classlist": [], "module": "aui-progressbar", "guessedname": "G", "guessedtype": "function", "method": "G"}, "aui-carousel.js": {"classlist": [], "name": "aui-carousel.js", "module": "aui-calendar"}, "aui-form-base-debug.js": {"classlist": [], "name": "aui-form-base-debug.js", "module": "aui-event"}, "datatype-date-format_ar-JO.js": {"classlist": [], "name": "datatype-date-format_ar-JO.js", "module": "datatype"}, "event-synthetic-debug.js": {"classlist": ["SyntheticEvent"], "name": "event-synthetic-debug.js", "module": "event"}, "datatype_ko.js": {"classlist": [], "name": "datatype_ko.js", "module": "datatype"}, "anim-node-plugin.js": {"classlist": ["Plugin.NodeFX"], "name": "anim-node-plugin.js", "module": "anim"}, "datatype-date-format_ru.js": {"classlist": [], "name": "datatype-date-format_ru.js", "module": "datatype"}, "querystring-parse-debug.js": {"classlist": ["QueryString"], "name": "querystring-parse-debug.js", "module": "querystring"}, "node-menunav-min.js": {"classlist": [], "name": "node-menunav-min.js", "module": "node-menunav"}, "io-min.js": {"classlist": [], "name": "io-min.js", "module": "io"}, "node-focusmanager-min.js": {"classlist": [], "name": "node-focusmanager-min.js", "module": "node-focusmanager"}, "datatype-date_es-EC.js": {"classlist": [], "name": "datatype-date_es-EC.js", "module": "datatype"}, "compat-min.js": {"classlist": [], "name": "compat-min.js", "module": "collection"}, "widget-parent-min.js": {"classlist": [], "name": "widget-parent-min.js", "module": "widget-parent"}, "datatype-date_ro.js": {"classlist": [], "name": "datatype-date_ro.js", "module": "datatype"}, "datasource-io.js": {"classlist": ["DataSource.IO"], "name": "datasource-io.js", "module": "datasource"}, "arraylist-add-debug.js": {"classlist": ["ArrayList~add"], "name": "arraylist-add-debug.js", "module": "collection"}, "yui-base-min.js": {"classlist": [], "name": "yui-base-min.js", "module": "yui"}, "datatype_sv.js": {"classlist": [], "name": "datatype_sv.js", "module": "datatype"}, "datasource-local-min.js": {"classlist": [], "name": "datasource-local-min.js", "module": "datasource"}, "collection-min.js": {"classlist": [], "name": "collection-min.js", "module": "collection"}, "aui-char-counter-min.js": {"name": "aui-char-counter-min.js", "classlist": [], "module": "aui-char-counter", "guessedname": "J", "guessedtype": "function", "method": "J"}, "datatype-date-format_ca-ES.js": {"classlist": [], "name": "datatype-date-format_ca-ES.js", "module": "datatype"}, "io-debug.js": {"classlist": ["io"], "name": "io-debug.js", "module": "io"}, "datatype-date_es-US.js": {"classlist": [], "name": "datatype-date_es-US.js", "module": "datatype"}, "event-simulate-debug.js": {"classlist": [], "name": "event-simulate-debug.js", "module": "event-simulate"}, "aui.js": {"classlist": ["YUI", "config", "Lang", "Array", "Queue", "Object", "UA", "Get", "Intl"], "name": "aui.js", "module": "yui"}, "datatype-date-format_es-CO.js": {"classlist": [], "name": "datatype-date-format_es-CO.js", "module": "datatype"}, "datatype_zh-Hant-HK.js": {"classlist": [], "name": "datatype_zh-Hant-HK.js", "module": "datatype"}, "aui-carousel-min.js": {"name": "aui-carousel-min.js", "classlist": [], "module": "aui-calendar", "guessedname": "F", "guessedtype": "function", "method": "F"}, "event-simulate-min.js": {"classlist": [], "name": "event-simulate-min.js", "module": "event-simulate"}, "shim-plugin-min.js": {"classlist": [], "name": "shim-plugin-min.js", "module": "shim-plugin"}, "node-debug.js": {"classlist": ["Node", "NodeList"], "name": "node-debug.js", "module": "node"}, "anim-base-debug.js": {"classlist": ["Anim"], "name": "anim-base-debug.js", "module": "anim"}, "aui-progressbar-debug.js": {"classlist": ["ProgressBar"], "name": "aui-progressbar-debug.js", "module": "aui-progressbar"}, "dd-drop-plugin-debug.js": {"classlist": ["Plugin.Drop"], "name": "dd-drop-plugin-debug.js", "module": "dd"}, "datatype-date-format_zh-Hant.js": {"classlist": [], "name": "datatype-date-format_zh-Hant.js", "module": "datatype"}, "aui-rating.js": {"classlist": ["Rating", "ThumbRating"], "name": "aui-rating.js", "module": "aui-rating"}, "aui-live-search-min.js": {"name": "aui-live-search-min.js", "classlist": [], "module": "aui-live-search", "guessedname": "I", "guessedtype": "function", "method": "I"}, "dataschema-text-min.js": {"classlist": [], "name": "dataschema-text-min.js", "module": "dataschema"}, "aui-parse-content.js": {"classlist": ["ParseContent"], "name": "aui-parse-content.js", "module": "aui-parse-content"}, "queue-promote.js": {"classlist": [], "name": "queue-promote.js", "module": "queue-promote"}, "event.js": {"classlist": ["DOMEventFacade", "Event"], "name": "event.js", "module": "event"}, "aui-loading-mask.js": {"classlist": ["LoadingMask"], "name": "aui-loading-mask.js", "module": "aui-loading-mask"}, "event-delegate-debug.js": {"classlist": [], "name": "event-delegate-debug.js", "module": "event"}, "datatype-date-format_es-CL.js": {"classlist": [], "name": "datatype-date-format_es-CL.js", "module": "datatype"}, "aui-panel.js": {"classlist": ["Panel"], "name": "aui-panel.js", "module": "aui-panel"}, "datasource-textschema-min.js": {"classlist": [], "name": "datasource-textschema-min.js", "module": "datasource"}, "datatype-date-format_es-VE.js": {"classlist": [], "name": "datatype-date-format_es-VE.js", "module": "datatype"}, "datatype-date-format_es-ES.js": {"classlist": [], "name": "datatype-date-format_es-ES.js", "module": "datatype"}, "datatype-date_es-UY.js": {"classlist": [], "name": "datatype-date_es-UY.js", "module": "datatype"}, "querystring-min.js": {"classlist": [], "name": "querystring-min.js", "module": "querystring"}, "datatype_da-DK.js": {"classlist": [], "name": "datatype_da-DK.js", "module": "datatype"}, "datatype_ko-KR.js": {"classlist": [], "name": "datatype_ko-KR.js", "module": "datatype"}, "history.js": {"classlist": ["History", "History.Module"], "name": "history.js", "module": "history"}, "aui-portal-layout-debug.js": {"classlist": ["PortalLayout"], "name": "aui-portal-layout-debug.js", "module": "aui-portal-layout"}, "datatype-date_zh-Hant-HK.js": {"classlist": [], "name": "datatype-date_zh-Hant-HK.js", "module": "datatype"}, "datatype_zh-Hant.js": {"classlist": [], "name": "datatype_zh-Hant.js", "module": "datatype"}, "aui-swf-min.js": {"name": "aui-swf-min.js", "classlist": [], "module": "aui-resize", "guessedname": "C", "guessedtype": "function", "method": "C"}, "event-base-min.js": {"classlist": [], "name": "event-base-min.js", "module": "event"}, "datasource-local.js": {"classlist": ["DataSource.Local"], "name": "datasource-local.js", "module": "datasource"}, "node-aria-min.js": {"classlist": [], "name": "node-aria-min.js", "module": "node"}, "aui-autocomplete.js": {"classlist": ["AutoComplete"], "name": "aui-autocomplete.js", "module": "aui-autocomplete"}, "aui-tree-view.js": {"classlist": ["TreeView", "TreeViewDD"], "name": "aui-tree-view.js", "module": "aui-tree"}, "event-base.js": {"classlist": ["DOMEventFacade", "Event"], "name": "event-base.js", "module": "event"}, "datatype-date_es-PE.js": {"classlist": [], "name": "datatype-date_es-PE.js", "module": "datatype"}, "arraylist-filter-debug.js": {"classlist": ["ArrayList~filter"], "name": "arraylist-filter-debug.js", "module": "collection"}, "aui-overlay-context-debug.js": {"classlist": ["OverlayContext", "OverlayContextManager"], "name": "aui-overlay-context-debug.js", "module": "aui-overlay"}, "tabview-debug.js": {"classlist": ["TabView", "Tab"], "name": "tabview-debug.js", "module": "tabview"}, "datatype_pl.js": {"classlist": [], "name": "datatype_pl.js", "module": "datatype"}, "aui-resize-debug.js": {"classlist": ["Resize"], "name": "aui-resize-debug.js", "module": "aui-resize"}, "plugin-debug.js": {"classlist": ["Plugin.Base"], "name": "plugin-debug.js", "module": "plugin"}, "aui-textboxlist-debug.js": {"classlist": ["Textboxlist"], "name": "aui-textboxlist-debug.js", "module": "aui-textboxlist"}, "attribute-complex.js": {"classlist": [], "name": "attribute-complex.js", "module": "attribute"}, "datatype-date-format_pt.js": {"classlist": [], "name": "datatype-date-format_pt.js", "module": "datatype"}, "aui-overlay-min.js": {"name": "aui-overlay-min.js", "classlist": [], "module": "aui-overlay", "guessedname": "OverlayBase", "guessedtype": "function", "method": "OverlayBase"}, "datatype-date_hi-IN.js": {"classlist": [], "name": "datatype-date_hi-IN.js", "module": "datatype"}, "dd-ddm-base-debug.js": {"classlist": ["DD.DDM"], "name": "dd-ddm-base-debug.js", "module": "dd"}, "event-focus.js": {"classlist": [], "name": "event-focus.js", "module": "event"}, "dd-ddm-base.js": {"classlist": ["DD.DDM"], "name": "dd-ddm-base.js", "module": "dd"}, "querystring-stringify-simple-debug.js": {"classlist": [], "name": "querystring-stringify-simple-debug.js", "module": "querystring"}, "selector-native-min.js": {"classlist": [], "name": "selector-native-min.js", "module": "dom"}, "event-mousewheel-min.js": {"classlist": [], "name": "event-mousewheel-min.js", "module": "event"}, "datatype-date_en-AU.js": {"classlist": [], "name": "datatype-date_en-AU.js", "module": "datatype"}, "datatype-date-format_id-ID.js": {"classlist": [], "name": "datatype-date-format_id-ID.js", "module": "datatype"}, "datatype-date-format_nb.js": {"classlist": [], "name": "datatype-date-format_nb.js", "module": "datatype"}, "tabview-base.js": {"classlist": [], "name": "tabview-base.js", "module": "tabview"}, "arraylist-debug.js": {"classlist": ["ArrayList"], "name": "arraylist-debug.js", "module": "collection"}, "datatype-date_fi.js": {"classlist": [], "name": "datatype-date_fi.js", "module": "datatype"}, "aui-tree.js": {"classlist": ["TreeData", "TreeNode", "TreeNodeIO", "TreeNodeCheck", "TreeNodeTask", "TreeView", "TreeViewDD"], "name": "aui-tree.js", "module": "aui-tree"}, "aui-form-validator-min.js": {"name": "aui-form-validator-min.js", "classlist": [], "module": "aui-event", "guessedname": "N", "guessedtype": "function", "method": "N"}, "loader-rollup.js": {"classlist": [], "name": "loader-rollup.js", "module": "loader"}, "datatype-date-format_vi-VN.js": {"classlist": [], "name": "datatype-date-format_vi-VN.js", "module": "datatype"}, "align-plugin-min.js": {"classlist": [], "name": "align-plugin-min.js", "module": "align-plugin"}, "aui-char-counter-debug.js": {"classlist": ["CharCounter"], "name": "aui-char-counter-debug.js", "module": "aui-char-counter"}, "aui-swf.js": {"classlist": [], "name": "aui-swf.js", "module": "aui-resize"}, "classnamemanager.js": {"classlist": ["ClassNameManager"], "name": "classnamemanager.js", "module": "classnamemanager"}, "datatype-date-format_es-EC.js": {"classlist": [], "name": "datatype-date-format_es-EC.js", "module": "datatype"}, "dd-value-min.js": {"name": "dd-value-min.js", "classlist": [], "module": "dd", "guessedname": "A", "guessedtype": "function", "method": "A"}, "dd-constrain-debug.js": {"classlist": ["Plugin.DDConstrained"], "name": "dd-constrain-debug.js", "module": "dd"}, "yui-later-min.js": {"classlist": [], "name": "yui-later-min.js", "module": "yui"}, "datasource.js": {"classlist": ["DataSource.Local", "DataSource.IO", "DataSource.Get", "DataSource.Function", "DataSourceCache", "DataSourceJSONSchema", "DataSourceXMLSchema", "DataSourceArraySchema", "DataSourceTextSchema", "Pollable"], "name": "datasource.js", "module": "datasource"}, "aui-editable-debug.js": {"classlist": ["Editable"], "name": "aui-editable-debug.js", "module": "aui-editable"}, "range-slider-min.js": {"classlist": [], "name": "range-slider-min.js", "module": "slider"}, "aui-tree-min.js": {"name": "aui-tree-min.js", "classlist": [], "module": "aui-tree", "guessedname": "H", "guessedtype": "function", "method": "H"}, "aui-datatype-min.js": {"name": "aui-datatype-min.js", "classlist": [], "module": "aui-datatype", "guessedname": "B", "guessedtype": "function", "method": "B"}, "attribute-base-min.js": {"classlist": [], "name": "attribute-base-min.js", "module": "attribute"}, "substitute-min.js": {"classlist": [], "name": "substitute-min.js", "module": "substitute"}, "datatype-date-format_en-JO.js": {"classlist": [], "name": "datatype-date-format_en-JO.js", "module": "datatype"}, "datatype_ar.js": {"classlist": [], "name": "datatype_ar.js", "module": "datatype"}, "aui-io-min.js": {"name": "aui-io-min.js", "classlist": [], "module": "aui-io", "guessedname": "G", "guessedtype": "function", "method": "G"}, "aui-chart-debug.js": {"classlist": [], "name": "aui-chart-debug.js", "module": "aui-char-counter"}, "anim-scroll-debug.js": {"classlist": [], "name": "anim-scroll-debug.js", "module": "anim"}, "json-parse-debug.js": {"classlist": ["JSON"], "name": "json-parse-debug.js", "module": "json"}, "node-base-debug.js": {"classlist": ["Node", "NodeList"], "name": "node-base-debug.js", "module": "node"}, "event-synthetic-min.js": {"classlist": [], "name": "event-synthetic-min.js", "module": "event"}, "datatype_ms.js": {"classlist": [], "name": "datatype_ms.js", "module": "datatype"}, "io.js": {"classlist": ["io"], "name": "io.js", "module": "io"}, "widget-base-min.js": {"classlist": [], "name": "widget-base-min.js", "module": "widget"}, "datatype_nl-NL.js": {"classlist": [], "name": "datatype_nl-NL.js", "module": "datatype"}, "datatype_sv-SE.js": {"classlist": [], "name": "datatype_sv-SE.js", "module": "datatype"}, "dd-delegate-debug.js": {"classlist": ["DD.Delegate"], "name": "dd-delegate-debug.js", "module": "dd"}, "aui-tooltip-min.js": {"name": "aui-tooltip-min.js", "classlist": [], "module": "aui-tooltip", "guessedname": "P", "guessedtype": "function", "method": "P"}, "loader-debug.js": {"classlist": ["Loader"], "name": "loader-debug.js", "module": "loader"}, "datatype-date_en-IE.js": {"classlist": [], "name": "datatype-date_en-IE.js", "module": "datatype"}, "datasource-arrayschema-debug.js": {"classlist": ["DataSourceArraySchema"], "name": "datasource-arrayschema-debug.js", "module": "datasource"}, "cookie-debug.js": {"classlist": ["Cookie"], "name": "cookie-debug.js", "module": "cookie"}, "datatype-date-format_es.js": {"classlist": [], "name": "datatype-date-format_es.js", "module": "datatype"}, "dd-value.js": {"classlist": [], "name": "dd-value.js", "module": "dd"}, "datatype-date_en-MY.js": {"classlist": [], "name": "datatype-date_en-MY.js", "module": "datatype"}, "dd-ddm-drop-debug.js": {"classlist": [], "name": "dd-ddm-drop-debug.js", "module": "dd"}, "datatype-date-format-min.js": {"classlist": [], "name": "datatype-date-format-min.js", "module": "datatype"}, "dom-style-min.js": {"classlist": [], "name": "dom-style-min.js", "module": "dom"}, "event-synthetic.js": {"classlist": ["SyntheticEvent"], "name": "event-synthetic.js", "module": "event"}, "aui-image-viewer-min.js": {"name": "aui-image-viewer-min.js", "classlist": [], "module": "aui-image-viewer", "guessedname": "AJ", "guessedtype": "function", "method": "AJ"}, "compat.js": {"classlist": [], "name": "compat.js", "module": "collection"}, "anim-debug.js": {"classlist": ["Anim", "Easing", "Plugin.NodeFX"], "name": "anim-debug.js", "module": "anim"}, "yui-throttle.js": {"classlist": [], "name": "yui-throttle.js", "module": "yui"}, "json-stringify-debug.js": {"classlist": [], "name": "json-stringify-debug.js", "module": "json"}, "aui-io-debug.js": {"classlist": ["IORequest", "A.io", "A.Plugin.IO"], "name": "aui-io-debug.js", "module": "aui-io"}, "aui-overlay-mask.js": {"classlist": ["OverlayMask"], "name": "aui-overlay-mask.js", "module": "aui-overlay"}, "console_en.js": {"classlist": [], "name": "console_en.js", "module": "console"}, "datatype-date_el.js": {"classlist": [], "name": "datatype-date_el.js", "module": "datatype"}, "datatype-date_es.js": {"classlist": [], "name": "datatype-date_es.js", "module": "datatype"}, "node-focusmanager.js": {"classlist": ["plugin.NodeFocusManager"], "name": "node-focusmanager.js", "module": "node-focusmanager"}, "classnamemanager-min.js": {"classlist": [], "name": "classnamemanager-min.js", "module": "classnamemanager"}, "aui-node-min.js": {"name": "aui-node-min.js", "classlist": [], "module": "aui-node", "guessedname": "D", "guessedtype": "function", "method": "D"}, "json-parse-min.js": {"classlist": [], "name": "json-parse-min.js", "module": "json"}, "widget-parent.js": {"classlist": ["WidgetParent"], "name": "widget-parent.js", "module": "widget-parent"}, "widget-position-align-min.js": {"classlist": [], "name": "widget-position-align-min.js", "module": "widget-position-align"}, "attribute-base.js": {"classlist": ["State", "Attribute"], "name": "attribute-base.js", "module": "attribute"}, "aui-form.js": {"classlist": [], "name": "aui-form.js", "module": "aui-event"}, "aui-loading-mask-debug.js": {"classlist": ["LoadingMask"], "name": "aui-loading-mask-debug.js", "module": "aui-loading-mask"}, "base-pluginhost-min.js": {"classlist": [], "name": "base-pluginhost-min.js", "module": "base"}, "dd-proxy-min.js": {"classlist": [], "name": "dd-proxy-min.js", "module": "dd"}, "datatype_fr-FR.js": {"classlist": [], "name": "datatype_fr-FR.js", "module": "datatype"}, "aui-calendar-datepicker-select.js": {"classlist": ["DatePickerSelect"], "name": "aui-calendar-datepicker-select.js", "module": "aui-calendar"}, "datatype-date-format_en-IN.js": {"classlist": [], "name": "datatype-date-format_en-IN.js", "module": "datatype"}, "datatype_tr.js": {"classlist": [], "name": "datatype_tr.js", "module": "datatype"}, "aui-tree-data.js": {"classlist": ["TreeData"], "name": "aui-tree-data.js", "module": "aui-tree"}, "event-custom-base-debug.js": {"classlist": ["Do", "Do.Method", "Do.AlterArgs", "Do.AlterReturn", "Do.Halt", "Do.Prevent", "Do.Error", "EventHandle", "CustomEvent", "Subscriber", "EventTarget"], "name": "event-custom-base-debug.js", "module": "event-custom"}, "aui-overlay-mask-debug.js": {"classlist": ["OverlayMask"], "name": "aui-overlay-mask-debug.js", "module": "aui-overlay"}, "event-custom-base.js": {"classlist": ["Do", "Do.Method", "Do.AlterArgs", "Do.AlterReturn", "Do.Halt", "Do.Prevent", "Do.Error", "EventHandle", "CustomEvent", "Subscriber", "EventTarget"], "name": "event-custom-base.js", "module": "event-custom"}, "aui-overlay-context.js": {"classlist": ["OverlayContext", "OverlayContextManager"], "name": "aui-overlay-context.js", "module": "aui-overlay"}, "datatype-date_de.js": {"classlist": [], "name": "datatype-date_de.js", "module": "datatype"}, "dataschema-json.js": {"classlist": ["DataSchema.JSON"], "name": "dataschema-json.js", "module": "dataschema"}, "datatype-date_es-ES.js": {"classlist": [], "name": "datatype-date_es-ES.js", "module": "datatype"}, "aui-paginator.js": {"classlist": ["Paginator"], "name": "aui-paginator.js", "module": "aui-paginator"}, "aui-chart-min.js": {"name": "aui-chart-min.js", "classlist": [], "module": "aui-char-counter", "guessedname": "H", "guessedtype": "function", "method": "H"}, "datasource-textschema-debug.js": {"classlist": ["DataSourceTextSchema"], "name": "datasource-textschema-debug.js", "module": "datasource"}, "attribute-min.js": {"classlist": [], "name": "attribute-min.js", "module": "attribute"}, "aui-textboxlist.js": {"classlist": ["Textboxlist"], "name": "aui-textboxlist.js", "module": "aui-textboxlist"}, "yui-log-debug.js": {"classlist": [], "name": "yui-log-debug.js", "module": "yui"}, "aui-form-combobox-min.js": {"name": "aui-form-combobox-min.js", "classlist": [], "module": "aui-event", "guessedname": "F", "guessedtype": "function", "method": "F"}, "base-build.js": {"classlist": [], "name": "base-build.js", "module": "base"}, "datatype_it-IT.js": {"classlist": [], "name": "datatype_it-IT.js", "module": "datatype"}, "aui-data-set.js": {"classlist": [], "name": "aui-data-set.js", "module": "aui-component"}, "datasource-cache-debug.js": {"classlist": ["DataSourceCache"], "name": "datasource-cache-debug.js", "module": "datasource"}, "selector-css3-debug.js": {"classlist": [], "name": "selector-css3-debug.js", "module": "dom"}, "datatype_es-US.js": {"classlist": [], "name": "datatype_es-US.js", "module": "datatype"}, "aui-sortable-debug.js": {"classlist": [], "name": "aui-sortable-debug.js", "module": "aui-resize"}, "aui-tree-data-min.js": {"name": "aui-tree-data-min.js", "classlist": [], "module": "aui-tree", "guessedname": "H", "guessedtype": "function", "method": "H"}, "aui-delayed-task.js": {"classlist": ["DelayedTask"], "name": "aui-delayed-task.js", "module": "aui-delayed-task"}, "tabview-base-min.js": {"classlist": [], "name": "tabview-base-min.js", "module": "tabview"}, "dom-base-debug.js": {"classlist": ["DOM"], "name": "dom-base-debug.js", "module": "dom"}, "datatype-date_nl-NL.js": {"classlist": [], "name": "datatype-date_nl-NL.js", "module": "datatype"}, "datatype-date-format_tr-TR.js": {"classlist": [], "name": "datatype-date-format_tr-TR.js", "module": "datatype"}, "querystring-stringify.js": {"classlist": [], "name": "querystring-stringify.js", "module": "querystring"}, "datatype_en-IE.js": {"classlist": [], "name": "datatype_en-IE.js", "module": "datatype"}, "align-plugin-debug.js": {"classlist": ["Plugin.Align"], "name": "align-plugin-debug.js", "module": "align-plugin"}, "datatype-date-format_ko-KR.js": {"classlist": [], "name": "datatype-date-format_ko-KR.js", "module": "datatype"}, "event-resize-min.js": {"classlist": [], "name": "event-resize-min.js", "module": "event"}, "aui-nested-list.js": {"classlist": ["NestedList"], "name": "aui-nested-list.js", "module": "aui-nested-list"}, "aui-node-base-min.js": {"name": "aui-node-base-min.js", "classlist": [], "module": "aui-node", "guessedname": "D", "guessedtype": "function", "method": "D"}, "aui-node-fx.js": {"classlist": [], "name": "aui-node-fx.js", "module": "aui-node"}, "datatype-date_es-MX.js": {"classlist": [], "name": "datatype-date_es-MX.js", "module": "datatype"}, "base-pluginhost.js": {"classlist": [], "name": "base-pluginhost.js", "module": "base"}, "event-custom-min.js": {"classlist": [], "name": "event-custom-min.js", "module": "event-custom"}, "event-debug.js": {"classlist": ["DOMEventFacade", "Event"], "name": "event-debug.js", "module": "event"}, "datatype_en-AU.js": {"classlist": [], "name": "datatype_en-AU.js", "module": "datatype"}, "aui-component-debug.js": {"classlist": ["Component"], "name": "aui-component-debug.js", "module": "aui-component"}, "aui-overlay-base.js": {"classlist": ["OverlayBase"], "name": "aui-overlay-base.js", "module": "aui-overlay"}, "widget-stack-debug.js": {"classlist": ["WidgetStack"], "name": "widget-stack-debug.js", "module": "widget-position"}, "io-upload-iframe.js": {"classlist": [], "name": "io-upload-iframe.js", "module": "io"}, "querystring-stringify-debug.js": {"classlist": [], "name": "querystring-stringify-debug.js", "module": "querystring"}, "intl-debug.js": {"classlist": ["Intl"], "name": "intl-debug.js", "module": "intl"}, "anim-min.js": {"classlist": [], "name": "anim-min.js", "module": "anim"}, "datatype-date_en-SG.js": {"classlist": [], "name": "datatype-date_en-SG.js", "module": "datatype"}, "datasource-min.js": {"classlist": [], "name": "datasource-min.js", "module": "datasource"}, "datatype-date_da.js": {"classlist": [], "name": "datatype-date_da.js", "module": "datatype"}, "datatype-date_nb.js": {"classlist": [], "name": "datatype-date_nb.js", "module": "datatype"}, "datatype_ru.js": {"classlist": [], "name": "datatype_ru.js", "module": "datatype"}, "anim-scroll.js": {"classlist": [], "name": "anim-scroll.js", "module": "anim"}, "aui-node-html5-min.js": {"name": "aui-node-html5-min.js", "classlist": [], "module": "aui-node", "guessedname": "D", "guessedtype": "function", "method": "D"}, "aui-portal-layout.js": {"classlist": ["PortalLayout"], "name": "aui-portal-layout.js", "module": "aui-portal-layout"}, "datasource-get.js": {"classlist": ["DataSource.Get"], "name": "datasource-get.js", "module": "datasource"}, "substitute-debug.js": {"classlist": ["YUI~substitute"], "name": "substitute-debug.js", "module": "substitute"}, "datatype-date-format_ro.js": {"classlist": [], "name": "datatype-date-format_ro.js", "module": "datatype"}, "event-simulate.js": {"classlist": [], "name": "event-simulate.js", "module": "event-simulate"}, "datatype-date-format_es-AR.js": {"classlist": [], "name": "datatype-date-format_es-AR.js", "module": "datatype"}, "aui-calendar-debug.js": {"classlist": ["Calendar", "CalendarManager", "DatePickerSelect"], "name": "aui-calendar-debug.js", "module": "aui-calendar"}, "datatype-date-format_pl.js": {"classlist": [], "name": "datatype-date-format_pl.js", "module": "datatype"}, "widget-base-debug.js": {"classlist": ["Widget"], "name": "widget-base-debug.js", "module": "widget"}, "datatype_ms-MY.js": {"classlist": [], "name": "datatype_ms-MY.js", "module": "datatype"}, "aui-overlay-context-min.js": {"name": "aui-overlay-context-min.js", "classlist": [], "module": "aui-overlay", "guessedname": "H", "guessedtype": "function", "method": "H"}, "datatype-date_es-AR.js": {"classlist": [], "name": "datatype-date_es-AR.js", "module": "datatype"}, "anim-node-plugin-min.js": {"classlist": [], "name": "anim-node-plugin-min.js", "module": "anim"}, "tabview-plugin-min.js": {"classlist": [], "name": "tabview-plugin-min.js", "module": "tabview"}, "datatype-date_fr-FR.js": {"classlist": [], "name": "datatype-date_fr-FR.js", "module": "datatype"}, "datatype_es-AR.js": {"classlist": [], "name": "datatype_es-AR.js", "module": "datatype"}, "datatype-date-format_hi.js": {"classlist": [], "name": "datatype-date-format_hi.js", "module": "datatype"}, "substitute.js": {"classlist": ["YUI~substitute"], "name": "substitute.js", "module": "substitute"}, "querystring-stringify-simple.js": {"classlist": [], "name": "querystring-stringify-simple.js", "module": "querystring"}, "dd.js": {"classlist": ["DD.DDM", "DD.Drag", "Plugin.DDProxy", "Plugin.DDConstrained", "DD.Scroll", "Plugin.DDWindowScroll", "Plugin.DDNodeScroll", "Plugin.Drag", "DD.Drop", "Plugin.Drop", "DD.Delegate"], "name": "dd.js", "module": "dd"}, "swf-min.js": {"classlist": [], "name": "swf-min.js", "module": "swf"}, "aui-io-request.js": {"classlist": ["IORequest", "A.io"], "name": "aui-io-request.js", "module": "aui-io"}, "pluginhost-debug.js": {"classlist": ["Plugin.Host"], "name": "pluginhost-debug.js", "module": "pluginhost"}, "base.js": {"classlist": ["Base"], "name": "base.js", "module": "base"}, "io-base.js": {"classlist": ["io"], "name": "io-base.js", "module": "io"}, "datatype-date_th.js": {"classlist": [], "name": "datatype-date_th.js", "module": "datatype"}, "align-plugin.js": {"classlist": ["Plugin.Align"], "name": "align-plugin.js", "module": "align-plugin"}, "anim-xy.js": {"classlist": [], "name": "anim-xy.js", "module": "anim"}, "aui-image-viewer.js": {"classlist": ["ImageViewer", "ImageViewerMask", "ImageGallery"], "name": "aui-image-viewer.js", "module": "aui-image-viewer"}, "selector-css2.js": {"classlist": [], "name": "selector-css2.js", "module": "dom"}, "datatype-date_it-IT.js": {"classlist": [], "name": "datatype-date_it-IT.js", "module": "datatype"}, "datasource-textschema.js": {"classlist": ["DataSourceTextSchema"], "name": "datasource-textschema.js", "module": "datasource"}, "datatype-date-format_nb-NO.js": {"classlist": [], "name": "datatype-date-format_nb-NO.js", "module": "datatype"}, "aui-paginator-min.js": {"name": "aui-paginator-min.js", "classlist": [], "module": "aui-paginator", "guessedname": "v", "guessedtype": "function", "method": "v"}, "widget-stdmod-min.js": {"classlist": [], "name": "widget-stdmod-min.js", "module": "widget-stdmod"}, "aui-calendar-base-debug.js": {"classlist": ["Calendar", "CalendarManager"], "name": "aui-calendar-base-debug.js", "module": "aui-calendar"}, "dd-value-debug.js": {"classlist": [], "name": "dd-value-debug.js", "module": "dd"}, "dd-drag-min.js": {"classlist": [], "name": "dd-drag-min.js", "module": "dd"}, "yui-base-debug.js": {"classlist": ["YUI", "config", "Lang", "Array", "Queue", "Object", "UA"], "name": "yui-base-debug.js", "module": "yui"}, "aui-state-interaction-min.js": {"name": "aui-state-interaction-min.js", "classlist": [], "module": "aui-resize", "guessedname": "I", "guessedtype": "function", "method": "I"}, "datatype-date-format_hi-IN.js": {"classlist": [], "name": "datatype-date-format_hi-IN.js", "module": "datatype"}, "datatype-date-format_ro-RO.js": {"classlist": [], "name": "datatype-date-format_ro-RO.js", "module": "datatype"}, "aui-calendar-min.js": {"name": "aui-calendar-min.js", "classlist": [], "module": "aui-calendar", "guessedname": "u", "guessedtype": "function", "method": "u"}, "dom-screen.js": {"classlist": [], "name": "dom-screen.js", "module": "dom"}, "node-menunav.js": {"classlist": ["plugin.NodeMenuNav"], "name": "node-menunav.js", "module": "node-menunav"}, "attribute-complex-debug.js": {"classlist": [], "name": "attribute-complex-debug.js", "module": "attribute"}, "datatype_de.js": {"classlist": [], "name": "datatype_de.js", "module": "datatype"}, "dd-proxy-debug.js": {"classlist": ["Plugin.DDProxy"], "name": "dd-proxy-debug.js", "module": "dd"}, "dd-delegate.js": {"classlist": ["DD.Delegate"], "name": "dd-delegate.js", "module": "dd"}, "datatype-date_pt.js": {"classlist": [], "name": "datatype-date_pt.js", "module": "datatype"}, "datatype-date-format_ms.js": {"classlist": [], "name": "datatype-date-format_ms.js", "module": "datatype"}, "arraylist-add.js": {"classlist": ["ArrayList~add"], "name": "arraylist-add.js", "module": "collection"}, "selector-css3-min.js": {"classlist": [], "name": "selector-css3-min.js", "module": "dom"}, "aui-node.js": {"classlist": ["A.Node", "A.NodeList", "A.HTML5"], "name": "aui-node.js", "module": "aui-node"}, "querystring-parse-min.js": {"classlist": [], "name": "querystring-parse-min.js", "module": "querystring"}, "aui-io-plugin-min.js": {"name": "aui-io-plugin-min.js", "classlist": [], "module": "aui-io", "guessedname": "P", "guessedtype": "function", "method": "P"}, "oop.js": {"classlist": ["YUI~oop"], "name": "oop.js", "module": "oop"}, "datatype-date-format_en-AU.js": {"classlist": [], "name": "datatype-date-format_en-AU.js", "module": "datatype"}, "array-extras-debug.js": {"classlist": ["YUI~array~extras"], "name": "array-extras-debug.js", "module": "collection"}, "aui-editable.js": {"classlist": ["Editable"], "name": "aui-editable.js", "module": "aui-editable"}, "pluginhost.js": {"classlist": ["Plugin.Host"], "name": "pluginhost.js", "module": "pluginhost"}, "aui-data-set-min.js": {"name": "aui-data-set-min.js", "classlist": [], "module": "aui-component", "guessedname": "D", "guessedtype": "function", "method": "D"}, "event-key.js": {"classlist": [], "name": "event-key.js", "module": "event"}, "aui-datatype-debug.js": {"classlist": ["DataType.Boolean", "DataType.String"], "name": "aui-datatype-debug.js", "module": "aui-datatype"}, "datatype_en-US.js": {"classlist": [], "name": "datatype_en-US.js", "module": "datatype"}, "aui-node-base-debug.js": {"classlist": ["A.Node", "A.NodeList"], "name": "aui-node-base-debug.js", "module": "aui-node"}, "aui-form-textarea.js": {"classlist": [], "name": "aui-form-textarea.js", "module": "aui-event"}, "slider-base-debug.js": {"classlist": ["SliderBase"], "name": "slider-base-debug.js", "module": "slider"}, "json-stringify-min.js": {"classlist": [], "name": "json-stringify-min.js", "module": "json"}, "aui-io-plugin-debug.js": {"classlist": ["A.Plugin.IO"], "name": "aui-io-plugin-debug.js", "module": "aui-io"}, "datasource-local-debug.js": {"classlist": ["DataSource.Local"], "name": "datasource-local-debug.js", "module": "datasource"}, "plugin.js": {"classlist": ["Plugin.Base"], "name": "plugin.js", "module": "plugin"}, "aui-calendar-base.js": {"classlist": ["Calendar", "CalendarManager"], "name": "aui-calendar-base.js", "module": "aui-calendar"}, "plugin-min.js": {"classlist": [], "name": "plugin-min.js", "module": "plugin"}, "datatype_es-ES.js": {"classlist": [], "name": "datatype_es-ES.js", "module": "datatype"}, "datatype-debug.js": {"classlist": ["DataType.Number", "DataType.Date", "DataType.Date.Locale", "DataType.XML"], "name": "datatype-debug.js", "module": "datatype"}, "datatype-date_zh-Hans.js": {"classlist": [], "name": "datatype-date_zh-Hans.js", "module": "datatype"}, "datatype-date_ar-JO.js": {"classlist": [], "name": "datatype-date_ar-JO.js", "module": "datatype"}, "cache.js": {"classlist": ["Cache"], "name": "cache.js", "module": "cache"}, "datatype_en-PH.js": {"classlist": [], "name": "datatype_en-PH.js", "module": "datatype"}, "aui-io-plugin.js": {"classlist": ["A.Plugin.IO"], "name": "aui-io-plugin.js", "module": "aui-io"}, "event-focus-debug.js": {"classlist": [], "name": "event-focus-debug.js", "module": "event"}, "selector-css2-min.js": {"classlist": [], "name": "selector-css2-min.js", "module": "dom"}, "dd-scroll-min.js": {"classlist": [], "name": "dd-scroll-min.js", "module": "dd"}, "datatype-date_pl-PL.js": {"classlist": [], "name": "datatype-date_pl-PL.js", "module": "datatype"}, "datatype-date-format_el-GR.js": {"classlist": [], "name": "datatype-date-format_el-GR.js", "module": "datatype"}, "datatype-date_pl.js": {"classlist": [], "name": "datatype-date_pl.js", "module": "datatype"}, "clickable-rail-debug.js": {"classlist": ["ClickableRail"], "name": "clickable-rail-debug.js", "module": "slider"}, "dd-drop-min.js": {"classlist": [], "name": "dd-drop-min.js", "module": "dd"}, "anim-base.js": {"classlist": ["Anim"], "name": "anim-base.js", "module": "anim"}, "array-extras.js": {"classlist": ["YUI~array~extras"], "name": "array-extras.js", "module": "collection"}, "io-form.js": {"classlist": [], "name": "io-form.js", "module": "io"}, "aui-button-item-min.js": {"name": "aui-button-item-min.js", "classlist": [], "module": "aui-button-item", "guessedname": "G", "guessedtype": "function", "method": "G"}, "datasource-polling-min.js": {"classlist": [], "name": "datasource-polling-min.js", "module": "datasource"}, "stylesheet.js": {"classlist": ["StyleSheet"], "name": "stylesheet.js", "module": "stylesheet"}, "yui.js": {"classlist": ["YUI", "config", "Lang", "Array", "Queue", "Object", "UA", "Get", "Intl"], "name": "yui.js", "module": "yui"}, "dataschema-debug.js": {"classlist": ["DataSchema.Base", "DataSchema.JSON", "DataSchema.XML", "DataSchema.Array", "DataSchema.Text"], "name": "dataschema-debug.js", "module": "dataschema"}, "event-mousewheel-debug.js": {"classlist": [], "name": "event-mousewheel-debug.js", "module": "event"}, "widget-anim.js": {"classlist": ["Plugin.WidgetAnim"], "name": "widget-anim.js", "module": "widget-anim"}, "aui-color-picker.js": {"classlist": ["ColorPicker"], "name": "aui-color-picker.js", "module": "aui-color-picker"}, "datatype-date_es-BO.js": {"classlist": [], "name": "datatype-date_es-BO.js", "module": "datatype"}, "aui-node-html5-print.js": {"classlist": [], "name": "aui-node-html5-print.js", "module": "aui-node"}, "datatype-date-format_en-SG.js": {"classlist": [], "name": "datatype-date-format_en-SG.js", "module": "datatype"}, "value-change-min.js": {"classlist": [], "name": "value-change-min.js", "module": "test"}, "datatype-date-format_en-GB.js": {"classlist": [], "name": "datatype-date-format_en-GB.js", "module": "datatype"}, "io-xdr-min.js": {"classlist": [], "name": "io-xdr-min.js", "module": "io"}, "base-build-min.js": {"classlist": [], "name": "base-build-min.js", "module": "base"}, "loader-base-debug.js": {"classlist": ["Loader"], "name": "loader-base-debug.js", "module": "loader"}, "datatype_da.js": {"classlist": [], "name": "datatype_da.js", "module": "datatype"}, "widget-position-constrain-min.js": {"classlist": [], "name": "widget-position-constrain-min.js", "module": "widget-position-constrain"}, "datatype-date_nl-BE.js": {"classlist": [], "name": "datatype-date_nl-BE.js", "module": "datatype"}, "aui-form-field-min.js": {"name": "aui-form-field-min.js", "classlist": [], "module": "aui-event", "guessedname": "G", "guessedtype": "function", "method": "G"}, "dataschema-array.js": {"classlist": ["DataSchema.Array"], "name": "dataschema-array.js", "module": "dataschema"}, "anim-xy-debug.js": {"classlist": [], "name": "anim-xy-debug.js", "module": "anim"}, "aui-tooltip-debug.js": {"classlist": ["Tooltip"], "name": "aui-tooltip-debug.js", "module": "aui-tooltip"}, "widget-parent-debug.js": {"classlist": ["WidgetParent"], "name": "widget-parent-debug.js", "module": "widget"}, "dump-min.js": {"classlist": [], "name": "dump-min.js", "module": "dump"}, "anim-color-min.js": {"classlist": [], "name": "anim-color-min.js", "module": "anim"}, "loader-rollup-debug.js": {"classlist": [], "name": "loader-rollup-debug.js", "module": "loader"}, "aui-delayed-task-min.js": {"name": "aui-delayed-task-min.js", "classlist": [], "module": "aui-delayed-task", "guessedname": "C", "guessedtype": "function", "method": "C"}, "datatype-date_fi-FI.js": {"classlist": [], "name": "datatype-date_fi-FI.js", "module": "datatype"}, "selector-native-debug.js": {"classlist": ["Selector"], "name": "selector-native-debug.js", "module": "dom"}, "datatype-date-format_de-DE.js": {"classlist": [], "name": "datatype-date-format_de-DE.js", "module": "datatype"}, "sortable-debug.js": {"classlist": ["Sortable"], "name": "sortable-debug.js", "module": "sortable"}, "dd-constrain.js": {"classlist": ["Plugin.DDConstrained"], "name": "dd-constrain.js", "module": "dd"}, "datatype-date-format_fr-BE.js": {"classlist": [], "name": "datatype-date-format_fr-BE.js", "module": "datatype"}, "dataschema-json-debug.js": {"classlist": ["DataSchema.JSON"], "name": "dataschema-json-debug.js", "module": "dataschema"}, "datatype-date_fr.js": {"classlist": [], "name": "datatype-date_fr.js", "module": "datatype"}, "loader.js": {"classlist": ["Loader"], "name": "loader.js", "module": "loader"}, "aui-image-viewer-gallery-min.js": {"name": "aui-image-viewer-gallery-min.js", "classlist": [], "module": "aui-image-viewer", "guessedname": "O", "guessedtype": "function", "method": "O"}, "datatype-date-parse-debug.js": {"classlist": [], "name": "datatype-date-parse-debug.js", "module": "datatype"}, "aui-form-base-min.js": {"name": "aui-form-base-min.js", "classlist": [], "module": "aui-event", "guessedname": "I", "guessedtype": "function", "method": "I"}, "datasource-jsonschema-debug.js": {"classlist": ["DataSourceJSONSchema"], "name": "datasource-jsonschema-debug.js", "module": "datasource"}, "io-base-debug.js": {"classlist": ["io"], "name": "io-base-debug.js", "module": "io"}, "get.js": {"classlist": ["Get"], "name": "get.js", "module": "yui"}, "datatype-date-format_it-IT.js": {"classlist": [], "name": "datatype-date-format_it-IT.js", "module": "datatype"}, "datatype_pl-PL.js": {"classlist": [], "name": "datatype_pl-PL.js", "module": "datatype"}, "base-debug.js": {"classlist": ["Base"], "name": "base-debug.js", "module": "base"}, "aui-component-min.js": {"name": "aui-component-min.js", "classlist": [], "module": "aui-component", "guessedname": "F", "guessedtype": "function", "method": "F"}, "yui-log-min.js": {"classlist": [], "name": "yui-log-min.js", "module": "yui"}, "datatype_es-VE.js": {"classlist": [], "name": "datatype_es-VE.js", "module": "datatype"}, "widget-position-constrain.js": {"classlist": ["WidgetPositionConstrain"], "name": "widget-position-constrain.js", "module": "widget-position-constrain"}, "datatype-date-format-debug.js": {"classlist": ["DataType.Date", "DataType.Date.Locale"], "name": "datatype-date-format-debug.js", "module": "datatype"}, "widget-anim-min.js": {"classlist": [], "name": "widget-anim-min.js", "module": "widget-anim"}, "datatype-date_el-GR.js": {"classlist": [], "name": "datatype-date_el-GR.js", "module": "datatype"}, "aui-form-textfield-debug.js": {"classlist": [], "name": "aui-form-textfield-debug.js", "module": "aui-event"}, "aui-overlay-context-panel.js": {"classlist": ["OverlayContextPanel", "OverlayContextPanelManager"], "name": "aui-overlay-context-panel.js", "module": "aui-overlay"}, "dd-ddm-min.js": {"classlist": [], "name": "dd-ddm-min.js", "module": "dd"}, "datatype-date-format_sv.js": {"classlist": [], "name": "datatype-date-format_sv.js", "module": "datatype"}, "datatype-date-format_da-DK.js": {"classlist": [], "name": "datatype-date-format_da-DK.js", "module": "datatype"}, "datatype-date_nb-NO.js": {"classlist": [], "name": "datatype-date_nb-NO.js", "module": "datatype"}, "aui-data-set-debug.js": {"classlist": [], "name": "aui-data-set-debug.js", "module": "aui-component"}, "dom-base-min.js": {"classlist": [], "name": "dom-base-min.js", "module": "dom"}, "datatype-date_zh-Hant.js": {"classlist": [], "name": "datatype-date_zh-Hant.js", "module": "datatype"}, "datatype_fr-CA.js": {"classlist": [], "name": "datatype_fr-CA.js", "module": "datatype"}, "datatype-date_en-CA.js": {"classlist": [], "name": "datatype-date_en-CA.js", "module": "datatype"}, "querystring-parse-simple.js": {"classlist": [], "name": "querystring-parse-simple.js", "module": "querystring"}, "aui-tabs-min.js": {"name": "aui-tabs-min.js", "classlist": [], "module": "aui-resize", "guessedname": "I", "guessedtype": "function", "method": "I"}, "aui-event.js": {"classlist": ["AUI~event~input"], "name": "aui-event.js", "module": "aui-event"}, "event-custom-complex-min.js": {"classlist": [], "name": "event-custom-complex-min.js", "module": "event-custom"}, "aui-overlay-manager-min.js": {"name": "aui-overlay-manager-min.js", "classlist": [], "module": "aui-overlay", "guessedname": "J", "guessedtype": "function", "method": "J"}, "sortable-min.js": {"classlist": [], "name": "sortable-min.js", "module": "sortable"}, "dd-min.js": {"classlist": [], "name": "dd-min.js", "module": "dd"}, "datatype-date_en-JO.js": {"classlist": [], "name": "datatype-date_en-JO.js", "module": "datatype"}, "aui-tree-node-min.js": {"name": "aui-tree-node-min.js", "classlist": [], "module": "aui-tree", "guessedname": "w", "guessedtype": "function", "method": "w"}, "dump-debug.js": {"classlist": ["YUI~dump"], "name": "dump-debug.js", "module": "dump"}, "anim-easing-min.js": {"classlist": [], "name": "anim-easing-min.js", "module": "anim"}, "datatype_id.js": {"classlist": [], "name": "datatype_id.js", "module": "datatype"}, "event-base-debug.js": {"classlist": ["DOMEventFacade", "Event"], "name": "event-base-debug.js", "module": "event"}, "arraylist.js": {"classlist": ["ArrayList"], "name": "arraylist.js", "module": "collection"}, "aui-overlay-mask-min.js": {"name": "aui-overlay-mask-min.js", "classlist": [], "module": "aui-overlay", "guessedname": "H", "guessedtype": "function", "method": "H"}, "datasource-debug.js": {"classlist": ["DataSource.Local", "DataSource.IO", "DataSource.Get", "DataSource.Function", "DataSourceCache", "DataSourceJSONSchema", "DataSourceXMLSchema", "DataSourceArraySchema", "DataSourceTextSchema", "Pollable"], "name": "datasource-debug.js", "module": "datasource"}, "profiler-min.js": {"classlist": [], "name": "profiler-min.js", "module": "profiler"}, "datatype-date_ar.js": {"classlist": [], "name": "datatype-date_ar.js", "module": "datatype"}, "datatype_ja.js": {"classlist": [], "name": "datatype_ja.js", "module": "datatype"}, "clickable-rail.js": {"classlist": ["ClickableRail"], "name": "clickable-rail.js", "module": "slider"}, "querystring-stringify-min.js": {"classlist": [], "name": "querystring-stringify-min.js", "module": "querystring"}, "dd-ddm.js": {"classlist": [], "name": "dd-ddm.js", "module": "dd"}, "datatype_en-NZ.js": {"classlist": [], "name": "datatype_en-NZ.js", "module": "datatype"}, "datatype-date_ja.js": {"classlist": [], "name": "datatype-date_ja.js", "module": "datatype"}, "anim-base-min.js": {"classlist": [], "name": "anim-base-min.js", "module": "anim"}, "datatype-date-format_en-MY.js": {"classlist": [], "name": "datatype-date-format_en-MY.js", "module": "datatype"}, "event-focus-min.js": {"classlist": [], "name": "event-focus-min.js", "module": "event"}, "datatype_en-CA.js": {"classlist": [], "name": "datatype_en-CA.js", "module": "datatype"}, "datatype-date_de-AT.js": {"classlist": [], "name": "datatype-date_de-AT.js", "module": "datatype"}, "arraylist-filter.js": {"classlist": ["ArrayList~filter"], "name": "arraylist-filter.js", "module": "collection"}, "aui-parse-content-debug.js": {"classlist": ["ParseContent"], "name": "aui-parse-content-debug.js", "module": "aui-parse-content"}, "datatype-date_da-DK.js": {"classlist": [], "name": "datatype-date_da-DK.js", "module": "datatype"}, "aui-resize-min.js": {"name": "aui-resize-min.js", "classlist": [], "module": "aui-resize", "guessedname": "AO", "guessedtype": "function", "method": "AO"}, "pluginhost-min.js": {"classlist": [], "name": "pluginhost-min.js", "module": "pluginhost"}, "datatype_en-GB.js": {"classlist": [], "name": "datatype_en-GB.js", "module": "datatype"}, "datasource-function-min.js": {"classlist": [], "name": "datasource-function-min.js", "module": "datasource"}, "tabview-plugin-debug.js": {"classlist": [], "name": "tabview-plugin-debug.js", "module": "tabview"}, "datatype-date-format_zh-Hans-CN.js": {"classlist": [], "name": "datatype-date-format_zh-Hans-CN.js", "module": "datatype"}, "stylesheet-min.js": {"classlist": [], "name": "stylesheet-min.js", "module": "stylesheet"}, "datasource-polling-debug.js": {"classlist": ["Pollable"], "name": "datasource-polling-debug.js", "module": "datasource"}, "slider-min.js": {"classlist": [], "name": "slider-min.js", "module": "slider"}, "aui-autocomplete-debug.js": {"classlist": ["AutoComplete"], "name": "aui-autocomplete-debug.js", "module": "aui-autocomplete"}, "console_es.js": {"classlist": [], "name": "console_es.js", "module": "console"}, "intl-base-debug.js": {"classlist": ["Intl"], "name": "intl-base-debug.js", "module": "yui"}, "querystring.js": {"classlist": ["QueryString"], "name": "querystring.js", "module": "querystring"}, "json-parse.js": {"classlist": ["JSON"], "name": "json-parse.js", "module": "json"}, "aui-live-search-debug.js": {"classlist": ["LiveSearch"], "name": "aui-live-search-debug.js", "module": "aui-live-search"}, "dom-screen-min.js": {"classlist": [], "name": "dom-screen-min.js", "module": "dom"}, "dd-plugin.js": {"classlist": ["Plugin.Drag"], "name": "dd-plugin.js", "module": "dd"}, "datatype_hi-IN.js": {"classlist": [], "name": "datatype_hi-IN.js", "module": "datatype"}, "datatype_fi.js": {"classlist": [], "name": "datatype_fi.js", "module": "datatype"}, "selector-native.js": {"classlist": ["Selector"], "name": "selector-native.js", "module": "dom"}, "datatype_pt-BR.js": {"classlist": [], "name": "datatype_pt-BR.js", "module": "datatype"}, "attribute-complex-min.js": {"classlist": [], "name": "attribute-complex-min.js", "module": "attribute"}, "aui-tree-view-min.js": {"name": "aui-tree-view-min.js", "classlist": [], "module": "aui-tree", "guessedname": "S", "guessedtype": "function", "method": "S"}, "console-filters-debug.js": {"classlist": ["Plugin.ConsoleFilters"], "name": "console-filters-debug.js", "module": "console"}, "datatype-date-format_th-TH.js": {"classlist": [], "name": "datatype-date-format_th-TH.js", "module": "datatype"}, "console-debug.js": {"classlist": ["Console"], "name": "console-debug.js", "module": "console"}, "datatype_zh-Hans.js": {"classlist": [], "name": "datatype_zh-Hans.js", "module": "datatype"}, "datatype-date_ja-JP.js": {"classlist": [], "name": "datatype-date_ja-JP.js", "module": "datatype"}, "dd-constrain-min.js": {"classlist": [], "name": "dd-constrain-min.js", "module": "dd"}, "aui-form-textarea-debug.js": {"classlist": [], "name": "aui-form-textarea-debug.js", "module": "aui-event"}, "classnamemanager-debug.js": {"classlist": ["ClassNameManager"], "name": "classnamemanager-debug.js", "module": "classnamemanager"}, "datatype_ru-RU.js": {"classlist": [], "name": "datatype_ru-RU.js", "module": "datatype"}, "datasource-arrayschema-min.js": {"classlist": [], "name": "datasource-arrayschema-min.js", "module": "datasource"}, "aui-panel-min.js": {"name": "aui-panel-min.js", "classlist": [], "module": "aui-panel", "guessedname": "H", "guessedtype": "function", "method": "H"}, "intl-min.js": {"classlist": [], "name": "intl-min.js", "module": "intl"}, "aui-overlay-manager.js": {"classlist": ["OverlayManager"], "name": "aui-overlay-manager.js", "module": "aui-overlay"}, "imageloader.js": {"classlist": ["ImgLoadGroup", "ImgLoadImgObj"], "name": "imageloader.js", "module": "imageloader"}, "event-custom-debug.js": {"classlist": ["Do", "Do.Method", "Do.AlterArgs", "Do.AlterReturn", "Do.Halt", "Do.Prevent", "Do.Error", "EventHandle", "CustomEvent", "Subscriber", "EventTarget", "EventFacade"], "name": "event-custom-debug.js", "module": "event-custom"}, "datasource-polling.js": {"classlist": ["Pollable"], "name": "datasource-polling.js", "module": "datasource"}, "datatype_es.js": {"classlist": [], "name": "datatype_es.js", "module": "datatype"}, "loader-rollup-min.js": {"classlist": [], "name": "loader-rollup-min.js", "module": "loader"}, "datatype-date-format_es-PY.js": {"classlist": [], "name": "datatype-date-format_es-PY.js", "module": "datatype"}, "selector-css3.js": {"classlist": [], "name": "selector-css3.js", "module": "dom"}, "swfdetect-debug.js": {"classlist": [], "name": "swfdetect-debug.js", "module": "swfdetect"}, "aui-node-html5-print-debug.js": {"classlist": [], "name": "aui-node-html5-print-debug.js", "module": "aui-node"}, "aui-io-request-debug.js": {"classlist": ["IORequest", "A.io"], "name": "aui-io-request-debug.js", "module": "aui-io"}, "dataschema-text.js": {"classlist": ["DataSchema.Text"], "name": "dataschema-text.js", "module": "dataschema"}, "dom-screen-debug.js": {"classlist": [], "name": "dom-screen-debug.js", "module": "dom"}, "aui-form-min.js": {"name": "aui-form-min.js", "classlist": [], "module": "aui-event", "guessedname": "I", "guessedtype": "function", "method": "I"}, "tabview-base-debug.js": {"classlist": [], "name": "tabview-base-debug.js", "module": "tabview"}, "dd-plugin-min.js": {"classlist": [], "name": "dd-plugin-min.js", "module": "dd"}, "datatype-date_en-IN.js": {"classlist": [], "name": "datatype-date_en-IN.js", "module": "datatype"}, "widget-position.js": {"classlist": ["WidgetPosition"], "name": "widget-position.js", "module": "widget-position"}, "datatype_ca-ES.js": {"classlist": [], "name": "datatype_ca-ES.js", "module": "datatype"}, "aui-form-textfield.js": {"classlist": [], "name": "aui-form-textfield.js", "module": "aui-event"}, "arraylist-add-min.js": {"classlist": [], "name": "arraylist-add-min.js", "module": "collection"}, "querystring-debug.js": {"classlist": ["QueryString"], "name": "querystring-debug.js", "module": "querystring"}, "aui-node-html5-debug.js": {"classlist": ["A.HTML5"], "name": "aui-node-html5-debug.js", "module": "aui-node"}, "event-mouseenter-min.js": {"classlist": [], "name": "event-mouseenter-min.js", "module": "event"}, "datasource-io-debug.js": {"classlist": ["DataSource.IO"], "name": "datasource-io-debug.js", "module": "datasource"}, "intl-base.js": {"classlist": ["Intl"], "name": "intl-base.js", "module": "yui"}, "aui-dialog-min.js": {"name": "aui-dialog-min.js", "classlist": [], "module": "aui-dialog", "guessedname": "M", "guessedtype": "function", "method": "M"}, "datatype-date-format_pl-PL.js": {"classlist": [], "name": "datatype-date-format_pl-PL.js", "module": "datatype"}, "value-change.js": {"classlist": [], "name": "value-change.js", "module": "test"}, "datatype-date_ca-ES.js": {"classlist": [], "name": "datatype-date_ca-ES.js", "module": "datatype"}, "datatype-date_en.js": {"classlist": [], "name": "datatype-date_en.js", "module": "datatype"}, "aui-base-debug.js": {"classlist": [], "name": "aui-base-debug.js", "module": "aui-autocomplete"}, "datatype-date-format_ja-JP.js": {"classlist": [], "name": "datatype-date-format_ja-JP.js", "module": "datatype"}, "anim-color.js": {"classlist": [], "name": "anim-color.js", "module": "anim"}, "get-min.js": {"classlist": [], "name": "get-min.js", "module": "yui"}, "datatype-date-format_es-UY.js": {"classlist": [], "name": "datatype-date-format_es-UY.js", "module": "datatype"}, "datatype-date-format_pt-BR.js": {"classlist": [], "name": "datatype-date-format_pt-BR.js", "module": "datatype"}, "aui-editable-min.js": {"name": "aui-editable-min.js", "classlist": [], "module": "aui-editable", "guessedname": "H", "guessedtype": "function", "method": "H"}, "datatype-date_es-CO.js": {"classlist": [], "name": "datatype-date_es-CO.js", "module": "datatype"}, "datatype-date_en-US.js": {"classlist": [], "name": "datatype-date_en-US.js", "module": "datatype"}, "test.js": {"classlist": ["Test.Case", "Test.Wait", "Test.Suite", "Test.TestNode", "Test.Runner", "Test.Assert", "Assert.Error", "Assert.ComparisonFailure", "Assert.UnexpectedValue", "Assert.ShouldFail", "Assert.ShouldError", "Assert.UnexpectedError", "Assert.ArrayAssert", "Assert.ObjectAssert", "Assert.DateAssert", "Test.Reporter", "Test.Mock"], "name": "test.js", "module": "test"}, "selector-debug.js": {"classlist": ["Selector"], "name": "selector-debug.js", "module": "dom"}, "datatype-date-format_es-US.js": {"classlist": [], "name": "datatype-date-format_es-US.js", "module": "datatype"}, "datatype-date_ms-MY.js": {"classlist": [], "name": "datatype-date_ms-MY.js", "module": "datatype"}, "datatype-date-format_zh-Hans.js": {"classlist": [], "name": "datatype-date-format_zh-Hans.js", "module": "datatype"}, "aui-panel-debug.js": {"classlist": ["Panel"], "name": "aui-panel-debug.js", "module": "aui-panel"}, "imageloader-min.js": {"classlist": [], "name": "imageloader-min.js", "module": "imageloader"}, "overlay-debug.js": {"classlist": ["Overlay"], "name": "overlay-debug.js", "module": "overlay"}, "datatype-date_tr-TR.js": {"classlist": [], "name": "datatype-date_tr-TR.js", "module": "datatype"}, "dataschema-xml.js": {"classlist": ["DataSchema.XML"], "name": "dataschema-xml.js", "module": "dataschema"}, "aui-node-html5.js": {"classlist": ["A.HTML5"], "name": "aui-node-html5.js", "module": "aui-node"}, "intl-base-min.js": {"classlist": [], "name": "intl-base-min.js", "module": "yui"}, "test-debug.js": {"classlist": ["Test.Case", "Test.Wait", "Test.Suite", "Test.TestNode", "Test.Runner", "Test.Assert", "Assert.Error", "Assert.ComparisonFailure", "Assert.UnexpectedValue", "Assert.ShouldFail", "Assert.ShouldError", "Assert.UnexpectedError", "Assert.ArrayAssert", "Assert.ObjectAssert", "Assert.DateAssert", "Test.Reporter", "Test.Mock"], "name": "test-debug.js", "module": "test"}, "event-mousewheel.js": {"classlist": [], "name": "event-mousewheel.js", "module": "event"}, "dd-debug.js": {"classlist": ["DD.DDM", "DD.Drag", "Plugin.DDProxy", "Plugin.DDConstrained", "DD.Scroll", "Plugin.DDWindowScroll", "Plugin.DDNodeScroll", "Plugin.Drag", "DD.Drop", "Plugin.Drop", "DD.Delegate"], "name": "dd-debug.js", "module": "dd"}, "aui-tabs.js": {"classlist": [], "name": "aui-tabs.js", "module": "aui-resize"}, "profiler-debug.js": {"classlist": ["Profiler"], "name": "profiler-debug.js", "module": "profiler"}, "loader-base-min.js": {"classlist": [], "name": "loader-base-min.js", "module": "loader"}, "dataschema-text-debug.js": {"classlist": ["DataSchema.Text"], "name": "dataschema-text-debug.js", "module": "dataschema"}, "datatype-date_it.js": {"classlist": [], "name": "datatype-date_it.js", "module": "datatype"}, "dd-proxy.js": {"classlist": ["Plugin.DDProxy"], "name": "dd-proxy.js", "module": "dd"}, "datatype-date_ro-RO.js": {"classlist": [], "name": "datatype-date_ro-RO.js", "module": "datatype"}, "node-menunav-debug.js": {"classlist": ["plugin.NodeMenuNav"], "name": "node-menunav-debug.js", "module": "node-menunav"}, "datatype-date-format_vi.js": {"classlist": [], "name": "datatype-date-format_vi.js", "module": "datatype"}, "datatype_nb-NO.js": {"classlist": [], "name": "datatype_nb-NO.js", "module": "datatype"}, "datatype-date_vi.js": {"classlist": [], "name": "datatype-date_vi.js", "module": "datatype"}, "datatype-date-format_nl-NL.js": {"classlist": [], "name": "datatype-date-format_nl-NL.js", "module": "datatype"}, "aui-button-item-debug.js": {"classlist": ["ButtonItem"], "name": "aui-button-item-debug.js", "module": "aui-button-item"}, "aui-form-debug.js": {"classlist": [], "name": "aui-form-debug.js", "module": "aui-event"}, "datatype-date_nl.js": {"classlist": [], "name": "datatype-date_nl.js", "module": "datatype"}, "aui-tree-debug.js": {"classlist": ["TreeData", "TreeNode", "TreeNodeIO", "TreeNodeCheck", "TreeNodeTask", "TreeView", "TreeViewDD"], "name": "aui-tree-debug.js", "module": "aui-tree"}, "datatype_en-IN.js": {"classlist": [], "name": "datatype_en-IN.js", "module": "datatype"}, "aui-form-validator.js": {"classlist": [], "name": "aui-form-validator.js", "module": "aui-event"}, "aui-event-input-min.js": {"name": "aui-event-input-min.js", "classlist": [], "module": "aui-event", "guessedname": "B", "guessedtype": "function", "method": "B"}, "dd-ddm-base-min.js": {"classlist": [], "name": "dd-ddm-base-min.js", "module": "dd"}, "datatype_vi-VN.js": {"classlist": [], "name": "datatype_vi-VN.js", "module": "datatype"}, "anim.js": {"classlist": ["Anim", "Easing", "Plugin.NodeFX"], "name": "anim.js", "module": "anim"}, "event-delegate.js": {"classlist": [], "name": "event-delegate.js", "module": "event"}, "datatype-date-format_ar.js": {"classlist": [], "name": "datatype-date-format_ar.js", "module": "datatype"}, "dd-scroll-debug.js": {"classlist": ["DD.Scroll", "Plugin.DDWindowScroll", "Plugin.DDNodeScroll"], "name": "dd-scroll-debug.js", "module": "dd"}, "datatype_es-MX.js": {"classlist": [], "name": "datatype_es-MX.js", "module": "datatype"}, "datatype_es-BO.js": {"classlist": [], "name": "datatype_es-BO.js", "module": "datatype"}, "io-form-debug.js": {"classlist": [], "name": "io-form-debug.js", "module": "io"}, "querystring-parse-simple-min.js": {"classlist": [], "name": "querystring-parse-simple-min.js", "module": "querystring"}, "datasource-io-min.js": {"classlist": [], "name": "datasource-io-min.js", "module": "datasource"}, "slider-debug.js": {"classlist": ["SliderBase", "SliderValueRange", "ClickableRail", "Slider"], "name": "slider-debug.js", "module": "slider"}, "datatype-date_en-NZ.js": {"classlist": [], "name": "datatype-date_en-NZ.js", "module": "datatype"}, "node-aria.js": {"classlist": [], "name": "node-aria.js", "module": "node"}, "datasource-get-min.js": {"classlist": [], "name": "datasource-get-min.js", "module": "datasource"}, "datatype_fr-BE.js": {"classlist": [], "name": "datatype_fr-BE.js", "module": "datatype"}, "sortable.js": {"classlist": ["Sortable"], "name": "sortable.js", "module": "sortable"}, "datasource-xmlschema-debug.js": {"classlist": ["DataSourceXMLSchema"], "name": "datasource-xmlschema-debug.js", "module": "datasource"}, "datatype-date_de-DE.js": {"classlist": [], "name": "datatype-date_de-DE.js", "module": "datatype"}, "clickable-rail-min.js": {"classlist": [], "name": "clickable-rail-min.js", "module": "slider"}, "base-base-min.js": {"classlist": [], "name": "base-base-min.js", "module": "base"}, "aui-form-field-debug.js": {"classlist": [], "name": "aui-form-field-debug.js", "module": "aui-event"}, "dd-drag-debug.js": {"classlist": ["DD.Drag"], "name": "dd-drag-debug.js", "module": "dd"}, "cookie-min.js": {"classlist": [], "name": "cookie-min.js", "module": "cookie"}, "aui-swf-debug.js": {"classlist": [], "name": "aui-swf-debug.js", "module": "aui-resize"}, "aui-nested-list-min.js": {"name": "aui-nested-list-min.js", "classlist": [], "module": "aui-nested-list", "guessedname": "P", "guessedtype": "function", "method": "P"}, "datatype-date-format_zh-Hant-HK.js": {"classlist": [], "name": "datatype-date-format_zh-Hant-HK.js", "module": "datatype"}, "aui-node-html5-print-min.js": {"classlist": [], "name": "aui-node-html5-print-min.js", "module": "aui-node"}, "widget.js": {"classlist": ["Widget"], "name": "widget.js", "module": "widget-stdmod"}, "dd-ddm-drop.js": {"classlist": [], "name": "dd-ddm-drop.js", "module": "dd"}, "shim-plugin.js": {"classlist": ["Plugin.Shim"], "name": "shim-plugin.js", "module": "shim-plugin"}, "datatype-date_ms.js": {"classlist": [], "name": "datatype-date_ms.js", "module": "datatype"}, "datatype-date-format_ms-MY.js": {"classlist": [], "name": "datatype-date-format_ms-MY.js", "module": "datatype"}, "array-invoke.js": {"classlist": ["YUI~array~invoke"], "name": "array-invoke.js", "module": "collection"}, "aui-dialog.js": {"classlist": ["Dialog", "DialogManager", "DialogMask"], "name": "aui-dialog.js", "module": "aui-dialog"}, "json-debug.js": {"classlist": ["JSON"], "name": "json-debug.js", "module": "json"}, "selector-min.js": {"classlist": [], "name": "selector-min.js", "module": "dom"}, "datasource-function-debug.js": {"classlist": ["DataSource.Function"], "name": "datasource-function-debug.js", "module": "datasource"}, "datatype-date_es-PY.js": {"classlist": [], "name": "datatype-date_es-PY.js", "module": "datatype"}, "anim-curve-debug.js": {"classlist": [], "name": "anim-curve-debug.js", "module": "anim"}, "event-resize-debug.js": {"classlist": [], "name": "event-resize-debug.js", "module": "event"}, "anim-node-plugin-debug.js": {"classlist": ["Plugin.NodeFX"], "name": "anim-node-plugin-debug.js", "module": "anim"}, "dd-ddm-drop-min.js": {"classlist": [], "name": "dd-ddm-drop-min.js", "module": "dd"}, "aui-color-picker-min.js": {"name": "aui-color-picker-min.js", "classlist": [], "module": "aui-color-picker", "guessedname": "G", "guessedtype": "function", "method": "G"}, "event-min.js": {"classlist": [], "name": "event-min.js", "module": "event"}, "datatype-date-format_fr.js": {"classlist": [], "name": "datatype-date-format_fr.js", "module": "datatype"}, "swf.js": {"classlist": ["YAHOO.widget.SWF"], "name": "swf.js", "module": "swf"}, "io-base-min.js": {"classlist": [], "name": "io-base-min.js", "module": "io"}, "datasource-jsonschema-min.js": {"classlist": [], "name": "datasource-jsonschema-min.js", "module": "datasource"}, "aui-event-input-debug.js": {"classlist": ["AUI~event~input"], "name": "aui-event-input-debug.js", "module": "aui-event"}, "datatype-date-parse-min.js": {"classlist": [], "name": "datatype-date-parse-min.js", "module": "datatype"}, "datatype-date-format_sv-SE.js": {"classlist": [], "name": "datatype-date-format_sv-SE.js", "module": "datatype"}, "oop-min.js": {"classlist": [], "name": "oop-min.js", "module": "oop"}, "dataschema-base-min.js": {"classlist": [], "name": "dataschema-base-min.js", "module": "dataschema"}, "yui-min.js": {"classlist": [], "name": "yui-min.js", "module": "yui"}, "cookie.js": {"classlist": ["Cookie"], "name": "cookie.js", "module": "cookie"}, "aui-tree-data-debug.js": {"classlist": ["TreeData"], "name": "aui-tree-data-debug.js", "module": "aui-tree"}, "datatype-date-format_da.js": {"classlist": [], "name": "datatype-date-format_da.js", "module": "datatype"}, "widget-position-constrain-debug.js": {"classlist": ["WidgetPositionConstrain"], "name": "widget-position-constrain-debug.js", "module": "widget-position-align"}, "dd-delegate-min.js": {"classlist": [], "name": "dd-delegate-min.js", "module": "dd"}, "datasource-function.js": {"classlist": ["DataSource.Function"], "name": "datasource-function.js", "module": "datasource"}, "aui-overlay-base-min.js": {"name": "aui-overlay-base-min.js", "classlist": [], "module": "aui-overlay", "guessedname": "OverlayBase", "guessedtype": "function", "method": "OverlayBase"}, "aui-textboxlist-min.js": {"name": "aui-textboxlist-min.js", "classlist": [], "module": "aui-textboxlist", "guessedname": "E", "guessedtype": "function", "method": "E"}, "querystring-parse-simple-debug.js": {"classlist": [], "name": "querystring-parse-simple-debug.js", "module": "querystring"}, "aui-state-interaction.js": {"classlist": [], "name": "aui-state-interaction.js", "module": "aui-resize"}, "datatype-date_fr-BE.js": {"classlist": [], "name": "datatype-date_fr-BE.js", "module": "datatype"}, "datatype_fr.js": {"classlist": [], "name": "datatype_fr.js", "module": "datatype"}, "aui-button-item.js": {"classlist": ["ButtonItem"], "name": "aui-button-item.js", "module": "aui-button-item"}, "datatype-date-format_it.js": {"classlist": [], "name": "datatype-date-format_it.js", "module": "datatype"}, "range-slider.js": {"classlist": ["Slider"], "name": "range-slider.js", "module": "slider"}, "datatype_zh-Hant-TW.js": {"classlist": [], "name": "datatype_zh-Hant-TW.js", "module": "datatype"}, "cache-min.js": {"classlist": [], "name": "cache-min.js", "module": "cache"}, "datatype-date_id.js": {"classlist": [], "name": "datatype-date_id.js", "module": "datatype"}, "swfdetect-min.js": {"classlist": [], "name": "swfdetect-min.js", "module": "swfdetect"}, "datatype-date-format_de-AT.js": {"classlist": [], "name": "datatype-date-format_de-AT.js", "module": "datatype"}, "aui-component.js": {"classlist": ["Component"], "name": "aui-component.js", "module": "aui-component"}, "dataschema-json-min.js": {"classlist": [], "name": "dataschema-json-min.js", "module": "dataschema"}, "history-debug.js": {"classlist": ["History", "History.Module"], "name": "history-debug.js", "module": "history"}, "dataschema-xml-min.js": {"classlist": [], "name": "dataschema-xml-min.js", "module": "dataschema"}, "anim-color-debug.js": {"classlist": [], "name": "anim-color-debug.js", "module": "anim"}, "yui-log.js": {"classlist": [], "name": "yui-log.js", "module": "yui"}, "datatype_de-DE.js": {"classlist": [], "name": "datatype_de-DE.js", "module": "datatype"}, "datatype-min.js": {"classlist": ["DataType.Date.Locale", "DataType.XML"], "name": "datatype-min.js", "module": "datatype"}, "datatype-date-format_en-PH.js": {"classlist": [], "name": "datatype-date-format_en-PH.js", "module": "datatype"}, "datatype_th-TH.js": {"classlist": [], "name": "datatype_th-TH.js", "module": "datatype"}, "aui-color-picker-debug.js": {"classlist": ["ColorPicker"], "name": "aui-color-picker-debug.js", "module": "aui-color-picker"}, "datatype_ro-RO.js": {"classlist": [], "name": "datatype_ro-RO.js", "module": "datatype"}, "datatype_tr-TR.js": {"classlist": [], "name": "datatype_tr-TR.js", "module": "datatype"}, "dataschema.js": {"classlist": ["DataSchema.Base", "DataSchema.JSON", "DataSchema.XML", "DataSchema.Array", "DataSchema.Text"], "name": "dataschema.js", "module": "dataschema"}, "aui-toolbar.js": {"classlist": ["Toolbar"], "name": "aui-toolbar.js", "module": "aui-toolbar"}, "datasource-cache.js": {"classlist": ["DataSourceCache"], "name": "datasource-cache.js", "module": "datasource"}, "datatype-date-format_fr-CA.js": {"classlist": [], "name": "datatype-date-format_fr-CA.js", "module": "datatype"}, "querystring-parse.js": {"classlist": ["QueryString"], "name": "querystring-parse.js", "module": "querystring"}, "datatype-date_zh-Hans-CN.js": {"classlist": [], "name": "datatype-date_zh-Hans-CN.js", "module": "datatype"}, "datatype-date_tr.js": {"classlist": [], "name": "datatype-date_tr.js", "module": "datatype"}, "datasource-cache-min.js": {"classlist": [], "name": "datasource-cache-min.js", "module": "datasource"}, "dom-style-debug.js": {"classlist": [], "name": "dom-style-debug.js", "module": "dom"}, "datatype_es-CO.js": {"classlist": [], "name": "datatype_es-CO.js", "module": "datatype"}, "oop-debug.js": {"classlist": ["YUI~oop"], "name": "oop-debug.js", "module": "oop"}, "yui-throttle-debug.js": {"classlist": [], "name": "yui-throttle-debug.js", "module": "yui"}, "anim-scroll-min.js": {"classlist": [], "name": "anim-scroll-min.js", "module": "anim"}, "datatype-date-format_tr.js": {"classlist": [], "name": "datatype-date-format_tr.js", "module": "datatype"}, "aui-form-combobox-debug.js": {"classlist": [], "name": "aui-form-combobox-debug.js", "module": "aui-event"}, "datatype_it.js": {"classlist": [], "name": "datatype_it.js", "module": "datatype"}, "aui-autocomplete-min.js": {"name": "aui-autocomplete-min.js", "classlist": [], "module": "aui-autocomplete", "guessedname": "y", "guessedtype": "function", "method": "y"}, "datatype-date-format_nl-BE.js": {"classlist": [], "name": "datatype-date-format_nl-BE.js", "module": "datatype"}, "aui-form-field.js": {"classlist": [], "name": "aui-form-field.js", "module": "aui-event"}, "datatype-date_en-GB.js": {"classlist": [], "name": "datatype-date_en-GB.js", "module": "datatype"}, "widget-stack-min.js": {"classlist": [], "name": "widget-stack-min.js", "module": "widget-stack"}, "datatype_nl-BE.js": {"classlist": [], "name": "datatype_nl-BE.js", "module": "datatype"}, "datatype-date_pt-BR.js": {"classlist": [], "name": "datatype-date_pt-BR.js", "module": "datatype"}, "datatype-date_es-VE.js": {"classlist": [], "name": "datatype-date_es-VE.js", "module": "datatype"}, "widget-position-min.js": {"classlist": [], "name": "widget-position-min.js", "module": "widget-position"}, "aui-form-textfield-min.js": {"name": "aui-form-textfield-min.js", "classlist": [], "module": "aui-event", "guessedname": "F", "guessedtype": "function", "method": "F"}, "datatype-date-format_fi.js": {"classlist": [], "name": "datatype-date-format_fi.js", "module": "datatype"}, "io-form-min.js": {"classlist": [], "name": "io-form-min.js", "module": "io"}, "datatype-date-format_es-MX.js": {"classlist": [], "name": "datatype-date-format_es-MX.js", "module": "datatype"}, "overlay.js": {"classlist": ["Overlay"], "name": "overlay.js", "module": "overlay"}}, "modules": {"aui-color-picker": {"description": "The ColorPicker Utility - Full documentation coming soon.", "submodules": [], "classlist": ["ColorPicker"], "filelist": ["aui-color-picker-debug.js", "aui-color-picker-min.js", "aui-color-picker.js"], "subdata": {}, "guessedname": "Lang", "guessedtype": "property", "name": "aui-color-picker"}, "console-filters": {"description": "<p>Provides Plugin.ConsoleFilters plugin class.</p>\n<p>This plugin adds the ability to control which Console entries display by filtering on category and source. Two groups of checkboxes are added to the Console footer, one for categories and the other for sources.  Only those messages that match a checked category or source are displayed.</p>", "submodules": [], "classlist": ["Plugin.ConsoleFilters"], "filelist": ["console-filters-min.js", "console.js"], "subdata": {}, "name": "console-filters"}, "aui-textboxlist": {"description": "The Textboxlist Utility - Full documentation coming soon.", "submodules": [], "classlist": ["Textboxlist"], "filelist": ["aui-textboxlist-debug.js", "aui-textboxlist-min.js", "aui-textboxlist.js"], "subdata": {}, "guessedname": "Lang", "guessedtype": "property", "name": "aui-textboxlist"}, "aui-toolbar": {"description": "The Toolbar Utility", "submodules": [], "classlist": ["Toolbar"], "filelist": ["aui-toolbar-debug.js", "aui-toolbar-min.js", "aui-toolbar.js"], "subdata": {}, "guessedname": "Lang", "guessedtype": "property", "name": "aui-toolbar"}, "dump": {"description": "Returns a simple string representation of the object or array.\nOther types of objects will be returned unprocessed.  Arrays\nare expected to be indexed.  Use object notation for\nassociative arrays.\nIf included, the dump method is added to the YUI instance.", "submodules": [], "classlist": ["YUI~dump"], "filelist": ["dump-debug.js", "dump-min.js", "dump.js"], "subdata": {}, "guessedname": "L", "guessedtype": "property", "name": "dump"}, "aui-nested-list": {"description": "The NestedList Utility - Full documentation coming soon.", "submodules": [], "classlist": ["NestedList"], "filelist": ["aui-nested-list-debug.js", "aui-nested-list-min.js", "aui-nested-list.js"], "subdata": {}, "guessedname": "L", "guessedtype": "property", "name": "aui-nested-list"}, "widget-position-constrain": {"description": "Provides constrained xy positioning support for Widgets, through an extension.\nIt builds on top of the widget-position module, to provide constrained positioning support.", "submodules": [], "classlist": ["WidgetPositionConstrain"], "filelist": ["widget-position-constrain-min.js", "widget-position-constrain.js", "widget-position-debug.js"], "subdata": {}, "guessedname": "CONSTRAIN", "guessedtype": "property", "name": "widget-position-constrain"}, "widget-stack": {"description": "Provides stackable (z-index) support for Widgets through an extension.", "submodules": [], "classlist": ["WidgetStack"], "filelist": ["widget-stack-min.js", "widget-stack.js", "widget-stdmod-debug.js"], "subdata": {}, "guessedname": "L", "guessedtype": "property", "name": "widget-stack"}, "align-plugin": {"description": "Provides advanced positioning support for Node via a Plugin\nfor centering and alignment.", "submodules": [], "classlist": ["Plugin.Align"], "filelist": ["align-plugin-debug.js", "align-plugin-min.js", "align-plugin.js", "node-aria-debug.js"], "subdata": {}, "guessedname": "OFFSET_WIDTH", "guessedtype": "property", "name": "align-plugin"}, "shim-plugin": {"description": "Provides shimming support for Node via a Plugin.\nThis fixes SELECT bleedthrough for IE6 & Mac scrollbars", "submodules": [], "classlist": ["Plugin.Shim"], "filelist": ["shim-plugin-min.js", "shim-plugin.js"], "subdata": {}, "name": "shim-plugin"}, "loader": {"description": "The YUI loader core", "submodules": ["loader-base", "rollup", "yui3"], "classlist": ["Loader"], "filelist": ["loader-base-debug.js", "loader-base-min.js", "loader-base.js", "loader-debug.js", "loader-min.js", "loader-rollup-debug.js", "loader-rollup-min.js", "loader-rollup.js", "loader-yui3-debug.js", "loader-yui3-min.js", "loader-yui3.js", "loader.js"], "subdata": {"rollup": {"name": "Loader", "description": "Optional automatic rollup logic for reducing http connections\nwhen not using a combo service."}, "yui3": {"name": "Loader", "description": "YUI 3 module metadata"}, "loader-base": {"name": "Loader", "description": "Loader dynamically loads script and css files.  It includes the dependency\ninfo for the version of the library in use, and will automatically pull in\ndependencies for the modules requested.  It supports rollup files and will\nautomatically use these when appropriate in order to minimize the number of\nhttp connections required to load all of the dependencies.  It can load the\nfiles from the Yahoo! CDN, and it can utilize the combo service provided on\nthis network to reduce the number of http connections required to download \nYUI files."}}, "guessedname": "modules", "guessedtype": "property", "name": "loader"}, "aui-tree": {"name": "aui-tree", "submodules": ["aui-tree-data", "aui-tree-node", "aui-tree-view"], "classlist": ["TreeData", "TreeNode", "TreeNodeIO", "TreeNodeCheck", "TreeNodeTask", "TreeView", "TreeViewDD"], "filelist": ["aui-tree-data-debug.js", "aui-tree-data-min.js", "aui-tree-data.js", "aui-tree-debug.js", "aui-tree-min.js", "aui-tree-node-min.js", "aui-tree-node.js", "aui-tree-view-debug.js", "aui-tree-view-min.js", "aui-tree-view.js", "aui-tree.js"], "subdata": {"aui-tree-node": {"name": "TreeNodeTask", "description": "The TreeNode Utility"}, "aui-tree-data": {"name": "TreeData", "description": "The TreeData Utility"}, "aui-tree-view": {"name": "TreeViewDD", "description": "The TreeView Utility"}}, "guessedname": "L", "guessedtype": "property", "description": "The TreeData Utility"}, "aui-editable": {"description": "The Editable Utility", "submodules": [], "classlist": ["Editable"], "filelist": ["aui-editable-debug.js", "aui-editable-min.js", "aui-editable.js"], "subdata": {}, "guessedname": "Lang", "guessedtype": "property", "name": "aui-editable"}, "aui-datatype": {"description": "The Datatype Utility", "submodules": [], "classlist": ["DataType.Boolean", "DataType.String"], "filelist": ["aui-datatype-debug.js", "aui-datatype-min.js", "aui-datatype.js"], "subdata": {}, "guessedname": "L", "guessedtype": "property", "name": "aui-datatype"}, "aui-tooltip": {"description": "The Tooltip Utility - A standard tooltip implementation for providing additional information when hovering over a target element.", "submodules": [], "classlist": ["Tooltip"], "filelist": ["aui-tooltip-debug.js", "aui-tooltip-min.js", "aui-tooltip.js"], "subdata": {}, "guessedname": "L", "guessedtype": "property", "name": "aui-tooltip"}, "io": {"description": "Base IO functionality. Provides basic XHR transport support.", "submodules": ["io-base", "io-form", "io-xdr", "io-upload-iframe", "io-queue"], "classlist": ["io"], "filelist": ["io-base-debug.js", "io-base-min.js", "io-base.js", "io-debug.js", "io-form-debug.js", "io-form-min.js", "io-form.js", "io-min.js", "io-upload-iframe.js", "io-xdr-debug.js", "io-xdr-min.js", "io-xdr.js", "io.js"], "subdata": {"io-xdr": {"name": "io", "description": "Extends the IO base class to provide an alternate, Flash transport, for making\ncross-domain requests."}, "io-form": {"name": "io", "description": "Extends the IO base class to enable HTML form data serialization, when specified\nin the transaction's configuration object."}, "io-base": {"name": "io", "description": "Base IO functionality. Provides basic XHR transport support."}, "io-queue": {"name": "io", "description": "Extends the IO base class to implement Queue for synchronous\ntransaction processing."}, "io-upload-iframe": {"name": "io", "description": "Extends the IO base class to enable file uploads, with HTML forms,\nusing an iframe as the transport medium."}}, "guessedname": "w", "guessedtype": "property", "name": "io"}, "aui-autocomplete": {"description": "The AutoComplete Utility", "submodules": [], "classlist": ["AutoComplete"], "filelist": ["aui-base-debug.js", "aui-base-min.js", "aui-base.js", "aui-autocomplete-debug.js", "aui-autocomplete-min.js", "aui-autocomplete.js"], "subdata": {}, "guessedname": "Lang", "guessedtype": "property", "name": "aui-autocomplete"}, "swf": {"description": "The SWF utility is a tool for embedding Flash applications in HTMl pages.", "submodules": [], "classlist": ["YAHOO.widget.SWF"], "title": "SWF Utility", "filelist": ["swf-debug.js", "swf-min.js", "swf.js"], "subdata": {}, "guessedname": "Event", "guessedtype": "property", "requires": "yahoo, dom, event", "name": "swf"}, "event": {"description": "Custom event engine, DOM event listener abstraction layer, synthetic DOM \nevents.", "submodules": ["event-base", "event-delegate", "event-mousewheel", "event-mouseenter", "event-key", "event-focus", "event-resize", "event-synthetic"], "classlist": ["DOMEventFacade", "Event", "SyntheticEvent"], "filelist": ["event-base-debug.js", "event-base-min.js", "event-base.js", "event-debug.js", "event-delegate-debug.js", "event-delegate-min.js", "event-delegate.js", "event-focus-debug.js", "event-focus-min.js", "event-focus.js", "event-key-debug.js", "event-key-min.js", "event-key.js", "event-min.js", "event-mouseenter-debug.js", "event-mouseenter-min.js", "event-mouseenter.js", "event-mousewheel-debug.js", "event-mousewheel-min.js", "event-mousewheel.js", "event-resize-debug.js", "event-resize-min.js", "event-resize.js", "event-synthetic-debug.js", "event-synthetic-min.js", "event-synthetic.js", "event.js"], "subdata": {"event-focus": {"name": "YUI", "description": "Adds focus and blur event listener support.  These events normally\ndo not bubble, so this adds support for that so these events\ncan be used in event delegation scenarios."}, "event-synthetic": {"name": "SyntheticEvent", "description": "Define new DOM events that can be subscribed from any Node."}, "event-key": {"name": "YUI", "description": "Functionality to listen for one or more specific key combinations."}, "event-base": {"name": "Event", "description": "DOM event listener abstraction layer"}, "event-resize": {"name": "YUI", "description": "Adds a window resize event that has its behavior normalized to fire at the\nend of the resize rather than constantly during the resize."}, "event-mouseenter": {"name": "YUI", "description": "Adds support for mouseenter/mouseleave events"}, "event-delegate": {"name": "YUI", "description": "Adds event delegation support to the library."}, "event-mousewheel": {"name": "YUI", "description": "Adds mousewheel event support"}}, "guessedname": "Event", "guessedtype": "property", "name": "event"}, "substitute": {"description": "String variable substitution and string formatting.\nIf included, the substitute method is added to the YUI instance.", "submodules": [], "classlist": ["YUI~substitute"], "filelist": ["substitute-debug.js", "substitute-min.js", "substitute.js"], "subdata": {}, "guessedname": "L", "guessedtype": "property", "name": "substitute"}, "aui-parse-content": {"description": "The ParseContent Utility - Parse the content of a Node so that all of the \njavascript contained in that Node will be executed according to the order\nthat it appears.", "submodules": [], "classlist": ["ParseContent"], "filelist": ["aui-parse-content-debug.js", "aui-parse-content-min.js", "aui-parse-content.js"], "subdata": {}, "name": "aui-parse-content"}, "aui-panel": {"description": "The Panel Utility - Panel is a container that has specific functionality\nand structural components that make it the good for building block for\napplication-oriented user interfaces. Panel also provides built-in\nexpandable and collapsible behavior, along with a variety of prebuilt tool\nbuttons that can be wired up to provide other customized behavior. Panels\ncan be easily dropped into any Container or layout.", "submodules": [], "classlist": ["Panel"], "filelist": ["aui-panel-debug.js", "aui-panel-min.js", "aui-panel.js"], "subdata": {}, "guessedname": "Lang", "guessedtype": "property", "name": "aui-panel"}, "console": {"description": "Console creates a visualization for messages logged through calls to a YUI\ninstance's <code>Y.log( message, category, source )</code> method.  The\ndebug versions of YUI modules will include logging statements to offer some\ninsight into the steps executed during that module's operation.  Including\nlog statements in your code will cause those messages to also appear in the\nConsole.  Use Console to aid in developing your page or application.\nEntry categories &quot;info&quot;, &quot;warn&quot;, and &quot;error&quot;\nare also referred to as the log level, and entries are filtered against the\nconfigured logLevel.", "submodules": [], "classlist": ["Console", "Plugin.Console"], "filelist": ["console-debug.js", "console-filters-debug.js", "console.js", "console_en.js", "console_es.js"], "subdata": {}, "name": "console"}, "overlay": {"description": "Provides a basic Overlay widget, with Standard Module content support. The Overlay widget\nprovides Page XY positioning support, alignment and centering support along with basic \nstackable support (z-index and shimming).", "submodules": [], "classlist": ["Overlay"], "filelist": ["overlay-debug.js", "overlay-min.js", "overlay.js"], "subdata": {}, "name": "overlay"}, "event-simulate": {"description": "Synthetic DOM events", "submodules": [], "classlist": [], "filelist": ["event-simulate-debug.js", "event-simulate-min.js", "event-simulate.js"], "subdata": {}, "requires": "event", "name": "event-simulate"}, "aui-component": {"description": "The Component Utility", "submodules": [], "classlist": ["Component"], "filelist": ["aui-data-set-debug.js", "aui-data-set-min.js", "aui-data-set.js", "aui-component-debug.js", "aui-component-min.js", "aui-component.js"], "subdata": {}, "guessedname": "Lang", "guessedtype": "property", "name": "aui-component"}, "cache": {"description": "The Cache utility provides a common configurable interface for components to\ncache and retrieve data from a local JavaScript struct.", "submodules": [], "classlist": ["Cache"], "filelist": ["cache-debug.js", "cache-min.js", "cache.js"], "subdata": {}, "guessedname": "LANG", "guessedtype": "property", "name": "cache"}, "aui-portal-layout": {"description": "The PortalLayout Utility - Full documentation coming soon.", "submodules": [], "classlist": ["PortalLayout"], "filelist": ["aui-portal-layout-debug.js", "aui-portal-layout-min.js", "aui-portal-layout.js"], "subdata": {}, "guessedname": "Lang", "guessedtype": "property", "name": "aui-portal-layout"}, "json": {"description": "<p>The JSON module adds support for serializing JavaScript objects into\nJSON strings and parsing JavaScript objects from strings in JSON format.</p>\n<p>The JSON namespace is added to your YUI instance including static methods\nY.JSON.parse(..) and Y.JSON.stringify(..).</p>\n<p>The functionality and method signatures follow the ECMAScript 5\nspecification.  In browsers with native JSON support, the native\nimplementation is used.</p>\n<p>The <code>json</code> module is a rollup of <code>json-parse</code> and\n<code>json-stringify</code>.</p>\n<p>As their names suggest, <code>json-parse</code> adds support for parsing\nJSON data (Y.JSON.parse) and <code>json-stringify</code> for serializing\nJavaScript data into JSON strings (Y.JSON.stringify).  You may choose to\ninclude either of the submodules individually if you don't need the\ncomplementary functionality, or include the rollup for both.</p>", "submodules": ["json-parse", "json-stringify"], "classlist": ["JSON"], "filelist": ["json-debug.js", "json-min.js", "json-parse-debug.js", "json-parse-min.js", "json-parse.js", "json-stringify-debug.js", "json-stringify-min.js", "json-stringify.js", "json.js"], "subdata": {"json-stringify": {"name": "JSON", "description": "Provides Y.JSON.stringify method for converting objects to JSON strings."}, "json-parse": {"name": "JSON", "description": "Provides Y.JSON.parse method to accept JSON strings and return native\nJavaScript objects."}}, "static": "", "guessedname": "_JSON", "guessedtype": "property", "name": "json"}, "aui-resize": {"description": "The Resize Utility allows you to make an HTML element resizable.", "submodules": [], "classlist": ["Resize"], "filelist": ["aui-tabs-debug.js", "aui-tabs-min.js", "aui-tabs.js", "aui-swf-debug.js", "aui-swf-min.js", "aui-swf.js", "aui-state-interaction-debug.js", "aui-state-interaction-min.js", "aui-state-interaction.js", "aui-sortable-debug.js", "aui-sortable-min.js", "aui-sortable.js", "aui-resize-debug.js", "aui-resize-min.js", "aui-resize.js"], "subdata": {}, "guessedname": "Lang", "guessedtype": "property", "name": "aui-resize"}, "widget-position": {"description": "Provides basic XY positioning support for Widgets, though an extension", "submodules": [], "classlist": ["WidgetPosition"], "filelist": ["widget-position-min.js", "widget-position.js", "widget-stack-debug.js"], "subdata": {}, "guessedname": "Lang", "guessedtype": "property", "name": "widget-position"}, "aui-rating": {"description": "The Rating Utility - The Star Rating creates a non-obstrusive star rating\ncontrol, could be based on a set of radio input boxes.", "submodules": [], "classlist": ["Rating", "ThumbRating"], "filelist": ["aui-rating-debug.js", "aui-rating-min.js", "aui-rating.js"], "subdata": {}, "guessedname": "L", "guessedtype": "property", "name": "aui-rating"}, "stylesheet": {"description": "The StyleSheet component is a module for creating and modifying CSS\nstylesheets.", "submodules": [], "classlist": ["StyleSheet"], "filelist": ["stylesheet-debug.js", "stylesheet-min.js", "stylesheet.js"], "subdata": {}, "guessedname": "d", "guessedtype": "property", "name": "stylesheet"}, "async-queue": {"description": "<p>AsyncQueue allows you create a chain of function callbacks executed\nvia setTimeout (or synchronously) that are guaranteed to run in order.\nItems in the queue can be promoted or removed.  Start or resume the\nexecution chain with run().  pause() to temporarily delay execution, or\nstop() to halt and clear the queue.</p>", "submodules": [], "classlist": ["AsyncQueue"], "filelist": ["async-queue-debug.js", "async-queue-min.js", "async-queue.js"], "subdata": {}, "name": "async-queue"}, "pluginhost": {"description": "Provides the augmentable PluginHost interface, which can be added to any class.", "submodules": [], "classlist": ["Plugin.Host"], "filelist": ["pluginhost-debug.js", "pluginhost-min.js", "pluginhost.js"], "subdata": {}, "name": "pluginhost"}, "node-menunav": {"description": "<p>The MenuNav Node Plugin makes it easy to transform existing list-based \nmarkup into traditional, drop down navigational menus that are both accessible \nand easy to customize, and only require a small set of dependencies.</p>\n<p>To use the MenuNav Node Plugin, simply pass a reference to the plugin to a \nNode instance's <code>plug</code> method.</p>\n<p>\n<code>\n&#60;script type=\"text/javascript\"&#62; <br>\n<br>\n//\tCall the \"use\" method, passing in \"node-menunav\".  This will <br>\n//\tload the script and CSS for the MenuNav Node Plugin and all of <br>\n//\tthe required dependencies. <br>\n<br>\nYUI().use(\"node-menunav\", function(Y) { <br>\n<br>\n//\tUse the \"contentready\" event to initialize the menu when <br>\n//\tthe subtree of element representing the root menu <br>\n//\t(&#60;div id=\"menu-1\"&#62;) is ready to be scripted. <br>\n<br>\nY.on(\"contentready\", function () { <br>\n<br>\n//\tThe scope of the callback will be a Node instance <br>\n//\trepresenting the root menu (&#60;div id=\"menu-1\"&#62;). <br>\n//\tTherefore, since \"this\" represents a Node instance, it <br>\n//\tis possible to just call \"this.plug\" passing in a <br>\n//\treference to the MenuNav Node Plugin. <br>\n<br>\nthis.plug(Y.Plugin.NodeMenuNav); <br>\n<br>\n}, \"#menu-1\"); <br>\n<br>\t\t\n}); <br>\n<br>\t\n&#60;/script&#62; <br>\n</code>\n</p>\n<p>The MenuNav Node Plugin has several configuration properties that can be \nset via an object literal that is passed as a second argument to a Node \ninstance's <code>plug</code> method.\n</p>\n<p>\n<code>\n&#60;script type=\"text/javascript\"&#62; <br>\n<br>\n//\tCall the \"use\" method, passing in \"node-menunav\".  This will <br>\n//\tload the script and CSS for the MenuNav Node Plugin and all of <br>\n//\tthe required dependencies. <br>\n<br>\nYUI().use(\"node-menunav\", function(Y) { <br>\n<br>\n//\tUse the \"contentready\" event to initialize the menu when <br>\n//\tthe subtree of element representing the root menu <br>\n//\t(&#60;div id=\"menu-1\"&#62;) is ready to be scripted. <br>\n<br>\nY.on(\"contentready\", function () { <br>\n<br>\n//\tThe scope of the callback will be a Node instance <br>\n//\trepresenting the root menu (&#60;div id=\"menu-1\"&#62;). <br>\n//\tTherefore, since \"this\" represents a Node instance, it <br>\n//\tis possible to just call \"this.plug\" passing in a <br>\n//\treference to the MenuNav Node Plugin. <br>\n<br>\nthis.plug(Y.Plugin.NodeMenuNav, { mouseOutHideDelay: 1000 });\n<br><br>\n}, \"#menu-1\"); <br>\n<br>\t\t\n}); <br>\n<br>\t\n&#60;/script&#62; <br>\n</code>\n</p>", "submodules": [], "classlist": ["plugin.NodeMenuNav"], "filelist": ["node-menunav-debug.js", "node-menunav-min.js", "node-menunav.js"], "subdata": {}, "name": "node-menunav"}, "test": {"description": "YUI JavaScript Testing Framework", "submodules": [], "classlist": ["Test.Case", "Test.Wait", "Test.Suite", "Test.TestNode", "Test.Runner", "Test.Assert", "Assert.Error", "Assert.ComparisonFailure", "Assert.UnexpectedValue", "Assert.ShouldFail", "Assert.ShouldError", "Assert.UnexpectedError", "Assert.ArrayAssert", "Assert.ObjectAssert", "Assert.DateAssert", "Test.Reporter", "Test.Mock"], "filelist": ["value-change-debug.js", "value-change-min.js", "value-change.js", "test-debug.js", "test-min.js", "test.js"], "subdata": {}, "name": "test"}, "aui-overlay": {"description": "Provides a basic Overlay widget, with Standard Module content support. The Overlay widget\nprovides Page XY positioning support, alignment and centering support along with basic \nstackable support (z-index and shimming).", "submodules": ["aui-overlay-base", "aui-overlay-context", "aui-overlay-context-panel", "aui-overlay-manager", "aui-overlay-mask"], "classlist": ["OverlayBase", "OverlayContext", "OverlayContextManager", "OverlayContextPanel", "OverlayContextPanelManager", "OverlayManager", "OverlayMask"], "filelist": ["aui-overlay-base-debug.js", "aui-overlay-base-min.js", "aui-overlay-base.js", "aui-overlay-context-debug.js", "aui-overlay-context-min.js", "aui-overlay-context-panel-debug.js", "aui-overlay-context-panel-min.js", "aui-overlay-context-panel.js", "aui-overlay-context.js", "aui-overlay-debug.js", "aui-overlay-manager-debug.js", "aui-overlay-manager-min.js", "aui-overlay-manager.js", "aui-overlay-mask-debug.js", "aui-overlay-mask-min.js", "aui-overlay-mask.js", "aui-overlay-min.js", "aui-overlay.js"], "subdata": {"aui-overlay-base": {"name": "OverlayBase", "description": "Provides a basic Overlay widget, with Standard Module content support. The Overlay widget\nprovides Page XY positioning support, alignment and centering support along with basic \nstackable support (z-index and shimming)."}, "aui-overlay-mask": {"name": "OverlayMask", "description": "The OverlayMask Utility"}, "aui-overlay-context": {"name": "OverlayContextManager", "description": "The OverlayContext Utility"}, "aui-overlay-context-panel": {"name": "OverlayContextPanelManager", "description": "The OverlayContextPanel Utility"}, "aui-overlay-manager": {"name": "OverlayManager", "description": "The OverlayManager Utility"}}, "guessedname": "L", "guessedtype": "property", "name": "aui-overlay"}, "aui-image-viewer": {"name": "aui-image-viewer", "submodules": ["aui-image-viewer-base", "aui-image-viewer-gallery"], "classlist": ["ImageViewer", "ImageViewerMask", "ImageGallery"], "filelist": ["aui-image-viewer-base-debug.js", "aui-image-viewer-base-min.js", "aui-image-viewer-base.js", "aui-image-viewer-debug.js", "aui-image-viewer-gallery-debug.js", "aui-image-viewer-gallery-min.js", "aui-image-viewer-gallery.js", "aui-image-viewer-min.js", "aui-image-viewer.js"], "subdata": {"aui-image-viewer-base": {"name": "ImageViewerMask", "description": "The ImageViewer Utility"}, "aui-image-viewer-gallery": {"name": "ImageGallery", "description": "The ImageGallery Utility"}}, "guessedname": "L", "guessedtype": "property", "description": "The ImageViewer Utility"}, "aui-char-counter": {"description": "The CharCounter Utility", "submodules": [], "classlist": ["CharCounter"], "filelist": ["aui-chart-debug.js", "aui-chart-min.js", "aui-chart.js", "aui-char-counter-debug.js", "aui-char-counter-min.js", "aui-char-counter.js"], "subdata": {}, "guessedname": "L", "guessedtype": "property", "name": "aui-char-counter"}, "imageloader": {"description": "The ImageLoader Utility is a framework to dynamically load images according to certain triggers,\nenabling faster load times and a more responsive UI.", "submodules": [], "classlist": ["ImgLoadGroup", "ImgLoadImgObj"], "filelist": ["imageloader-debug.js", "imageloader-min.js", "imageloader.js"], "subdata": {}, "requires": "base-base, node-style, node-screen", "name": "imageloader"}, "node": {"name": "node", "submodules": ["node-aria", "node-base", "nodelist", "node-style", "node-screen", "node-event-delegate"], "classlist": ["Node", "NodeList"], "filelist": ["node-aria-min.js", "node-aria.js", "node-base-debug.js", "node-debug.js", "shim-plugin-debug.js"], "subdata": {"nodelist": {"name": "NodeList", "description": "The NodeList module provides support for managing collections of Nodes."}, "node-event-delegate": {"name": "Node", "description": "Functionality to make the node a delegated event container"}, "node-base": {"name": "Node", "description": "The Node Utility provides a DOM-like interface for interacting with DOM nodes."}, "node-style": {"name": "NodeList", "description": "Extended Node interface for managing node styles."}, "node-aria": {"name": "Plugin.Align", "description": "Aria support for Node"}, "node-screen": {"name": "NodeList", "description": "Extended Node interface for managing regions and screen positioning.\nAdds support for positioning elements and normalizes window size and scroll detection."}}, "guessedname": "get", "guessedtype": "function", "description": "Aria support for Node"}, "aui-paginator": {"description": "The Paginator Utility - The Paginator widget provides a set of controls to navigate through paged data.", "submodules": [], "classlist": ["Paginator"], "filelist": ["aui-paginator-debug.js", "aui-paginator-min.js", "aui-paginator.js"], "subdata": {}, "guessedname": "L", "guessedtype": "property", "name": "aui-paginator"}, "widget": {"description": "Provides the base Widget class, with HTML Parser support", "submodules": ["widget-base", "widget-htmlparser"], "classlist": ["Widget"], "filelist": ["widget-base-debug.js", "widget-base-min.js", "widget-parent-debug.js"], "subdata": {"widget-base": {"name": "Widget", "description": "Provides the base Widget class"}, "widget-htmlparser": {"name": "Widget", "description": "Adds HTML Parser support to the base Widget class"}}, "guessedname": "L", "guessedtype": "property", "name": "widget"}, "anim": {"description": "The Animation Utility provides an API for creating advanced transitions.", "submodules": ["anim-base", "anim-color", "anim-curve", "anim-easing", "anim-node-plugin", "anim-scroll", "anim-xy"], "classlist": ["Anim", "Easing", "Plugin.NodeFX"], "filelist": ["anim-base-debug.js", "anim-base-min.js", "anim-base.js", "anim-color-debug.js", "anim-color-min.js", "anim-color.js", "anim-curve-debug.js", "anim-curve-min.js", "anim-curve.js", "anim-debug.js", "anim-easing-debug.js", "anim-easing-min.js", "anim-easing.js", "anim-min.js", "anim-node-plugin-debug.js", "anim-node-plugin-min.js", "anim-node-plugin.js", "anim-scroll-debug.js", "anim-scroll-min.js", "anim-scroll.js", "anim-xy-debug.js", "anim-xy-min.js", "anim-xy.js", "anim.js"], "subdata": {"anim-node-plugin": {"name": "Plugin.NodeFX", "description": "Binds an Anim instance to a Node instance"}, "anim-base": {"name": "Anim", "description": "Provides the base Anim class, for animating numeric properties."}, "anim-scroll": {"name": "Plugin.NodeFX", "description": "Adds support for the <code>scroll</code> property in <code>to</code>\nand <code>from</code> attributes."}, "anim-xy": {"name": "Plugin.NodeFX", "description": "Adds support for the <code>xy</code> property in <code>from</code> and \n<code>to</code> attributes."}, "anim-color": {"name": "Anim", "description": "Adds support for color properties in <code>to</code>\nand <code>from</code> attributes."}, "anim-curve": {"name": "Anim", "description": "Adds support for the <code>curve</code> property for the <code>to</code> \nattribute.  A curve is zero or more control points and an end point."}, "anim-easing": {"name": "Easing", "description": "The easing module provides methods for customizing\nhow an animation behaves during each run."}}, "guessedname": "NUM", "guessedtype": "property", "name": "anim"}, "attribute": {"description": "The attribute module provides an augmentable Attribute implementation, which \nadds configurable attributes and attribute change events to the class being \naugmented. It also provides a State class, which is used internally by Attribute,\nbut can also be used independently to provide a name/property/value data structure to\nstore state.", "submodules": ["attribute-base", "attribute-complex"], "classlist": ["State", "Attribute"], "filelist": ["attribute-base-debug.js", "attribute-base-min.js", "attribute-base.js", "attribute-complex-debug.js", "attribute-complex-min.js", "attribute-complex.js", "attribute-debug.js", "attribute-min.js", "attribute.js"], "subdata": {"attribute-base": {"name": "Attribute", "description": "The attribute-base submodule provides core attribute handling support, with everything\naside from complex attribute handling in the provider's constructor."}, "attribute-complex": {"name": "Attribute", "description": "Adds support for attribute providers to handle complex attributes in the constructor"}}, "guessedname": "O", "guessedtype": "property", "name": "attribute"}, "aui-loading-mask": {"description": "The LoadingMask Utility", "submodules": [], "classlist": ["LoadingMask"], "filelist": ["aui-loading-mask-debug.js", "aui-loading-mask-min.js", "aui-loading-mask.js"], "subdata": {}, "guessedname": "Lang", "guessedtype": "property", "name": "aui-loading-mask"}, "aui-live-search": {"description": "The LiveSearch Utility allow real-time filtering for DOM elements based on\na input query.", "submodules": [], "classlist": ["LiveSearch"], "filelist": ["aui-live-search-debug.js", "aui-live-search-min.js", "aui-live-search.js"], "subdata": {}, "guessedname": "L", "guessedtype": "property", "name": "aui-live-search"}, "dd": {"description": "DD plugin to associate a value with the current draggable element's position.", "submodules": ["dd-value", "dd-constrain", "dd-ddm-base", "dd-ddm", "dd-ddm-drop", "dd-drag", "dd-proxy", "dd-scroll", "dd-plugin", "dd-drop", "dd-drop-plugin", "dd-delegate"], "classlist": ["Plugin.DDConstrained", "DD.DDM", "DD.Drag", "Plugin.DDProxy", "DD.Scroll", "Plugin.DDWindowScroll", "Plugin.DDNodeScroll", "Plugin.Drag", "DD.Drop", "Plugin.Drop", "DD.Delegate"], "filelist": ["dd-value-debug.js", "dd-value-min.js", "dd-value.js", "dd-constrain-debug.js", "dd-constrain-min.js", "dd-constrain.js", "dd-ddm-base-debug.js", "dd-ddm-base-min.js", "dd-ddm-base.js", "dd-ddm-debug.js", "dd-ddm-drop-debug.js", "dd-ddm-drop-min.js", "dd-ddm-drop.js", "dd-ddm-min.js", "dd-ddm.js", "dd-debug.js", "dd-delegate-debug.js", "dd-delegate-min.js", "dd-delegate.js", "dd-drag-debug.js", "dd-drag-min.js", "dd-drag.js", "dd-drop-debug.js", "dd-drop-min.js", "dd-drop-plugin-debug.js", "dd-drop-plugin-min.js", "dd-drop-plugin.js", "dd-drop.js", "dd-min.js", "dd-plugin-debug.js", "dd-plugin-min.js", "dd-plugin.js", "dd-proxy-debug.js", "dd-proxy-min.js", "dd-proxy.js", "dd-scroll-debug.js", "dd-scroll-min.js", "dd-scroll.js", "dd.js"], "subdata": {"dd-ddm-drop": {"name": "DD.DDM", "description": "Extends the dd-ddm Class to add support for the placement of Drop Target shims inside the viewport shim. It also handles all Drop Target related events and interactions."}, "dd-constrain": {"name": "Plugin.DDConstrained", "description": "The Drag & Drop Utility allows you to create a draggable interface efficiently, buffering you from browser-level abnormalities and enabling you to focus on the interesting logic surrounding your particular implementation. This component enables you to create a variety of standard draggable objects with just a few lines of code and then, using its extensive API, add your own specific implementation logic."}, "dd-drop": {"name": "DD.Drop", "description": "Provides the ability to create a Drop Target."}, "dd-delegate": {"name": "DD.Delegate", "description": "Provides the ability to drag multiple nodes under a container element using only one Y.DD.Drag instance as a delegate."}, "dd-scroll": {"name": "Plugin.DDNodeScroll", "description": "Base scroller class used to create the Plugin.DDNodeScroll and Plugin.DDWinScroll.\nThis class should not be called on it's own, it's designed to be a plugin."}, "dd-ddm": {"name": "DD.DDM", "description": "Extends the dd-ddm-base Class to add support for the viewport shim to allow a draggable node to drag to be dragged over an iframe or any other node that traps mousemove events.\nIt is also required to have Drop Targets enabled, as the viewport shim will contain the shims for the Drop Targets."}, "dd-plugin": {"name": "Plugin.Drag", "description": "Simple Drag plugin that can be attached to a Node via the plug method."}, "dd-drag": {"name": "DD.Drag", "description": "Provides the ability to drag a Node."}, "dd-value": {"name": "YUI", "description": "DD plugin to associate a value with the current draggable element's position."}, "dd-proxy": {"name": "Plugin.DDProxy", "description": "Plugin for dd-drag for creating a proxy drag node, instead of dragging the original node."}, "dd-drop-plugin": {"name": "Plugin.Drop", "description": "Simple Drop plugin that can be attached to a Node via the plug method."}, "dd-ddm-base": {"name": "DD.DDM", "description": "Provides the base Drag Drop Manger required for making a Node draggable."}}, "name": "dd"}, "intl": {"description": "Provides utilities to support the management of localized resources (strings and formatting patterns).", "submodules": [], "classlist": ["Intl"], "filelist": ["intl-debug.js", "intl-min.js", "intl.js"], "subdata": {}, "name": "intl"}, "collection": {"name": "collection", "submodules": ["array-extras", "array-invoke", "arraylist-add", "arraylist", "arraylist-filter"], "classlist": ["YUI~array~extras", "YUI~array~invoke", "ArrayList~add", "ArrayList", "ArrayList~filter"], "filelist": ["compat-debug.js", "compat-min.js", "compat.js", "array-extras-debug.js", "array-extras-min.js", "array-extras.js", "array-invoke-debug.js", "array-invoke-min.js", "array-invoke.js", "arraylist-add-debug.js", "arraylist-add-min.js", "arraylist-add.js", "arraylist-debug.js", "arraylist-filter-debug.js", "arraylist-filter-min.js", "arraylist-filter.js", "arraylist-min.js", "arraylist.js", "collection-debug.js", "collection-min.js", "collection.js"], "subdata": {"arraylist-add": {"name": "ArrayList~add", "description": "Collection utilities beyond what is provided in the YUI core"}, "array-extras": {"name": "YUI~array~extras", "description": "Collection utilities beyond what is provided in the YUI core"}, "arraylist": {"name": "ArrayList", "description": "Collection utilities beyond what is provided in the YUI core"}, "array-invoke": {"name": "YUI~array~invoke", "description": "Collection utilities beyond what is provided in the YUI core"}, "arraylist-filter": {"name": "ArrayList~filter", "description": "Collection utilities beyond what is provided in the YUI core"}}, "guessedname": "L", "guessedtype": "property", "description": "Collection utilities beyond what is provided in the YUI core"}, "aui-button-item": {"description": "The ButtonItem Utility", "submodules": [], "classlist": ["ButtonItem"], "filelist": ["aui-button-item-debug.js", "aui-button-item-min.js", "aui-button-item.js"], "subdata": {}, "guessedname": "Lang", "guessedtype": "property", "name": "aui-button-item"}, "slider": {"description": "Adds support for mouse interaction with the Slider rail triggering thumb\nmovement.", "submodules": ["clickable-rail", "range-slider", "slider-base", "slider-value-range"], "classlist": ["ClickableRail", "Slider", "SliderBase", "SliderValueRange"], "filelist": ["clickable-rail-debug.js", "clickable-rail-min.js", "clickable-rail.js", "range-slider-debug.js", "range-slider-min.js", "range-slider.js", "slider-base-debug.js", "slider-base-min.js", "slider-base.js", "slider-debug.js", "slider-min.js", "slider-value-range-debug.js", "slider-value-range-min.js", "slider-value-range.js", "slider.js"], "subdata": {"slider-value-range": {"name": "SliderValueRange", "description": "Adds value support for Slider as a range of integers between a configured\nminimum and maximum value.  For use with <code>Y.Base.build(..)</code> to\nadd the plumbing to <code>Y.SliderBase</code>."}, "clickable-rail": {"name": "ClickableRail", "description": "Adds support for mouse interaction with the Slider rail triggering thumb\nmovement."}, "slider-base": {"name": "SliderBase", "description": "Create a sliding value range input visualized as a draggable thumb on a\nbackground element."}, "range-slider": {"name": "Slider", "description": "Create a sliding value range input visualized as a draggable thumb on a\nbackground rail element."}}, "guessedname": "INVALID_VALUE", "guessedtype": "property", "name": "slider"}, "base": {"description": "The base module provides the Base class, which objects requiring attribute and custom event support can extend. \nThe module also provides two ways to reuse code - It augments Base with the Plugin.Host interface which provides \nplugin support and also provides the Base.build method which provides a way to build custom classes using extensions.", "submodules": ["base-base", "base-build", "base-pluginhost"], "classlist": ["Base"], "filelist": ["base-base-debug.js", "base-base-min.js", "base-base.js", "base-build-debug.js", "base-build-min.js", "base-build.js", "base-debug.js", "base-min.js", "base-pluginhost-debug.js", "base-pluginhost-min.js", "base-pluginhost.js", "base.js"], "subdata": {"base-pluginhost": {"name": "Base", "description": "The base-pluginhost submodule adds Plugin support to Base, by augmenting Base with \nPlugin.Host and setting up static (class level) Base.plug and Base.unplug methods."}, "base-build": {"name": "Base", "description": "The base-build submodule provides Base.build functionality, which\ncan be used to create custom classes, by aggregating extensions onto \na main class."}, "base-base": {"name": "Base", "description": "The base-base submodule provides the Base class without the Plugin support, provided by Plugin.Host, \nand without the extension support provided by Base.build."}}, "guessedname": "O", "guessedtype": "property", "name": "base"}, "widget-parent": {"description": "Extension enabling a Widget to be a parent of another Widget.", "submodules": [], "classlist": ["WidgetParent"], "filelist": ["widget-parent-min.js", "widget-parent.js", "widget-position-align-debug.js"], "subdata": {}, "guessedname": "Lang", "guessedtype": "property", "name": "widget-parent"}, "widget-anim": {"description": "Provides a plugin which can be used to animate widget visibility changes.", "submodules": [], "classlist": ["Plugin.WidgetAnim"], "filelist": ["widget-anim-debug.js", "widget-anim-min.js", "widget-anim.js"], "subdata": {}, "guessedname": "BOUNDING_BOX", "guessedtype": "property", "name": "widget-anim"}, "aui-dialog": {"description": "The Dialog Utility - The Dialog component is an extension of Panel that is\nmeant to emulate the behavior of an dialog window using a floating,\ndraggable HTML element.", "submodules": [], "classlist": ["Dialog", "DialogManager", "DialogMask"], "filelist": ["aui-dialog-debug.js", "aui-dialog-min.js", "aui-dialog.js"], "subdata": {}, "guessedname": "L", "guessedtype": "property", "name": "aui-dialog"}, "widget-stdmod": {"description": "Provides standard module support for Widgets through an extension.", "submodules": [], "classlist": ["WidgetStdMod"], "filelist": ["widget-stdmod-min.js", "widget-stdmod.js", "widget.js"], "subdata": {}, "guessedname": "L", "guessedtype": "property", "name": "widget-stdmod"}, "dataschema": {"description": "The DataSchema utility provides a common configurable interface for widgets to\napply a given schema to a variety of data.", "submodules": ["dataschema-array", "dataschema-base", "dataschema-json", "dataschema-xml", "dataschema-text"], "classlist": ["DataSchema.Array", "DataSchema.Base", "DataSchema.JSON", "DataSchema.XML", "DataSchema.Text"], "filelist": ["dataschema-array-debug.js", "dataschema-array-min.js", "dataschema-array.js", "dataschema-base-debug.js", "dataschema-base-min.js", "dataschema-base.js", "dataschema-debug.js", "dataschema-json-debug.js", "dataschema-json-min.js", "dataschema-json.js", "dataschema-min.js", "dataschema-text-debug.js", "dataschema-text-min.js", "dataschema-text.js", "dataschema-xml-debug.js", "dataschema-xml-min.js", "dataschema-xml.js", "dataschema.js"], "subdata": {"dataschema-array": {"name": "DataSchema.Array", "description": "Provides a DataSchema implementation which can be used to work with data stored in arrays."}, "dataschema-base": {"name": "DataSchema.Base", "description": "Provides the base DataSchema implementation, which can be extended to \ncreate DataSchemas for specific data formats, such XML, JSON, text and\narrays."}, "dataschema-json": {"name": "DataSchema.JSON", "description": "Provides a DataSchema implementation which can be used to work with JSON data."}, "dataschema-xml": {"name": "DataSchema.XML", "description": "Provides a DataSchema implementation which can be used to work with XML data."}, "dataschema-text": {"name": "DataSchema.Text", "description": "Provides a DataSchema implementation which can be used to work with delimited text data."}}, "guessedname": "LANG", "guessedtype": "property", "name": "dataschema"}, "aui-delayed-task": {"description": "The DelayedTask Utility - Executes the supplied function in the context of\nthe supplied object 'when' milliseconds later", "submodules": [], "classlist": ["DelayedTask"], "filelist": ["aui-delayed-task-debug.js", "aui-delayed-task-min.js", "aui-delayed-task.js"], "subdata": {}, "name": "aui-delayed-task"}, "aui-event": {"classlist": ["AUI~event~input"], "subdata": {"aui-event-input": {"name": "AUI~event~input", "description": "An object that encapsulates text changed events for textareas and input\nelement of type text and password. This event only occurs when the element\nis focused."}}, "name": "aui-event", "filelist": ["aui-form-base-debug.js", "aui-form-base-min.js", "aui-form-base.js", "aui-form-combobox-debug.js", "aui-form-combobox-min.js", "aui-form-combobox.js", "aui-form-debug.js", "aui-form-field-debug.js", "aui-form-field-min.js", "aui-form-field.js", "aui-form-min.js", "aui-form-textarea-debug.js", "aui-form-textarea-min.js", "aui-form-textarea.js", "aui-form-textfield-debug.js", "aui-form-textfield-min.js", "aui-form-textfield.js", "aui-form-validator-debug.js", "aui-form-validator-min.js", "aui-form-validator.js", "aui-form.js", "aui-event-debug.js", "aui-event-input-debug.js", "aui-event-input-min.js", "aui-event-input.js", "aui-event-min.js", "aui-event.js"], "submodules": ["aui-event-input"]}, "aui-progressbar": {"description": "The ProgressBar Utility provides a visual means of showing progress of an\nongoing operation. The ProgressBar can be enhanced via CSS styles to provide\ndifferent colors, shapes and textures. The bar can move horizontally or\nvertically. The movement can be enhanced by using the Animation utility.", "submodules": [], "classlist": ["ProgressBar"], "filelist": ["aui-progressbar-debug.js", "aui-progressbar-min.js", "aui-progressbar.js"], "subdata": {}, "guessedname": "L", "guessedtype": "property", "name": "aui-progressbar"}, "swfdetect": {"description": "Utility for Flash version detection", "submodules": [], "classlist": [], "filelist": ["swfdetect-debug.js", "swfdetect-min.js", "swfdetect.js"], "subdata": {}, "name": "swfdetect"}, "widget-position-align": {"description": "Provides extended/advanced XY positioning support for Widgets, through an extension.\nIt builds on top of the widget-position module, to provide alignmentment and centering support.\nFuture releases aim to add constrained and fixed positioning support.", "submodules": [], "classlist": ["WidgetPositionAlign"], "filelist": ["widget-position-align-min.js", "widget-position-align.js", "widget-position-constrain-debug.js"], "subdata": {}, "guessedname": "L", "guessedtype": "property", "name": "widget-position-align"}, "queue-promote": {"description": "Adds methods promote, remove, and indexOf to Queue instances.", "submodules": [], "classlist": [], "filelist": ["queue-promote-debug.js", "queue-promote-min.js", "queue-promote.js"], "subdata": {}, "name": "queue-promote"}, "sortable": {"description": "The class allows you to create a Drag & Drop reordered list.", "submodules": [], "classlist": ["Sortable"], "filelist": ["sortable-debug.js", "sortable-min.js", "sortable.js"], "subdata": {}, "name": "sortable"}, "plugin": {"description": "Provides the base Plugin class, which plugin developers should extend, when creating custom plugins", "submodules": [], "classlist": ["Plugin.Base"], "filelist": ["plugin-debug.js", "plugin-min.js", "plugin.js"], "subdata": {}, "name": "plugin"}, "datatype": {"description": "The DataType Utility provides type-conversion and string-formatting\nconvenience methods for various JavaScript object types.", "submodules": ["datatype-date-parse", "datatype-date", "datatype-date-format", "datatype-number-parse", "datatype-number", "datatype-number-format", "datatype-xml-parse", "datatype-xml-format", "datatype-xml"], "classlist": ["DataType.Date", "DataType.Date.Locale", "DataType.Number", "DataType.XML"], "filelist": ["datatype-date-debug.js", "datatype-date-format-debug.js", "datatype-date-format-min.js", "datatype-date-parse-debug.js", "datatype-date-parse-min.js", "datatype-date-parse.js", "datatype-date.js", "datatype-debug.js", "datatype-min.js", "datatype-date-format.js", "datatype-date-format_ar-JO.js", "datatype-date-format_ar.js", "datatype-date-format_ca-ES.js", "datatype-date-format_ca.js", "datatype-date-format_da-DK.js", "datatype-date-format_da.js", "datatype-date-format_de-AT.js", "datatype-date-format_de-DE.js", "datatype-date-format_de.js", "datatype-date-format_el-GR.js", "datatype-date-format_el.js", "datatype-date-format_en-AU.js", "datatype-date-format_en-CA.js", "datatype-date-format_en-GB.js", "datatype-date-format_en-IE.js", "datatype-date-format_en-IN.js", "datatype-date-format_en-JO.js", "datatype-date-format_en-MY.js", "datatype-date-format_en-NZ.js", "datatype-date-format_en-PH.js", "datatype-date-format_en-SG.js", "datatype-date-format_en-US.js", "datatype-date-format_en.js", "datatype-date-format_es-AR.js", "datatype-date-format_es-BO.js", "datatype-date-format_es-CL.js", "datatype-date-format_es-CO.js", "datatype-date-format_es-EC.js", "datatype-date-format_es-ES.js", "datatype-date-format_es-MX.js", "datatype-date-format_es-PE.js", "datatype-date-format_es-PY.js", "datatype-date-format_es-US.js", "datatype-date-format_es-UY.js", "datatype-date-format_es-VE.js", "datatype-date-format_es.js", "datatype-date-format_fi-FI.js", "datatype-date-format_fi.js", "datatype-date-format_fr-BE.js", "datatype-date-format_fr-CA.js", "datatype-date-format_fr-FR.js", "datatype-date-format_fr.js", "datatype-date-format_hi-IN.js", "datatype-date-format_hi.js", "datatype-date-format_id-ID.js", "datatype-date-format_id.js", "datatype-date-format_it-IT.js", "datatype-date-format_it.js", "datatype-date-format_ja-JP.js", "datatype-date-format_ja.js", "datatype-date-format_ko-KR.js", "datatype-date-format_ko.js", "datatype-date-format_ms-MY.js", "datatype-date-format_ms.js", "datatype-date-format_nb-NO.js", "datatype-date-format_nb.js", "datatype-date-format_nl-BE.js", "datatype-date-format_nl-NL.js", "datatype-date-format_nl.js", "datatype-date-format_pl-PL.js", "datatype-date-format_pl.js", "datatype-date-format_pt-BR.js", "datatype-date-format_pt.js", "datatype-date-format_ro-RO.js", "datatype-date-format_ro.js", "datatype-date-format_ru-RU.js", "datatype-date-format_ru.js", "datatype-date-format_sv-SE.js", "datatype-date-format_sv.js", "datatype-date-format_th-TH.js", "datatype-date-format_th.js", "datatype-date-format_tr-TR.js", "datatype-date-format_tr.js", "datatype-date-format_vi-VN.js", "datatype-date-format_vi.js", "datatype-date-format_zh-Hans-CN.js", "datatype-date-format_zh-Hans.js", "datatype-date-format_zh-Hant-HK.js", "datatype-date-format_zh-Hant-TW.js", "datatype-date-format_zh-Hant.js", "datatype-date_ar-JO.js", "datatype-date_ar.js", "datatype-date_ca-ES.js", "datatype-date_ca.js", "datatype-date_da-DK.js", "datatype-date_da.js", "datatype-date_de-AT.js", "datatype-date_de-DE.js", "datatype-date_de.js", "datatype-date_el-GR.js", "datatype-date_el.js", "datatype-date_en-AU.js", "datatype-date_en-CA.js", "datatype-date_en-GB.js", "datatype-date_en-IE.js", "datatype-date_en-IN.js", "datatype-date_en-JO.js", "datatype-date_en-MY.js", "datatype-date_en-NZ.js", "datatype-date_en-PH.js", "datatype-date_en-SG.js", "datatype-date_en-US.js", "datatype-date_en.js", "datatype-date_es-AR.js", "datatype-date_es-BO.js", "datatype-date_es-CL.js", "datatype-date_es-CO.js", "datatype-date_es-EC.js", "datatype-date_es-ES.js", "datatype-date_es-MX.js", "datatype-date_es-PE.js", "datatype-date_es-PY.js", "datatype-date_es-US.js", "datatype-date_es-UY.js", "datatype-date_es-VE.js", "datatype-date_es.js", "datatype-date_fi-FI.js", "datatype-date_fi.js", "datatype-date_fr-BE.js", "datatype-date_fr-CA.js", "datatype-date_fr-FR.js", "datatype-date_fr.js", "datatype-date_hi-IN.js", "datatype-date_hi.js", "datatype-date_id-ID.js", "datatype-date_id.js", "datatype-date_it-IT.js", "datatype-date_it.js", "datatype-date_ja-JP.js", "datatype-date_ja.js", "datatype-date_ko-KR.js", "datatype-date_ko.js", "datatype-date_ms-MY.js", "datatype-date_ms.js", "datatype-date_nb-NO.js", "datatype-date_nb.js", "datatype-date_nl-BE.js", "datatype-date_nl-NL.js", "datatype-date_nl.js", "datatype-date_pl-PL.js", "datatype-date_pl.js", "datatype-date_pt-BR.js", "datatype-date_pt.js", "datatype-date_ro-RO.js", "datatype-date_ro.js", "datatype-date_ru-RU.js", "datatype-date_ru.js", "datatype-date_sv-SE.js", "datatype-date_sv.js", "datatype-date_th-TH.js", "datatype-date_th.js", "datatype-date_tr-TR.js", "datatype-date_tr.js", "datatype-date_vi-VN.js", "datatype-date_vi.js", "datatype-date_zh-Hans-CN.js", "datatype-date_zh-Hans.js", "datatype-date_zh-Hant-HK.js", "datatype-date_zh-Hant-TW.js", "datatype-date_zh-Hant.js", "datatype.js", "datatype_ar-JO.js", "datatype_ar.js", "datatype_ca-ES.js", "datatype_ca.js", "datatype_da-DK.js", "datatype_da.js", "datatype_de-AT.js", "datatype_de-DE.js", "datatype_de.js", "datatype_el-GR.js", "datatype_el.js", "datatype_en-AU.js", "datatype_en-CA.js", "datatype_en-GB.js", "datatype_en-IE.js", "datatype_en-IN.js", "datatype_en-JO.js", "datatype_en-MY.js", "datatype_en-NZ.js", "datatype_en-PH.js", "datatype_en-SG.js", "datatype_en-US.js", "datatype_en.js", "datatype_es-AR.js", "datatype_es-BO.js", "datatype_es-CL.js", "datatype_es-CO.js", "datatype_es-EC.js", "datatype_es-ES.js", "datatype_es-MX.js", "datatype_es-PE.js", "datatype_es-PY.js", "datatype_es-US.js", "datatype_es-UY.js", "datatype_es-VE.js", "datatype_es.js", "datatype_fi-FI.js", "datatype_fi.js", "datatype_fr-BE.js", "datatype_fr-CA.js", "datatype_fr-FR.js", "datatype_fr.js", "datatype_hi-IN.js", "datatype_hi.js", "datatype_id-ID.js", "datatype_id.js", "datatype_it-IT.js", "datatype_it.js", "datatype_ja-JP.js", "datatype_ja.js", "datatype_ko-KR.js", "datatype_ko.js", "datatype_ms-MY.js", "datatype_ms.js", "datatype_nb-NO.js", "datatype_nb.js", "datatype_nl-BE.js", "datatype_nl-NL.js", "datatype_nl.js", "datatype_pl-PL.js", "datatype_pl.js", "datatype_pt-BR.js", "datatype_pt.js", "datatype_ro-RO.js", "datatype_ro.js", "datatype_ru-RU.js", "datatype_ru.js", "datatype_sv-SE.js", "datatype_sv.js", "datatype_th-TH.js", "datatype_th.js", "datatype_tr-TR.js", "datatype_tr.js", "datatype_vi-VN.js", "datatype_vi.js", "datatype_zh-Hans-CN.js", "datatype_zh-Hans.js", "datatype_zh-Hant-HK.js", "datatype_zh-Hant-TW.js", "datatype_zh-Hant.js"], "subdata": {"datatype-xml-parse": {"name": "DataType.XML", "description": "Parse XML submodule."}, "datatype-number-format": {"name": "DataType.Number", "description": "Format number submodule."}, "datatype-date": {"name": "DataType.Date", "description": "Date submodule."}, "datatype-number": {"name": "DataType.Number", "description": "Number submodule."}, "datatype-xml": {"name": "DataType.XML", "description": "XML submodule."}, "datatype-date-format": {"name": "DataType.Date", "description": "Format date submodule implements strftime formatters for javascript based on the\nOpen Group specification defined at\nhttp://www.opengroup.org/onlinepubs/007908799/xsh/strftime.html\nThis implementation does not include modified conversion specifiers (i.e., Ex and Ox)"}, "datatype-xml-format": {"name": "DataType.XML", "description": "Format XML submodule."}, "datatype-date-parse": {"name": "DataType.Date", "description": "Parse number submodule."}, "datatype-number-parse": {"name": "DataType.Number", "description": "Parse number submodule."}}, "guessedname": "LANG", "guessedtype": "property", "name": "datatype"}, "tabview": {"description": "The TabView module", "submodules": [], "classlist": ["TabView", "Tab"], "filelist": ["tabview-base-debug.js", "tabview-base-min.js", "tabview-base.js", "tabview-debug.js", "tabview-min.js", "tabview-plugin-debug.js", "tabview-plugin-min.js", "tabview-plugin.js", "tabview.js"], "subdata": {}, "guessedname": "_queries", "guessedtype": "property", "name": "tabview"}, "dom": {"description": "The DOM utility provides a cross-browser abtraction layer\nnormalizing DOM tasks, and adds extra helper functionality\nfor other common tasks.", "submodules": ["dom-base", "dom-screen", "dom-style", "selector-native", "selector-css2", "selector-css3"], "classlist": ["DOM", "Selector"], "filelist": ["dom-base-debug.js", "dom-base-min.js", "dom-screen-debug.js", "dom-screen-min.js", "dom-screen.js", "dom-style-debug.js", "dom-style-min.js", "dom-style.js", "dom.js", "selector-css2-debug.js", "selector-css2-min.js", "selector-css2.js", "selector-css3-debug.js", "selector-css3-min.js", "selector-css3.js", "selector-debug.js", "selector-min.js", "selector-native-debug.js", "selector-native-min.js", "selector-native.js", "selector.js"], "subdata": {"selector-css2": {"name": "Selector", "description": "The selector module provides helper methods allowing CSS2 Selectors to be used with DOM elements."}, "selector-css3": {"name": "Selector", "description": "The selector css3 module provides support for css3 selectors."}, "dom-base": {"name": "DOM", "description": "The DOM utility provides a cross-browser abtraction layer\nnormalizing DOM tasks, and adds extra helper functionality\nfor other common tasks."}, "dom-style": {"name": "DOM", "description": "Add style management functionality to DOM."}, "selector-native": {"name": "Selector", "description": "The selector-native module provides support for native querySelector"}, "dom-screen": {"name": "DOM", "description": "Adds position and region management functionality to DOM."}}, "guessedname": "DOCUMENT_ELEMENT", "guessedtype": "property", "name": "dom"}, "querystring": {"description": "<p>The QueryString module adds support for serializing JavaScript objects into\nquery strings and parsing JavaScript objects from query strings format.</p>\n<p>The QueryString namespace is added to your YUI instance including static methods\nY.QueryString.parse(..) and Y.QueryString.stringify(..).</p>\n<p>The <code>querystring</code> module is a rollup of <code>querystring-parse</code> and\n<code>querystring-stringify</code>.</p>\n<p>As their names suggest, <code>querystring-parse</code> adds support for parsing\nQuery String data (Y.QueryString.parse) and <code>querystring-stringify</code> for serializing\nJavaScript data into Query Strings (Y.QueryString.stringify).  You may choose to\ninclude either of the submodules individually if you don't need the\ncomplementary functionality, or include the rollup for both.</p>", "submodules": ["querystring-parse", "querystring-stringify", "querystring-parse-simple", "querystring-stringify-simple"], "classlist": ["QueryString"], "filelist": ["querystring-debug.js", "querystring-min.js", "querystring-parse-debug.js", "querystring-parse-min.js", "querystring-parse-simple-debug.js", "querystring-parse-simple-min.js", "querystring-parse-simple.js", "querystring-parse.js", "querystring-stringify-debug.js", "querystring-stringify-min.js", "querystring-stringify-simple-debug.js", "querystring-stringify-simple-min.js", "querystring-stringify-simple.js", "querystring-stringify.js", "querystring.js"], "subdata": {"querystring-parse-simple": {"name": "QueryString", "description": "<p>Provides Y.QueryString.stringify method for converting objects to Query Strings.\nThis is a simpler implementation than the full querystring-stringify.</p>\n<p>Because some things may require basic query string escaping functionality,\nthis module provides the bare minimum functionality (decoding a hash of simple values),\nwithout the additional support for arrays, objects, and so on.</p>\n<p>This provides a friendly way to deserialize basic query strings, without necessitating\na lot of code for simple use-cases.</p>"}, "querystring-parse": {"name": "QueryString", "description": "Provides Y.QueryString.unescape method to be able to override default decoding\nmethod.  This is important in cases where non-standard delimiters are used, if\nthe delimiters would not normally be handled properly by the builtin\n(en|de)codeURIComponent functions.\nDefault: replace \"+\" with \" \", and then decodeURIComponent behavior."}, "querystring-stringify-simple": {"name": "QueryString", "description": "<p>Provides Y.QueryString.escape method to be able to override default encoding\nmethod.  This is important in cases where non-standard delimiters are used, if\nthe delimiters would not normally be handled properly by the builtin\n(en|de)codeURIComponent functions.</p>\nDefault: encodeURIComponent"}, "querystring-stringify": {"name": "QueryString", "description": "Provides Y.QueryString.escape method to be able to override default encoding\nmethod.  This is important in cases where non-standard delimiters are used, if\nthe delimiters would not normally be handled properly by the builtin\n(en|de)codeURIComponent functions.\nDefault: encodeURIComponent"}}, "static": "", "guessedname": "parse", "guessedtype": "function", "name": "querystring"}, "aui-calendar": {"name": "aui-calendar", "submodules": ["aui-calendar-base", "aui-calendar-datepicker-select"], "classlist": ["Calendar", "CalendarManager", "DatePickerSelect"], "filelist": ["aui-carousel-debug.js", "aui-carousel-min.js", "aui-carousel.js", "aui-calendar-base-debug.js", "aui-calendar-base-min.js", "aui-calendar-base.js", "aui-calendar-datepicker-select-debug.js", "aui-calendar-datepicker-select-min.js", "aui-calendar-datepicker-select.js", "aui-calendar-debug.js", "aui-calendar-min.js", "aui-calendar.js"], "subdata": {"aui-calendar-datepicker-select": {"name": "DatePickerSelect", "description": "The DatePickerSelect Utility"}, "aui-calendar-base": {"name": "CalendarManager", "description": "The Calendar component is a UI control that enables users to choose one or\nmore dates from a graphical calendar presented in a single month or multi\nmonth interface. Calendars are generated entirely via script and can be\nnavigated without any page refreshes."}}, "guessedname": "L", "guessedtype": "property", "description": "The Calendar component is a UI control that enables users to choose one or\nmore dates from a graphical calendar presented in a single month or multi\nmonth interface. Calendars are generated entirely via script and can be\nnavigated without any page refreshes."}, "classnamemanager": {"description": "Contains a singleton (ClassNameManager) that enables easy creation and caching of \nprefixed class names.", "submodules": [], "classlist": ["ClassNameManager"], "filelist": ["classnamemanager-debug.js", "classnamemanager-min.js", "classnamemanager.js"], "subdata": {}, "name": "classnamemanager"}, "profiler": {"description": "The YUI JavaScript profiler.", "submodules": [], "classlist": ["Profiler"], "filelist": ["profiler-debug.js", "profiler-min.js", "profiler.js"], "subdata": {}, "requires": "yui", "name": "profiler"}, "yui": {"name": "yui", "submodules": ["get", "yui-base", "yui-later", "yui-throttle", "yui-log"], "classlist": ["Get", "Intl", "YUI", "config", "Lang", "Array", "Queue", "Object", "UA"], "filelist": ["get-debug.js", "get-min.js", "get.js", "intl-base-debug.js", "intl-base-min.js", "intl-base.js", "yui-base-debug.js", "yui-base-min.js", "yui-later-debug.js", "yui-later-min.js", "yui-later.js", "yui-log-debug.js", "yui-log-min.js", "yui-log.js", "yui-min.js", "yui-throttle-debug.js", "yui-throttle-min.js", "yui-throttle.js", "yui.js", "aui-min.js", "aui.js"], "subdata": {"yui-later": {"name": "YUI", "description": "Provides a setTimeout/setInterval wrapper"}, "yui-base": {"name": "UA", "description": "The YUI module contains the components required for building the YUI seed file.\nThis includes the script loading mechanism, a simple queue, and the core utilities for the library."}, "yui-throttle": {"name": "YUI", "description": "Provides a throttle/limiter for function calls"}, "yui-log": {"name": "Intl", "description": "Provides console log capability and exposes a custom event for\nconsole implementations."}, "get": {"name": "Intl", "description": "Provides a mechanism to fetch remote resources and\ninsert them into a document."}}, "guessedname": "ua", "guessedtype": "property", "description": "Provides a mechanism to fetch remote resources and\ninsert them into a document."}, "aui-node": {"name": "aui-node", "submodules": ["aui-node-base", "aui-node-html5"], "classlist": ["A.Node", "A.NodeList", "A.HTML5"], "filelist": ["aui-node-base-debug.js", "aui-node-base-min.js", "aui-node-base.js", "aui-node-debug.js", "aui-node-fx-debug.js", "aui-node-fx-min.js", "aui-node-fx.js", "aui-node-html5-debug.js", "aui-node-html5-min.js", "aui-node-html5-print-debug.js", "aui-node-html5-print-min.js", "aui-node-html5-print.js", "aui-node-html5.js", "aui-node-min.js", "aui-node.js"], "subdata": {"aui-node-html5": {"name": "A.HTML5", "description": "aui-node-html5 provides support for HTML shiv natively on the Alloy dom\nmethods. The HTML5 shiv just affects IE."}, "aui-node-base": {"name": "A.NodeList", "description": "aui-node-base A set of utility methods to the Node."}}, "guessedname": "Lang", "guessedtype": "property", "description": "aui-node-base A set of utility methods to the Node."}, "datasource": {"description": "The DataSource utility provides a common configurable interface for widgets to\naccess a variety of data, from JavaScript arrays to online database servers.", "submodules": ["datasource-arrayschema", "datasource-cache", "datasource-local", "datasource-io", "datasource-get", "datasource-function", "datasource-jsonschema", "datasource-xmlschema", "datasource-textschema", "datasource-polling"], "classlist": ["DataSourceArraySchema", "DataSourceCache", "DataSource.Local", "DataSource.IO", "DataSource.Get", "DataSource.Function", "DataSourceJSONSchema", "DataSourceXMLSchema", "DataSourceTextSchema", "Pollable"], "filelist": ["datasource-arrayschema-debug.js", "datasource-arrayschema-min.js", "datasource-arrayschema.js", "datasource-cache-debug.js", "datasource-cache-min.js", "datasource-cache.js", "datasource-debug.js", "datasource-function-debug.js", "datasource-function-min.js", "datasource-function.js", "datasource-get-debug.js", "datasource-get-min.js", "datasource-get.js", "datasource-io-debug.js", "datasource-io-min.js", "datasource-io.js", "datasource-jsonschema-debug.js", "datasource-jsonschema-min.js", "datasource-jsonschema.js", "datasource-local-debug.js", "datasource-local-min.js", "datasource-local.js", "datasource-min.js", "datasource-polling-debug.js", "datasource-polling-min.js", "datasource-polling.js", "datasource-textschema-debug.js", "datasource-textschema-min.js", "datasource-textschema.js", "datasource-xmlschema-debug.js", "datasource-xmlschema-min.js", "datasource-xmlschema.js", "datasource.js"], "subdata": {"datasource-xmlschema": {"name": "DataSourceXMLSchema", "description": "Extends DataSource with schema-parsing on XML data."}, "datasource-io": {"name": "DataSource.IO", "description": "Provides a DataSource implementation which can be used to retrieve data via the IO Utility."}, "datasource-function": {"name": "DataSource.Function", "description": "Provides a DataSource implementation which can be used to retrieve data from a custom function."}, "datasource-arrayschema": {"name": "DataSourceArraySchema", "description": "Extends DataSource with schema-parsing on array data."}, "datasource-textschema": {"name": "DataSourceTextSchema", "description": "Extends DataSource with schema-parsing on text data."}, "datasource-cache": {"name": "DataSourceCache", "description": "Extends DataSource with caching functionality."}, "datasource-polling": {"name": "Pollable", "description": "Extends DataSource with polling functionality."}, "datasource-local": {"name": "DataSource.Local", "description": "Provides the base DataSource implementation, which can be extended to\ncreate DataSources for specific data protocols, such as the IO Utility, the\nGet Utility, or custom functions."}, "datasource-get": {"name": "DataSource.Get", "description": "Provides a DataSource implementation which can be used to retrieve data via the Get Utility."}, "datasource-jsonschema": {"name": "DataSourceJSONSchema", "description": "Extends DataSource with schema-parsing on JSON data."}}, "name": "datasource"}, "node-focusmanager": {"description": "<p>The Focus Manager Node Plugin makes it easy to manage focus among  \na Node's descendants.  Primarily intended to help with widget development, \nthe Focus Manager Node Plugin can be used to improve the keyboard \naccessibility of widgets.</p>\n<p>\nWhen designing widgets that manage a set of descendant controls (i.e. buttons\nin a toolbar, tabs in a tablist, menuitems in a menu, etc.) it is important to \nlimit the number of descendants in the browser's default tab flow.  The fewer \nnumber of descendants in the default tab flow, the easier it is for keyboard \nusers to navigate between widgets by pressing the tab key.  When a widget has \nfocus it should provide a set of shortcut keys (typically the arrow keys) \nto move focus among its descendants.\n</p>\n<p>\nTo this end, the Focus Manager Node Plugin makes it easy to define a Node's \nfocusable descendants, define which descendant should be in the default tab \nflow, and define the keys that move focus among each descendant.\nAdditionally, as the CSS \n<a href=\"http://www.w3.org/TR/CSS21/selector.html#x38\"><code>:focus</code></a> \npseudo class is not supported on all elements in all \n<a href=\"http://developer.yahoo.com/yui/articles/gbs/\">A-Grade browsers</a>,\nthe Focus Manager Node Plugin provides an easy, cross-browser means of \nstyling focus.\n</p>", "submodules": [], "classlist": ["plugin.NodeFocusManager"], "filelist": ["node-focusmanager-debug.js", "node-focusmanager-min.js", "node-focusmanager.js"], "subdata": {}, "name": "node-focusmanager"}, "aui-io": {"name": "aui-io", "submodules": ["aui-io-request", "aui-io-plugin"], "classlist": ["IORequest", "A.io", "A.Plugin.IO"], "filelist": ["aui-io-debug.js", "aui-io-min.js", "aui-io-plugin-debug.js", "aui-io-plugin-min.js", "aui-io-plugin.js", "aui-io-request-debug.js", "aui-io-request-min.js", "aui-io-request.js", "aui-io.js"], "subdata": {"aui-io-plugin": {"name": "A.Plugin.IO", "description": "The IOPlugin Utility - When plugged to a Node or Widget loads the content\nof a URI and set as its content, parsing the <code>script</code> tags if\npresent on the code."}, "aui-io-request": {"name": "A.io", "description": "The IORequest Utility - Provides response data normalization for XML, JSON,\nJavaScript and cache option."}}, "guessedname": "L", "guessedtype": "property", "description": "The IORequest Utility - Provides response data normalization for XML, JSON,\nJavaScript and cache option."}, "event-custom": {"description": "Custom event engine, DOM event listener abstraction layer, synthetic DOM\nevents.", "submodules": ["event-custom-base", "event-custom-complex"], "classlist": ["Do", "Do.Method", "Do.AlterArgs", "Do.AlterReturn", "Do.Halt", "Do.Prevent", "Do.Error", "EventHandle", "CustomEvent", "Subscriber", "EventTarget", "EventFacade"], "filelist": ["event-custom-base-debug.js", "event-custom-base-min.js", "event-custom-base.js", "event-custom-complex-debug.js", "event-custom-complex-min.js", "event-custom-complex.js", "event-custom-debug.js", "event-custom-min.js", "event-custom.js"], "subdata": {"event-custom-base": {"name": "EventTarget", "description": "Custom event engine, DOM event listener abstraction layer, synthetic DOM \nevents."}, "event-custom-complex": {"name": "EventFacade", "description": "Adds event facades, preventable default behavior, and bubbling.\nevents."}}, "guessedname": "evt", "guessedtype": "property", "name": "event-custom"}, "cookie": {"description": "Utilities for cookie management", "submodules": [], "classlist": ["Cookie"], "filelist": ["cookie-debug.js", "cookie-min.js", "cookie.js"], "subdata": {}, "name": "cookie"}, "history": {"description": "The Browser History Utility provides the ability to use the back/forward\nnavigation buttons in a DHTML application. It also allows a DHTML\napplication to be bookmarked in a specific state.\nThis utility requires the following static markup:\n&lt;iframe id=\"yui-history-iframe\" src=\"path-to-real-asset-in-same-domain\"&gt;&lt;/iframe&gt;\n&lt;input id=\"yui-history-field\" type=\"hidden\"&gt;", "submodules": [], "classlist": ["History", "History.Module"], "filelist": ["history-debug.js", "history-min.js", "history.js"], "subdata": {}, "name": "history"}, "oop": {"description": "Supplies object inheritance and manipulation utilities.  This adds\nadditional functionaity to what is provided in yui-base, and the\nmethods are applied directly to the YUI instance.  This module\nis required for most YUI components.", "submodules": [], "classlist": ["YUI~oop"], "filelist": ["oop-debug.js", "oop-min.js", "oop.js"], "subdata": {}, "guessedname": "L", "guessedtype": "property", "name": "oop"}}, "classmap": {"Paginator": {"name": "Paginator", "configs": {"pageReportLabelTemplate": {"default": "'({page} of {totalPages})'", "type": "String", "description": "Template for the\n<a href=\"Paginator.html#config_pageReportEl\">pageReportEl</a> content.\nNote the placeholders for the page {page} and the total pages\n{totalPages}.", "guessedname": "pageReportLabelTemplate", "guessedtype": "property"}, "prevPageLink": {"default": "Generated anchor element.", "type": "Node | String", "description": "The <a href=\"Node.html\">Node</a> or template to be used as the\nprev link element.", "guessedname": "prevPageLink", "guessedtype": "property"}, "pageLinkTemplate": {"default": "Generated anchor HTML element.", "type": "String", "description": "HTML Template for the link elements.", "guessedname": "pageLinkTemplate", "guessedtype": "property"}, "pageReportEl": {"default": "Generated span HTML element.", "type": "String", "description": "Node element to display the page report (i.e., (1 of 100)).", "guessedname": "pageReportEl", "guessedtype": "property"}, "prevPageLinkLabel": {"default": "'&lt; prev'", "type": "String", "description": "The label used as content of the\n<a href=\"Paginator.html#config_prevPageLink\">prevPageLink</a> element.", "guessedname": "prevPageLinkLabel", "guessedtype": "property"}, "pageLinkContent": {"default": "Basic function to set the html of the page element with the page number.", "type": "function", "description": "<p>Function which set the content of the each page element. The passed\nfunction receive as arguments the reference for the page element\nnode, the page number and the index of the page element.</p>\nExample:\n<pre><code>function(pageEl, pageNumber, index) {\npageEl.html(pageNumber);\n}</code></pre>", "guessedname": "pageLinkContent", "guessedtype": "property"}, "firstPageLinkLabel": {"default": "'first'", "type": "String", "description": "The label used as content of the\n<a href=\"Paginator.html#config_firstPageLink\">firstPageLink</a> element.", "guessedname": "firstPageLinkLabel", "guessedtype": "property"}, "rowsPerPageOptions": {"default": "[]", "type": "Array", "description": "Array to be displayed on the generated HTML Select element with the\n<a href=\"Paginator.html#config_rowsPerPage\">rowsPerPage</a>\ninformation. (i.e., [1,3,5,7], will display these values on the\nselect)", "guessedname": "rowsPerPageOptions", "guessedtype": "property"}, "total": {"default": "0", "type": "Number", "description": "Total number of records to paginate through.", "guessedname": "total", "guessedtype": "property"}, "totalLabel": {"default": "'(Total {total})'", "type": "String", "description": "The label markup to the total information.", "guessedname": "totalLabel", "guessedtype": "property"}, "state": {"default": "{}", "type": "Object", "description": "Generates information to the <code>changeRequest</code> event. See\n<a href=\"Paginator.html#method_changeRequest\">changeRequest</a>.", "guessedname": "state", "guessedtype": "property"}, "template": {"default": "'{FirstPageLink} {PrevPageLink} {PageLinks} {NextPageLink} {LastPageLink} {CurrentPageReport} {Total} {RowsPerPageSelect}'", "type": "String", "description": "Template used to render controls. The string will be used as\ninnerHTML on all specified container nodes. Bracketed keys (e.g.\n{pageLinks}) in the string will be replaced with an instance of the\nso named ui component.", "guessedname": "template", "guessedtype": "property"}, "firstPageLink": {"default": "Generated anchor element.", "type": "Node | String", "description": "The <a href=\"Node.html\">Node</a> or template to be used as the\nfirst link element.", "guessedname": "firstPageLink", "guessedtype": "property"}, "pageContainerTemplate": {"default": "Generated span HTML element.", "type": "String", "description": "HTML Template for the page links container.", "guessedname": "pageContainerTemplate", "guessedtype": "property"}, "containers": {"default": "null", "type": "Node | String", "description": "The Paginator controls UI could be displayed in more than one\ncontainer (i.e., in the header and footer of a list). Pass a\n<a href=\"NodeList.html\">NodeList</a> or a selector to grab the\ncontainers.", "guessedname": "containers", "guessedtype": "property"}, "lastPageLink": {"default": "Generated anchor element.", "type": "Node | String", "description": "The <a href=\"Node.html\">Node</a> or template to be used as the\nlast link element.", "guessedname": "lastPageLink", "guessedtype": "property"}, "nextPageLink": {"default": "Generated anchor element.", "type": "Node | String", "description": "The <a href=\"Node.html\">Node</a> or template to be used as the\nnext link element.", "guessedname": "nextPageLink", "guessedtype": "property"}, "maxPageLinks": {"default": "10", "type": "Number", "description": "The max number of page links to be displayed. If lower than the\ntotal number of pages they are still navigable using next and prev\nlinks.", "guessedname": "maxPageLinks", "guessedtype": "property"}, "rowsPerPageEl": {"default": "Generated select HTML element.", "type": "Node | String", "description": "Node element to display the\n<a href=\"Paginator.html#config_rowsPerPage\">rowsPerPage</a>.", "guessedname": "rowsPerPageEl", "guessedtype": "property"}, "nextPageLinkLabel": {"default": "'next &gt;'", "type": "String", "description": "The label used as content of the\n<a href=\"Paginator.html#config_nextPageLink\">nextPageLink</a> element.", "guessedname": "nextPageLinkLabel", "guessedtype": "property"}, "rowsPerPage": {"default": "1", "type": "Number", "description": "Number of records constituting a \"page\".", "guessedname": "rowsPerPage", "guessedtype": "property"}, "totalEl": {"default": "Generated span HTML element.", "type": "String", "description": "Node element to display the total information.", "guessedname": "totalEl", "guessedtype": "property"}, "totalPages": {"default": "0", "type": "Number", "description": "Number of pages. Calculated based on the\n<a href=\"Paginator.html#config_total\">total</a> divided by the\n<a href=\"Paginator.html#config_rowsPerPage\">rowsPerPage</a>.", "guessedname": "totalPages", "guessedtype": "property"}, "lastPageLinkLabel": {"default": "'last'", "type": "String", "description": "The label used as content of the\n<a href=\"Paginator.html#config_lastPageLink\">lastPageLink</a> element.", "guessedname": "lastPageLinkLabel", "guessedtype": "property"}, "page": {"default": "1", "type": "Number", "description": "Page to display on initial paint.", "guessedname": "page", "guessedtype": "property"}, "alwaysVisible": {"default": "true", "type": "boolean", "description": "If true the Paginator will be always visible, even when the number\nof pages is 0. To hide the paginator controls automatically when\nthere is no pages to display use <code>false</code>.", "guessedname": "alwaysVisible", "guessedtype": "property"}}, "constructors": [{"params": [{"type": "Object", "name": "config", "description": "  Object literal specifying widget configuration properties."}], "description": "<p><img src=\"assets/images/aui-paginator/main.png\"/></p>\nA base class for Paginator, providing:\n<ul>\n<li>Widget Lifecycle (initializer, renderUI, bindUI, syncUI, destructor)</li>\n<li>Set of controls to navigate through paged data</li>\n</ul>\nQuick Example:<br/>\n<pre><code>var instance = new A.Paginator({\ncontainers: '.paginatorA',\ntotal: 10,\nmaxPageLinks: 10,\nrowsPerPage: 1,\nrowsPerPageOptions: [ 1, 3, 5, 7 ]\n}).render();\n</code></pre>\nCheck the list of <a href=\"Paginator.html#configattributes\">Configuration Attributes</a> available for\nPaginator."}], "namespace": "", "module": "aui-paginator", "events": {"stateChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "stateChange", "description": "Fires when the value for the configuration attribute 'state' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "totalLabelChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "totalLabelChange", "description": "Fires when the value for the configuration attribute 'totalLabel' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "prevPageLinkChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "prevPageLinkChange", "description": "Fires when the value for the configuration attribute 'prevPageLink' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "firstPageLinkChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "firstPageLinkChange", "description": "Fires when the value for the configuration attribute 'firstPageLink' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "prevPageLinkLabelChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "prevPageLinkLabelChange", "description": "Fires when the value for the configuration attribute 'prevPageLinkLabel' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "templateChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "templateChange", "description": "Fires when the value for the configuration attribute 'template' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "rowsPerPageOptionsChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "rowsPerPageOptionsChange", "description": "Fires when the value for the configuration attribute 'rowsPerPageOptions' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "totalChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "totalChange", "description": "Fires when the value for the configuration attribute 'total' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "firstPageLinkLabelChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "firstPageLinkLabelChange", "description": "Fires when the value for the configuration attribute 'firstPageLinkLabel' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "rowsPerPageElChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "rowsPerPageElChange", "description": "Fires when the value for the configuration attribute 'rowsPerPageEl' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "pageChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "pageChange", "description": "Fires when the value for the configuration attribute 'page' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "pageLinkContentChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "pageLinkContentChange", "description": "Fires when the value for the configuration attribute 'pageLinkContent' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "lastPageLinkLabelChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "lastPageLinkLabelChange", "description": "Fires when the value for the configuration attribute 'lastPageLinkLabel' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "rowsPerPageChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "rowsPerPageChange", "description": "Fires when the value for the configuration attribute 'rowsPerPage' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "nextPageLinkLabelChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "nextPageLinkLabelChange", "description": "Fires when the value for the configuration attribute 'nextPageLinkLabel' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "pageReportLabelTemplateChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "pageReportLabelTemplateChange", "description": "Fires when the value for the configuration attribute 'pageReportLabelTemplate' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "alwaysVisibleChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "alwaysVisibleChange", "description": "Fires when the value for the configuration attribute 'alwaysVisible' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "totalPagesChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "totalPagesChange", "description": "Fires when the value for the configuration attribute 'totalPages' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "maxPageLinksChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "maxPageLinksChange", "description": "Fires when the value for the configuration attribute 'maxPageLinks' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "totalElChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "totalElChange", "description": "Fires when the value for the configuration attribute 'totalEl' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "pageLinkTemplateChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "pageLinkTemplateChange", "description": "Fires when the value for the configuration attribute 'pageLinkTemplate' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "lastPageLinkChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "lastPageLinkChange", "description": "Fires when the value for the configuration attribute 'lastPageLink' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "containersChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "containersChange", "description": "Fires when the value for the configuration attribute 'containers' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "pageReportElChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "pageReportElChange", "description": "Fires when the value for the configuration attribute 'pageReportEl' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "nextPageLinkChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "nextPageLinkChange", "description": "Fires when the value for the configuration attribute 'nextPageLink' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "pageContainerTemplateChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "pageContainerTemplateChange", "description": "Fires when the value for the configuration attribute 'pageContainerTemplate' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "guessedname": "Paginator", "methods": {"_setTotal": {"return": {"type": "Number", "description": ""}, "description": "Setter for <a href=\"Paginator.html#config_total\">total</a>.", "param": "{Number} v", "protected": "", "params": [{"type": "Number", "name": "v", "description": ""}], "guessedname": "_setTotal", "guessedtype": "function"}, "_getState": {"return": {"type": "Object", "description": "State object."}, "description": "Private getter for <a href=\"Paginator.html#config_state\">state</a>.", "param": "{Object} v Current state object.", "protected": "", "params": [{"type": "Object", "name": "v", "description": " Current state object."}], "guessedname": "_getState", "guessedtype": "function"}, "_beforeSetState": {"description": "Fires before the value of the\n<a href=\"Paginator.html#config_state\">state</a> attribute change.", "param": "{EventFacade} event", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "guessedname": "_beforeSetState", "guessedtype": "function"}, "setState": {"param": "{Object} v New state object.", "params": [{"type": "Object", "name": "v", "description": " New state object."}], "description": "Public setter for <a href=\"Paginator.html#config_state\">state</a>.", "guessedname": "setState", "guessedtype": "function"}, "_onClickPrevLinkEl": {"description": "Click event handler for the\n<a href=\"Paginator.html#config_prevLinkEl\">prevLinkEl</a>.", "param": "{EventFacade} event", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "guessedname": "_onClickPrevLinkEl", "guessedtype": "function"}, "hasNextPage": {"return": {"type": "boolean", "description": ""}, "description": "Check if there is a next page.", "guessedname": "hasNextPage", "guessedtype": "function"}, "_afterSetState": {"description": "Fires after the value of the\n<a href=\"Paginator.html#config_state\">state</a> attribute change.", "param": "{EventFacade} event", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "guessedname": "_afterSetState", "guessedtype": "function"}, "_setState": {"return": {"type": "Object", "description": ""}, "description": "Private setter for <a href=\"Paginator.html#config_state\">state</a>.", "param": "{Object} v New state object.", "protected": "", "params": [{"type": "Object", "name": "v", "description": " New state object."}], "guessedname": "_setState", "guessedtype": "function"}, "destructor": {"protected": "", "description": "Descructor lifecycle implementation for the Paginator class.\nPurges events attached to the node (and all child nodes).", "guessedname": "destructor", "guessedtype": "function"}, "hasPrevPage": {"return": {"type": "boolean", "description": ""}, "description": "Check if there is a previous page.", "guessedname": "hasPrevPage", "guessedtype": "function"}, "changeRequest": {"description": "Fires <a href=\"Paginator.html#event_changeRequest\">changeRequest</a>\nevent. This is the most important event because it's responsible to\nupdate the UI, invoked <code>.setState(newState)</code> to update the\nUI.", "guessedname": "changeRequest", "guessedtype": "function"}, "_getTemplate": {"return": {"type": "String", "description": "Current template."}, "description": "Getter for <a href=\"Paginator.html#config_template\">template</a>.", "param": "{String} v Current template.", "protected": "", "params": [{"type": "String", "name": "v", "description": " Current template."}], "guessedname": "_getTemplate", "guessedtype": "function"}, "bindUI": {"protected": "", "description": "Bind the events on the Paginator UI. Lifecycle.", "guessedname": "bindUI", "guessedtype": "function"}, "_delegateDOM": {"protected": "", "description": "Delegate DOM events on the Paginator UI.", "guessedname": "_delegateDOM", "guessedtype": "function"}, "_renderTemplateUI": {"protected": "", "description": "Render the UI controls based on the\n<a href=\"Paginator.html#config_template\">template</a>.", "guessedname": "_renderTemplateUI", "guessedtype": "function"}, "_bindDOMEvents": {"protected": "", "description": "Bind DOM events on the Paginator UI.", "guessedname": "_bindDOMEvents", "guessedtype": "function"}, "hasPage": {"return": {"type": "boolean", "description": ""}, "description": "Check if the <code>page</code> exists.", "param": "{Number} page", "params": [{"type": "Number", "name": "page", "description": ""}], "guessedname": "hasPage", "guessedtype": "function"}, "eachContainer": {"param": "{function} fn Callback", "params": [{"type": "function", "name": "fn", "description": " Callback"}], "description": "Loop through all\n<a href=\"Paginator.html#config_containers\">containers</a> and execute the\npassed callback.", "guessedname": "eachContainer", "guessedtype": "function"}, "_onClickPageLinkEl": {"description": "Click event handler for the\n<a href=\"Paginator.html#config_pageLinkEl\">pageLinkEl</a>.", "param": "{EventFacade} event", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "guessedname": "_onClickPageLinkEl", "guessedtype": "function"}, "syncUI": {"protected": "", "description": "Sync the Paginator UI. Lifecycle.", "guessedname": "syncUI", "guessedtype": "function"}, "_onClickFirstLinkEl": {"description": "Click event handler for the\n<a href=\"Paginator.html#config_firstLinkEl\">firstLinkEl</a>.", "param": "{EventFacade} event", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "guessedname": "_onClickFirstLinkEl", "guessedtype": "function"}, "_renderRowsPerPageOptions": {"protected": "", "description": "Render rows per page options.", "guessedname": "_renderRowsPerPageOptions", "guessedtype": "function"}, "_onClickLastLinkEl": {"description": "Click event handler for the\n<a href=\"Paginator.html#config_lastLinkEl\">lastLinkEl</a>.", "param": "{EventFacade} event", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "guessedname": "_onClickLastLinkEl", "guessedtype": "function"}, "_syncPageLinksUI": {"protected": "", "description": "Sync the Paginator links UI.", "guessedname": "_syncPageLinksUI", "guessedtype": "function"}, "_onClickNextLinkEl": {"description": "Click event handler for the\n<a href=\"Paginator.html#config_nextLinkEl\">nextLinkEl</a>.", "param": "{EventFacade} event", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "guessedname": "_onClickNextLinkEl", "guessedtype": "function"}, "calculateRange": {"return": {"type": "Object", "description": "Object containing the start and end information."}, "description": "Create a range to display on the pageLinks, keep the current page on\ncenter.", "param": "{Type} name description", "params": [{"type": "Type", "name": "name", "description": " description"}], "guessedname": "calculateRange", "guessedtype": "function"}, "renderUI": {"protected": "", "description": "Create the DOM structure for the Paginator. Lifecycle.", "guessedname": "renderUI", "guessedtype": "function"}}, "extends": "Base", "superclass": "Base", "file": "aui-paginator.js", "guessedtype": "property", "shortname": "Paginator", "properties": {"Paginator.NAME": {"type": "String", "static": "", "description": "Static property provides a string to identify the class.", "guessedname": "NAME", "guessedtype": "property"}, "templatesCache": {"protected": "", "type": "String", "description": "Cached template after <a href=\"YUI.html#method_substitute\">YUI\nsubstitute</a> were applied.", "guessedname": "templatesCache", "guessedtype": "property"}, "Paginator.ATTRS": {"type": "Object", "static": "", "description": "Static property used to define the default attribute\nconfiguration for the Paginator.", "guessedname": "ATTRS", "guessedtype": "property"}, "lastState": {"protected": "", "type": "Object | null", "description": "Store the last state object used on the <a href=\"Paginator.html#method_changeRequest\">changeRequest</a> event.", "guessedname": "lastState", "guessedtype": "property"}}, "description": "<p><img src=\"assets/images/aui-paginator/main.png\"/></p>\nA base class for Paginator, providing:\n<ul>\n<li>Widget Lifecycle (initializer, renderUI, bindUI, syncUI, destructor)</li>\n<li>Set of controls to navigate through paged data</li>\n</ul>\nQuick Example:<br/>\n<pre><code>var instance = new A.Paginator({\ncontainers: '.paginatorA',\ntotal: 10,\nmaxPageLinks: 10,\nrowsPerPage: 1,\nrowsPerPageOptions: [ 1, 3, 5, 7 ]\n}).render();\n</code></pre>\nCheck the list of <a href=\"Paginator.html#configattributes\">Configuration Attributes</a> available for\nPaginator."}, "NodeList": {"name": "NodeList", "constructors": [{"description": "The NodeList class provides a wrapper for manipulating DOM NodeLists.\nNodeList properties can be accessed via the set/get methods.\nUse Y.all() to retrieve NodeList instances."}], "namespace": "", "module": "node", "guessedname": "NodeList", "methods": {"set": {"see": "Node.set", "description": "Called on each Node instance"}, "removeAttribute": {"see": "Node.removeAttribute", "description": "Called on each Node instance"}, "getAttribute": {"return": {"type": "string", "description": "The attribute value"}, "see": "Node", "params": [{"type": "string", "name": "name", "description": " The attribute name"}], "description": "Allows getting attributes on DOM nodes, normalizing in some cases.\nThis passes through to the DOM node, allowing for custom attributes.", "param": "{string} name The attribute name"}, "getComputedStyle": {"return": {"type": "Array", "description": "The computed values for each node."}, "see": "Node.getComputedStyle", "params": [{"type": "String", "name": "attr", "description": " The style attribute to retrieve."}], "description": "Returns an array of the computed value for each node."}, "some": {"return": {"type": "Boolean", "description": "Whether or not the function returned true for any node."}, "description": "Executes the function once for each node until a true value is returned.", "param": "{Function} fn The function to apply. It receives 3 arguments:\nthe current node instance, the node's index, and the NodeList instance", "params": [{"type": "Function", "name": "fn", "description": " The function to apply. It receives 3 arguments:\nthe current node instance, the node's index, and the NodeList instance"}, {"type": "Object", "name": "context", "description": " optional An optional context to execute the function from.\nDefault context is the current Node instance"}], "guessedname": "some", "guessedtype": "function"}, "setStyle": {"see": "Node.setStyle", "params": [{"type": "String", "name": "attr", "description": " The style attribute to set."}, {"type": "String|Number", "name": "val", "description": " The value."}], "chainable": "", "description": "Sets a style property on each node."}, "remove": {"see": "Node.remove", "description": "Called on each Node instance"}, "setStyles": {"see": "Node.setStyles", "params": [{"type": "Object", "name": "hash", "description": " An object literal of property:value pairs."}], "chainable": "", "description": "Sets multiple style properties on each node."}, "odd": {"return": {"type": "NodeList", "description": "NodeList containing the updated collection"}, "description": "Creates a new NodeList containing all nodes at odd indices\n(zero-based index).", "guessedname": "odd", "guessedtype": "function"}, "setContent": {"see": "Node.setContent", "description": "Called on each Node instance"}, "append": {"see": "Node.append", "description": "Called on each Node instance"}, "size": {"return": {"type": "Int", "description": "The number of items in the NodeList."}, "description": "Returns the current number of items in the NodeList.", "guessedname": "size", "guessedtype": "function"}, "even": {"return": {"type": "NodeList", "description": "NodeList containing the updated collection"}, "description": "Creates a new NodeList containing all nodes at even indices\n(zero-based index), including zero.", "guessedname": "even", "guessedtype": "function"}, "toFrag": {"return": {"type": "", "description": "Node a Node instance bound to the documentFragment"}, "description": "Creates a documenFragment from the nodes bound to the NodeList instance", "guessedname": "toFrag", "guessedtype": "function"}, "get": {"see": "Node", "description": "Called on each Node instance", "guessedname": "get", "guessedtype": "function"}, "replaceClass": {"see": "Node.replaceClass", "params": [{"type": "String", "name": "oldClassName", "description": " the class name to be replaced"}, {"type": "String", "name": "newClassName", "description": " the class name that will be replacing the old class name"}], "chainable": "", "param": "{String} oldClassName the class name to be replaced", "description": "Replace a class with another class for each node.\nIf no oldClassName is present, the newClassName is simply added."}, "prepend": {"see": "Node.prepend", "description": "Called on each Node instance"}, "isEmpty": {"return": {"type": "Boolean", "description": "Whether or not the NodeList is bound to any nodes"}, "description": "Determines if the instance is bound to any nodes", "guessedname": "isEmpty", "guessedtype": "function"}, "toggleClass": {"see": "Node.toggleClass", "params": [{"type": "String", "name": "className", "description": " the class name to be toggled"}], "chainable": "", "param": "{String} className the class name to be toggled", "description": "If the className exists on the node it is removed, if it doesn't exist it is added."}, "modulus": {"return": {"type": "NodeList", "description": "NodeList containing the updated collection"}, "description": "Creates a new NodeList containing all nodes at every n indices, where \nremainder n % index equals r.\n(zero-based index).", "param": "{Int} n The offset to use (return every nth node)", "params": [{"type": "Int", "name": "n", "description": " The offset to use (return every nth node)"}, {"type": "Int", "name": "r", "description": " An optional remainder to use with the modulus operation (defaults to zero)"}], "guessedname": "modulus", "guessedtype": "function"}, "addClass": {"see": "Node.addClass", "params": [{"type": "String", "name": "className", "description": " the class name to add to the node's class attribute"}], "chainable": "", "param": "{String} className the class name to add to the node's class attribute", "description": "Adds a class name to each node."}, "removeClass": {"see": "Node.removeClass", "params": [{"type": "String", "name": "className", "description": " the class name to remove from the node's class attribute"}], "chainable": "", "param": "{String} className the class name to remove from the node's class attribute", "description": "Removes a class name from each node."}, "insert": {"see": "NodeInsert", "description": "Called on each Node instance"}, "indexOf": {"return": {"type": "Int", "description": "the index of the node value or -1 if not found"}, "description": "Returns the index of the node in the NodeList instance\nor -1 if the node isn't found.", "param": "{Y.Node || DOMNode} node the node to search for", "params": [{"type": "Y.Node || DOMNode", "name": "node", "description": " the node to search for"}], "guessedname": "indexOf", "guessedtype": "function"}, "after": {"return": {"type": "Object", "description": "Returns an event handle that can later be use to detach()."}, "description": "Applies an event listener to each Node bound to the NodeList. \nThe handler is called only after all on() handlers are called\nand the event is not prevented.", "param": "{String} type The event being listened for", "see": "Event.on", "params": [{"type": "String", "name": "type", "description": " The event being listened for"}, {"type": "Function", "name": "fn", "description": " The handler to call when the event fires"}, {"type": "Object", "name": "context", "description": " The context to call the handler with.\nDefault is the NodeList instance."}], "guessedname": "after", "guessedtype": "function"}, "getStyle": {"return": {"type": "Array", "description": "The current values of the style property for the element."}, "see": "Node.getStyle", "params": [{"type": "String", "name": "attr", "description": " The style attribute to retrieve."}], "description": "Returns an array of values for each node."}, "detach": {"see": "Node.detach", "description": "Called on each Node instance"}, "NodeList.getDOMNodes": {"return": {"type": "Array", "description": "The array of DOM nodes bound to the NodeList"}, "description": "Retrieves the DOM nodes bound to a NodeList instance", "param": "{Y.NodeList} node The NodeList instance", "static": "", "guessedname": "getDOMNodes", "guessedtype": "function", "params": [{"type": "Y.NodeList", "name": "node", "description": " The NodeList instance"}]}, "on": {"return": {"type": "Object", "description": "Returns an event handle that can later be use to detach()."}, "description": "Applies an event listener to each Node bound to the NodeList.", "param": "{String} type The event being listened for", "see": "Event.on", "params": [{"type": "String", "name": "type", "description": " The event being listened for"}, {"type": "Function", "name": "fn", "description": " The handler to call when the event fires"}, {"type": "Object", "name": "context", "description": " The context to call the handler with.\nDefault is the NodeList instance."}], "guessedname": "on", "guessedtype": "function"}, "setAttribute": {"chainable": "", "param": "{string} name The attribute name", "params": [{"type": "string", "name": "name", "description": " The attribute name"}, {"type": "string", "name": "value", "description": " The value to set"}], "description": "Allows setting attributes on DOM nodes, normalizing in some cases.\nThis passes through to the DOM node, allowing for custom attributes.", "see": "Node"}, "refresh": {"chainable": "", "description": "Reruns the initial query, when created using a selector query", "guessedname": "refresh", "guessedtype": "function"}, "detachAll": {"see": "Node.detachAll", "description": "Called on each Node instance"}, "filter": {"return": {"type": "NodeList", "description": "NodeList containing the updated collection"}, "description": "Filters the NodeList instance down to only nodes matching the given selector.", "param": "{String} selector The selector to filter against", "see": "Selector", "params": [{"type": "String", "name": "selector", "description": " The selector to filter against"}], "guessedname": "filter", "guessedtype": "function"}, "item": {"return": {"type": "Node", "description": "The Node instance at the given index."}, "description": "Retrieves the Node instance at the given index.", "param": "{Number} index The index of the target Node.", "params": [{"type": "Number", "name": "index", "description": " The index of the target Node."}], "guessedname": "item", "guessedtype": "function"}, "each": {"description": "Applies the given function to each Node in the NodeList.", "chainable": "", "param": "{Function} fn The function to apply. It receives 3 arguments:\nthe current node instance, the node's index, and the NodeList instance", "params": [{"type": "Function", "name": "fn", "description": " The function to apply. It receives 3 arguments:\nthe current node instance, the node's index, and the NodeList instance"}, {"type": "Object", "name": "context", "description": " optional An optional context to apply the function with\nDefault context is the current Node instance"}], "guessedname": "each", "guessedtype": "function"}, "hasClass": {"return": {"type": "Array", "description": "An array of booleans for each node bound to the NodeList."}, "see": "Node.hasClass", "params": [{"type": "String", "name": "className", "description": " the class name to search for"}], "description": "Determines whether each node has the given className.", "param": "{String} className the class name to search for"}}, "file": "node-debug.js", "guessedtype": "function", "shortname": "NodeList", "properties": {"_nodes": {"private": "", "description": "The underlying array of DOM nodes bound to the Y.NodeList instance", "guessedname": "_nodes", "guessedtype": "property"}}, "description": "The NodeList class provides a wrapper for manipulating DOM NodeLists.\nNodeList properties can be accessed via the set/get methods.\nUse Y.all() to retrieve NodeList instances."}, "A.Plugin.IO": {"name": "A.Plugin.IO", "configs": {"node": {"default": "null", "type": "Node | String", "description": "Plug IO in any object we want, the setContent will use the node to\nset the content.", "guessedname": "node", "guessedtype": "property"}, "showLoading": {"default": "true", "type": "boolean", "description": "Show the <a href=\"LoadingMask.html\">LoadingMask</a> covering the <a\nhref=\"A.Plugin.IO.html#config_node\">node</a> while loading.", "guessedname": "showLoading", "guessedtype": "property"}, "parseContent": {"default": "true", "type": "boolean", "description": "If true the <a href=\"ParseContent.html\">ParseContent</a> plugin\nwill be plugged to the <a href=\"A.Plugin.IO.html#config_node\">node</a>.", "guessedname": "parseContent", "guessedtype": "property"}, "where": {"default": "StdMod.REPLACE", "type": "String", "description": "Where to insert the content, AFTER, BEFORE or REPLACE.", "guessedname": "where", "guessedtype": "property"}, "section": {"default": "StdMod.BODY", "type": "String", "description": "Section where the content will be set in case you are plugging it\non a instace of <a href=\"WidgetStdMod.html\">WidgetStdMod</a>.", "guessedname": "section", "guessedtype": "property"}, "failureMessage": {"default": "'Failed to retrieve content'", "type": "String", "description": "Message to be set on the content when the transaction fails.", "guessedname": "failureMessage", "guessedtype": "property"}, "type": {"description": "Type of the <code>instance</code> we are pluggin the A.Plugin.IO.\nCould be a Node, or a Widget.", "default": "'Node'", "readonly": "", "guessedname": "type", "guessedtype": "property", "type": "String"}, "loadingMask": {"default": "{}", "type": "Object", "description": "Options passed to the <a href=\"LoadingMask.html\">LoadingMask</a>.", "guessedname": "loadingMask", "guessedtype": "property"}}, "constructors": [{"params": [{"type": "Object", "name": "config", "description": "  Object literal specifying widget configuration properties."}], "description": "A base class for IOPlugin, providing:\n<ul>\n<li>Loads the content of a URI as content of a Node or Widget</li>\n<li>Use <a href=\"ParseContent.html\">ParseContent</a> to parse the JavaScript tags from the content and evaluate them</li>\n</ul>\nQuick Example:<br/>\n<pre><code>A.one('#content').plug(A.Plugin.IO, { uri: 'assets/content.html', method: 'GET' });</code></pre>\nCheck the list of <a href=\"A.Plugin.IO.html#configattributes\">Configuration Attributes</a> available for\nIOPlugin."}], "namespace": "", "module": "aui-io", "events": {"loadingMaskChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "loadingMaskChange", "description": "Fires when the value for the configuration attribute 'loadingMask' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "failureMessageChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "failureMessageChange", "description": "Fires when the value for the configuration attribute 'failureMessage' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "nodeChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "nodeChange", "description": "Fires when the value for the configuration attribute 'node' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "parseContentChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "parseContentChange", "description": "Fires when the value for the configuration attribute 'parseContent' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "showLoadingChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "showLoadingChange", "description": "Fires when the value for the configuration attribute 'showLoading' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "typeChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "typeChange", "description": "Fires when the value for the configuration attribute 'type' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "sectionChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "sectionChange", "description": "Fires when the value for the configuration attribute 'section' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "whereChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "whereChange", "description": "Fires when the value for the configuration attribute 'where' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "guessedname": "IOPlugin", "methods": {"showLoading": {"description": "Invoke the <a href=\"OverlayMask.html#method_show\">OverlayMask show</a> method.", "guessedname": "showLoading", "guessedtype": "function"}, "_successHandler": {"description": "Internal success callback for the IO transaction.", "param": "{EventFavade} event", "protected": "", "params": [{"type": "EventFavade", "name": "event", "description": ""}, {"type": "String", "name": "id", "description": " Id of the IO transaction."}, {"type": "Object", "name": "obj", "description": " XHR transaction Object."}], "guessedname": "_successHandler", "guessedtype": "function"}, "_failureHandler": {"description": "Internal failure callback for the IO transaction.", "param": "{EventFavade} event", "protected": "", "params": [{"type": "EventFavade", "name": "event", "description": ""}, {"type": "String", "name": "id", "description": " Id of the IO transaction."}, {"type": "Object", "name": "obj", "description": " XHR transaction Object."}], "guessedname": "_failureHandler", "guessedtype": "function"}, "_bindParseContent": {"protected": "", "description": "Bind the ParseContent plugin on the <code>instance</code>.", "guessedname": "_bindParseContent", "guessedtype": "function"}, "_setLoadingUI": {"description": "Whether the <code>show</code> is true show the LoadingMask.", "param": "{boolean} show", "protected": "", "params": [{"type": "boolean", "name": "show", "description": ""}], "guessedname": "_setLoadingUI", "guessedtype": "function"}, "_getContentSetterByType": {"protected": "", "return": {"type": "function", "description": ""}, "description": "Get the appropriated <a\nhref=\"A.Plugin.IO.html#method_setContent\">setContent</a> function\nimplementation for each <a href=\"A.Plugin.IO.html#config_type\">type</a>.", "guessedname": "_getContentSetterByType", "guessedtype": "function"}, "hideLoading": {"description": "Invoke the <a href=\"OverlayMask.html#method_hide\">OverlayMask hide</a> method.", "guessedname": "hideLoading", "guessedtype": "function"}, "_autoStart": {"protected": "", "description": "Invoke the <code>start</code> method (autoLoad attribute).", "guessedname": "_autoStart", "guessedtype": "function"}, "start": {"description": "Overload to the <a href=\"IORequest.html#method_start\">IORequest\nstart</a> method. Check if the <code>host</code> is already rendered,\notherwise wait to after render phase and to show the LoadingMask.", "guessedname": "start", "guessedtype": "function"}, "_syncLoadingMaskUI": {"protected": "", "description": "Sync the loading mask UI.", "guessedname": "_syncLoadingMaskUI", "guessedtype": "function"}, "_onActiveChange": {"description": "Fires after the value of the\n<a href=\"A.Plugin.IO.html#config_active\">active</a> attribute change.", "param": "{EventFacade} event", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "guessedname": "_onActiveChange", "guessedtype": "function"}, "bindUI": {"protected": "", "description": "Bind the events on the A.Plugin.IO UI. Lifecycle.", "guessedname": "bindUI", "guessedtype": "function"}, "setContent": {"description": "Set the content of the <a href=\"A.Plugin.IO.html#config_node\">node</a>.", "guessedname": "setContent", "guessedtype": "function"}}, "extends": "IORequest", "superclass": "IORequest", "file": "aui-io.js", "guessedtype": "property", "shortname": "A.Plugin.IO", "properties": {"A.Plugin.IO.ATTRS": {"type": "Object", "static": "", "description": "Static property used to define the default attribute\nconfiguration for the A.Plugin.IO.", "guessedname": "ATTRS", "guessedtype": "property"}, "A.Plugin.IO.NAME": {"type": "String", "static": "", "description": "Static property provides a string to identify the class.", "guessedname": "NAME", "guessedtype": "property"}, "A.Plugin.IO.NS": {"type": "String", "static": "", "description": "Static property provides a string to identify the namespace.", "guessedname": "NS", "guessedtype": "property"}}, "description": "A base class for IOPlugin, providing:\n<ul>\n<li>Loads the content of a URI as content of a Node or Widget</li>\n<li>Use <a href=\"ParseContent.html\">ParseContent</a> to parse the JavaScript tags from the content and evaluate them</li>\n</ul>\nQuick Example:<br/>\n<pre><code>A.one('#content').plug(A.Plugin.IO, { uri: 'assets/content.html', method: 'GET' });</code></pre>\nCheck the list of <a href=\"A.Plugin.IO.html#configattributes\">Configuration Attributes</a> available for\nIOPlugin."}, "Plugin.DDWindowScroll": {"properties": {"NS": {"description": "The Scroll instance will be placed on the Drag instance under the winscroll namespace.", "default": "winscroll", "readonly": "", "protected": "", "static": "", "guessedname": "NAME", "guessedtype": "property", "type": "{String}"}}, "name": "Plugin.DDWindowScroll", "constructors": [{"description": "Extends the Scroll class to make the window scroll while dragging."}], "namespace": "Plugin", "module": "dd", "events": {"windowScrollChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "windowScrollChange", "description": "Fires when the value for the configuration attribute 'windowScroll' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "guessedname": "WS", "extends": "DD.Scroll", "superclass": "DD.Scroll", "file": "dd.js", "guessedtype": "function", "shortname": "DDWindowScroll", "configs": {"windowScroll": {"type": "Boolean", "description": "Turn on window scroll support, default: true", "guessedname": "windowScroll", "guessedtype": "property"}}, "description": "Extends the Scroll class to make the window scroll while dragging."}, "DOMEventFacade": {"name": "DOMEventFacade", "namespace": "", "module": "event", "methods": {"resolve": {"private": "", "description": "Returns a wrapped node.  Intended to be used on event targets,\nso it will return the node's parent if the target is a text\nnode.\nIf accessing a property of the node throws an error, this is\nprobably the anonymous div wrapper Gecko adds inside text\nnodes.  This likely will only occur when attempting to access\nthe relatedTarget.  In this case, we now return null because\nthe anonymous div is completely useless and we do not know\nwhat the related target was because we can't even get to\nthe element's parent node.", "guessedname": "resolve", "guessedtype": "function"}, "preventDefault": {"param": "returnValue {string} sets the returnValue of the event to this value\n(rather than the default false value).  This can be used to add a customized \nconfirmation query to the beforeunload event).", "params": [{"type": "string", "name": "returnValue", "description": "  sets the returnValue of the event to this value\n(rather than the default false value).  This can be used to add a customized \nconfirmation query to the beforeunload event)."}], "description": "Prevents the event's default behavior", "guessedname": "preventDefault", "guessedtype": "function"}, "stopPropagation": {"description": "Stops the propagation to the next bubble target", "guessedname": "stopPropagation", "guessedtype": "function"}, "stopImmediatePropagation": {"description": "Stops the propagation to the next bubble target and\nprevents any additional listeners from being exectued\non the current target.", "guessedname": "stopImmediatePropagation", "guessedtype": "function"}, "halt": {"param": "immediate {boolean} if true additional listeners\non the current target will not be executed", "params": [{"type": "boolean", "name": "immediate", "description": "  if true additional listeners\non the current target will not be executed"}], "description": "Stops the event propagation and prevents the default\nevent behavior.", "guessedname": "halt", "guessedtype": "function"}}, "param": "ev {Event} the DOM event", "file": "event.js", "shortname": "DOMEventFacade", "properties": {"webkitKeymap": {"private": "", "description": "webkit key remapping required for Safari < 3.1", "guessedname": "webkitKeymap", "guessedtype": "property"}, "which": {"type": "int", "description": "The button that was pushed.  Same as button.", "guessedname": "which", "guessedtype": "property"}, "relatedTarget": {"type": "Node", "propery": "relatedTarget", "description": "Node reference to the relatedTarget", "guessedname": "relatedTarget", "guessedtype": "property"}, "button": {"type": "int", "description": "The button that was pushed.", "guessedname": "button", "guessedtype": "property"}, "_event": {"description": "The native event", "guessedname": "_event", "guessedtype": "property"}, "wheelDelta": {"type": "int", "description": "Number representing the direction and velocity of the movement of the mousewheel.\nNegative is down, the higher the number, the faster.  Applies to the mousewheel event.", "guessedname": "type", "guessedtype": "property"}, "currentTarget": {"type": "Node", "propery": "currentTarget", "description": "Node reference for the element that the listener was attached to.", "guessedname": "currentTarget", "guessedtype": "property"}, "pageX": {"type": "int", "description": "The X location of the event on the page (including scroll)", "guessedname": "pageX", "guessedtype": "property"}, "pageY": {"type": "int", "description": "The Y location of the event on the page (including scroll)", "guessedname": "pageY", "guessedtype": "property"}, "charCode": {"type": "int", "description": "The charCode for key events.  Same as keyCode", "guessedname": "charCode", "guessedtype": "property"}, "keyCode": {"type": "int", "description": "The keyCode for key events.  Uses charCode if keyCode is not available", "guessedname": "keyCode", "guessedtype": "property"}, "target": {"type": "Node", "propery": "target", "description": "Node reference for the targeted element", "guessedname": "target", "guessedtype": "property"}}, "description": "Wraps a DOM event, properties requiring browser abstraction are\nfixed here.  Provids a security layer when required."}, "plugin.NodeFocusManager": {"name": "plugin.NodeFocusManager", "namespace": "plugin", "module": "node-focusmanager", "events": {"circularChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "circularChange", "description": "Fires when the value for the configuration attribute 'circular' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "keysChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "keysChange", "description": "Fires when the value for the configuration attribute 'keys' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "focusClassChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "focusClassChange", "description": "Fires when the value for the configuration attribute 'focusClass' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "activeDescendantChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "activeDescendantChange", "description": "Fires when the value for the configuration attribute 'activeDescendant' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "focusedChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "focusedChange", "description": "Fires when the value for the configuration attribute 'focused' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "descendantsChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "descendantsChange", "description": "Fires when the value for the configuration attribute 'descendants' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "guessedname": "NodeFocusManager", "methods": {"_onDocMouseDown": {"description": "\"mousedown\" event handler for the owner document of the \nFocus Manager's Node.", "param": "event {Object} Object representing the DOM event.", "protected": "", "params": [{"type": "Object", "name": "event", "description": "  Object representing the DOM event."}], "guessedname": "_onDocMouseDown", "guessedtype": "function"}, "_detachEventHandlers": {"protected": "", "description": "Detaches all event handlers used by the Focus Manager.", "guessedname": "_detachEventHandlers", "guessedtype": "function"}, "_preventScroll": {"protected": "", "description": "Prevents the viewport from scolling when the user presses \nthe up, down, left, or right key.", "guessedname": "_preventScroll", "guessedtype": "function"}, "_focusPrevious": {"description": "Keydown event handler that moves focus to the previous \nenabled descendant.", "param": "event {Object} Object representing the DOM event.", "protected": "", "params": [{"type": "Object", "name": "event", "description": "  Object representing the DOM event."}, {"type": "Number", "name": "activeDescendant", "description": "  Number representing the index of the \nnext descendant to be focused."}], "guessedname": "_focusPrevious", "guessedtype": "function"}, "_onDocFocus": {"description": "\"focus\" event handler for the owner document of the \nFocus Manager's Node.", "param": "event {Object} Object representing the DOM event.", "protected": "", "params": [{"type": "Object", "name": "event", "description": "  Object representing the DOM event."}], "guessedname": "_onDocFocus", "guessedtype": "function"}, "_initDescendants": {"protected": "", "description": "Sets the <code>tabIndex</code> attribute of all of the \ndescendants to -1, except the active descendant, whose \n<code>tabIndex</code> attribute is set to 0.", "guessedname": "_initDescendants", "guessedtype": "function"}, "_afterActiveDescendantChange": {"description": "afterChange event handler for the \n\"activeDescendant\" attribute.", "param": "event {Object} Object representing the change event.", "protected": "", "params": [{"type": "Object", "name": "event", "description": "  Object representing the change event."}], "guessedname": "_afterActiveDescendantChange", "guessedtype": "function"}, "_focusNext": {"description": "Keydown event handler that moves focus to the next \nenabled descendant.", "param": "event {Object} Object representing the DOM event.", "protected": "", "params": [{"type": "Object", "name": "event", "description": "  Object representing the DOM event."}, {"type": "Number", "name": "activeDescendant", "description": "  Number representing the index of the \nnext descendant to be focused"}], "guessedname": "_focusNext", "guessedtype": "function"}, "blur": {"description": "Blurs the current active descendant and sets the \n<code>focused</code> attribute to false.", "guessedname": "blur", "guessedtype": "function"}, "stop": {"description": "Disables the Focus Manager by detaching all event handlers.", "guessedname": "stop", "guessedtype": "function"}, "focus": {"param": "index {Number} Optional. Number representing the index of the \ndescendant to be set as the active descendant.", "params": [{"type": "Number", "name": "index", "description": "  Optional. Number representing the index of the \ndescendant to be set as the active descendant."}, {"type": "Node", "name": "index", "description": "  Optional. Node instance representing the \ndescendant to be set as the active descendant."}], "description": "Focuses the active descendant and sets the  \n<code>focused</code> attribute to true.", "guessedname": "focus", "guessedtype": "function"}, "refresh": {"description": "Refreshes the Focus Manager's descendants by re-executing the \nCSS selector query specified by the <code>descendants</code> attribute.", "guessedname": "refresh", "guessedtype": "function"}, "start": {"description": "Enables the Focus Manager.", "guessedname": "start", "guessedtype": "function"}, "_removeFocusClass": {"protected": "", "description": "Removes the class name representing focus (as specified by \nthe \"focusClass\" attribute) from the Node instance to which it is \ncurrently applied.", "guessedname": "_removeFocusClass", "guessedtype": "function"}, "_isDescendant": {"return": {"type": "Boolean", "description": "Boolean indicating if the specified Node instance is a \ndescendant managed by the Focus Manager."}, "description": "Determines if the specified Node instance is a descendant\nmanaged by the Focus Manager.", "param": "node {Node} Node instance to be checked.", "protected": "", "params": [{"type": "Node", "name": "node", "description": "  Node instance to be checked."}], "guessedname": "_isDescendant", "guessedtype": "function"}, "_detachKeyHandler": {"protected": "", "description": "Detaches the \"key\" event handlers used to support the \"keys\"\nattribute.", "guessedname": "_detachKeyHandler", "guessedtype": "function"}, "_attachKeyHandler": {"protected": "", "description": "Attaches the \"key\" event handlers used to support the \"keys\"\nattribute.", "guessedname": "_attachKeyHandler", "guessedtype": "function"}}, "file": "node-focusmanager.js", "guessedtype": "function", "shortname": "NodeFocusManager", "configs": {"descendants": {"type": "Y.NodeList", "description": "String representing the CSS selector used to define the descendant Nodes \nwhose focus should be managed.", "guessedname": "descendants", "guessedtype": "property"}, "keys": {"type": "Object", "description": "Object literal representing the keys to be used to navigate between the \nnext/previous descendant.  The format for the attribute's value is \n<code>{ next: \"down:40\", previous: \"down:38\" }</code>.  The value for the \n\"next\" and \"previous\" properties are used to attach \n<a href=\"event/#keylistener\"><code>key</code></a> event listeners. See \nthe <a href=\"event/#keylistener\">Using the key Event</a> section of \nthe Event documentation for more information on \"key\" event listeners.", "guessedname": "keys", "guessedtype": "property"}, "focusClass": {"type": "String|Object", "description": "String representing the name of class applied to the focused active  \ndescendant Node.  Can also be an object literal used to define both the \nclass name, and the Node to which the class should be applied.  If using \nan object literal, the format is:\n<code>{ className: \"focus\", fn: myFunction }</code>.  The function \nreferenced by the <code>fn</code> property in the object literal will be\npassed a reference to the currently focused active descendant Node.", "guessedname": "focusClass", "guessedtype": "property"}, "focused": {"description": "Boolean indicating that one of the descendants is focused.", "default": "false", "readonly": "", "guessedname": "focused", "guessedtype": "property", "type": "boolean"}, "activeDescendant": {"type": "Number", "description": "<p>Node, or index of the Node, representing the descendant that is either \nfocused or is focusable (<code>tabIndex</code> attribute is set to 0).  \nThe value cannot represent a disabled descendant Node.  Use a value of -1\nto remove all descendant Nodes from the default tab flow.\nIf no value is specified, the active descendant will be inferred using \nthe following criteria:</p>\n<ol>\n<li>Examining the <code>tabIndex</code> attribute of each descendant and \nusing the first descendant whose <code>tabIndex</code> attribute is set \nto 0</li>\n<li>If no default can be inferred then the value is set to either 0 or \nthe index of the first enabled descendant.</li>\n</ol>", "guessedname": "activeDescendant", "guessedtype": "property"}, "circular": {"type": "Boolean", "description": "Boolean indicating if focus should be set to the first/last descendant \nwhen the end or beginning of the descendants has been reached.", "guessedname": "circular", "guessedtype": "property"}}, "description": "The NodeFocusManager class is a plugin for a Node instance.  The class is used \nvia the <a href=\"Node.html#method_plug\"><code>plug</code></a> method of Node \nand should not be instantiated directly."}, "YUI": {"global": "", "name": "YUI", "configs": {"max": {"default": "100", "type": "{ Number }", "description": "The value associated with the farthest bottom, right position of the\nDrag element within its constraining element.  Can be less than\nthe configured <code>min</code> if you want values to increase from\nright-to-left or bottom-to-top.", "guessedname": "max", "guessedtype": "property"}, "host": {"guessedtype": "property", "type": "{ Object }", "description": "The host Drag instance.", "guessedname": "host", "writeonce": ""}, "min": {"default": "0", "type": "{ Number }", "description": "The value associated with the farthest top, left position of the\nDrag element within its constraining element.  Can be greater than\nthe configured <code>max</code> if you want values to increase from\nright-to-left or bottom-to-top.", "guessedname": "min", "guessedtype": "property"}, "value": {"default": "(inferred from current Drag position)", "type": "{ Number }", "description": "The value associated with the Drag element's current position along\nthe axis configured in <code>axis</code>.  Defaults to the\nvalue inferred from the Drag element's current position.  Specifying\nvalue in the constructor will move the Drag node to the position\nthat corresponds to the supplied value.", "guessedname": "value", "guessedtype": "property"}, "axis": {"guessedtype": "property", "type": "{ String }", "description": "Which movement axis to monitor for value association.  Allowable\nvalues are &quot;x&quot; and &quot;y&quot;.  This will default based\non the host Drag instance's configured <code>stickX</code> or\n<code>stickY</code> (via DDConstrained config), or &quot;x&quot; if\nneither is defined.", "guessedname": "axis", "writeonce": ""}}, "constructors": [{"params": [{"type": "", "name": "o*", "description": " 0..n optional configuration objects.  these values\nare store in Y.config.  See config for the list of supported \nproperties."}], "description": "The YUI global namespace object.  If YUI is already defined, the\nexisting YUI object will not be overwritten so that defined\nnamespaces are preserved.  It is the constructor for the object\nthe end user interacts with.  As indicated below, each instance\nhas full custom event support, but only if the event system \nis available."}], "namespace": "", "module": "yui", "properties": {"isSafari": {"description": "Safari detection", "deprecated": "use Y.Env.UA.webkit", "private": "", "static": "", "guessedname": "isSafari", "guessedtype": "property"}, "DDValue._AXIS_KEYS": {"description": "Object property names used for respective X and Y axis accessors (e.g.\n&quot;width&quot; vs. &quot;height&quot; for referencing the\nconstraining element's appropriate dimension.)", "protected": "", "static": "", "guessedname": "_AXIS_KEYS", "guessedtype": "property", "type": "Object"}, "webkitKeymap": {"description": "Normalized keycodes for webkit/safari", "private": "", "static": "", "guessedname": "webkitKeymap", "guessedtype": "property", "type": "{int: int}", "final": ""}, "_key": {"protected": "", "type": "{ Object }", "description": "Map to property names based on <code>axis</code> for use in\ncalculation and accessing event info.", "guessedname": "_key", "guessedtype": "property"}, "Global": {"type": "EventTarget", "description": "Hosts YUI page level events.  This is where events bubble to\nwhen the broadcast config is set to 2.  This property is\nonly available if the custom event module is loaded.", "guessedname": "Global", "guessedtype": "property"}, "_factor": {"protected": "", "type": "{ Number }", "description": "Factor used to translate value -&gt; position -&gt; value.", "guessedname": "_factor", "guessedtype": "property"}, "DDValue.NAME": {"description": "Name of the plugin", "default": "\"ddValue\"", "readonly": "", "protected": "", "static": "", "guessedname": "NAME", "guessedtype": "property", "type": "{String}"}, "YAHOO.util.CustomEvent.FLAT": {"type": "int", "static": "", "description": "Subscriber listener sigature constant.  The FLAT type returns two\nparameters: the first argument passed to fire and the optional \ncustom object", "guessedname": "FLAT", "guessedtype": "property"}, "_evtGuid": {"protected": "", "type": "{ String }", "description": "Detach category for internal events to aid in cleanup.", "guessedname": "_evtGuid", "guessedtype": "property"}, "isIE": {"description": "IE detection", "deprecated": "use Y.Env.UA.ie", "private": "", "static": "", "guessedname": "isIE", "guessedtype": "property"}, "ATTRS": {"description": "Plugin attributes.", "protected": "", "static": "", "guessedname": "ATTRS", "guessedtype": "property", "type": "{Object}"}, "webkit": {"description": "webkit version", "deprecated": "use Y.Env.UA.webkit", "private": "", "static": "", "guessedname": "webkit", "guessedtype": "property", "type": "string"}, "NS": {"description": "Namespace for the plugin", "default": "\"val\"", "protected": "", "static": "", "guessedname": "NS", "guessedtype": "property", "type": "{String}"}, "YAHOO.util.CustomEvent.LIST": {"type": "int", "static": "", "description": "Subscriber listener sigature constant.  The LIST type returns three\nparameters: the event type, the array of args passed to fire, and\nthe optional custom object", "guessedname": "LIST", "guessedtype": "property"}, "_offsetXY": {"protected": "", "type": "{ Number }", "description": "Cached X or Y offset for the constraining element to avoid extraneous\n<code>getXY()</code> calls during run time calculation.", "guessedname": "_offsetXY", "guessedtype": "property"}}, "methods": {"_verifyValue": {"protected": "", "description": "Verifies that the current value is within the min - max range.  If not,\nvalue is set to either min or max, depending on which is closer.", "guessedname": "_verifyValue", "guessedtype": "function"}, "_setPosition": {"protected": "", "description": "Positions the Drag element in accordance with the translated value.", "guessedname": "_setPosition", "guessedtype": "function"}, "_getScrollLeft": {"guessedname": "_getScrollLeft", "static": "", "description": "Returns scrollLeft", "private": "", "guessedtype": "function"}, "getTime": {"return": {"type": "Date", "description": "the time of the event"}, "description": "Returns the time of the event.  If the time is not included, the\nevent is modified using the current time.", "param": "{Event} ev the event", "static": "", "guessedname": "getTime", "guessedtype": "function", "params": [{"type": "Event", "name": "ev", "description": " the event"}]}, "stopEvent": {"description": "Convenience method for stopPropagation + preventDefault", "param": "{Event} ev the event", "static": "", "guessedname": "stopEvent", "guessedtype": "function", "params": [{"type": "Event", "name": "ev", "description": " the event"}]}, "_init": {"private": "", "description": "Initialize this YUI instance", "guessedname": "_init", "guessedtype": "function"}, "getTarget": {"return": {"type": "HTMLElement", "description": "the event's target"}, "description": "Returns the event's target element.  Safari sometimes provides\na text node, and this is automatically resolved to the text\nnode's parent so that it behaves like other browsers.", "param": "{Event} ev the event", "static": "", "guessedname": "getTarget", "guessedtype": "function", "params": [{"type": "Event", "name": "ev", "description": " the event"}, {"type": "boolean", "name": "resolveTextNode", "description": " when set to true the target's\nparent will be returned if the target is a \ntext node.  @deprecated, the text node is\nnow resolved automatically"}]}, "initializer": {"protected": "", "description": "Attach event listeners to keep the UI in sync with the min/max/value\nattributes and DD position, then call syncDragNode() to sync initial state.", "guessedname": "initializer", "guessedtype": "function"}, "_attach": {"private": "", "description": "Executes the function associated with each required\nmodule, binding the module to the YUI instance.", "guessedname": "_attach", "guessedtype": "function"}, "syncDragNode": {"description": "Cache constraining element offsets and dims for faster value translation\nand map current DD position to value.", "guessedname": "syncDragNode", "guessedtype": "function"}, "_calculateFactor": {"protected": "", "description": "Calculates and caches (range between max and min) / (constraining node\nor region width or height) for fast runtime calculation of position\n-&gt; value.", "guessedname": "_calculateFactor", "guessedtype": "function"}, "cached": {"function": "cached", "return": {"type": "Function", "description": "the wrapped function"}, "description": "Returns a wrapper for a function which caches the\nreturn value of that function, keyed off of the combined \nargument values.", "param": "source {function} the function to memoize", "params": [{"type": "function", "name": "source", "description": "  the function to memoize"}, {"type": "", "name": "cache", "description": " an optional cache seed"}, {"type": "", "name": "refetch", "description": " if supplied, this value is tested against the cached\nvalue.  If the values are equal, the wrapped function is executed again."}], "guessedname": "cached", "guessedtype": "function"}, "message": {"return": {"type": "YUI", "description": "YUI instance"}, "description": "Write a system message.  This message will be preserved in the\nminified and raw versions of the YUI files, unlike log statements.", "param": "{String}  msg  The message to log.", "params": [{"type": "String", "name": "msg", "description": "  The message to log."}, {"type": "String", "name": "cat", "description": "  The log category for the message.  Default\ncategories are \"info\", \"warn\", \"error\", time\".\nCustom categories can be used as well. (opt)"}, {"type": "String", "name": "src", "description": "  The source of the the message (opt)"}, {"type": "boolean", "name": "silent", "description": " If true, the log event won't fire"}], "guessedname": "message", "guessedtype": "function"}, "guid": {"return": {"type": "string", "description": "the guid"}, "description": "Generate an id that is unique among all YUI instances", "param": "pre {string} optional guid prefix", "params": [{"type": "string", "name": "pre", "description": "  optional guid prefix"}], "guessedname": "guid", "guessedtype": "function"}, "_cacheOffset": {"protected": "", "description": "Captures the current top left of the DD's constraining node or region to\navoid excessive DOM lookups at run time.", "guessedname": "_cacheOffset", "guessedtype": "function"}, "_validateNewValue": {"return": {"type": " Boolean ", "description": "True if value is a number between the configured\n<code>min</code> and <code>max</code>."}, "description": "Validates new values assigned to <code>value</code> attribute.  Numbers\nbetween the configured <code>min</code> and <code>max</code> are\nacceptable.", "param": "value { mixed } Value assigned to <code>value</code> attribute.", "protected": "", "params": [{"type": " mixed ", "name": "value", "description": "  Value assigned to <code>value</code> attribute."}], "guessedname": "_validateNewValue", "guessedtype": "function"}, "use": {"return": {"type": "YUI", "description": "the YUI instance"}, "description": "Attaches one or more modules to the YUI instance.  When this\nis executed, the requirements are analyzed, and one of \nseveral things can happen:\n- All requirements are available on the page --  The modules\nare attached to the instance.  If supplied, the use callback\nis executed synchronously.  \n- Modules are missing, the Get utility is not available OR\nthe 'bootstrap' config is false -- A warning is issued about\nthe missing modules and all available modules are attached.\n- Modules are missing, the Loader is not available but the Get\nutility is and boostrap is not false -- The loader is bootstrapped\nbefore doing the following....\n- Modules are missing and the Loader is available -- The loader\nexpands the dependency tree and fetches missing modules.  When\nthe loader is finshed the callback supplied to use is executed\nasynchronously.", "param": "modules* {string} 1-n modules to bind (uses arguments array)", "params": [{"type": "string", "name": "modules*", "description": "  1-n modules to bind (uses arguments array)"}, {"type": "function", "name": "*callback", "description": "  callback function executed when \nthe instance has the required functionality.  If included, it\nmust be the last parameter.\n<code>\n// loads and attaches drag and drop and its dependencies\nYUI().use('dd', function(Y) &#123;&#125);\n// attaches all modules that are available on the page\nYUI().use('*', function(Y) &#123;&#125);\n// intrinsic YUI gallery support (since 3.1.0)\nYUI().use('gallery-yql', function(Y) &#123;&#125);\n// intrinsic YUI 2in3 support (since 3.1.0)\nYUI().use('yui2-datatable', function(Y) &#123;&#125);\n</code>"}], "guessedname": "use", "guessedtype": "function"}, "getCharCode": {"return": {"type": "int", "description": "the event's charCode"}, "description": "Returns the charcode for an event", "param": "{Event} ev the event", "static": "", "guessedname": "getCharCode", "guessedtype": "function", "params": [{"type": "Event", "name": "ev", "description": " the event"}]}, "log": {"return": {"type": "YUI", "description": "YUI instance"}, "description": "If the 'debug' config is true, a 'yui:log' event will be\ndispatched, which the Console widget and anything else\ncan consume.  If the 'useBrowserConsole' config is true, it will\nwrite to the browser console if available.  YUI-specific log\nmessages will only be present in the -debug versions of the\nJS files.  The build system is supposed to remove log statements\nfrom the raw and minified versions of the files.", "param": "{String}  msg  The message to log.", "params": [{"type": "String", "name": "msg", "description": "  The message to log."}, {"type": "String", "name": "cat", "description": "  The log category for the message.  Default\ncategories are \"info\", \"warn\", \"error\", time\".\nCustom categories can be used as well. (opt)"}, {"type": "String", "name": "src", "description": "  The source of the the message (opt)"}, {"type": "boolean", "name": "silent", "description": " If true, the log event won't fire"}], "guessedname": "log", "guessedtype": "function"}, "stamp": {"return": {"type": "string", "description": "The object's guid or null"}, "description": "Returns a guid associated with an object.  If the object\ndoes not have one, a new one is created unless readOnly\nis specified.", "param": "o The object to stamp", "params": [{"type": "", "name": "o", "description": " The object to stamp"}, {"type": "boolean", "name": "readOnly", "description": "  if true, a valid guid will only\nbe returned if the object has one assigned to it."}], "guessedname": "stamp", "guessedtype": "function"}, "_defaultConstrain": {"protected": "", "return": {"type": " Y.Plugin.DDConstrained ", "description": "The plugin instance"}, "description": "Plugs in Y.Plugin.DDConstrained onto the Drag instance.  Default\nconfiguration uses <code>constrain</code> set to the\n<code>dragNode</code>'s <code>parentNode</code>.", "guessedname": "_defaultConstrain", "guessedtype": "function"}, "namespace": {"return": {"type": "object", "description": "A reference to the last namespace object created"}, "description": "Returns the namespace specified and creates it if it doesn't exist\n<pre>\nYUI.namespace(\"property.package\");\nYUI.namespace(\"YAHOO.property.package\");\n</pre>\nEither of the above would create YUI.property, then\nYUI.property.package (YAHOO is scrubbed out, this is\nto remain compatible with YUI2)\nBe careful when naming packages. Reserved words may work in some browsers\nand not others. For instance, the following will fail in Safari:\n<pre>\nYUI.namespace(\"really.long.nested.namespace\");\n</pre>\nThis fails because \"long\" is a future reserved word in ECMAScript", "param": "{string*} arguments 1-n namespaces to create", "params": [{"type": "string*", "name": "arguments", "description": " 1-n namespaces to create"}], "guessedname": "namespace", "guessedtype": "function"}, "getEl": {"description": "We cache elements bound by id because when the unload event \nfires, we can no longer use document.getElementById", "deprecated": "Elements are not cached any longer", "private": "", "static": "", "guessedname": "getEl", "guessedtype": "function"}, "destructor": {"protected": "", "description": "Detach event listeners.", "guessedname": "destructor", "guessedtype": "function"}, "_afterMaxChange": {"description": "Update position according to new max value.  If the new max results in\nthe current value being out of range, the value is set to the closer of\nmin or max.", "param": "e { EventFacade } The <code>max</code> attribute change event.", "protected": "", "params": [{"type": " EventFacade ", "name": "e", "description": "  The <code>max</code> attribute change event."}], "guessedname": "_afterMaxChange", "guessedtype": "function"}, "mix": {"return": {"type": "object", "description": "the augmented object"}, "description": "Applies the supplier's properties to the receiver.  By default\nall prototype and static propertes on the supplier are applied\nto the corresponding spot on the receiver.  By default all\nproperties are applied, and a property that is already on the\nreciever will not be overwritten.  The default behavior can\nbe modified by supplying the appropriate parameters.", "param": "{Function} r  the object to receive the augmentation", "params": [{"type": "Function", "name": "r", "description": "  the object to receive the augmentation"}, {"type": "Function", "name": "s", "description": "  the object that supplies the properties to augment"}, {"type": "boolean", "name": "ov", "description": "  if true, properties already on the receiver\nwill be overwritten if found on the supplier."}, {"type": "string[]", "name": "wl", "description": "  a whitelist.  If supplied, only properties in \nthis list will be applied to the receiver."}, {"type": "int", "name": "mode", "description": " what should be copies, and to where\ndefault(0): object to object\n1: prototype to prototype (old augment)\n2: prototype to prototype and object props (new augment)\n3: prototype to object\n4: object to prototype"}, {"type": "boolean/int", "name": "merge", "description": "  merge objects instead of overwriting/ignoring.  A value of 2\nwill skip array merge\nUsed by Y.aggregate"}], "guessedname": "mix", "guessedtype": "function", "todo": "add constants for the modes"}, "add": {"return": {"type": "YUI", "description": "the YUI instance"}, "description": "Registers a module with the YUI global.  The easiest way to create a \nfirst-class YUI module is to use the YUI component build tool.  \nhttp://yuilibrary.com/projects/builder \nThe build system will produce the YUI.add wrapper for you module, along\nwith any configuration info required for the module.", "param": "name {string} module name", "params": [{"type": "string", "name": "name", "description": "  module name"}, {"type": "Function", "name": "fn", "description": "  entry point into the module that\nis used to bind module to the YUI instance"}, {"type": "string", "name": "version", "description": "  version string"}, {"type": "", "name": "details", "description": " optional config data: \nrequires: features that must be present before this module can be attached.\noptional: optional features that should be present if loadOptional is\ndefined.  Note: modules are not often loaded this way in YUI 3,\nbut this field is still useful to inform the user that certain\nfeatures in the component will require additional dependencies.\nuse:      features that are included within this module which need to be\nbe attached automatically when this module is attached.  This\nsupports the YUI 3 rollup system -- a module with submodules \ndefined will need to have the submodules listed in the 'use'\nconfig.  The YUI component build tool does this for you."}], "guessedname": "add", "guessedtype": "function"}, "resolveTextNode": {"return": {"type": "HTMLElement", "description": "the normized node"}, "description": "In some cases, some browsers will return a text node inside\nthe actual element that was targeted.  This normalizes the\nreturn value for getTarget and getRelatedTarget.", "param": "{HTMLElement} node node to resolve", "static": "", "guessedname": "resolveTextNode", "guessedtype": "function", "params": [{"type": "HTMLElement", "name": "node", "description": " node to resolve"}]}, "_nearestValue": {"return": {"type": " Number ", "description": "Current min, max, or value if within range"}, "description": "Returns the nearest valid value to the value input.  If the provided\nvalue is outside the min - max range, accounting for min > max\nscenarios, the nearest of either min or max is returned.  Otherwise, the\nprovided value is returned.", "param": "value { mixed } Value to test against current min - max range", "protected": "", "params": [{"type": " mixed ", "name": "value", "description": "  Value to test against current min - max range"}], "guessedname": "_nearestValue", "guessedtype": "function"}, "_offsetToValue": {"return": {"type": " mixed ", "description": "Value corresponding to the provided pixel position"}, "description": "<p>Converts a pixel position into a value.  Calculates current\nposition minus xy offsets of the constraining element multiplied by the\nratio of <code>(max - min) / (constraining dim)</code>.</p>\n<p>Override this if you want to use a different value mapping\nalgorithm.</p>", "param": "{ Number } X or Y pixel position", "protected": "", "params": [{"type": " Number ", "name": "X", "description": " or Y pixel position"}], "guessedname": "_offsetToValue", "guessedtype": "function"}, "_getValueFromPosition": {"protected": "", "return": {"type": " mixed ", "description": "Value as calculated from the node's current position"}, "description": "Calculate the value from the current Drag element's position.  This is\nused to initialize the value attribute if it isn't set at construction.", "guessedname": "_getValueFromPosition", "guessedtype": "function"}, "getXY": {"return": {"type": "[x, y]", "description": "the pageX and pageY properties of the event"}, "description": "Returns the pageX and pageY properties as an indexed array.", "param": "{Event} ev the event", "static": "", "guessedname": "getXY", "guessedtype": "function", "params": [{"type": "Event", "name": "ev", "description": " the event"}]}, "addListener": {"description": "Calls Y.Event.detach with the correct argument order", "guessedname": "addListener", "guessedtype": "function"}, "_validateNewMax": {"return": {"type": " Boolean ", "description": "True for numbers.  False otherwise."}, "description": "Validates new values assigned to <code>max</code> attribute.  Numbers\nare acceptable.  Override this to enforce different rules.", "param": "value { mixed } Value assigned to <code>max</code> attribute.", "protected": "", "params": [{"type": " mixed ", "name": "value", "description": "  Value assigned to <code>max</code> attribute."}], "guessedname": "_validateNewMax", "guessedtype": "function"}, "getPageX": {"return": {"type": "int", "description": "the event's pageX"}, "description": "Returns the event's pageX", "param": "{Event} ev the event", "static": "", "guessedname": "getPageX", "guessedtype": "function", "params": [{"type": "Event", "name": "ev", "description": " the event"}]}, "_valueToOffset": {"return": {"type": " Array ", "description": "<code>[ <em>X</em>px, <em>Y</em>px ] positional values"}, "description": "Converts a value into a positional pixel value for use in positioning\nthe DD element according to the reverse of the\n<code>_offsetToValue( xy )</code> operation.", "param": "val { Number } The value to map to pixel X or Y position", "protected": "", "params": [{"type": " Number ", "name": "val", "description": "  The value to map to pixel X or Y position"}], "guessedname": "_valueToOffset", "guessedtype": "function"}, "after": {"return": {"type": "", "description": "the event target or a detach handle per 'chain' config"}, "description": "after() is a unified interface for subscribing to\nmost events exposed by YUI.  This includes custom events,\nDOM events, and AOP events.  This works the same way as\nthe on() function, only it operates after any default\nbehavior for the event has executed. @see <code>on</code> for more \ninformation.", "param": "type event type (this parameter does not apply for function events)", "params": [{"type": "", "name": "type", "description": " event type (this parameter does not apply for function events)"}, {"type": "", "name": "fn", "description": " the callback"}, {"type": "", "name": "target", "description": " a descriptor for the target (applies to custom events only).\nFor function events, this is the object that contains the function to\nexecute."}, {"type": "", "name": "extra", "description": " 0..n Extra information a particular event may need.  These\nwill be documented with the event.  In the case of function events, this\nis the name of the function to execute on the host.  In the case of\ndelegate listeners, this is the event delegation specification."}, {"type": "", "name": "context", "description": " optionally change the value of 'this' in the callback"}, {"type": "", "name": "args*", "description": " 0..n additional arguments to pass to the callback."}], "guessedname": "requires", "guessedtype": "property"}, "_getScrollTop": {"guessedname": "_getScrollTop", "static": "", "description": "Returns scrollTop", "private": "", "guessedtype": "function"}, "_afterAlign": {"description": "Dispatch the new position of the DD into the value setting operations.", "param": "e { EventFacade } The drag:align event", "protected": "", "params": [{"type": " EventFacade ", "name": "e", "description": "  The drag:align event"}], "guessedname": "_afterAlign", "guessedtype": "function"}, "simulate": {"return": {"type": "void", "description": ""}, "description": "Simulates the event with the given name on a target.", "param": "{HTMLElement} target The DOM element that's the target of the event.", "static": "", "guessedname": "simulate", "guessedtype": "function", "params": [{"type": "HTMLElement", "name": "target", "description": " The DOM element that's the target of the event."}, {"type": "String", "name": "type", "description": " The type of event to simulate (i.e., \"click\")."}, {"type": "Object", "name": "options", "description": " (Optional) Extra options to copy onto the event object."}]}, "_afterMinChange": {"description": "Update position according to new min value.  If the new min results in\nthe current value being out of range, the value is set to the closer of\nmin or max.", "param": "e { EventFacade } The <code>min</code> attribute change event.", "protected": "", "params": [{"type": " EventFacade ", "name": "e", "description": "  The <code>min</code> attribute change event."}], "guessedname": "_afterMinChange", "guessedtype": "function"}, "_initAxis": {"protected": "", "return": {"type": " String ", "description": "\"x\" or \"y\""}, "description": "Discover the appropriate axis to associate the value to based on the\nthe assignment of <code>stickX</code> or <code>stickY</code> attributes\nin the DDConstrained plugin.  If neither are set, defaults to \"x\".", "guessedname": "_defaultAxis", "guessedtype": "function"}, "removeListener": {"description": "Calls Y.Event.attach with the correct argument order", "guessedname": "removeListener", "guessedtype": "function"}, "_getScroll": {"guessedname": "_getScroll", "static": "", "description": "Returns the scrollTop and scrollLeft.  Used to calculate the \npageX and pageY in Internet Explorer", "private": "", "guessedtype": "function"}, "on": {"return": {"type": "", "description": "the event target or a detach handle per 'chain' config"}, "params": [{"type": "", "name": "type**", "description": " event type (this parameter does not apply for function events)"}, {"type": "", "name": "fn", "description": " the callback"}, {"type": "", "name": "target**", "description": " a descriptor for the target (applies to custom events only).\nFor function events, this is the object that contains the function to\nexecute."}, {"type": "", "name": "extra**", "description": " 0..n Extra information a particular event may need.  These\nwill be documented with the event.  In the case of function events, this\nis the name of the function to execute on the host.  In the case of\ndelegate listeners, this is the event delegation specification."}, {"type": "", "name": "context", "description": " optionally change the value of 'this' in the callback"}, {"type": "", "name": "args*", "description": " 0..n additional arguments to pass to the callback."}], "description": "<code>YUI</code>'s <code>on</code> method is a unified interface for subscribing to\nmost events exposed by YUI.  This includes custom events, DOM events, and \nfunction events.  <code>detach</code> is also provided to remove listeners\nserviced by this function.\nThe signature that <code>on</code> accepts varies depending on the type\nof event being consumed.  Refer to the specific methods that will\nservice a specific request for additional information about subscribing\nto that type of event.\n<ul>\n<li>Custom events.  These events are defined by various\nmodules in the library.  This type of event is delegated to\n<code>EventTarget</code>'s <code>on</code> method.\n<ul>\n<li>The type of the event</li>\n<li>The callback to execute</li>\n<li>An optional context object</li>\n<li>0..n additional arguments to supply the callback.</li>\n</ul>\nExample: \n<code>Y.on('domready', function() { // start work });</code>\n</li>\n<li>DOM events.  These are moments reported by the browser related\nto browser functionality and user interaction.\nThis type of event is delegated to <code>Event</code>'s \n<code>attach</code> method.\n<ul>\n<li>The type of the event</li>\n<li>The callback to execute</li>\n<li>The specification for the Node(s) to attach the listener\nto.  This can be a selector, collections, or Node/Element\nrefereces.</li>\n<li>An optional context object</li>\n<li>0..n additional arguments to supply the callback.</li>\n</ul>\nExample: \n<code>Y.on('click', function(e) { // something was clicked }, '#someelement');</code>\n</li>\n<li>Function events.  These events can be used to react before or after a\nfunction is executed.  This type of event is delegated to <code>Event.Do</code>'s \n<code>before</code> method.\n<ul>\n<li>The callback to execute</li>\n<li>The object that has the function that will be listened for.</li>\n<li>The name of the function to listen for.</li>\n<li>An optional context object</li>\n<li>0..n additional arguments to supply the callback.</li>\n</ul>\nExample <code>Y.on(function(arg1, arg2, etc) { // obj.methodname was executed }, obj 'methodname');</code>\n</li>\n</ul>\n<code>on</code> corresponds to the moment before any default behavior of\nthe event.  <code>after</code> works the same way, but these listeners\nexecute after the event's default behavior.  <code>before</code> is an\nalias for <code>on</code>.", "param": "type** event type (this parameter does not apply for function events)"}, "preventDefault": {"description": "Prevents the default behavior of the event", "param": "{Event} ev the event", "static": "", "guessedname": "preventDefault", "guessedtype": "function", "params": [{"type": "Event", "name": "ev", "description": " the event"}]}, "throttle": {"return": {"type": "function", "description": "Returns a wrapped function that calls fn throttled."}, "since": "3.1.0", "params": [{"type": "function", "name": "fn", "description": "  The function call to throttle."}, {"type": "int", "name": "ms", "description": "  The number of milliseconds to throttle the method call. Can set\nglobally with Y.config.throttleTime or by call. Passing a -1 will disable the throttle. Defaults to 150"}], "description": "Throttles a call to a method based on the time between calls.", "param": "fn {function} The function call to throttle."}, "applyTo": {"return": {"type": "object", "description": "the return value from the applied method or null"}, "description": "Executes a method on a YUI instance with\nthe specified id if the specified method is whitelisted.", "param": "id {string} the YUI instance id", "params": [{"type": "string", "name": "id", "description": "  the YUI instance id"}, {"type": "string", "name": "method", "description": "  the name of the method to exectute.\nEx: 'Object.keys'"}, {"type": "Array", "name": "args", "description": "  the arguments to apply to the method"}], "guessedname": "applyTo", "guessedtype": "function"}, "_validateNewAxis": {"return": {"type": " Boolean ", "description": "True if value is \"x\" or \"y\""}, "description": "Validates new values assigned to <code>axis</code> attribute.\nAcceptable values are \"x\" and \"y\".", "param": "value { String } proposed value", "protected": "", "params": [{"type": " String ", "name": "value", "description": "  proposed value"}], "guessedname": "_validateNewAxis", "guessedtype": "function"}, "later": {"return": {"type": "object", "description": "a timer object. Call the cancel() method on this object to \nstop the timer."}, "description": "Executes the supplied function in the context of the supplied \nobject 'when' milliseconds later.  Executes the function a \nsingle time unless periodic is set to true.", "param": "when {int} the number of milliseconds to wait until the fn \nis executed.", "params": [{"type": "int", "name": "when", "description": "  the number of milliseconds to wait until the fn \nis executed."}, {"type": "", "name": "o", "description": " the context object."}, {"type": "Function|String", "name": "fn", "description": "  the function to execute or the name of \nthe method in the 'o' object to execute."}, {"type": "", "name": "data", "description": " [Array] data that is provided to the function.  This accepts\neither a single item or an array.  If an array is provided, the\nfunction is executed with one parameter for each array item.  If\nyou need to pass a single array parameter, it needs to be wrapped in\nan array [myarray]."}, {"type": "boolean", "name": "periodic", "description": "  if true, executes continuously at supplied \ninterval until canceled."}], "guessedname": "later", "guessedtype": "function"}, "_setup": {"private": "", "description": "Finishes the instance setup. Attaches whatever modules were defined\nwhen the yui modules was registered.", "guessedname": "_setup", "guessedtype": "function"}, "_afterValueChange": {"description": "Propagate change to the DD unless the change is coming from a DD event.", "param": "e { EventFacade } The <code>value</code> attribute change event.", "protected": "", "params": [{"type": " EventFacade ", "name": "e", "description": "  The <code>value</code> attribute change event."}], "guessedname": "_afterValueChange", "guessedtype": "function"}, "merge": {"return": {"type": "object", "description": "the new merged object"}, "description": "Returns a new object containing all of the properties of\nall the supplied objects.  The properties from later objects\nwill overwrite those in earlier objects.  Passing in a\nsingle object will create a shallow copy of it.  For a deep\ncopy, use clone.", "param": "arguments {Object*} the objects to merge", "params": [{"type": "Object*", "name": "arguments", "description": "  the objects to merge"}], "guessedname": "merge", "guessedtype": "function"}, "delegate": {"return": {"type": "EventHandle", "description": "the detach handle"}, "description": "Sets up event delegation on a container element.  The delegated event\nwill use a supplied selector to test if the target or one of the\ndescendants of the target match it.  The supplied callback function \nwill only be executed if a match was encountered, and, in fact, \nwill be executed for each element that matches if you supply an \nambiguous selector.\nThe event object for the delegated event is supplied to the callback\nfunction.  It is modified slightly in order to support all properties\nthat may be needed for event delegation.  'currentTarget' is set to\nthe element that matched the delegation specifcation.  'container' is\nset to the element that the listener is bound to (this normally would\nbe the 'currentTarget').", "param": "type {string} the event type to delegate", "params": [{"type": "string", "name": "type", "description": "  the event type to delegate"}, {"type": "function", "name": "fn", "description": "  the callback function to execute.  This function\nwill be provided the event object for the delegated event."}, {"type": "string|node", "name": "el", "description": "  the element that is the delegation container"}, {"type": "string", "name": "spec", "description": "  a selector that must match the target of the\nevent."}, {"type": "", "name": "context", "description": " optional argument that specifies what 'this' refers to."}, {"type": "", "name": "args*", "description": " 0..n additional arguments to pass on to the callback function.\nThese arguments will be added after the event object."}], "guessedname": "delegate", "guessedtype": "function"}, "getPageY": {"return": {"type": "int", "description": "the event's pageY"}, "description": "Returns the event's pageY", "param": "{Event} ev the event", "static": "", "guessedname": "getPageY", "guessedtype": "function", "params": [{"type": "Event", "name": "ev", "description": " the event"}]}, "error": {"return": {"type": "YUI", "description": "this YUI instance"}, "description": "Report an error.  The reporting mechanism is controled by\nthe 'throwFail' configuration attribute.  If throwFail is\nnot specified, the message is written to the Logger, otherwise\na JS error is thrown", "param": "msg {string} the error message", "params": [{"type": "string", "name": "msg", "description": "  the error message"}, {"type": "Error", "name": "e", "description": "  Optional JS error that was caught.  If supplied\nand throwFail is specified, this error will be re-thrown."}], "guessedname": "error", "guessedtype": "function"}, "_validateNewMin": {"return": {"type": " Boolean ", "description": "True for numbers.  False otherwise."}, "description": "Validates new values assigned to <code>min</code> attribute.  Numbers\nare acceptable.  Override this to enforce different rules.", "param": "value { mixed } Value assigned to <code>min</code> attribute.", "protected": "", "params": [{"type": " mixed ", "name": "value", "description": "  Value assigned to <code>min</code> attribute."}], "guessedname": "_validateNewMin", "guessedtype": "function"}, "stopPropagation": {"description": "Stops event propagation", "param": "{Event} ev the event", "static": "", "guessedname": "stopPropagation", "guessedtype": "function", "params": [{"type": "Event", "name": "ev", "description": " the event"}]}, "getRelatedTarget": {"return": {"type": "HTMLElement", "description": "the event's relatedTarget"}, "description": "Returns the event's related target", "param": "{Event} ev the event", "static": "", "guessedname": "getRelatedTarget", "guessedtype": "function", "params": [{"type": "Event", "name": "ev", "description": " the event"}]}, "once": {"return": {"type": "", "description": "the event target or a detach handle per 'chain' config"}, "see": "on", "params": [{"type": "", "name": "type**", "description": " event type (this parameter does not apply for function events)"}, {"type": "", "name": "fn", "description": " the callback"}, {"type": "", "name": "target**", "description": " a descriptor for the target (applies to custom events only).\nFor function events, this is the object that contains the function to\nexecute."}, {"type": "", "name": "extra**", "description": " 0..n Extra information a particular event may need.  These\nwill be documented with the event.  In the case of function events, this\nis the name of the function to execute on the host.  In the case of\ndelegate listeners, this is the event delegation specification."}, {"type": "", "name": "context", "description": " optionally change the value of 'this' in the callback"}, {"type": "", "name": "args*", "description": " 0..n additional arguments to pass to the callback."}], "description": "Listen for an event one time.  Equivalent to <code>on</code>, except that\nthe listener is immediately detached when executed.", "param": "type** event type (this parameter does not apply for function events)"}}, "uses": ["EventTarget"], "file": "aui.js", "shortname": "YUI", "events": {"available": {"return": "{EventHandle} the detach handle", "description": "Executes the callback as soon as the specified element \nis detected in the DOM.", "param": "type {string} 'available'", "params": [{"type": "string", "name": "type", "description": "  'available'"}, {"type": "function", "name": "fn", "description": "  the callback function to execute."}, {"type": "string|HTMLElement|collection", "name": "el", "description": "  the element(s) to attach"}, {"type": "", "name": "context", "description": " optional argument that specifies what 'this' refers to."}, {"type": "", "name": "args*", "description": " 0..n additional arguments to pass on to the callback function.\nThese arguments will be added after the event object."}], "guessedname": "available", "guessedtype": "property"}, "domready": {"description": "The domready event fires at the moment the browser's DOM is\nusable. In most cases, this is before images are fully\ndownloaded, allowing you to provide a more responsive user\ninterface.\nIn YUI 3, domready subscribers will be notified immediately if\nthat moment has already passed when the subscription is created.\nOne exception is if the yui.js file is dynamically injected into\nthe page.  If this is done, you must tell the YUI instance that\nyou did this in order for DOMReady (and window load events) to\nfire normally.  That configuration option is 'injected' -- set\nit to true if the yui.js script is not included inline.\nThis method is part of the 'event-ready' module, which is a\nsubmodule of 'event'."}, "mousewheel": {"return": "{EventHandle} the detach handle", "description": "Mousewheel event.  This listener is automatically attached to the\ncorrect target, so one should not be supplied.  Mouse wheel \ndirection and velocity is stored in the 'mouseDelta' field.", "param": "type {string} 'mousewheel'", "params": [{"type": "string", "name": "type", "description": "  'mousewheel'"}, {"type": "function", "name": "fn", "description": "  the callback to execute"}, {"type": "", "name": "context", "description": " optional context object"}, {"type": "", "name": "args", "description": " 0..n additional arguments to provide to the listener."}], "guessedname": "mousewheel", "guessedtype": "property"}, "mouseleave": {"return": "{EventHandle} the detach handle", "description": "Sets up a \"mouseleave\" listener&#151;a listener that is called the first time \nthe user's mouse leaves the specified element(s).", "param": "type {string} \"mouseleave\"", "params": [{"type": "string", "name": "type", "description": "  \"mouseleave\""}, {"type": "function", "name": "fn", "description": "  The method the event invokes."}, {"type": "string|node", "name": "el", "description": "  The element(s) to assign the listener to."}, {"type": "string", "name": "spec", "description": "  Optional.  String representing a selector that must \nmatch the target of the event in order for the listener to be called."}], "guessedname": "mouseleave", "guessedtype": "property"}, "key": {"return": "{Event.Handle} the detach handle", "description": "Add a key listener.  The listener will only be notified if the\nkeystroke detected meets the supplied specification.  The\nspec consists of the key event type, followed by a colon,\nfollowed by zero or more comma separated key codes, followed\nby zero or more modifiers delimited by a plus sign.  Ex:\npress:12,65+shift+ctrl", "param": "type {string} 'key'", "params": [{"type": "string", "name": "type", "description": "  'key'"}, {"type": "function", "name": "fn", "description": "  the function to execute"}, {"type": "string|HTMLElement|collection", "name": "id", "description": "  the element(s) to bind"}, {"type": "string", "name": "spec", "description": "  the keyCode and modifier specification"}, {"type": "", "name": "o", "description": " optional context object"}, {"type": "", "name": "args", "description": " 0..n additional arguments to provide to the listener."}], "guessedname": "key", "guessedtype": "property"}, "hostChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "hostChange", "description": "Fires when the value for the configuration attribute 'host' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "maxChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "maxChange", "description": "Fires when the value for the configuration attribute 'max' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "focus": {"return": "{EventHandle} the detach handle", "description": "Adds a DOM focus listener.  Uses the focusin event in IE, \nDOMFocusIn for Opera and Webkit, and the capture phase for Gecko so that\nthe event propagates in a way that enables event delegation.", "param": "type {string} 'focus'", "params": [{"type": "string", "name": "type", "description": "  'focus'"}, {"type": "function", "name": "fn", "description": "  the callback function to execute"}, {"type": "string|HTMLElement|collection", "name": "o", "description": "  the element(s) to bind"}, {"type": "", "name": "context", "description": " optional context object"}, {"type": "", "name": "args", "description": " 0..n additional arguments to provide to the listener."}], "guessedname": "focus", "guessedtype": "property"}, "windowresize": {"description": "Firefox fires the window resize event once when the resize action\nfinishes, other browsers fire the event periodically during the\nresize.  This code uses timeout logic to simulate the Firefox \nbehavior in other browsers.", "guessedname": "windowresize", "guessedtype": "property"}, "valueChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "valueChange", "description": "Fires when the value for the configuration attribute 'value' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "contentready": {"return": "{EventHandle} the detach handle", "description": "Executes the callback as soon as the specified element \nis detected in the DOM with a nextSibling property\n(indicating that the element's children are available)", "param": "type {string} 'contentready'", "params": [{"type": "string", "name": "type", "description": "  'contentready'"}, {"type": "function", "name": "fn", "description": "  the callback function to execute."}, {"type": "string|HTMLElement|collection", "name": "el", "description": "  the element(s) to attach"}, {"type": "", "name": "context", "description": " optional argument that specifies what 'this' refers to."}, {"type": "", "name": "args*", "description": " 0..n additional arguments to pass on to the callback function.\nThese arguments will be added after the event object."}], "guessedname": "contentready", "guessedtype": "property"}, "blur": {"return": "{EventHandle} the detach handle", "description": "Adds a DOM blur listener.  Uses the focusout event in IE, \nDOMFocusOut for Opera and Webkit, and the capture phase for Gecko so that\nthe event propagates in a way that enables event delegation.", "param": "type {string} 'blur'", "params": [{"type": "string", "name": "type", "description": "  'blur'"}, {"type": "function", "name": "fn", "description": "  the callback function to execute"}, {"type": "string|HTMLElement|collection", "name": "o", "description": "  the element(s) to bind"}, {"type": "", "name": "context", "description": " optional context object"}, {"type": "", "name": "args", "description": " 0..n additional arguments to provide to the listener."}], "guessedname": "blur", "guessedtype": "property"}, "axisChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "axisChange", "description": "Fires when the value for the configuration attribute 'axis' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "minChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "minChange", "description": "Fires when the value for the configuration attribute 'min' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "mouseenter": {"return": "{EventHandle} the detach handle", "description": "Sets up a \"mouseenter\" listener&#151;a listener that is called the first time \nthe user's mouse enters the specified element(s).", "param": "type {string} \"mouseenter\"", "params": [{"type": "string", "name": "type", "description": "  \"mouseenter\""}, {"type": "function", "name": "fn", "description": "  The method the event invokes."}, {"type": "string|node", "name": "el", "description": "  The element(s) to assign the listener to."}, {"type": "string", "name": "spec", "description": "  Optional.  String representing a selector that must \nmatch the target of the event in order for the listener to be called."}], "guessedname": "mouseenter", "guessedtype": "property"}}, "description": "The YUI global namespace object.  If YUI is already defined, the\nexisting YUI object will not be overwritten so that defined\nnamespaces are preserved.  It is the constructor for the object\nthe end user interacts with.  As indicated below, each instance\nhas full custom event support, but only if the event system \nis available."}, "DataSource.Local": {"name": "DataSource.Local", "configs": {"source": {"default": "null", "type": "MIXED", "description": "Pointer to live data.", "guessedname": "source", "guessedtype": "property"}}, "constructors": [{"description": "Base class for the DataSource Utility."}], "namespace": "", "module": "datasource", "events": {"data": {"description": "Fired when raw data is received.", "param": "e {Event.Facade} Event Facade with the following properties:\n<dl>\n<dt>tId (Number)</dt> <dd>Unique transaction ID.</dd>\n<dt>request (Object)</dt> <dd>The request.</dd>\n<dt>callback (Object)</dt> <dd>The callback object with the following properties:\n<dl>\n<dt>success (Function)</dt> <dd>Success handler.</dd>\n<dt>failure (Function)</dt> <dd>Failure handler.</dd>\n</dl>\n</dd>\n<dt>cfg (Object)</dt> <dd>Configuration object.</dd>\n<dt>data (Object)</dt> <dd>Raw data.</dd>\n</dl>", "params": [{"type": "Event.Facade", "name": "e", "description": "  Event Facade with the following properties:\n<dl>\n<dt>tId (Number)</dt> <dd>Unique transaction ID.</dd>\n<dt>request (Object)</dt> <dd>The request.</dd>\n<dt>callback (Object)</dt> <dd>The callback object with the following properties:\n<dl>\n<dt>success (Function)</dt> <dd>Success handler.</dd>\n<dt>failure (Function)</dt> <dd>Failure handler.</dd>\n</dl>\n</dd>\n<dt>cfg (Object)</dt> <dd>Configuration object.</dd>\n<dt>data (Object)</dt> <dd>Raw data.</dd>\n</dl>"}], "guessedname": "defaultFn", "guessedtype": "property", "preventable": "_defDataFn"}, "sourceChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "sourceChange", "description": "Fires when the value for the configuration attribute 'source' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "request": {"description": "Fired when a data request is received.", "param": "e {Event.Facade} Event Facade with the following properties:\n<dl>                          \n<dt>tId (Number)</dt> <dd>Unique transaction ID.</dd>\n<dt>request (Object)</dt> <dd>The request.</dd>\n<dt>callback (Object)</dt> <dd>The callback object.</dd>\n<dt>cfg (Object)</dt> <dd>Configuration object.</dd>\n</dl>", "params": [{"type": "Event.Facade", "name": "e", "description": "  Event Facade with the following properties:\n<dl>                          \n<dt>tId (Number)</dt> <dd>Unique transaction ID.</dd>\n<dt>request (Object)</dt> <dd>The request.</dd>\n<dt>callback (Object)</dt> <dd>The callback object.</dd>\n<dt>cfg (Object)</dt> <dd>Configuration object.</dd>\n</dl>"}], "guessedname": "defaultFn", "guessedtype": "property", "preventable": "_defRequestFn"}, "response": {"description": "Fired when response is returned.", "param": "e {Event.Facade} Event Facade with the following properties:\n<dl>\n<dt>tId (Number)</dt> <dd>Unique transaction ID.</dd>\n<dt>request (Object)</dt> <dd>The request.</dd>\n<dt>callback (Object)</dt> <dd>The callback object with the following properties:\n<dl>\n<dt>success (Function)</dt> <dd>Success handler.</dd>\n<dt>failure (Function)</dt> <dd>Failure handler.</dd>\n</dl>\n</dd>\n<dt>cfg (Object)</dt> <dd>Configuration object.</dd>\n<dt>data (Object)</dt> <dd>Raw data.</dd>\n<dt>response (Object)</dt> <dd>Normalized response object with the following properties:\n<dl>\n<dt>results (Object)</dt> <dd>Parsed results.</dd>\n<dt>meta (Object)</dt> <dd>Parsed meta data.</dd>\n<dt>error (Boolean)</dt> <dd>Error flag.</dd>\n</dl>\n</dd>\n</dl>", "params": [{"type": "Event.Facade", "name": "e", "description": "  Event Facade with the following properties:\n<dl>\n<dt>tId (Number)</dt> <dd>Unique transaction ID.</dd>\n<dt>request (Object)</dt> <dd>The request.</dd>\n<dt>callback (Object)</dt> <dd>The callback object with the following properties:\n<dl>\n<dt>success (Function)</dt> <dd>Success handler.</dd>\n<dt>failure (Function)</dt> <dd>Failure handler.</dd>\n</dl>\n</dd>\n<dt>cfg (Object)</dt> <dd>Configuration object.</dd>\n<dt>data (Object)</dt> <dd>Raw data.</dd>\n<dt>response (Object)</dt> <dd>Normalized response object with the following properties:\n<dl>\n<dt>results (Object)</dt> <dd>Parsed results.</dd>\n<dt>meta (Object)</dt> <dd>Parsed meta data.</dd>\n<dt>error (Boolean)</dt> <dd>Error flag.</dd>\n</dl>\n</dd>\n</dl>"}], "guessedname": "defaultFn", "guessedtype": "property", "preventable": "_defResponseFn"}, "error": {"params": [{"type": "Event.Facade", "name": "e", "description": "  Event Facade with the following properties:\n<dl>\n<dt>tId (Number)</dt> <dd>Unique transaction ID.</dd>\n<dt>request (Object)</dt> <dd>The request.</dd>\n<dt>callback (Object)</dt> <dd>The callback object with the following properties:\n<dl>\n<dt>success (Function)</dt> <dd>Success handler.</dd>\n<dt>failure (Function)</dt> <dd>Failure handler.</dd>\n</dl>\n</dd>\n<dt>cfg (Object)</dt> <dd>Configuration object.</dd>\n<dt>data (Object)</dt> <dd>Raw data.</dd>\n<dt>response (Object)</dt> <dd>Normalized response object with the following properties:\n<dl>\n<dt>results (Object)</dt> <dd>Parsed results.</dd>\n<dt>meta (Object)</dt> <dd>Parsed meta data.</dd>\n<dt>error (Object)</dt> <dd>Error object.</dd>\n</dl>\n</dd>\n</dl>"}], "description": "Fired when an error is encountered.", "param": "e {Event.Facade} Event Facade with the following properties:\n<dl>\n<dt>tId (Number)</dt> <dd>Unique transaction ID.</dd>\n<dt>request (Object)</dt> <dd>The request.</dd>\n<dt>callback (Object)</dt> <dd>The callback object with the following properties:\n<dl>\n<dt>success (Function)</dt> <dd>Success handler.</dd>\n<dt>failure (Function)</dt> <dd>Failure handler.</dd>\n</dl>\n</dd>\n<dt>cfg (Object)</dt> <dd>Configuration object.</dd>\n<dt>data (Object)</dt> <dd>Raw data.</dd>\n<dt>response (Object)</dt> <dd>Normalized response object with the following properties:\n<dl>\n<dt>results (Object)</dt> <dd>Parsed results.</dd>\n<dt>meta (Object)</dt> <dd>Parsed meta data.</dd>\n<dt>error (Object)</dt> <dd>Error object.</dd>\n</dl>\n</dd>\n</dl>"}}, "guessedname": "LANG", "methods": {"_initEvents": {"private": "", "description": "This method creates all the events for this module.", "guessedname": "_initEvents", "guessedtype": "function"}, "_defResponseFn": {"description": "Sends data as a normalized response to callback.", "param": "e {Event.Facade} Event Facade with the following properties:\n<dl>\n<dt>tId (Number)</dt> <dd>Unique transaction ID.</dd>\n<dt>request (Object)</dt> <dd>The request.</dd>\n<dt>callback (Object)</dt> <dd>The callback object with the following properties:\n<dl>\n<dt>success (Function)</dt> <dd>Success handler.</dd>\n<dt>failure (Function)</dt> <dd>Failure handler.</dd>\n</dl>\n</dd>\n<dt>cfg (Object)</dt> <dd>Configuration object.</dd>\n<dt>data (Object)</dt> <dd>Raw data.</dd>\n<dt>response (Object)</dt> <dd>Normalized response object with the following properties:\n<dl>\n<dt>results (Object)</dt> <dd>Parsed results.</dd>\n<dt>meta (Object)</dt> <dd>Parsed meta data.</dd>\n<dt>error (Boolean)</dt> <dd>Error flag.</dd>\n</dl>\n</dd>\n</dl>", "protected": "", "params": [{"type": "Event.Facade", "name": "e", "description": "  Event Facade with the following properties:\n<dl>\n<dt>tId (Number)</dt> <dd>Unique transaction ID.</dd>\n<dt>request (Object)</dt> <dd>The request.</dd>\n<dt>callback (Object)</dt> <dd>The callback object with the following properties:\n<dl>\n<dt>success (Function)</dt> <dd>Success handler.</dd>\n<dt>failure (Function)</dt> <dd>Failure handler.</dd>\n</dl>\n</dd>\n<dt>cfg (Object)</dt> <dd>Configuration object.</dd>\n<dt>data (Object)</dt> <dd>Raw data.</dd>\n<dt>response (Object)</dt> <dd>Normalized response object with the following properties:\n<dl>\n<dt>results (Object)</dt> <dd>Parsed results.</dd>\n<dt>meta (Object)</dt> <dd>Parsed meta data.</dd>\n<dt>error (Boolean)</dt> <dd>Error flag.</dd>\n</dl>\n</dd>\n</dl>"}], "guessedname": "_defResponseFn", "guessedtype": "function"}, "_defRequestFn": {"description": "Manages request/response transaction. Must fire <code>response</code>\nevent when response is received. This method should be implemented by\nsubclasses to achieve more complex behavior such as accessing remote data.", "param": "e {Event.Facade} Event Facadewith the following properties:\n<dl>\n<dt>tId (Number)</dt> <dd>Unique transaction ID.</dd>\n<dt>request (Object)</dt> <dd>The request.</dd>\n<dt>callback (Object)</dt> <dd>The callback object with the following properties:\n<dl>\n<dt>success (Function)</dt> <dd>Success handler.</dd>\n<dt>failure (Function)</dt> <dd>Failure handler.</dd>\n</dl>\n</dd>\n<dt>cfg (Object)</dt> <dd>Configuration object.</dd>\n</dl>", "protected": "", "params": [{"type": "Event.Facade", "name": "e", "description": "  Event Facadewith the following properties:\n<dl>\n<dt>tId (Number)</dt> <dd>Unique transaction ID.</dd>\n<dt>request (Object)</dt> <dd>The request.</dd>\n<dt>callback (Object)</dt> <dd>The callback object with the following properties:\n<dl>\n<dt>success (Function)</dt> <dd>Success handler.</dd>\n<dt>failure (Function)</dt> <dd>Failure handler.</dd>\n</dl>\n</dd>\n<dt>cfg (Object)</dt> <dd>Configuration object.</dd>\n</dl>"}], "guessedname": "_defRequestFn", "guessedtype": "function"}, "DataSource.issueCallback": {"description": "Executes a given callback.  The third param determines whether to execute", "param": "callback {Object} The callback object.", "static": "", "guessedname": "issueCallback", "guessedtype": "function", "params": [{"type": "Object", "name": "callback", "description": "  The callback object."}, {"type": "Array", "name": "params", "description": "  params to be passed to the callback method"}, {"type": "Boolean", "name": "error", "description": "  whether an error occurred"}]}, "_defDataFn": {"description": "Normalizes raw data into a response that includes results and meta properties.", "param": "e {Event.Facade} Event Facade with the following properties:\n<dl>\n<dt>tId (Number)</dt> <dd>Unique transaction ID.</dd>\n<dt>request (Object)</dt> <dd>The request.</dd>\n<dt>callback (Object)</dt> <dd>The callback object with the following properties:\n<dl>\n<dt>success (Function)</dt> <dd>Success handler.</dd>\n<dt>failure (Function)</dt> <dd>Failure handler.</dd>\n</dl>\n</dd>\n<dt>cfg (Object)</dt> <dd>Configuration object.</dd>\n<dt>data (Object)</dt> <dd>Raw data.</dd>\n</dl>", "protected": "", "params": [{"type": "Event.Facade", "name": "e", "description": "  Event Facade with the following properties:\n<dl>\n<dt>tId (Number)</dt> <dd>Unique transaction ID.</dd>\n<dt>request (Object)</dt> <dd>The request.</dd>\n<dt>callback (Object)</dt> <dd>The callback object with the following properties:\n<dl>\n<dt>success (Function)</dt> <dd>Success handler.</dd>\n<dt>failure (Function)</dt> <dd>Failure handler.</dd>\n</dl>\n</dd>\n<dt>cfg (Object)</dt> <dd>Configuration object.</dd>\n<dt>data (Object)</dt> <dd>Raw data.</dd>\n</dl>"}], "guessedname": "_defDataFn", "guessedtype": "function"}, "initializer": {"description": "Internal init() handler.", "param": "config {Object} Config object.", "params": [{"type": "Object", "name": "config", "description": "  Config object."}], "private": "", "guessedname": "initializer", "guessedtype": "function"}, "sendRequest": {"return": {"type": "Number", "description": "Transaction ID."}, "description": "Generates a unique transaction ID and fires <code>request</code> event.", "param": "request {Object} An object literal with the following properties:\n<dl>\n<dt><code>request</code></dt>\n<dd>The request to send to the live data source, if any.</dd>\n<dt><code>callback</code></dt>\n<dd>An object literal with the following properties:\n<dl>\n<dt><code>success</code></dt>\n<dd>The function to call when the data is ready.</dd>\n<dt><code>failure</code></dt>\n<dd>The function to call upon a response failure condition.</dd>\n<dt><code>argument</code></dt>\n<dd>Arbitrary data payload that will be passed back to the success and failure handlers.</dd>\n</dl>\n</dd>\n<dt><code>cfg</code></dt>\n<dd>Configuration object, if any.</dd>\n</dl>", "params": [{"type": "Object", "name": "request", "description": "  An object literal with the following properties:\n<dl>\n<dt><code>request</code></dt>\n<dd>The request to send to the live data source, if any.</dd>\n<dt><code>callback</code></dt>\n<dd>An object literal with the following properties:\n<dl>\n<dt><code>success</code></dt>\n<dd>The function to call when the data is ready.</dd>\n<dt><code>failure</code></dt>\n<dd>The function to call upon a response failure condition.</dd>\n<dt><code>argument</code></dt>\n<dd>Arbitrary data payload that will be passed back to the success and failure handlers.</dd>\n</dl>\n</dd>\n<dt><code>cfg</code></dt>\n<dd>Configuration object, if any.</dd>\n</dl>"}], "guessedname": "sendRequest", "guessedtype": "function"}}, "extends": "Base", "superclass": "Base", "file": "datasource.js", "guessedtype": "property", "shortname": "DataSource.Local", "properties": {"DataSource._tId": {"description": "Global transaction counter.", "default": "0", "private": "", "static": "", "guessedname": "_tId", "guessedtype": "property", "type": "Number"}, "NAME": {"description": "Class name.", "value": "\"dataSourceLocal\"", "static": "", "guessedname": "NAME", "guessedtype": "property", "type": "String", "final": ""}}, "description": "Base class for the DataSource Utility."}, "Plugin.Shim": {"name": "Plugin.Shim", "namespace": "", "module": "shim-plugin", "methods": {"destroy": {"description": "Removes the shim and destroys the plugin", "guessedname": "destroy", "guessedtype": "function"}, "sync": {"description": "Updates the size of the shim to fill its container", "guessedname": "sync", "guessedtype": "function"}}, "param": "{Object} User configuration object", "file": "shim-plugin.js", "shortname": "Plugin.Shim", "properties": {"Shim.TEMPLATE": {"type": "String", "static": "", "description": "Default markup template used to generate the shim element.", "guessedname": "TEMPLATE", "guessedtype": "property"}, "Shim.CLASS_NAME": {"default": "\"yui-node-shim\"", "type": "String", "static": "", "description": "Default class used to mark the shim element"}}, "description": "Node plugin which can be used to add shim support."}, "A.NodeList": {"name": "A.NodeList", "constructors": [{"description": "Augment the <a href=\"NodeList.html\">YUI3 NodeList</a> with more util methods.\nCheck the list of <a href=\"NodeList.html#methods\">Methods</a> available for\nAUI NodeList."}], "namespace": "", "module": "aui-node", "methods": {"getDoc": {"description": "Get the document node. Shortcut to <code>A.one(document)</code>.", "guessedname": "getDoc", "guessedtype": "function"}, "getWin": {"description": "Get the window node. Shortcut to <code>A.one(window)</code>.", "guessedname": "getWin", "guessedtype": "function"}, "all": {"description": "See <a href=\"Node.html#method_all\">Node all</a>.", "guessedname": "all", "guessedtype": "function"}, "last": {"return": {"type": "Node", "description": ""}, "description": "Returns the last element in the node list collection.", "guessedname": "last", "guessedtype": "function"}, "getDOM": {"description": "See <a href=\"Node.html#method_getDOM\">Node getDOM</a>.", "guessedname": "getDOM", "guessedtype": "function"}, "one": {"description": "See <a href=\"Node.html#method_one\">Node one</a>.", "guessedname": "one", "guessedtype": "function"}, "first": {"return": {"type": "Node", "description": ""}, "description": "Returns the first element in the node list collection.", "guessedname": "first", "guessedtype": "function"}, "getBody": {"description": "Get the body node. Shortcut to <code>A.one('body')</code>.", "guessedname": "getBody", "guessedtype": "function"}}, "uses": ["A.Node"], "file": "aui-node.js", "shortname": "A.NodeList", "description": "Augment the <a href=\"NodeList.html\">YUI3 NodeList</a> with more util methods.\nCheck the list of <a href=\"NodeList.html#methods\">Methods</a> available for\nAUI NodeList."}, "Widget": {"name": "Widget", "constructors": [{"params": [{"type": "Object", "name": "config", "description": "  Object literal specifying widget configuration properties."}], "description": "A base class for widgets, providing:\n<ul>\n<li>The render lifecycle method, in addition to the init and destroy \nlifecycle methods provide by Base</li>\n<li>Abstract methods to support consistent MVC structure across \nwidgets: renderer, renderUI, bindUI, syncUI</li>\n<li>Support for common widget attributes, such as boundingBox, contentBox, visible, \ndisabled, focused, strings</li>\n</ul>"}], "namespace": "", "module": "widget", "events": {"widget:render": {"preventable": "_defRenderFn", "params": [{"type": "EventFacade", "name": "e", "description": " The Event Facade"}], "description": "Lifcyle event for the render phase, fired prior to rendering the UI \nfor the widget (prior to invoking the widget's renderer method).\n<p>\nSubscribers to the \"on\" moment of this event, will be notified \nbefore the widget is rendered.\n</p>\n<p>\nSubscribers to the \"after\" moment of this event, will be notified\nafter rendering is complete.\n</p>", "param": "{EventFacade} e The Event Facade"}, "tabIndexChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "tabIndexChange", "description": "Fires when the value for the configuration attribute 'tabIndex' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "stringsChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "stringsChange", "description": "Fires when the value for the configuration attribute 'strings' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "heightChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "heightChange", "description": "Fires when the value for the configuration attribute 'height' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "widget:contentUpdate": {"description": "Notification event, which widget implementations can fire, when\nthey change the content of the widget. This event has no default\nbehavior and cannot be prevented, so the \"on\" or \"after\"\nmoments are effectively equivalent (with on listeners being invoked before \nafter listeners).", "param": "{EventFacade} e The Event Facade", "params": [{"type": "EventFacade", "name": "e", "description": " The Event Facade"}], "guessedname": "preventable", "guessedtype": "property", "preventable": "false"}, "boundingBoxChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "boundingBoxChange", "description": "Fires when the value for the configuration attribute 'boundingBox' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "focusedChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "focusedChange", "description": "Fires when the value for the configuration attribute 'focused' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "visibleChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "visibleChange", "description": "Fires when the value for the configuration attribute 'visible' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "contentBoxChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "contentBoxChange", "description": "Fires when the value for the configuration attribute 'contentBox' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "renderChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "renderChange", "description": "Fires when the value for the configuration attribute 'render' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "renderedChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "renderedChange", "description": "Fires when the value for the configuration attribute 'rendered' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "srcNodeChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "srcNodeChange", "description": "Fires when the value for the configuration attribute 'srcNode' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "widthChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "widthChange", "description": "Fires when the value for the configuration attribute 'width' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "disabledChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "disabledChange", "description": "Fires when the value for the configuration attribute 'disabled' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "idChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "idChange", "description": "Fires when the value for the configuration attribute 'id' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "configs": {"srcNode": {"type": "String | Node", "description": "The DOM node to parse for configuration values, passed to the Widget's HTML_PARSER definition", "writeonce": ""}, "rendered": {"default": "false", "readonly": "", "type": "boolean", "description": "Flag indicating whether or not this Widget\nhas been through the render lifecycle phase."}, "render": {"type": "boolean | Node", "description": "Whether or not to render the widget automatically after init, and optionally, to which parent node.", "writeonce": ""}, "width": {"default": "EMPTY_STR", "type": "{String | Number}", "description": "String with units, or number, representing the width of the Widget. If a number is provided,\nthe default unit, defined by the Widgets DEF_UNIT, property is used."}, "strings": {"default": "null", "type": "Object", "description": "Collection of strings used to label elements of the Widget's UI."}, "height": {"default": "EMPTY_STR", "type": "{String | Number}", "description": "String with units, or number, representing the height of the Widget. If a number is provided,\nthe default unit, defined by the Widgets DEF_UNIT, property is used."}, "disabled": {"default": "false", "type": "boolean", "description": "Boolean indicating if the Widget should be disabled. The disabled implementation\nis left to the specific classes extending widget."}, "visible": {"default": "TRUE", "type": "boolean", "description": "Boolean indicating weather or not the Widget is visible."}, "focused": {"default": "false", "readonly": "", "type": "boolean", "description": "Boolean indicating if the Widget, or one of its descendants, \nhas focus."}, "boundingBox": {"type": "String | Node", "description": "The outermost DOM node for the Widget, used for sizing and positioning \nof a Widget as well as a containing element for any decorator elements used \nfor skinning.", "writeonce": ""}, "contentBox": {"type": "String | Node", "description": "A DOM node that is a direct descendent of a Widget's bounding box that \nhouses its content.", "writeonce": ""}, "id": {"default": "Generated using guid()", "type": "String", "writeonce": ""}, "tabIndex": {"default": "0", "type": "Number", "description": "Number (between -32767 to 32767) indicating the widget's \nposition in the default tab flow.  The value is used to set the \n\"tabIndex\" attribute on the widget's bounding box.  Negative values allow\nthe widget to receive DOM focus programmatically (by calling the focus\nmethod), while being removed from the default tab flow.  A value of \nnull removes the \"tabIndex\" attribute from the widget's bounding box."}}, "methods": {"_uiSetVisible": {"description": "Sets the visible state for the UI", "param": "{boolean} val", "protected": "", "params": [{"type": "boolean", "name": "val", "description": ""}], "guessedname": "_uiSetVisible", "guessedtype": "function"}, "render": {"description": "Establishes the initial DOM for the widget. Invoking this\nmethod will lead to the creating of all DOM elements for\nthe widget (or the manipulation of existing DOM elements \nfor the progressive enhancement use case).\n<p>\nThis method should only be invoked once for an initialized\nwidget.\n</p>\n<p>\nIt delegates to the widget specific renderer method to do\nthe actual work.\n</p>", "chainable": "", "param": "parentNode {Object | String} Optional. The Node under which the \nWidget is to be rendered. This can be a Node instance or a CSS selector string. \n<p>\nIf the selector string returns more than one Node, the first node will be used \nas the parentNode. NOTE: This argument is required if both the boundingBox and contentBox\nare not currently in the document. If it's not provided, the Widget will be rendered\nto the body of the current document in this case.\n</p>", "params": [{"type": "Object | String", "name": "parentNode", "description": "  Optional. The Node under which the \nWidget is to be rendered. This can be a Node instance or a CSS selector string. \n<p>\nIf the selector string returns more than one Node, the first node will be used \nas the parentNode. NOTE: This argument is required if both the boundingBox and contentBox\nare not currently in the document. If it's not provided, the Widget will be rendered\nto the body of the current document in this case.\n</p>"}], "guessedname": "render", "guessedtype": "function", "final": ""}, "show": {"chainable": "", "description": "Shows the Widget by setting the \"visible\" attribute to \"true\".", "guessedname": "show", "guessedtype": "function"}, "focus": {"chainable": "", "description": "Causes the Widget to receive the focus by setting the \"focused\" \nattribute to \"true\".", "guessedname": "focus", "guessedtype": "function"}, "initializer": {"description": "Initializer lifecycle implementation for the Widget class. Registers the \nwidget instance, and runs through the Widget's HTML_PARSER definition.", "param": "config {Object} Configuration object literal for the widget", "protected": "", "params": [{"type": "Object", "name": "config", "description": "  Configuration object literal for the widget"}], "guessedname": "initializer", "guessedtype": "function"}, "_renderUI": {"protected": "", "description": "Initializes the UI state for the Widget's bounding/content boxes.", "guessedname": "_renderUI", "guessedtype": "function"}, "_setBox": {"return": {"type": "Node", "description": "The node"}, "description": "Helper method to set the bounding/content box, or create it from\nthe provided template if not found.", "private": "", "params": [{"type": "String", "name": "id", "description": " The node's id attribute"}, {"type": "Node|String", "name": "node", "description": " The node reference"}, {"type": "String", "name": "template", "description": " HTML string template for the node"}], "param": "{String} id The node's id attribute", "guessedname": "_setBox", "guessedtype": "function"}, "renderer": {"protected": "", "description": "Creates DOM (or manipulates DOM for progressive enhancement)\nThis method is invoked by render() and is not chained \nautomatically for the class hierarchy (unlike initializer, destructor) \nso it should be chained manually for subclasses if required.", "guessedname": "renderer", "guessedtype": "function"}, "_applyParser": {"protected": "", "params": [{"type": "Object", "name": "config", "description": "  User configuration object (will be populated with values from Node)"}], "description": "Utilitity method used to apply the <code>HTML_PARSER</code> configuration for the \ninstance, to retrieve config data values.", "guessedname": "_applyParser", "guessedtype": "function"}, "_removeLoadingClassNames": {"protected": "", "description": "Removes class names representative of the widget's loading state from \nthe boundingBox.", "guessedname": "_removeLoadingClassNames", "guessedtype": "function"}, "_syncUI": {"protected": "", "description": "Updates the widget UI to reflect the attribute state.", "guessedname": "_syncUI", "guessedtype": "function"}, "_createUIEvent": {"description": "Binds a delegated DOM event listener of the specified type to the \nWidget's outtermost DOM element to facilitate the firing of a Custom\nEvent of the same type for the Widget instance.", "param": "type {String} String representing the name of the event", "params": [{"type": "String", "name": "type", "description": "  String representing the name of the event"}], "private": "", "guessedname": "_createUIEvent", "guessedtype": "function"}, "_uiSetHeight": {"description": "Sets the height on the widget's bounding box element", "param": "{String | Number} val", "protected": "", "params": [{"type": "String | Number", "name": "val", "description": ""}], "guessedname": "_uiSetHeight", "guessedtype": "function"}, "_isUIEvent": {"return": {"type": "String", "description": "Event Returns the name of the UI Event, otherwise \nundefined."}, "description": "Determines if the specified event is a UI event.", "private": "", "params": [{"type": "String", "name": "type", "description": "  String representing the name of the event"}], "param": "type {String} String representing the name of the event", "guessedname": "_getUIEvent", "guessedtype": "function"}, "_bindAttrUI": {"description": "Binds after listeners for the list of attributes provided", "param": "{Array} attrs", "params": [{"type": "Array", "name": "attrs", "description": ""}], "private": "", "guessedname": "_bindAttrUI", "guessedtype": "function"}, "hide": {"chainable": "", "description": "Hides the Widget by setting the \"visible\" attribute to \"false\".", "guessedname": "hide", "guessedtype": "function"}, "getString": {"return": {"type": "String", "description": "The string"}, "description": "Helper method to get a specific string value", "deprecated": "Used by deprecated WidgetLocale implementations.", "param": "{String} key", "params": [{"type": "String", "name": "key", "description": ""}], "guessedname": "getString", "guessedtype": "function"}, "_bindUI": {"protected": "", "description": "Sets up DOM and CustomEvent listeners for the widget.", "guessedname": "_bindUI", "guessedtype": "function"}, "Widget.getByNode": {"return": {"type": "Widget", "description": "Widget instance, or null if not found."}, "description": "Returns the widget instance whose bounding box contains, or is, the given node. \n<p>\nIn the case of nested widgets, the nearest bounding box ancestor is used to\nreturn the widget instance.\n</p>", "param": "node {Node | String} The node for which to return a Widget instance. If a selector\nstring is passed in, which selects more than one node, the first node found is used.", "static": "", "guessedname": "getByNode", "guessedtype": "function", "params": [{"type": "Node | String", "name": "node", "description": "  The node for which to return a Widget instance. If a selector\nstring is passed in, which selects more than one node, the first node found is used."}]}, "_unbindUI": {"protected": "", "guessedname": "_unbindUI", "guessedtype": "function"}, "destructor": {"protected": "", "description": "Destructor lifecycle implementation for the Widget class. Purges events attached\nto the bounding box (and all child nodes) and removes the Widget from the \nlist of registered widgets.", "guessedname": "destructor", "guessedtype": "function"}, "getSkinName": {"return": {"type": "String", "description": "the name of the skin, or null (yui3-skin-sam => sam)"}, "description": "Returns the name of the skin that's currently applied to the widget.\nThis is only really useful after the widget's DOM structure is in the\ndocument, either by render or by progressive enhancement.  Searches up\nthe Widget's ancestor axis for a class yui3-skin-(name), and returns the\n(name) portion.  Otherwise, returns null.", "guessedname": "getSkinName", "guessedtype": "function"}, "toString": {"return": {"type": "String", "description": "The default string value for the widget [ displays the NAME of the instance, and the unique id ]"}, "description": "Generic toString implementation for all widgets.", "guessedname": "toString", "guessedtype": "function"}, "blur": {"chainable": "", "description": "Causes the Widget to lose focus by setting the \"focused\" attribute \nto \"false\"", "guessedname": "blur", "guessedtype": "function"}, "_uiSizeCB": {"protected": "", "params": [{"type": "boolean", "name": "expand", "description": ""}], "param": "{boolean} expand", "guessedname": "_uiSizeCB", "guessedtype": "function"}, "bindUI": {"protected": "", "description": "Configures/Sets up listeners to bind Widget State to UI/DOM\nThis method is not called by framework and is not chained \nautomatically for the class hierarchy.", "guessedname": "bindUI", "guessedtype": "property"}, "_renderBox": {"description": "Helper method to collect the boundingBox and contentBox, set styles and append to the provided parentNode, if not\nalready a child. The owner document of the boundingBox, or the owner document of the contentBox will be used \nas the document into which the Widget is rendered if a parentNode is node is not provided. If both the boundingBox and\nthe contentBox are not currently in the document, and no parentNode is provided, the widget will be rendered \nto the current document's body.", "param": "{Node} parentNode The parentNode to render the widget to. If not provided, and both the boundingBox and\nthe contentBox are not currently in the document, the widget will be rendered to the current document's body.", "params": [{"type": "Node", "name": "parentNode", "description": " The parentNode to render the widget to. If not provided, and both the boundingBox and\nthe contentBox are not currently in the document, the widget will be rendered to the current document's body."}], "private": "", "guessedname": "_renderBox", "guessedtype": "function"}, "_setBB": {"return": {"type": "", "description": "Node"}, "description": "Setter for the boundingBox attribute", "private": "", "params": [{"type": "", "name": "Node/String", "description": ""}], "param": "Node/String", "guessedname": "_setBB", "guessedtype": "function"}, "_onDocMouseDown": {"description": "\"mousedown\" event handler for the owner document of the \nwidget's bounding box.", "param": "{EventFacade} evt The event facade for the DOM focus event", "protected": "", "params": [{"type": "EventFacade", "name": "evt", "description": " The event facade for the DOM focus event"}], "guessedname": "_onDocMouseDown", "guessedtype": "function"}, "_uiSetTabIndex": {"description": "Set the tabIndex on the widget's rendered UI", "param": "Number", "protected": "", "params": [{"type": "", "name": "Number", "description": ""}], "guessedname": "_uiSetTabIndex", "guessedtype": "function"}, "enable": {"chainable": "", "description": "Set the Widget's \"disabled\" attribute to \"false\".", "guessedname": "enable", "guessedtype": "function"}, "_uiSetDim": {"param": "{String} dim The dimension - \"width\" or \"height\"", "params": [{"type": "String", "name": "dim", "description": " The dimension - \"width\" or \"height\""}, {"type": "Number | String", "name": "val", "description": " The value to set"}], "private": "", "guessedname": "_uiSetDim", "guessedtype": "function"}, "_uiSetFocused": {"description": "Sets the focused state for the UI", "param": "{boolean} val", "protected": "", "params": [{"type": "boolean", "name": "val", "description": ""}, {"type": "string", "name": "src", "description": " String representing the source that triggered an update to \nthe UI."}], "guessedname": "_uiSetFocused", "guessedtype": "function"}, "_guid": {"protected": "", "guessedname": "_guid", "guessedtype": "function"}, "_validTabIndex": {"protected": "", "params": [{"type": "Number", "name": "tabIndex", "description": ""}], "param": "{Number} tabIndex", "guessedname": "_validTabIndex", "guessedtype": "function"}, "_unbindDOM": {"protected": "", "guessedname": "_unbindDOM", "guessedtype": "function"}, "_renderBoxClassNames": {"protected": "", "description": "Applies standard class names to the boundingBox and contentBox", "guessedname": "_renderBoxClassNames", "guessedtype": "function"}, "_setAttrUI": {"param": "{EventFacade} e", "params": [{"type": "EventFacade", "name": "e", "description": ""}], "private": "", "guessedname": "_setAttrUI", "guessedtype": "function"}, "_applyParsedConfig": {"protected": "", "return": {"type": "Object", "description": "The merged configuration literal"}, "guessedname": "_applyParsedConfig", "guessedtype": "function"}, "disable": {"chainable": "", "description": "Set the Widget's \"disabled\" attribute to \"true\".", "guessedname": "disable", "guessedtype": "function"}, "_bindDOM": {"protected": "", "description": "Sets up DOM listeners, on elements rendered by the widget.", "guessedname": "_bindDOM", "guessedtype": "function"}, "_getSrcNode": {"protected": "", "return": {"type": "Node", "description": "The Node to apply HTML_PARSER to"}, "guessedname": "_getSrcNode", "guessedtype": "function"}, "_syncAttrUI": {"description": "Invokes the _uiSet&#61;ATTR NAME&#62; method for the list of attributes provided", "param": "{Array} attrs", "params": [{"type": "Array", "name": "attrs", "description": ""}], "private": "", "guessedname": "_syncAttrUI", "guessedtype": "function"}, "_onDocFocus": {"description": "DOM focus event handler, used to sync the state of the Widget with the DOM", "param": "{EventFacade} evt The event facade for the DOM focus event", "protected": "", "params": [{"type": "EventFacade", "name": "evt", "description": " The event facade for the DOM focus event"}], "guessedname": "_onDocFocus", "guessedtype": "function"}, "_uiSetWidth": {"description": "Sets the width on the widget's bounding box element", "param": "{String | Number} val", "protected": "", "params": [{"type": "String | Number", "name": "val", "description": ""}], "guessedname": "_uiSetWidth", "guessedtype": "function"}, "syncUI": {"protected": "", "description": "Refreshes the rendered UI, based on Widget State\nThis method is not called by framework and is not chained\nautomatically for the class hierarchy.", "guessedname": "syncUI", "guessedtype": "property"}, "_getHtmlParser": {"guessedname": "_getHtmlParser", "return": {"type": "Object", "description": "HTML_PARSER definition for this instance"}, "description": "Gets the HTML_PARSER definition for this instance, by merging HTML_PARSER\ndefinitions across the class hierarchy.", "private": "", "guessedtype": "function"}, "_getUIEventNode": {"protected": "", "description": "Returns the node on which to bind delegate listeners.", "guessedname": "_getUIEventNode", "guessedtype": "function"}, "_strSetter": {"return": {"type": "String", "description": "The full set of strings to set"}, "description": "The default setter for the strings attribute. Merges partial sets\ninto the full string set, to allow users to partial sets of strings", "param": "{Object} strings", "protected": "", "params": [{"type": "Object", "name": "strings", "description": ""}], "guessedname": "_strSetter", "guessedtype": "function"}, "_initUIEvent": {"return": {"type": "String", "description": ""}, "description": "Sets up infastructure required to fire a UI event.", "private": "", "params": [{"type": "String", "name": "type", "description": "  String representing the name of the event"}], "param": "type {String} String representing the name of the event", "guessedname": "_initUIEvent", "guessedtype": "function"}, "_defRenderFn": {"description": "Default render handler", "param": "{EventFacade} e The Event object", "protected": "", "params": [{"type": "EventFacade", "name": "e", "description": " The Event object"}, {"type": "Node", "name": "parentNode", "description": " The parent node to render to, if passed in to the <code>render</code> method"}], "guessedname": "_defRenderFn", "guessedtype": "function"}, "_defaultCB": {"protected": "", "description": "Returns the default value for the contentBox attribute. \nFor the Widget class, this will be the srcNode if provided, otherwise null (resulting in\na new contentBox node instance being created)", "guessedname": "_defaultCB", "guessedtype": "function"}, "getClassName": {"param": "{String}+ One or more classname bits to be joined and prefixed", "params": [{"type": "String*", "name": "args*", "description": " 0..n strings which should be concatenated, using the default separator defined by ClassNameManager, to create the class name"}], "description": "Generate a standard prefixed classname for the Widget, prefixed by the default prefix defined\nby the <code>Y.config.classNamePrefix</code> attribute used by <code>ClassNameManager</code> and \n<code>Widget.NAME.toLowerCase()</code> (e.g. \"yui-widget-xxxxx-yyyyy\", based on default values for \nthe prefix and widget class name).\n<p>\nThe instance based version of this method can be used to generate standard prefixed classnames,\nbased on the instances NAME, as opposed to Widget.NAME. This method should be used when you\nneed to use a constant class name across different types instances.\n</p>", "guessedname": "getClassName", "guessedtype": "function"}, "_setCB": {"return": {"type": "", "description": "Node"}, "description": "Setter for the contentBox attribute", "private": "", "params": [{"type": "Node|String", "name": "node", "description": ""}], "param": "{Node|String} node", "guessedname": "_setCB", "guessedtype": "function"}, "renderUI": {"protected": "", "description": "Adds nodes to the DOM \nThis method is not called by framework and is not chained \nautomatically for the class hierarchy.", "guessedname": "renderUI", "guessedtype": "property"}, "_uiSetDisabled": {"description": "Sets the disabled state for the UI", "param": "{boolean} val", "protected": "", "params": [{"type": "boolean", "name": "val", "description": ""}], "guessedname": "_uiSetDisabled", "guessedtype": "function"}}, "extends": "Base", "superclass": "Base", "file": "widget.js", "shortname": "Widget", "properties": {"DEF_PARENT_NODE": {"type": "String | Node", "description": "Default node to render the bounding box to. If not set,\nwill default to the current document body.", "guessedname": "DEF_PARENT_NODE", "guessedtype": "property"}, "CONTENT_TEMPLATE": {"type": "String", "description": "Property defining the markup template for content box. If your Widget doesn't\nneed the dual boundingBox/contentBox structure, set CONTENT_TEMPLATE to null,\nand contentBox and boundingBox will both point to the same Node.", "guessedname": "CONTENT_TEMPLATE", "guessedtype": "property"}, "DEF_UNIT": {"type": "String", "description": "Default unit to use for dimension values", "guessedname": "DEF_UNIT", "guessedtype": "property"}, "Widget.HTML_PARSER": {"type": "Object", "static": "", "description": "Object hash, defining how attribute values are to be parsed from\nmarkup contained in the widget's content box. e.g.:\n<pre>\n{\n// Set single Node references using selector syntax \n// (selector is run through node.one)\ntitleNode: \"span.yui-title\",\n// Set NodeList references using selector syntax \n// (array indicates selector is to be run through node.all)\nlistNodes: [\"li.yui-item\"],\n// Set other attribute types, using a parse function. \n// Context is set to the widget instance.\nlabel: function(contentBox) {\nreturn contentBox.one(\"span.title\").get(\"innerHTML\");\n}\n}\n</pre>", "guessedname": "HTML_PARSER", "guessedtype": "property"}, "_BIND_UI_ATTRS": {"guessedname": "_BIND_UI_ATTRS", "type": "Array", "description": "The list of UI attributes to bind for Widget's _bindUI implementation", "private": "", "guessedtype": "property"}, "BOUNDING_TEMPLATE": {"type": "String", "description": "Property defining the markup template for bounding box.", "guessedname": "BOUNDING_TEMPLATE", "guessedtype": "property"}, "_buildCfg": {"description": "The build configuration for the Widget class.\n<p>\nDefines the static fields which need to be aggregated,\nwhen this class is used as the main class passed to \nthe <a href=\"Base.html#method_build\">Base.build</a> method.\n</p>", "private": "", "static": "", "guessedname": "_buildCfg", "guessedtype": "property", "type": "Object", "final": ""}, "Widget.UI_SRC": {"description": "Constant used to identify state changes originating from\nthe DOM (as opposed to the JavaScript model).", "static": "", "guessedname": "UI", "guessedtype": "property", "type": "String", "final": ""}, "Widget.CSS_PREFIX": {"description": "The css prefix which the static Widget.getClassName method should use when constructing class names", "default": "Widget.NAME.toLowerCase()", "private": "", "static": "", "guessedname": "CSS_PREFIX", "guessedtype": "property", "type": "String"}, "_SYNC_UI_ATTRS": {"guessedname": "_SYNC_UI_ATTRS", "type": "Array", "description": "The list of UI attributes to sync for Widget's _syncUI implementation", "private": "", "guessedtype": "property"}, "Widget.ATTRS": {"type": "Object", "static": "", "description": "Static property used to define the default attribute \nconfiguration for the Widget.", "guessedname": "ATTRS", "guessedtype": "property"}, "Widget.NAME": {"type": "String", "static": "", "description": "Static property provides a string to identify the class.\n<p>\nCurrently used to apply class identifiers to the bounding box \nand to classify events fired by the widget.\n</p>", "guessedname": "NAME", "guessedtype": "property"}, "UI_EVENTS": {"type": "Object", "description": "Map of DOM events that should be fired as Custom Events by the  \nWidget instance.", "guessedname": "UI_EVENTS", "guessedtype": "property"}}, "description": "A base class for widgets, providing:\n<ul>\n<li>The render lifecycle method, in addition to the init and destroy \nlifecycle methods provide by Base</li>\n<li>Abstract methods to support consistent MVC structure across \nwidgets: renderer, renderUI, bindUI, syncUI</li>\n<li>Support for common widget attributes, such as boundingBox, contentBox, visible, \ndisabled, focused, strings</li>\n</ul>"}, "ParseContent": {"name": "ParseContent", "constructors": [{"params": [{"type": "Object", "name": "config", "description": "  Object literal specifying widget configuration properties."}], "description": "A base class for ParseContent, providing:\n<ul>\n<li>After plug ParseContent on a A.Node instance the javascript chunks will be executed (remote and inline scripts)</li>\n<li>All the javascripts within a content will be executed according to the order of apparition</li>\n</ul>\n<p><strong>NOTE:</strong> For performance reasons on DOM manipulation,\nParseContent only parses the content passed to the\n<a href=\"Node.html#method_setContent\">setContent</a>,\n<a href=\"Node.html#method_prepend\">prepend</a> and\n<a href=\"Node.html#method_append\">append</a> methods.</p>\nQuick Example:<br/>\n<pre><code>node.plug(A.Plugin.ParseContent);</code></pre>\nCheck the list of <a href=\"ParseContent.html#configattributes\">Configuration Attributes</a> available for\nParseContent."}], "namespace": "", "module": "aui-parse-content", "guessedname": "ParseContent", "methods": {"parseContent": {"return": {"type": "String", "description": ""}, "description": "Extract the <code>script</code> tags from the string content and\nevaluate the chunks.", "param": "{String} content HTML string", "params": [{"type": "String", "name": "content", "description": " HTML string"}], "guessedname": "parseContent", "guessedtype": "function"}, "_bindAOP": {"protected": "", "description": "Bind listeners on the <code>insert</code> and <code>setContent</code>\nmethods of the Node instance where you are plugging the ParseContent.\nThese listeners are responsible for intercept the HTML passed and parse\nthem.", "guessedname": "_bindAOP", "guessedtype": "function"}, "initializer": {"protected": "", "description": "Construction logic executed during ParseContent instantiation. Lifecycle.", "guessedname": "initializer", "guessedtype": "function"}, "globalEval": {"param": "{String} data JavaScript String.", "params": [{"type": "String", "name": "data", "description": " JavaScript String."}], "description": "Global eval the <data>data</data> passed.", "guessedname": "globalEval", "guessedtype": "function"}, "clean": {"return": {"type": "Object", "description": ""}, "description": "Create an HTML fragment with the String passed, extract all the script\ntags and return an Object with a reference for the extracted scripts and\nthe fragment.", "param": "{String} content HTML content.", "protected": "", "params": [{"type": "String", "name": "content", "description": " HTML content."}], "guessedname": "_clean", "guessedtype": "function"}, "_dispatch": {"return": {"type": "String", "description": ""}, "description": "Loop trough all extracted <code>script</code> tags and evaluate them.", "param": "{Object} output Object containing the reference for the fragment and the extracted <code>script</code> tags.", "protected": "", "params": [{"type": "Object", "name": "output", "description": " Object containing the reference for the fragment and the extracted <code>script</code> tags."}], "guessedname": "_dispatch", "guessedtype": "function"}}, "extends": "Plugin.Base", "superclass": "Plugin.Base", "file": "aui-parse-content.js", "guessedtype": "property", "shortname": "ParseContent", "properties": {"ParseContent.NS": {"type": "String", "static": "", "description": "Static property provides a string to identify the namespace.", "guessedname": "NS", "guessedtype": "property"}, "ParseContent.ATTRS": {"type": "Object", "static": "", "description": "Static property used to define the default attribute\nconfiguration for the ParseContent.", "guessedname": "ATTRS", "guessedtype": "property"}, "ParseContent.NAME": {"type": "String", "static": "", "description": "Static property provides a string to identify the class.", "guessedname": "NAME", "guessedtype": "property"}}, "description": "A base class for ParseContent, providing:\n<ul>\n<li>After plug ParseContent on a A.Node instance the javascript chunks will be executed (remote and inline scripts)</li>\n<li>All the javascripts within a content will be executed according to the order of apparition</li>\n</ul>\n<p><strong>NOTE:</strong> For performance reasons on DOM manipulation,\nParseContent only parses the content passed to the\n<a href=\"Node.html#method_setContent\">setContent</a>,\n<a href=\"Node.html#method_prepend\">prepend</a> and\n<a href=\"Node.html#method_append\">append</a> methods.</p>\nQuick Example:<br/>\n<pre><code>node.plug(A.Plugin.ParseContent);</code></pre>\nCheck the list of <a href=\"ParseContent.html#configattributes\">Configuration Attributes</a> available for\nParseContent."}, "TabView": {"name": "TabView", "constructors": [{"params": [{"type": "Object", "name": "config", "description": "  Object literal specifying tabview configuration properties."}], "description": "Provides a tabbed widget interface"}], "namespace": "", "module": "tabview", "guessedname": "TabView", "uses": ["WidgetParent"], "superclass": "Widget", "file": "tabview.js", "guessedtype": "property", "extends": "Widget", "shortname": "TabView", "description": "Provides a tabbed widget interface"}, "Test.TestNode": {"name": "Test.TestNode", "constructors": [{"params": [{"type": "Variant", "name": "testObject", "description": " A TestSuite, TestCase, or the name of a test function."}], "description": "A node in the test tree structure. May represent a TestSuite, TestCase, or\ntest function."}], "namespace": "Test", "module": "test", "methods": {"appendChild": {"return": {"type": "Void", "description": ""}, "description": "Appends a new test object (TestSuite, TestCase, or test function name) as a child\nof this node.", "param": "{Variant} testObject A TestSuite, TestCase, or the name of a test function.", "params": [{"type": "Variant", "name": "testObject", "description": " A TestSuite, TestCase, or the name of a test function."}], "guessedname": "appendChild", "guessedtype": "function"}}, "private": "", "file": "test.js", "shortname": "TestNode", "properties": {"testObject": {"type": "Variant", "description": "The TestSuite, TestCase, or test function represented by this node.", "guessedname": "testObject", "guessedtype": "property"}, "parent": {"type": "TestNode", "description": "Pointer to this node's parent.", "guessedname": "parent", "guessedtype": "property"}, "results": {"type": "object", "description": "Test results for this test object.", "guessedname": "results", "guessedtype": "property"}, "firstChild": {"type": "TestNode", "description": "Pointer to this node's first child.", "guessedname": "firstChild", "guessedtype": "property"}, "next": {"type": "TestNode", "description": "Pointer to this node's next sibling.", "guessedname": "next", "guessedtype": "property"}, "lastChild": {"type": "TestNode", "description": "Pointer to this node's last child.", "guessedname": "lastChild", "guessedtype": "property"}}, "description": "A node in the test tree structure. May represent a TestSuite, TestCase, or\ntest function."}, "plugin.NodeMenuNav": {"name": "plugin.NodeMenuNav", "configs": {"submenuHideDelay": {"description": "Number indicating the time (in milliseconds) that should expire before a \nsubmenu is hidden when the user mouses out of a menu label heading in the \ndirection of a submenu.", "writeonce": "", "default": "250", "readonly": "", "guessedname": "submenuHideDelay", "guessedtype": "property", "type": "Number"}, "useARIA": {"description": "Boolean indicating if use of the WAI-ARIA Roles and States should be \nenabled for the menu.", "writeonce": "", "default": "true", "readonly": "", "guessedname": "useARIA", "guessedtype": "property", "type": "boolean"}, "autoSubmenuDisplay": {"description": "Boolean indicating if submenus are automatically made visible when the \nuser mouses over the menu's items.", "writeonce": "", "default": "true", "readonly": "", "guessedname": "autoSubmenuDisplay", "guessedtype": "property", "type": "boolean"}, "mouseOutHideDelay": {"description": "Number indicating the time (in milliseconds) that should expire before a \nsubmenu is hidden when the user mouses out of it.", "writeonce": "", "default": "750", "readonly": "", "guessedname": "mouseOutHideDelay", "guessedtype": "property", "type": "Number"}, "submenuShowDelay": {"description": "Number indicating the time (in milliseconds) that should expire before a \nsubmenu is made visible when the user mouses over the menu's label.", "writeonce": "", "default": "250", "readonly": "", "guessedname": "submenuShowDelay", "guessedtype": "property", "type": "Number"}}, "namespace": "plugin", "module": "node-menunav", "events": {"mouseOutHideDelayChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "mouseOutHideDelayChange", "description": "Fires when the value for the configuration attribute 'mouseOutHideDelay' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "autoSubmenuDisplayChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "autoSubmenuDisplayChange", "description": "Fires when the value for the configuration attribute 'autoSubmenuDisplay' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "submenuShowDelayChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "submenuShowDelayChange", "description": "Fires when the value for the configuration attribute 'submenuShowDelay' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "submenuHideDelayChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "submenuHideDelayChange", "description": "Fires when the value for the configuration attribute 'submenuHideDelay' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "useARIAChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "useARIAChange", "description": "Fires when the value for the configuration attribute 'useARIA' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "guessedname": "NodeMenuNav", "methods": {"_showMenu": {"description": "Shows the specified menu.", "param": "{Node} menu Node instance representing a menu.", "protected": "", "params": [{"type": "Node", "name": "menu", "description": " Node instance representing a menu."}], "guessedname": "_showMenu", "guessedtype": "function"}, "_hideAndFocusLabel": {"protected": "", "description": "Hides all of the submenus of the root menu and focuses the \nlabel of the topmost submenu", "guessedname": "_hideAndFocusLabel", "guessedtype": "function"}, "_onMouseOut": {"description": "\"mouseout\" event handler for the menu.", "param": "{Object} event Object representing the DOM event.", "protected": "", "params": [{"type": "Object", "name": "event", "description": " Object representing the DOM event."}], "guessedname": "_onMouseOut", "guessedtype": "function"}, "_hideMenu": {"description": "Hides the specified menu.", "param": "{Node} menu Node instance representing a menu.", "protected": "", "params": [{"type": "Node", "name": "menu", "description": " Node instance representing a menu."}, {"type": "Boolean", "name": "activateAndFocusLabel", "description": " Boolean indicating if the label \nfor the specified \nmenu should be focused and set as active."}], "guessedname": "_hideMenu", "guessedtype": "function"}, "_toggleSubmenuDisplay": {"description": "\"mousedown,\" \"keydown,\" and \"click\" event handler for the \nmenu used to toggle the display of a submenu.", "param": "{Object} event Object representing the DOM event.", "protected": "", "params": [{"type": "Object", "name": "event", "description": " Object representing the DOM event."}], "guessedname": "_toggleSubmenuDisplay", "guessedtype": "function"}, "_onHorizontalMenuKeyDown": {"description": "\"keydown\" event handler for horizontal menus.", "param": "{Object} event Object representing the DOM event.", "protected": "", "params": [{"type": "Object", "name": "event", "description": " Object representing the DOM event."}], "guessedname": "_onHorizontalMenuKeyDown", "guessedtype": "function"}, "_onVerticalMenuKeyDown": {"description": "\"keydown\" event handler for vertical menus.", "param": "{Object} event Object representing the DOM event.", "protected": "", "params": [{"type": "Object", "name": "event", "description": " Object representing the DOM event."}], "guessedname": "_onVerticalMenuKeyDown", "guessedtype": "function"}, "_onMouseOver": {"description": "\"mouseover\" event handler for the menu.", "param": "{Object} event Object representing the DOM event.", "protected": "", "params": [{"type": "Object", "name": "event", "description": " Object representing the DOM event."}], "guessedname": "_onMouseOver", "guessedtype": "function"}, "_focusItem": {"description": "Focuses the specified menuitem or menu label.", "param": "{Node} item Node instance representing a menuitem or menu label.", "protected": "", "params": [{"type": "Node", "name": "item", "description": " Node instance representing a menuitem or menu label."}], "guessedname": "_focusItem", "guessedtype": "function"}, "_cancelHideSubmenuTimer": {"protected": "", "description": "Cancels the timer used to hide a submenu.", "guessedname": "_cancelHideSubmenuTimer", "guessedtype": "function"}, "_onActiveDescendantChange": {"description": "\"activeDescendantChange\" event handler for menu's \nFocus Manager.", "param": "{Object} event Object representing the Attribute change event.", "protected": "", "params": [{"type": "Object", "name": "event", "description": " Object representing the Attribute change event."}, {"type": "NodeMenuNav", "name": "menuNav", "description": " Object representing the NodeMenuNav instance."}], "guessedname": "_onActiveDescendantChange", "guessedtype": "function"}, "_onMenuLabelMouseOver": {"description": "\"mouseover\" event handler for a menu label.", "param": "{Node} menuLabel Node instance representing a menu label.", "protected": "", "params": [{"type": "Node", "name": "menuLabel", "description": " Node instance representing a menu label."}, {"type": "Object", "name": "event", "description": " Object representing the DOM event."}], "guessedname": "_onMenuLabelMouseOver", "guessedtype": "function"}, "_onDocMouseDown": {"description": "\"mousedown\" event handler for the owner document of \nthe menu.", "param": "{Object} event Object representing the DOM event.", "protected": "", "params": [{"type": "Object", "name": "event", "description": " Object representing the DOM event."}], "guessedname": "_onDocMouseDown", "guessedtype": "function"}, "_onMenuLabelMouseOut": {"description": "\"mouseout\" event handler for a menu label.", "param": "{Node} menuLabel Node instance representing a menu label.", "protected": "", "params": [{"type": "Node", "name": "menuLabel", "description": " Node instance representing a menu label."}, {"type": "Object", "name": "event", "description": " Object representing the DOM event."}], "guessedname": "_onMenuLabelMouseOut", "guessedtype": "function"}, "_afterActiveDescendantChange": {"description": "\"activeDescendantChange\" event handler for menu's \nFocus Manager.", "param": "{Object} event Object representing the Attribute change event.", "protected": "", "params": [{"type": "Object", "name": "event", "description": " Object representing the Attribute change event."}, {"type": "NodeMenuNav", "name": "menuNav", "description": " Object representing the NodeMenuNav instance."}], "guessedname": "_afterActiveDescendantChange", "guessedtype": "function"}, "_onMenuItemMouseOver": {"description": "\"mouseover\" event handler for a menuitem.", "param": "{Node} menuItem Node instance representing a menuitem.", "protected": "", "params": [{"type": "Node", "name": "menuItem", "description": " Node instance representing a menuitem."}, {"type": "Object", "name": "event", "description": " Object representing the DOM event."}], "guessedname": "_onMenuItemMouseOver", "guessedtype": "function"}, "_cancelShowSubmenuTimer": {"protected": "", "description": "Cancels the timer used to show a submenu.", "guessedname": "_cancelShowSubmenuTimer", "guessedtype": "function"}, "_isRoot": {"return": {"type": "Boolean", "description": "Boolean indicating if the specified menu is the root \nmenu in the menu."}, "description": "Returns a boolean indicating if the specified menu is the \nroot menu in the menu.", "param": "{Node} menu Node instance representing a menu.", "protected": "", "params": [{"type": "Node", "name": "menu", "description": " Node instance representing a menu."}], "guessedname": "_isRoot", "guessedtype": "function"}, "_getTopmostSubmenu": {"return": {"type": "Node", "description": "Node instance representing a menu."}, "description": "Returns the topmost submenu of a submenu hierarchy.", "param": "{Node} menu Node instance representing a menu.", "protected": "", "params": [{"type": "Node", "name": "menu", "description": " Node instance representing a menu."}], "guessedname": "_getTopmostSubmenu", "guessedtype": "function"}, "_clearActiveItem": {"protected": "", "description": "Clears the menu's active descendent.", "guessedname": "_clearActiveItem", "guessedtype": "function"}, "_onMouseMove": {"description": "\"mousemove\" event handler for the menu.", "param": "{Object} event Object representing the DOM event.", "protected": "", "params": [{"type": "Object", "name": "event", "description": " Object representing the DOM event."}], "guessedname": "_onMouseMove", "guessedtype": "function"}, "_onMenuItemMouseOut": {"description": "\"mouseout\" event handler for a menuitem.", "param": "{Node} menuItem Node instance representing a menuitem.", "protected": "", "params": [{"type": "Node", "name": "menuItem", "description": " Node instance representing a menuitem."}, {"type": "Object", "name": "event", "description": " Object representing the DOM event."}], "guessedname": "_onMenuItemMouseOut", "guessedtype": "function"}, "_onDocFocus": {"description": "\"focus\" event handler for the owner document of the MenuNav.", "param": "{Object} event Object representing the DOM event.", "protected": "", "params": [{"type": "Object", "name": "event", "description": " Object representing the DOM event."}], "guessedname": "_onDocFocus", "guessedtype": "function"}, "_onMenuMouseOver": {"description": "\"mouseover\" event handler for a menu.", "param": "{Node} menu Node instance representing a menu.", "protected": "", "params": [{"type": "Node", "name": "menu", "description": " Node instance representing a menu."}, {"type": "Object", "name": "event", "description": " Object representing the DOM event."}], "guessedname": "_onMenuMouseOver", "guessedtype": "function"}, "_hideAllSubmenus": {"description": "Hides all submenus of the specified menu.", "param": "{Node} menu Node instance representing a menu.", "protected": "", "params": [{"type": "Node", "name": "menu", "description": " Node instance representing a menu."}], "guessedname": "_hideAllSubmenus", "guessedtype": "function"}, "_setActiveItem": {"description": "Sets the specified menuitem or menu label as the menu's \nactive descendent.", "param": "{Node} item Node instance representing a menuitem or menu label.", "protected": "", "params": [{"type": "Node", "name": "item", "description": " Node instance representing a menuitem or menu label."}], "guessedname": "_setActiveItem", "guessedtype": "function"}, "_initFocusManager": {"protected": "", "description": "Initializes and updates the Focus Manager so that is is \nalways managing descendants of the active menu.", "guessedname": "_initFocusManager", "guessedtype": "function"}, "_onKeyPress": {"description": "\"keypress\" event handler for the menu.", "param": "{Object} event Object representing the DOM event.", "protected": "", "params": [{"type": "Object", "name": "event", "description": " Object representing the DOM event."}], "guessedname": "_onKeyPress", "guessedtype": "function"}, "_onMenuMouseOut": {"description": "\"mouseout\" event handler for a menu.", "param": "{Node} menu Node instance representing a menu.", "protected": "", "params": [{"type": "Node", "name": "menu", "description": " Node instance representing a menu."}, {"type": "Object", "name": "event", "description": " Object representing the DOM event."}], "guessedname": "_onMenuMouseOut", "guessedtype": "function"}, "_onKeyDown": {"description": "\"keydown\" event handler for the menu.", "param": "{Object} event Object representing the DOM event.", "protected": "", "params": [{"type": "Object", "name": "event", "description": " Object representing the DOM event."}], "guessedname": "_onKeyDown", "guessedtype": "function"}}, "file": "node-menunav.js", "guessedtype": "function", "shortname": "NodeMenuNav", "properties": {"_hideAllSubmenusTimer": {"description": "Timer used to hide a all submenus.", "default": "null", "protected": "", "guessedname": "_hideAllSubmenusTimer", "guessedtype": "property", "type": "Object"}, "_blockMouseEvent": {"description": "Boolean indicating whether or not to handle the \n\"mouseover\" event.", "default": "false", "protected": "", "guessedname": "_blockMouseEvent", "guessedtype": "property", "type": "Boolean"}, "_activeMenu": {"description": "Node instance representing the menu that is the parent of \nthe menu's active descendent.", "default": "null", "protected": "", "guessedname": "_activeMenu", "guessedtype": "property", "type": "Node"}, "NodeMenuNav.SHIM_TEMPLATE_TITLE": {"default": "\"Menu Stacking Shim\"", "type": "String", "description": "String representing the value for the <code>title</code> \nattribute for the shim used to prevent <code>&#60;select&#62;</code> elements \nfrom poking through menus in IE 6.", "guessedname": "SHIM_TEMPLATE_TITLE", "guessedtype": "property"}, "_hasFocus": {"description": "Boolean indicating if the menu has focus.", "default": "false", "protected": "", "guessedname": "_hasFocus", "guessedtype": "property", "type": "Boolean"}, "_currentMouseX": {"description": "Number representing the current x coordinate of the mouse \ninside the menu.", "default": "0", "protected": "", "guessedname": "_currentMouseX", "guessedtype": "property", "type": "Number"}, "_hideSubmenuTimer": {"description": "Timer used to hide a submenu.", "default": "null", "protected": "", "guessedname": "_hideSubmenuTimer", "guessedtype": "property", "type": "Object"}, "_firstItem": {"description": "Node instance representing the first item (menuitem or menu \nlabel) in the root menu of a menu.", "default": "null", "protected": "", "guessedname": "_firstItem", "guessedtype": "property", "type": "Node"}, "_showSubmenuTimer": {"description": "Timer used to show a submenu.", "default": "null", "protected": "", "guessedname": "_showSubmenuTimer", "guessedtype": "property", "type": "Object"}, "_movingToSubmenu": {"description": "Boolean indicating if the mouse is moving from a menu \nlabel to its corresponding submenu.", "default": "false", "protected": "", "guessedname": "_movingToSubmenu", "guessedtype": "property", "type": "Boolean"}, "NodeMenuNav.SHIM_TEMPLATE": {"default": "&#34;&#60;iframe frameborder=&#34;0&#34; tabindex=&#34;-1&#34; \nclass=&#34;yui-shim&#34; title=&#34;Menu Stacking Shim&#34; \nsrc=&#34;javascript:false;&#34;&#62;&#60;/iframe&#62;&#34;", "type": "String", "description": "String representing the HTML used to create the \n<code>&#60;iframe&#62;</code> shim used to prevent \n<code>&#60;select&#62;</code> elements from poking through menus in IE 6."}, "_activeItem": {"description": "Node instance representing the menu's active descendent: \nthe menuitem or menu label the user is currently interacting with.", "default": "null", "protected": "", "guessedname": "_activeItem", "guessedtype": "property", "type": "Node"}, "_rootMenu": {"description": "Node instance representing the root menu in the menu.", "default": "null", "protected": "", "guessedname": "_rootMenu", "guessedtype": "property", "type": "Node"}}, "description": "The NodeMenuNav class is a plugin for a Node instance.  The class is used via  \nthe <a href=\"Node.html#method_plug\"><code>plug</code></a> method of Node and \nshould not be instantiated directly."}, "Base": {"name": "Base", "constructors": [{"params": [{"type": "Object", "name": "config", "description": " Object with configuration property name/value pairs. The object can be \nused to provide default values for the objects published attributes.\n<p>\nThe config object can also contain the following non-attribute properties, providing a convenient \nway to configure events listeners and plugins for the instance, as part of the constructor call:\n</p>\n<dl>\n<dt>on</dt>\n<dd>An event name to listener function map, to register event listeners for the \"on\" moment of the event. A constructor convenience property for the <a href=\"Base.html#method_on\">on</a> method.</dd>\n<dt>after</dt>\n<dd>An event name to listener function map, to register event listeners for the \"after\" moment of the event. A constructor convenience property for the <a href=\"Base.html#method_after\">after</a> method.</dd>\n<dt>bubbleTargets</dt>\n<dd>An object, or array of objects, to register as bubble targets for bubbled events fired by this instance. A constructor convenience property for the <a href=\"EventTarget.html#method_addTarget\">addTarget</a> method.</dd>\n<dt>plugins</dt>\n<dd>A plugin, or array of plugins to be plugged into the instance (see PluginHost's plug method for signature details). A constructor convenience property for the <a href=\"Plugin.Host.html#method_plug\">plug</a> method.</dd>\n</dl>"}], "description": "<p>\nA base class which objects requiring attributes and custom event support can \nextend. Base also handles the chaining of initializer and destructor methods across \nthe hierarchy as part of object construction and destruction. Additionally, attributes configured \nthrough the static <a href=\"#property_Base.ATTRS\">ATTRS</a> property for each class \nin the hierarchy will be initialized by Base.\n</p>\n<p>\nThe static <a href=\"#property_Base.NAME\">NAME</a> property of each class extending \nfrom Base will be used as the identifier for the class, and is used by Base to prefix \nall events fired by instances of that class.\n</p>"}], "namespace": "", "module": "base", "events": {"destroy": {"preventable": "_defDestroyFn", "params": [{"type": "EventFacade", "name": "e", "description": " Event object"}], "description": "<p>\nLifecycle event for the destroy phase, \nfired prior to destruction. Invoking the preventDefault \nmethod on the event object provided to subscribers will \nprevent destruction from proceeding.\n</p>\n<p>\nSubscribers to the \"after\" moment of this event, will be notified\nafter destruction is complete (and as a result cannot prevent\ndestruction).\n</p>", "param": "{EventFacade} e Event object"}, "destroyedChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "destroyedChange", "description": "Fires when the value for the configuration attribute 'destroyed' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "init": {"preventable": "_defInitFn", "params": [{"type": "EventFacade", "name": "e", "description": " Event object, with a cfg property which \nrefers to the configuration object passed to the constructor."}], "description": "<p>\nLifecycle event for the init phase, fired prior to initialization. \nInvoking the preventDefault() method on the event object provided \nto subscribers will prevent initialization from occuring.\n</p>\n<p>\nSubscribers to the \"after\" momemt of this event, will be notified\nafter initialization of the object is complete (and therefore\ncannot prevent initialization).\n</p>", "param": "{EventFacade} e Event object, with a cfg property which \nrefers to the configuration object passed to the constructor."}, "initializedChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "initializedChange", "description": "Fires when the value for the configuration attribute 'initialized' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "configs": {"destroyed": {"description": "Flag indicating whether or not this object\nhas been through the destroy lifecycle phase.", "default": "false", "readonly": "", "guessedname": "destroyed", "guessedtype": "property", "type": "boolean"}, "initialized": {"description": "Flag indicating whether or not this object\nhas been through the init lifecycle phase.", "default": "false", "readonly": "", "guessedname": "initialized", "guessedtype": "property", "type": "boolean"}}, "methods": {"Base.unplug": {"static": "", "description": "Alias for <a href=\"Plugin.Host.html#method_Plugin.Host.unplug\">Plugin.Host.unplug</a>. See the \naliased method for argument and return value details.", "guessedname": "unplug", "guessedtype": "property"}, "toString": {"return": {"type": "String", "description": "String representation for this object"}, "description": "Default toString implementation. Provides the constructor NAME\nand the instance ID.", "guessedname": "toString", "guessedtype": "function"}, "_defInitFn": {"description": "Default init event handler", "param": "{EventFacade} e Event object, with a cfg property which \nrefers to the configuration object passed to the constructor.", "protected": "", "params": [{"type": "EventFacade", "name": "e", "description": " Event object, with a cfg property which \nrefers to the configuration object passed to the constructor."}], "guessedname": "_defInitFn", "guessedtype": "function"}, "Base.plug": {"static": "", "description": "Alias for <a href=\"Plugin.Host.html#method_Plugin.Host.plug\">Plugin.Host.plug</a>. See aliased \nmethod for argument and return value details.", "guessedname": "plug", "guessedtype": "property"}, "_initHierarchyData": {"private": "", "description": "A helper method used by _getClasses and _getAttrCfgs, which determines both\nthe array of classes and aggregate set of attribute configurations\nacross the class hierarchy for the instance.", "guessedname": "_initHierarchyData", "guessedtype": "function"}, "Base.mix": {"return": {"type": "Function", "description": "The modified main class, with extensions mixed in."}, "description": "<p>Mixes in a list of extensions to an existing class.</p>", "param": "{Function} main The existing class into which the extensions should be mixed.  The class needs to be Base or class derived from base (e.g. Widget)", "static": "", "guessedname": "mix", "guessedtype": "function", "params": [{"type": "Function", "name": "main", "description": " The existing class into which the extensions should be mixed.  The class needs to be Base or class derived from base (e.g. Widget)"}, {"type": "Function[]", "name": "extensions", "description": " The set of extension classes which will mixed into the existing main class."}]}, "_aggregateAttrs": {"return": {"type": "Object", "description": "The aggregate set of ATTRS definitions for the instance"}, "description": "A helper method, used by _initHierarchyData to aggregate \nattribute configuration across the instances class hierarchy.\nThe method will potect the attribute configuration value to protect the statically defined \ndefault value in ATTRS if required (if the value is an object literal, array or the \nattribute configuration has cloneDefaultValue set to shallow or deep).", "private": "", "params": [{"type": "Array", "name": "allAttrs", "description": " An array of ATTRS definitions across classes in the hierarchy \n(subclass first, Base last)"}], "param": "{Array} allAttrs An array of ATTRS definitions across classes in the hierarchy \n(subclass first, Base last)", "guessedname": "_aggregateAttrs", "guessedtype": "function"}, "Base.create": {"return": {"type": "Function", "description": "The newly created class."}, "description": "<p>Creates a new class (constructor function) which extends the base class passed in as the second argument, \nand mixes in the array of extensions provided.</p>\n<p>Prototype properties or methods can be added to the new class, using the px argument (similar to Y.extend).</p>\n<p>Static properties or methods can be added to the new class, using the sx argument (similar to Y.extend).</p>\n<p>\n</p>", "param": "{Function} name The name of the newly created class. Used to defined the NAME property for the new class.", "static": "", "guessedname": "create", "guessedtype": "function", "params": [{"type": "Function", "name": "name", "description": " The name of the newly created class. Used to defined the NAME property for the new class."}, {"type": "Function", "name": "main", "description": " The base class which the new class should extend. This class needs to be Base or a class derived from base (e.g. Widget)."}, {"type": "Function[]", "name": "extensions", "description": " The list of extensions which will be mixed into the built class."}]}, "_destroyHierarchy": {"private": "", "description": "Destroys the class hierarchy for this instance by invoking\nthe descructor method on the prototype of each class in the hierarchy.", "guessedname": "_destroyHierarchy", "guessedtype": "function"}, "init": {"return": {"type": "Base", "description": "A reference to this object"}, "description": "Init lifecycle method, invoked during construction.\nFires the init event prior to setting up attributes and \ninvoking initializers for the class hierarchy.", "chainable": "", "param": "{Object} config Object with configuration property name/value pairs", "params": [{"type": "Object", "name": "config", "description": " Object with configuration property name/value pairs"}], "guessedname": "init", "guessedtype": "function", "final": ""}, "_defDestroyFn": {"description": "Default destroy event handler", "param": "{EventFacade} e Event object", "protected": "", "params": [{"type": "EventFacade", "name": "e", "description": " Event object"}], "guessedname": "_defDestroyFn", "guessedtype": "function"}, "_getClasses": {"protected": "", "return": {"type": "Function[]", "description": "An array of classes (constructor functions), making up the class hierarchy for this object.\nThis value is cached the first time the method, or _getAttrCfgs, is invoked. Subsequent invocations return the \ncached value."}, "description": "Returns the class hierarchy for this object, with Base being the last class in the array.", "guessedname": "_getClasses", "guessedtype": "function"}, "_preInitEventCfg": {"param": "{Object} config The user configuration object", "params": [{"type": "Object", "name": "config", "description": " The user configuration object"}], "description": "Handles the special on, after and target properties which allow the user to\neasily configure on and after listeners as well as bubble targets during \nconstruction, prior to init.", "guessedname": "_preInitEventCfg", "guessedtype": "function"}, "_getAttrCfgs": {"protected": "", "return": {"type": "Object", "description": "The hash of attribute configurations, aggregated across classes in the hierarchy\nThis value is cached the first time the method, or _getClasses, is invoked. Subsequent invocations return\nthe cached value."}, "description": "Returns an aggregated set of attribute configurations, by traversing the class hierarchy.", "guessedname": "_getAttrCfgs", "guessedtype": "function"}, "_filterAttrCfs": {"return": {"type": "Object", "description": "The set of attributes belonging to the class passed in, in the form\nof an object with attribute name/configuration pairs."}, "description": "A helper method used when processing ATTRS across the class hierarchy during \ninitialization. Returns a disposable object with the attributes defined for \nthe provided class, extracted from the set of all attributes passed in .", "private": "", "params": [{"type": "Function", "name": "clazz", "description": " The class for which the desired attributes are required."}, {"type": "Object", "name": "allCfgs", "description": " The set of all attribute configurations for this instance. \nAttributes will be removed from this set, if they belong to the filtered class, so\nthat by the time all classes are processed, allCfgs will be empty."}], "param": "{Function} clazz The class for which the desired attributes are required.", "guessedname": "_filterAttrCfgs", "guessedtype": "function"}, "destroy": {"return": {"type": "Base", "description": "A reference to this object"}, "description": "<p>\nDestroy lifecycle method. Fires the destroy\nevent, prior to invoking destructors for the\nclass hierarchy.\n</p>\n<p>\nSubscribers to the destroy\nevent can invoke preventDefault on the event object, to prevent destruction\nfrom proceeding.\n</p>", "chainable": "", "guessedname": "destroy", "guessedtype": "function", "final": ""}, "_initHierarchy": {"description": "Initializes the class hierarchy for the instance, which includes \ninitializing attributes for each class defined in the class's \nstatic <a href=\"#property_Base.ATTRS\">ATTRS</a> property and \ninvoking the initializer method on the prototype of each class in the hierarchy.", "param": "{Object} userVals Object with configuration property name/value pairs", "params": [{"type": "Object", "name": "userVals", "description": " Object with configuration property name/value pairs"}], "private": "", "guessedname": "_initHierarchy", "guessedtype": "function"}, "Base.build": {"return": {"type": "Function", "description": "A custom class, created from the provided main and extension classes"}, "description": "<p>\nBuilds a custom constructor function (class) from the\nmain function, and array of extension functions (classes)\nprovided. The NAME field for the constructor function is \ndefined by the first argument passed in.\n</p>\n<p>\nThe cfg object supports the following properties\n</p>\n<dl>\n<dt>dynamic &#60;boolean&#62;</dt>\n<dd>\n<p>If true (default), a completely new class\nis created which extends the main class, and acts as the \nhost on which the extension classes are augmented.</p>\n<p>If false, the extensions classes are augmented directly to\nthe main class, modifying the main class' prototype.</p>\n</dd>\n<dt>aggregates &#60;String[]&#62;</dt>\n<dd>An array of static property names, which will get aggregated\non to the built class, in addition to the default properties build \nwill always aggregate as defined by the main class' static _buildCfg\nproperty.\n</dd>\n</dl>", "param": "{Function} name The name of the new class. Used to defined the NAME property for the new class.", "static": "", "guessedname": "build", "guessedtype": "function", "params": [{"type": "Function", "name": "name", "description": " The name of the new class. Used to defined the NAME property for the new class."}, {"type": "Function", "name": "main", "description": " The main class on which to base the built class"}, {"type": "Function[]", "name": "extensions", "description": " The set of extension classes which will be\naugmented/aggregated to the built class."}, {"type": "Object", "name": "cfg", "description": " Optional. Build configuration for the class (see description)."}]}}, "uses": ["Attribute", "Plugin.Host"], "file": "base.js", "shortname": "Base", "properties": {"Base._buildCfg": {"description": "The build configuration for the Base class.\nDefines the static fields which need to be aggregated\nwhen the Base class is used as the main class passed to\nthe <a href=\"#method_Base.build\">Base.build</a> method.", "private": "", "static": "", "guessedname": "_buildCfg", "guessedtype": "property", "type": "Object", "final": ""}, "Base.ATTRS": {"type": "Object", "static": "", "description": "The default set of attributes which will be available for instances of this class, and \ntheir configuration. In addition to the configuration properties listed by \nAttribute's <a href=\"Attribute.html#method_addAttr\">addAttr</a> method, the attribute \ncan also be configured with a \"cloneDefaultValue\" property, which defines how the statically\ndefined value field should be protected (\"shallow\", \"deep\" and false are supported values). \nBy default if the value is an object literal or an array it will be \"shallow\" cloned, to \nprotect the default value.", "guessedname": "ATTRS", "guessedtype": "property"}, "name": {"deprecated": "Use this.constructor.NAME", "type": "String", "description": "The string used to identify the class of this object.", "guessedname": "name", "guessedtype": "property"}, "Base._ATTR_CFG": {"description": "The list of properties which can be configured for \neach attribute (e.g. setter, getter, writeOnce, readOnly etc.)", "private": "", "static": "", "guessedname": "_ATTR_CFG", "guessedtype": "property", "type": "Array"}, "Base.NAME": {"type": "String", "static": "", "description": "<p>\nThe string to be used to identify instances of \nthis class, for example in prefixing events.\n</p>\n<p>\nClasses extending Base, should define their own\nstatic NAME property, which should be camelCase by\nconvention (e.g. MyClass.NAME = \"myClass\";).\n</p>", "guessedname": "NAME", "guessedtype": "property"}}, "description": "<p>\nA base class which objects requiring attributes and custom event support can \nextend. Base also handles the chaining of initializer and destructor methods across \nthe hierarchy as part of object construction and destruction. Additionally, attributes configured \nthrough the static <a href=\"#property_Base.ATTRS\">ATTRS</a> property for each class \nin the hierarchy will be initialized by Base.\n</p>\n<p>\nThe static <a href=\"#property_Base.NAME\">NAME</a> property of each class extending \nfrom Base will be used as the identifier for the class, and is used by Base to prefix \nall events fired by instances of that class.\n</p>"}, "TreeView": {"name": "TreeView", "configs": {"type": {"default": "'file'", "type": "String", "description": "Type of the treeview (i.e. could be 'file' or 'normal').", "guessedname": "type", "guessedtype": "property"}, "io": {"default": "null", "type": "Object", "description": "IO metadata for loading the children using ajax.", "guessedname": "io", "guessedtype": "property"}, "lastSelected": {"default": "null", "type": "TreeNode", "description": "Last selected TreeNode.", "guessedname": "lastSelected", "guessedtype": "property"}}, "constructors": [{"params": [{"type": "Object", "name": "config", "description": "  Object literal specifying widget configuration properties."}], "description": "<p><img src=\"assets/images/aui-tree-view/main.png\"/></p>\nA base class for TreeView, providing:\n<ul>\n<li>Widget Lifecycle (initializer, renderUI, bindUI, syncUI, destructor)</li>\n</ul>\nQuick Example:<br/>\n<pre><code>var tree2 = new A.TreeView({\nwidth: 200,\ntype: 'normal',\nboundingBox: '#tree',\nchildren: [\n{ label: 'Folder 1', children: [ { label: 'file' }, { label: 'file' }, { label: 'file' } ] },\n{ label: 'Folder 2', expanded: true, children: [ { label: 'file' }, { label: 'file' } ] },\n{ label: 'Folder 3', children: [ { label: 'file' } ] },\n{ label: 'Folder 4', expanded: true, children: [ { label: 'Folder 4-1', expanded: true, children: [ { label: 'file' } ] } ] }\n]\n})\n.render();\n</code></pre>\nCheck the list of <a href=\"TreeView.html#configattributes\">Configuration Attributes</a> available for\nTreeView."}], "namespace": "", "module": "aui-tree", "events": {"lastSelectedChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "lastSelectedChange", "description": "Fires when the value for the configuration attribute 'lastSelected' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "typeChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "typeChange", "description": "Fires when the value for the configuration attribute 'type' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "ioChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "ioChange", "description": "Fires when the value for the configuration attribute 'io' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "guessedname": "TreeView", "methods": {"_onMouseEnterNodeEl": {"description": "Fires on <code>mouseeneter</code> the TreeNode.", "param": "{EventFacade} event", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "guessedname": "_onMouseEnterNodeEl", "guessedtype": "function"}, "syncUI": {"protected": "", "description": "Sync the TreeView UI. Lifecycle.", "guessedname": "syncUI", "guessedtype": "function"}, "_delegateDOM": {"protected": "", "description": "Delegate events.", "guessedname": "_delegateDOM", "guessedtype": "function"}, "_onClickNodeEl": {"description": "Fires on click the TreeView (i.e. set the select/unselect state).", "param": "{EventFacade} event", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "guessedname": "_onClickNodeEl", "guessedtype": "function"}, "_onMouseLeaveNodeEl": {"description": "Fires on <code>mouseleave</code> the TreeNode.", "param": "{EventFacade} event", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "guessedname": "_onMouseLeaveNodeEl", "guessedtype": "function"}, "_renderElements": {"protected": "", "description": "Render elements.", "guessedname": "_renderElements", "guessedtype": "function"}, "_onClickHitArea": {"description": "Fires on <code>click</code> the TreeNode hitarea.", "param": "{EventFacade} event", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "guessedname": "_onClickHitArea", "guessedtype": "function"}, "_createFromHTMLMarkup": {"description": "Create TreeNode from HTML markup.", "param": "{Node} container", "protected": "", "params": [{"type": "Node", "name": "container", "description": ""}], "guessedname": "_createFromHTMLMarkup", "guessedtype": "function"}, "bindUI": {"protected": "", "description": "Bind the events on the TreeView UI. Lifecycle.", "guessedname": "bindUI", "guessedtype": "function"}, "renderUI": {"protected": "", "description": "Create the DOM structure for the TreeView. Lifecycle.", "guessedname": "renderUI", "guessedtype": "function"}}, "extends": "TreeData", "superclass": "TreeData", "file": "aui-tree.js", "guessedtype": "property", "shortname": "TreeView", "properties": {"TreeView.ATTRS": {"type": "Object", "static": "", "description": "Static property used to define the default attribute\nconfiguration for the TreeView.", "guessedname": "ATTRS", "guessedtype": "property"}, "TreeView.NAME": {"type": "String", "static": "", "description": "Static property provides a string to identify the class.", "guessedname": "NAME", "guessedtype": "property"}}, "description": "<p><img src=\"assets/images/aui-tree-view/main.png\"/></p>\nA base class for TreeView, providing:\n<ul>\n<li>Widget Lifecycle (initializer, renderUI, bindUI, syncUI, destructor)</li>\n</ul>\nQuick Example:<br/>\n<pre><code>var tree2 = new A.TreeView({\nwidth: 200,\ntype: 'normal',\nboundingBox: '#tree',\nchildren: [\n{ label: 'Folder 1', children: [ { label: 'file' }, { label: 'file' }, { label: 'file' } ] },\n{ label: 'Folder 2', expanded: true, children: [ { label: 'file' }, { label: 'file' } ] },\n{ label: 'Folder 3', children: [ { label: 'file' } ] },\n{ label: 'Folder 4', expanded: true, children: [ { label: 'Folder 4-1', expanded: true, children: [ { label: 'file' } ] } ] }\n]\n})\n.render();\n</code></pre>\nCheck the list of <a href=\"TreeView.html#configattributes\">Configuration Attributes</a> available for\nTreeView."}, "ArrayList~add": {"name": "ArrayList~add", "namespace": "", "module": "collection", "methods": {"add": {"return": {"type": "ArrayList", "description": "the instance"}, "description": "Add a single item to the ArrayList.  Does not prevent duplicates.", "chainable": "", "param": "item { mixed } Item presumably of the same type as others in the\nArrayList", "params": [{"type": " mixed ", "name": "item", "description": "  Item presumably of the same type as others in the\nArrayList"}, {"type": "Number", "name": "index", "description": "  (Optional.)  Number representing the position at \nwhich the item should be inserted."}], "guessedname": "add", "guessedtype": "function"}, "itemsAreEqual": {"return": {"type": " Boolean ", "description": "true if items are deemed equivalent"}, "description": "Default comparitor for items stored in this list.  Used by remove().", "param": "a { mixed } item to test equivalence with", "params": [{"type": " mixed ", "name": "a", "description": "  item to test equivalence with"}, {"type": " mixed ", "name": "b", "description": "  other item to test equivalance"}], "guessedname": "itemsAreEqual", "guessedtype": "function"}, "remove": {"return": {"type": "ArrayList", "description": "the instance"}, "description": "Removes first or all occurrences of an item to the ArrayList.  If a\ncomparitor is not provided, uses itemsAreEqual method to determine\nmatches.", "chainable": "", "param": "needle { mixed } Item to find and remove from the list", "params": [{"type": " mixed ", "name": "needle", "description": "  Item to find and remove from the list"}, {"type": " Boolean ", "name": "all", "description": "  If true, remove all occurrences"}, {"type": " Function ", "name": "comparitor", "description": "  optional a/b function to test equivalence"}], "guessedname": "remove", "guessedtype": "function"}}, "file": "collection.js", "shortname": "ArrayList~add", "description": "Adds methods add and remove to Y.ArrayList"}, "OverlayMask": {"name": "OverlayMask", "configs": {"opacity": {"default": ".5", "type": "Number", "description": "CSS opacity of the mask.", "guessedname": "opacity", "guessedtype": "property"}, "alignPoints": {"default": "[ 'tl', 'tl' ]", "type": "Array", "description": "Points to align the <a href=\"Overlay.html\">Overlay</a> used as\nmask.", "guessedname": "alignPoints", "guessedtype": "property"}, "target": {"default": "document", "type": "Node | String", "description": "Node where the mask will be positioned and re-dimensioned. The\ndefault is the document, which means that if not specified the mask\ntakes the full screen.", "guessedname": "target", "guessedtype": "property"}, "shim": {"default": "True on IE.", "type": "boolean", "description": "Use shim option.", "guessedname": "shim", "guessedtype": "property"}, "zIndex": {"default": "1000", "type": "Number", "description": "zIndex of the OverlayMask.", "guessedname": "zIndex", "guessedtype": "property"}, "visible": {"default": "false", "type": "boolean", "description": "If true the Overlay is visible by default after the render phase.\nInherited from <a href=\"Overlay.html\">Overlay</a>.", "guessedname": "visible", "guessedtype": "property"}, "background": {"default": "null", "type": "String", "description": "Background color of the mask.", "guessedname": "background", "guessedtype": "property"}}, "constructors": [{"params": [{"type": "Object", "name": "config", "description": "  Object literal specifying widget configuration properties."}], "description": "A base class for OverlayMask, providing:\n<ul>\n<li>Widget Lifecycle (initializer, renderUI, bindUI, syncUI, destructor)</li>\n<li>Cross browser mask functionality to cover an element or the entire page</li>\n<li>Customizable mask (i.e., background, opacity)</li>\n</ul>\nQuick Example:<br/>\n<pre><code>var instance = new A.OverlayMask().render();</code></pre>\nCheck the list of <a href=\"OverlayMask.html#configattributes\">Configuration Attributes</a> available for\nOverlayMask."}], "namespace": "", "module": "aui-overlay", "events": {"backgroundChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "backgroundChange", "description": "Fires when the value for the configuration attribute 'background' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "zIndexChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "zIndexChange", "description": "Fires when the value for the configuration attribute 'zIndex' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "visibleChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "visibleChange", "description": "Fires when the value for the configuration attribute 'visible' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "opacityChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "opacityChange", "description": "Fires when the value for the configuration attribute 'opacity' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "shimChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "shimChange", "description": "Fires when the value for the configuration attribute 'shim' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "alignPointsChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "alignPointsChange", "description": "Fires when the value for the configuration attribute 'alignPoints' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "targetChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "targetChange", "description": "Fires when the value for the configuration attribute 'target' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "guessedname": "OverlayMask", "methods": {"_uiSetVisible": {"description": "Invoke the <code>OverlayMask.superclass._uiSetVisible</code>. Used to\nreset the <code>opacity</code> to work around IE bugs when set opacity\nof hidden elements.", "param": "{boolean} val", "protected": "", "params": [{"type": "boolean", "name": "val", "description": ""}], "guessedname": "_uiSetVisible", "guessedtype": "function"}, "syncUI": {"protected": "", "description": "Sync the OverlayMask UI. Lifecycle.", "guessedname": "syncUI", "guessedtype": "function"}, "getTargetSize": {"return": {"type": "Object} Object containing the { height: height, width: width ", "description": "."}, "description": "Get the size of the\n<a href=\"OverlayMask.html#config_target\">target</a>. Used to dimension\nthe mask node.", "guessedname": "getTargetSize", "guessedtype": "function"}, "refreshMask": {"description": "Repaint the OverlayMask UI, respecting the\n<a href=\"OverlayMask.html#config_target\">target</a> size and the\n<a href=\"OverlayMask.html#config_alignPoints\">alignPoints</a>.", "guessedname": "refreshMask", "guessedtype": "function"}, "_afterVisibleChange": {"description": "Fires after the value of the\n<a href=\"Paginator.html#config_visible\">visible</a> attribute change.", "param": "{EventFacade} event", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "guessedname": "_afterVisibleChange", "guessedtype": "function"}, "bindUI": {"protected": "", "description": "Bind the events on the OverlayMask UI. Lifecycle.", "guessedname": "bindUI", "guessedtype": "function"}, "_setOpacity": {"return": {"type": "Number", "description": ""}, "description": "Setter for <a href=\"Paginator.html#config_opacity\">opacity</a>.", "param": "{Number} v", "protected": "", "params": [{"type": "Number", "name": "v", "description": ""}], "guessedname": "_setOpacity", "guessedtype": "function"}, "_afterTargetChange": {"description": "Fires after the value of the\n<a href=\"Paginator.html#config_target\">target</a> attribute change.", "param": "{EventFacade} event", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "guessedname": "_afterTargetChange", "guessedtype": "function"}}, "extends": "OverlayBase", "superclass": "OverlayBase", "file": "aui-overlay.js", "guessedtype": "property", "shortname": "OverlayMask", "properties": {"OverlayMask.ATTRS": {"type": "Object", "static": "", "description": "Static property used to define the default attribute\nconfiguration for the OverlayMask.", "guessedname": "ATTRS", "guessedtype": "property"}, "OverlayMask.NAME": {"type": "String", "static": "", "description": "Static property provides a string to identify the class.", "guessedname": "NAME", "guessedtype": "property"}}, "description": "A base class for OverlayMask, providing:\n<ul>\n<li>Widget Lifecycle (initializer, renderUI, bindUI, syncUI, destructor)</li>\n<li>Cross browser mask functionality to cover an element or the entire page</li>\n<li>Customizable mask (i.e., background, opacity)</li>\n</ul>\nQuick Example:<br/>\n<pre><code>var instance = new A.OverlayMask().render();</code></pre>\nCheck the list of <a href=\"OverlayMask.html#configattributes\">Configuration Attributes</a> available for\nOverlayMask."}, "Test.Suite": {"name": "Test.Suite", "constructors": [{"params": [{"type": "String||Object", "name": "data", "description": " The name of the test suite or an object containing\na name property as well as setUp and tearDown methods."}], "description": "A test suite that can contain a collection of TestCase and TestSuite objects."}], "namespace": "Test", "module": "test", "guessedname": "Suite", "methods": {"tearDown": {"return": {"type": "Void", "description": ""}, "description": "Function to run after each test is executed.", "guessedname": "tearDown", "guessedtype": "function"}, "add": {"return": {"type": "Void", "description": ""}, "description": "Adds a test suite or test case to the test suite.", "param": "{Y.Test.Suite||Y.Test.Case} testObject The test suite or test case to add.", "params": [{"type": "Y.Test.Suite||Y.Test.Case", "name": "testObject", "description": " The test suite or test case to add."}], "guessedname": "add", "guessedtype": "function"}, "setUp": {"return": {"type": "Void", "description": ""}, "description": "Function to run before each test is executed.", "guessedname": "setUp", "guessedtype": "function"}}, "file": "test.js", "guessedtype": "function", "shortname": "Suite", "properties": {"items": {"private": "", "description": "Array of test suites and", "guessedname": "items", "guessedtype": "property"}, "name": {"type": "String", "description": "The name of the test suite.", "guessedname": "name", "guessedtype": "property"}}, "description": "A test suite that can contain a collection of TestCase and TestSuite objects."}, "Plugin.Base": {"name": "Plugin.Base", "namespace": "", "module": "plugin", "events": {"hostChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "hostChange", "description": "Fires when the value for the configuration attribute 'host' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "configs": {"host": {"guessedtype": "property", "type": "Plugin.Host", "description": "The plugin's host object.", "guessedname": "host", "writeonce": ""}}, "methods": {"beforeHostMethod": {"return": {"type": "EventHandle", "description": "handle  The detach handle for the injected function."}, "description": "Injects a function to be executed before a given method on host object.\nThe function will be detached when the plugin is unplugged.", "param": "{String} The name of the method to inject the function before.", "params": [{"type": "String", "name": "The", "description": " name of the method to inject the function before."}, {"type": "Function", "name": "fn", "description": " The function to inject."}, {"type": "Object", "name": "context", "description": " The execution context. Defaults to the plugin instance."}], "guessedname": "beforeHostMethod", "guessedtype": "function"}, "doBefore": {"return": {"type": "EventHandle", "description": "handle  The detach handle for the handler."}, "description": "Listens for the \"on\" moment of events fired by the host, \nor injects code \"before\" a given method on the host.", "param": "strMethod {String} The event to listen for, or method to inject logic before.", "params": [{"type": "String", "name": "strMethod", "description": "  The event to listen for, or method to inject logic before."}, {"type": "Function", "name": "fn", "description": "  The handler function. For events, the \"on\" moment listener. For methods, the function to execute before the given method is executed."}, {"type": "Object", "name": "context", "description": "  An optional context to call the handler with. The default context is the plugin instance."}], "guessedname": "doBefore", "guessedtype": "function"}, "destructor": {"description": "Destructor lifecycle implementation.\nRemoves any event listeners or injected methods applied by the Plugin", "guessedname": "destructor", "guessedtype": "function"}, "onHostEvent": {"return": {"type": "EventHandle", "description": "handle  The detach handle for the listener."}, "description": "Listens for the \"on\" moment of events fired by the host object.\nListeners attached through this method will be detached when the plugin is unplugged.", "param": "{String | Object} type The event type.", "params": [{"type": "String | Object", "name": "type", "description": " The event type."}, {"type": "Function", "name": "fn", "description": " The listener."}, {"type": "Object", "name": "context", "description": " The execution context. Defaults to the plugin instance."}], "guessedname": "onHostEvent", "guessedtype": "function"}, "doAfter": {"return": {"type": "EventHandle", "description": "handle  The detach handle for the listener."}, "description": "Listens for the \"after\" moment of events fired by the host, \nor injects code \"after\" a given method on the host.", "param": "strMethod {String} The event to listen for, or method to inject logic after.", "params": [{"type": "String", "name": "strMethod", "description": "  The event to listen for, or method to inject logic after."}, {"type": "Function", "name": "fn", "description": "  The handler function. For events, the \"after\" moment listener. For methods, the function to execute after the given method is executed."}, {"type": "Object", "name": "context", "description": "  An optional context to call the handler with. The default context is the plugin instance."}], "guessedname": "doAfter", "guessedtype": "function"}, "afterHostMethod": {"return": {"type": "EventHandle", "description": "handle  The detach handle for the injected function."}, "description": "Injects a function to be executed after a given method on host object.\nThe function will be detached when the plugin is unplugged.", "param": "{String} The name of the method to inject the function after.", "params": [{"type": "String", "name": "The", "description": " name of the method to inject the function after."}, {"type": "Function", "name": "fn", "description": " The function to inject."}, {"type": "Object", "name": "context", "description": " The execution context. Defaults to the plugin instance."}], "guessedname": "afterHostMethod", "guessedtype": "function"}, "afterHostEvent": {"return": {"type": "EventHandle", "description": "handle  The detach handle for the listener."}, "description": "Listens for the \"after\" moment of events fired by the host object.\nListeners attached through this method will be detached when the plugin is unplugged.", "param": "{String | Object} type The event type.", "params": [{"type": "String | Object", "name": "type", "description": " The event type."}, {"type": "Function", "name": "fn", "description": " The listener."}, {"type": "Object", "name": "context", "description": " The execution context. Defaults to the plugin instance."}], "guessedname": "afterHostEvent", "guessedtype": "function"}, "initializer": {"param": "{Object} config Configuration object with property name/value pairs.", "params": [{"type": "Object", "name": "config", "description": " Configuration object with property name/value pairs."}], "description": "Initializer lifecycle implementation.", "guessedname": "initializer", "guessedtype": "function"}}, "extends": "Base", "superclass": "Base", "file": "plugin.js", "shortname": "Plugin.Base", "param": "{Object} config Configuration object with property name/value pairs.", "properties": {"_handles": {"description": "The list of event handles for event listeners or AOP injected methods\napplied by the plugin to the host object.", "private": "", "value": "null", "guessedname": "_handles", "guessedtype": "property", "type": "Array"}, "Plugin.NS": {"type": "String", "static": "", "description": "The name of the property the the plugin will be attached to\nwhen plugged into a Plugin Host. Plugins extending Plugin.Base,\nshould set their own NS value.", "guessedname": "NS", "guessedtype": "property"}, "Plugin.Base.ATTRS": {"type": "Object", "static": "", "description": "Object defining the set of attributes supported by the Plugin.Base class", "guessedname": "ATTRS", "guessedtype": "property"}, "Plugin.Base.NAME": {"type": "String", "static": "", "description": "The string identifying the Plugin.Base class. Plugins extending\nPlugin.Base should set their own NAME value.", "guessedname": "NAME", "guessedtype": "property"}}, "description": "The base class for all Plugin instances."}, "Do.AlterArgs": {"name": "Do.AlterArgs", "namespace": "", "module": "event-custom", "guessedname": "AlterArgs", "file": "event-custom.js", "guessedtype": "function", "shortname": "Do.AlterArgs", "description": "Return an AlterArgs object when you want to change the arguments that\nwere passed into the function.  An example would be a service that scrubs\nout illegal characters prior to executing the core business logic."}, "WidgetStack": {"name": "WidgetStack", "namespace": "", "module": "widget-stack", "events": {"shimChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "shimChange", "description": "Fires when the value for the configuration attribute 'shim' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "zIndexChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "zIndexChange", "description": "Fires when the value for the configuration attribute 'zIndex' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "configs": {"zIndex": {"default": "0", "type": "number", "description": "The z-index to apply to the Widgets boundingBox. Non-numerical values for \nzIndex will be converted to 0", "guessedname": "zIndex", "guessedtype": "property"}, "shim": {"default": "false, for all browsers other than IE6, for which a shim is enabled by default.", "type": "boolean", "description": "Boolean flag to indicate whether or not a shim should be added to the Widgets\nboundingBox, to protect it from select box bleedthrough.", "guessedname": "shim", "guessedtype": "property"}}, "methods": {"sizeShim": {"description": "For IE6, synchronizes the size and position of iframe shim to that of \nWidget bounding box which it is protecting. For all other browsers,\nthis method does not do anything.", "guessedname": "sizeShim", "guessedtype": "function"}, "_renderShim": {"private": "", "description": "Creates the shim element and adds it to the DOM", "guessedname": "_renderShim", "guessedtype": "function"}, "_detachStackHandles": {"description": "Detaches any handles stored for the provided key", "param": "String handleKey The key defining the group of handles which should be detached", "params": [{"type": "", "name": "String", "description": " handleKey The key defining the group of handles which should be detached"}], "private": "", "guessedname": "_detachStackHandles", "guessedtype": "function"}, "_uiSetZIndex": {"description": "Updates the UI to reflect the zIndex value passed in.", "param": "{number} zIndex The zindex to be reflected in the UI", "protected": "", "params": [{"type": "number", "name": "zIndex", "description": " The zindex to be reflected in the UI"}], "guessedname": "_uiSetZIndex", "guessedtype": "function"}, "_syncUIStack": {"protected": "", "description": "Synchronizes the UI to match the Widgets stack state. This method in \ninvoked after syncUI is invoked for the Widget class using YUI's aop infrastructure.", "guessedname": "_syncUIStack", "guessedtype": "function"}, "_setZIndex": {"return": {"type": "Number", "description": "Normalized zIndex"}, "description": "Default setter for zIndex attribute changes. Normalizes zIndex values to \nnumbers, converting non-numerical values to 0.", "param": "{String | Number} zIndex", "protected": "", "params": [{"type": "String | Number", "name": "zIndex", "description": ""}], "guessedname": "_setZIndex", "guessedtype": "function"}, "_destroyShim": {"private": "", "description": "Removes the shim from the DOM, and detaches any related event\nlisteners.", "guessedname": "_destroyShim", "guessedtype": "function"}, "_uiSetShim": {"description": "Updates the UI to enable/disable the shim. If the widget is not currently visible,\ncreation of the shim is deferred until it is made visible, for performance reasons.", "param": "{boolean} enable If true, creates/renders the shim, if false, removes it.", "protected": "", "params": [{"type": "boolean", "name": "enable", "description": " If true, creates/renders the shim, if false, removes it."}], "guessedname": "_uiSetShim", "guessedtype": "function"}, "_getShimTemplate": {"guessedname": "_getShimTemplate", "return": {"type": "Node", "description": "node A new shim Node instance."}, "description": "Creates a cloned shim node, using the SHIM_TEMPLATE html template, for use on a new instance.", "private": "", "guessedtype": "function"}, "_renderUIStack": {"protected": "", "description": "Creates/Initializes the DOM to support stackability.\n<p>\nThis method in invoked after renderUI is invoked for the Widget class\nusing YUI's aop infrastructure.\n</p>", "guessedname": "_renderUIStack", "guessedtype": "function"}, "_renderShimDeferred": {"private": "", "description": "Sets up change handlers for the visible attribute, to defer shim creation/rendering \nuntil the Widget is made visible.", "guessedname": "_renderShimDeferred", "guessedtype": "function"}, "_afterZIndexChange": {"description": "Default attribute change listener for the zIndex attribute, responsible\nfor updating the UI, in response to attribute changes.", "param": "{EventFacade} e The event facade for the attribute change", "protected": "", "params": [{"type": "EventFacade", "name": "e", "description": " The event facade for the attribute change"}], "guessedname": "_afterZIndexChange", "guessedtype": "function"}, "_afterShimChange": {"description": "Default attribute change listener for the shim attribute, responsible\nfor updating the UI, in response to attribute changes.", "param": "{EventFacade} e The event facade for the attribute change", "protected": "", "params": [{"type": "EventFacade", "name": "e", "description": " The event facade for the attribute change"}], "guessedname": "_afterShimChange", "guessedtype": "function"}, "_bindUIStack": {"protected": "", "description": "Binds event listeners responsible for updating the UI state in response to \nWidget stack related state changes.\n<p>\nThis method is invoked after bindUI is invoked for the Widget class\nusing YUI's aop infrastructure.\n</p>", "guessedname": "_bindUIStack", "guessedtype": "function"}, "_addShimResizeHandlers": {"private": "", "description": "Sets up event listeners to resize the shim when the size of the Widget changes.\n<p>\nNOTE: This method is only used for IE6 currently, since IE6 doesn't support a way to\nresize the shim purely through CSS, when the Widget does not have an explicit width/height \nset.\n</p>", "guessedname": "_addShimResizeHandlers", "guessedtype": "function"}}, "param": "{Object} User configuration object", "file": "widget-stack.js", "shortname": "WidgetStack", "properties": {"WidgetStack.SHIM_TEMPLATE": {"type": "String", "static": "", "description": "Default markup template used to generate the shim element.", "guessedname": "SHIM_TEMPLATE", "guessedtype": "property"}, "WidgetStack.STACKED_CLASS_NAME": {"description": "Default class used to mark the boundingBox of a stacked widget.", "default": "\"yui-widget-stacked\"", "static": "", "guessedname": "STACKED_CLASS_NAME", "guessedtype": "property", "type": "String"}, "WidgetStack.SHIM_CLASS_NAME": {"description": "Default class used to mark the shim element", "default": "\"yui-widget-shim\"", "static": "", "guessedname": "SHIM_CLASS_NAME", "guessedtype": "property", "type": "String"}, "WidgetStack.HTML_PARSER": {"type": "Object", "static": "", "description": "The HTML parsing rules for the WidgetStack class.", "guessedname": "HTML_PARSER", "guessedtype": "property"}, "WidgetStack.ATTRS": {"type": "Object", "static": "", "description": "Static property used to define the default attribute \nconfiguration introduced by WidgetStack.", "guessedname": "ATTRS", "guessedtype": "property"}}, "description": "Widget extension, which can be used to add stackable (z-index) support to the \nbase Widget class along with a shimming solution, through the \n<a href=\"Base.html#method_build\">Base.build</a> method."}, "DD.Delegate": {"name": "DD.Delegate", "configs": {"dragNode": {"type": "Node", "description": "Y.Node instance of the dd dragNode.", "guessedname": "dragNode", "guessedtype": "property"}, "container": {"type": "String", "description": "A selector query to get the container to listen for mousedown events on. All \"nodes\" should be a child of this container.", "guessedname": "container", "guessedtype": "property"}, "target": {"type": "Boolean", "description": "Should the items also be a drop target.", "guessedname": "target", "guessedtype": "property"}, "over": {"type": "Boolean", "description": "Is the mouse currently over the container", "guessedname": "over", "guessedtype": "property"}, "lastNode": {"type": "Node", "description": "Y.Node instance of the last item dragged.", "guessedname": "lastNode", "guessedtype": "property"}, "invalid": {"type": "String", "description": "A selector query to test a node to see if it's an invalid item.", "guessedname": "invalid", "guessedtype": "property"}, "handles": {"type": "Array", "description": "The handles config option added to the temp DD instance.", "guessedname": "handles", "guessedtype": "property"}, "dragConfig": {"type": "Object", "description": "The default config to be used when creating the DD instance.", "guessedname": "dragConfig", "guessedtype": "property"}, "currentNode": {"type": "Node", "description": "Y.Node instance of the dd node.", "guessedname": "currentNode", "guessedtype": "property"}, "nodes": {"type": "String", "description": "A selector query to get the children of the \"container\" to make draggable elements from.", "guessedname": "nodes", "guessedtype": "property"}}, "constructors": [{"description": "Provides the ability to drag multiple nodes under a container element using only one Y.DD.Drag instance as a delegate."}], "namespace": "DD", "module": "dd", "events": {"overChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "overChange", "description": "Fires when the value for the configuration attribute 'over' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "invalidChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "invalidChange", "description": "Fires when the value for the configuration attribute 'invalid' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "lastNodeChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "lastNodeChange", "description": "Fires when the value for the configuration attribute 'lastNode' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "dragNodeChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "dragNodeChange", "description": "Fires when the value for the configuration attribute 'dragNode' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "dragConfigChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "dragConfigChange", "description": "Fires when the value for the configuration attribute 'dragConfig' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "currentNodeChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "currentNodeChange", "description": "Fires when the value for the configuration attribute 'currentNode' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "handlesChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "handlesChange", "description": "Fires when the value for the configuration attribute 'handles' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "nodesChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "nodesChange", "description": "Fires when the value for the configuration attribute 'nodes' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "containerChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "containerChange", "description": "Fires when the value for the configuration attribute 'container' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "targetChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "targetChange", "description": "Fires when the value for the configuration attribute 'target' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "guessedname": "Delegate", "methods": {"_delMouseDown": {"description": "The callback for the Y.DD.Delegate instance used", "param": "{Event} e The MouseDown Event.", "params": [{"type": "Event", "name": "e", "description": " The MouseDown Event."}], "private": "", "guessedname": "_delMouseDown", "guessedtype": "function"}, "syncTargets": {"chainable": "", "return": {"type": "Self", "description": ""}, "description": "Applies the Y.Plugin.Drop to all nodes matching the cont + nodes selector query.", "guessedname": "syncTargets", "guessedtype": "function"}, "createDrop": {"return": {"type": "", "description": "Node"}, "description": "Apply the Drop plugin to this node", "param": "{Node} node The Node to apply the plugin to", "params": [{"type": "Node", "name": "node", "description": " The Node to apply the plugin to"}, {"type": "Array", "name": "groups", "description": " The default groups to assign this target to."}], "guessedname": "createDrop", "guessedtype": "function"}, "_afterDragEnd": {"description": "Listens for the drag:end event and updates the temp dd instance.", "param": "{Event} e The Event.", "params": [{"type": "Event", "name": "e", "description": " The Event."}], "private": "", "guessedname": "_afterDragEnd", "guessedtype": "function"}, "_onMouseEnter": {"description": "Sets the target shim state", "param": "{Event} e The MouseEnter Event", "params": [{"type": "Event", "name": "e", "description": " The MouseEnter Event"}], "private": "", "guessedname": "_onMouseEnter", "guessedtype": "function"}, "_onNodeChange": {"description": "Listens to the nodeChange event and sets the dragNode on the temp dd instance.", "param": "{Event} e The Event.", "params": [{"type": "Event", "name": "e", "description": " The Event."}], "private": "", "guessedname": "_onNodeChange", "guessedtype": "function"}, "_onMouseLeave": {"description": "Resets the target shim state", "param": "{Event} e The MouseLeave Event", "params": [{"type": "Event", "name": "e", "description": " The MouseLeave Event"}], "private": "", "guessedname": "_onMouseLeave", "guessedtype": "function"}}, "extends": "Base", "superclass": "Base", "file": "dd.js", "guessedtype": "function", "shortname": "Delegate", "properties": {"dd": {"description": "A reference to the temporary dd instance used under the hood.", "guessedname": "dd", "guessedtype": "property"}, "_shimState": {"private": "", "description": "The state of the Y.DD.DDM._noShim property to it can be reset.", "guessedname": "_shimState", "guessedtype": "property"}, "_bubbleTargets": {"private": "", "description": "The default bubbleTarget for this object. Default: Y.DD.DDM", "guessedname": "_bubbleTargets", "guessedtype": "property"}}, "description": "Provides the ability to drag multiple nodes under a container element using only one Y.DD.Drag instance as a delegate."}, "ClassNameManager": {"name": "ClassNameManager", "namespace": "", "module": "classnamemanager", "methods": {"getClassName": {"param": "{String}+ classnameSection one or more classname sections to be joined", "params": [{"type": "String", "name": "+", "description": " classnameSection one or more classname sections to be joined"}, {"type": "Boolean", "name": "skipPrefix", "description": " If set to true, the classname will not be prefixed with the default Y.config.classNameDelimiter value."}], "description": "Returns a class name prefixed with the the value of the \n<code>Y.config.classNamePrefix</code> attribute + the provided strings.\nUses the <code>Y.config.classNameDelimiter</code> attribute to delimit the \nprovided strings. E.g. Y.ClassNameManager.getClassName('foo','bar'); // yui-foo-bar", "guessedname": "getClassName", "guessedtype": "function"}}, "static": "", "file": "classnamemanager.js", "shortname": "ClassNameManager", "properties": {"Y.config.classNameDelimiter": {"default": "\"-\"", "type": "{String}", "static": "", "description": "Configuration property indicating the delimiter used to compose all CSS class names in\nthis YUI instance."}, "Y.config.classNamePrefix": {"default": "\"yui\"", "type": "{String}", "static": "", "description": "Configuration property indicating the prefix for all CSS class names in this YUI instance."}}, "description": "A singleton class providing: \n<ul>\n<li>Easy creation of prefixed class names</li>\n<li>Caching of previously created class names for improved performance.</li>\n</ul>"}, "ButtonItem": {"name": "ButtonItem", "configs": {"hoverState": {"default": "true", "type": "Boolean", "description": "Whether to track the hover interaction state of the button.", "guessedname": "hoverState", "guessedtype": "property"}, "labelNode": {"default": "Generated div element.", "type": "String", "description": "DOM Node to display the text of the ButtonItem. If not\nspecified try to query using HTML_PARSER an element inside\nboundingBox which matches <code>aui-button-label</code>.", "guessedname": "labelNode", "guessedtype": "property"}, "label": {"type": "String", "description": "Text to use inside of the button.", "guessedname": "label", "guessedtype": "property"}, "classNames": {"type": "Object", "description": "An object map of the CSS class names to use for the different interaction states.", "guessedname": "classNames", "guessedtype": "property"}, "handler": {"default": "false", "type": "Function | Object", "description": "An event callback to handle when a user interacts with the button.\nThis can either be a function that will be attached on click, or\nan object map that accepts the following keys:\n<code>{fn: // The function to execute\ncontext: // The context to execute the function in\ntype: // The type of event to listen for (defaults to \"click\")\n}</code>", "guessedname": "handler", "guessedtype": "property"}, "defaultState": {"default": "true", "type": "Boolean", "description": "Whether to apply the default interaction state to the button", "guessedname": "defaultState", "guessedtype": "property"}, "title": {"type": "String", "description": "Text to use as the title attribute of the button.", "guessedname": "title", "guessedtype": "property"}, "iconNode": {"default": "Generated div element.", "type": "String", "description": "DOM Node to display the icon of the ButtonItem. If not\nspecified try to query using HTML_PARSER an element inside\nboundingBox which matches <code>aui-button-icon</code>.", "guessedname": "iconNode", "guessedtype": "property"}, "activeState": {"default": "false", "type": "Boolean", "description": "Whether to track the active state of the button.", "guessedname": "activeState", "guessedtype": "property"}, "icon": {"type": "String", "description": "The icon to use inside of the button. Possible values are:", "guessedname": "icon", "guessedtype": "property"}}, "constructors": [{"params": [{"type": "Object", "name": "config", "description": "  Object literal specifying widget configuration properties."}], "description": "A base class for ButtonItem, providing:\n<ul>\n<li>Widget Lifecycle (initializer, renderUI, bindUI, syncUI, destructor)</li>\n<li>An optional icon or label</li>\n<li>Managed user interaction states (default, active, hover)</li>\n<li>Keyboard accessible</li>\n</ul>\nQuick Example:<br/>\n<pre><code>var instance = new A.ButtonItem({\nicon: 'gear',\nlabel: 'Configuration'\n}).render();\n</code></pre>\nCheck the list of <a href=\"ButtonItem.html#configattributes\">Configuration Attributes</a> available for\nButtonItem."}], "namespace": "", "module": "aui-button-item", "events": {"classNamesChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "classNamesChange", "description": "Fires when the value for the configuration attribute 'classNames' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "iconChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "iconChange", "description": "Fires when the value for the configuration attribute 'icon' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "hoverStateChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "hoverStateChange", "description": "Fires when the value for the configuration attribute 'hoverState' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "activeStateChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "activeStateChange", "description": "Fires when the value for the configuration attribute 'activeState' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "iconNodeChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "iconNodeChange", "description": "Fires when the value for the configuration attribute 'iconNode' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "labelChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "labelChange", "description": "Fires when the value for the configuration attribute 'label' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "handlerChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "handlerChange", "description": "Fires when the value for the configuration attribute 'handler' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "defaultStateChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "defaultStateChange", "description": "Fires when the value for the configuration attribute 'defaultState' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "titleChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "titleChange", "description": "Fires when the value for the configuration attribute 'title' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "labelNodeChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "labelNodeChange", "description": "Fires when the value for the configuration attribute 'labelNode' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "guessedname": "ButtonItem", "methods": {"syncUI": {"protected": "", "description": "Sync the ButtonItem UI. Lifecycle.", "guessedname": "syncUI", "guessedtype": "function"}, "_renderStates": {"description": "Attaches state interaction management to the widget.", "param": "{EventFacade} event", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "guessedname": "_renderStates", "guessedtype": "function"}, "_renderIconNode": {"protected": "", "return": {"type": "Node", "description": ""}, "description": "Renders the underlying markup for the <a href=\"ButtonItem.html#config_icon\">icon</a>.", "guessedname": "_renderIconNode", "guessedtype": "function"}, "_uiSetIcon": {"description": "Updates the UI for the icon in response to the <a href=\"ButtonItem.html#event_iconChange\">iconChange</a> event.", "param": "{String} val Icon name", "protected": "", "params": [{"type": "String", "name": "val", "description": " Icon name"}], "guessedname": "_uiSetIcon", "guessedtype": "function"}, "_setTitle": {"protected": "", "description": "Setter for the title attribute", "guessedname": "_setTitle", "guessedtype": "function"}, "_uiSetLabel": {"description": "Updates the UI for the label in response to the <a href=\"ButtonItem.html#event_labelChange\">labelChange</a> event.", "param": "{String} val The new value", "protected": "", "params": [{"type": "String", "name": "val", "description": " The new value"}], "guessedname": "_uiSetLabel", "guessedtype": "function"}, "_uiSetTitle": {"description": "Updates the UI for the title in response to the <a href=\"ButtonItem.html#event_titleChange\">titleChange</a> event.", "param": "{String} val The new value", "protected": "", "params": [{"type": "String", "name": "val", "description": " The new value"}], "guessedname": "_uiSetTitle", "guessedtype": "function"}, "_syncChildrenStates": {"protected": "", "description": "Syncs the boundingBox class names to reflect whether the children only have icons or labels or both.", "guessedname": "_syncChildrenStates", "guessedtype": "function"}, "_renderLabelNode": {"protected": "", "return": {"type": "Node", "description": ""}, "description": "Renders the underlying markup for the <a href=\"ButtonItem.html#config_label\">label</a>.", "guessedname": "_renderLabelNode", "guessedtype": "function"}, "_getState": {"return": {"type": "Object", "description": ""}, "description": "Retrieves the state value from either the current instance, or if defined, the\nparent widget.", "param": "{String} key The state name to retrieve", "protected": "", "params": [{"type": "String", "name": "key", "description": " The state name to retrieve"}, {"type": "Object", "name": "parent", "description": " The parent widget to attempt to retrieve the state from"}], "guessedname": "_getState", "guessedtype": "function"}, "renderUI": {"protected": "", "description": "Create the DOM structure for the ButtonItem. Lifecycle.", "guessedname": "renderUI", "guessedtype": "function"}}, "uses": ["WidgetChild"], "superclass": "Component", "file": "aui-button-item.js", "guessedtype": "property", "extends": "Component", "shortname": "ButtonItem", "properties": {"ButtonItem.NAME": {"type": "String", "static": "", "description": "Static property provides a string to identify the class.", "guessedname": "NAME", "guessedtype": "property"}, "ButtonItem.ATTRS": {"type": "Object", "static": "", "description": "Static property used to define the default attribute\nconfiguration for the ButtonItem.", "guessedname": "ATTRS", "guessedtype": "property"}, "ButtonItem.HTML_PARSER": {"type": "Object", "static": "", "description": "Object hash, defining how attribute values are to be parsed from\nmarkup contained in the widget's content box.", "guessedname": "HTML_PARSER", "guessedtype": "property"}}, "description": "A base class for ButtonItem, providing:\n<ul>\n<li>Widget Lifecycle (initializer, renderUI, bindUI, syncUI, destructor)</li>\n<li>An optional icon or label</li>\n<li>Managed user interaction states (default, active, hover)</li>\n<li>Keyboard accessible</li>\n</ul>\nQuick Example:<br/>\n<pre><code>var instance = new A.ButtonItem({\nicon: 'gear',\nlabel: 'Configuration'\n}).render();\n</code></pre>\nCheck the list of <a href=\"ButtonItem.html#configattributes\">Configuration Attributes</a> available for\nButtonItem."}, "Assert.ObjectAssert": {"name": "Assert.ObjectAssert", "namespace": "Assert", "module": "test", "guessedname": "ObjectAssert", "methods": {"hasKeys": {"description": "Asserts that an object has all properties of a reference object.", "param": "{Array} properties An array of property names that should be on the object.", "static": "", "guessedname": "hasKeys", "guessedtype": "function", "params": [{"type": "Array", "name": "properties", "description": " An array of property names that should be on the object."}, {"type": "Object", "name": "object", "description": " The object to search."}, {"type": "String", "name": "message", "description": " (Optional) The message to display if the assertion fails."}]}, "ownsKeys": {"description": "Asserts that all properties exist on an object instance (not on its prototype).", "param": "{Array} properties An array of property names that should be on the object.", "static": "", "guessedname": "ownsKeys", "guessedtype": "function", "params": [{"type": "Array", "name": "properties", "description": " An array of property names that should be on the object."}, {"type": "Object", "name": "object", "description": " The object to search."}, {"type": "String", "name": "message", "description": " (Optional) The message to display if the assertion fails."}]}, "hasKey": {"description": "Asserts that an object has a property with the given name.", "param": "{String} propertyName The name of the property to test.", "static": "", "guessedname": "hasKey", "guessedtype": "function", "params": [{"type": "String", "name": "propertyName", "description": " The name of the property to test."}, {"type": "Object", "name": "object", "description": " The object to search."}, {"type": "String", "name": "message", "description": " (Optional) The message to display if the assertion fails."}]}, "ownsNoKeys": {"description": "Asserts that an object owns no properties.", "param": "{Object} object The object to check.", "static": "", "guessedname": "ownsNoKeys", "guessedtype": "function", "params": [{"type": "Object", "name": "object", "description": " The object to check."}, {"type": "String", "name": "message", "description": " (Optional) The message to display if the assertion fails."}]}, "ownsKey": {"description": "Asserts that a property with the given name exists on an object instance (not on its prototype).", "param": "{String} propertyName The name of the property to test.", "static": "", "guessedname": "ownsKey", "guessedtype": "function", "params": [{"type": "String", "name": "propertyName", "description": " The name of the property to test."}, {"type": "Object", "name": "object", "description": " The object to search."}, {"type": "String", "name": "message", "description": " (Optional) The message to display if the assertion fails."}]}}, "static": "", "file": "test.js", "guessedtype": "property", "shortname": "ObjectAssert", "description": "The ObjectAssert object provides functions to test JavaScript objects\nfor a variety of cases."}, "Assert.ArrayAssert": {"name": "Assert.ArrayAssert", "namespace": "Assert", "module": "test", "guessedname": "ArrayAssert", "methods": {"containsMatch": {"description": "Asserts that a value matching some condition is present in an array. This uses\na function to determine a match.", "param": "{Function} matcher A function that returns true if the items matches or false if not.", "static": "", "guessedname": "containsMatch", "guessedtype": "function", "params": [{"type": "Function", "name": "matcher", "description": " A function that returns true if the items matches or false if not."}, {"type": "Array", "name": "haystack", "description": " An array of values."}, {"type": "String", "name": "message", "description": " (Optional) The message to display if the assertion fails."}]}, "doesNotContain": {"description": "Asserts that a value is not present in an array. This uses the triple equals \nAsserts that a value is not present in an array. This uses the triple equals \nsign so no type cohersion may occur.", "param": "{Object} needle The value that is expected in the array.", "static": "", "guessedname": "doesNotContain", "guessedtype": "function", "params": [{"type": "Object", "name": "needle", "description": " The value that is expected in the array."}, {"type": "Array", "name": "haystack", "description": " An array of values."}, {"type": "String", "name": "message", "description": " (Optional) The message to display if the assertion fails."}]}, "indexOf": {"description": "Asserts that the given value is contained in an array at the specified index.\nThis uses the triple equals sign so no type cohersion will occur.", "param": "{Object} needle The value to look for.", "static": "", "guessedname": "indexOf", "guessedtype": "function", "params": [{"type": "Object", "name": "needle", "description": " The value to look for."}, {"type": "Array", "name": "haystack", "description": " The array to search in."}, {"type": "int", "name": "index", "description": " The index at which the value should exist."}, {"type": "String", "name": "message", "description": " (Optional) The message to display if the assertion fails."}]}, "itemsAreSame": {"description": "Asserts that the values in an array are the same, and in the same position,\nas values in another array. This uses the triple equals sign\nso no type cohersion will occur. Note that the array objects themselves\nneed not be the same for this test to pass.", "param": "{Array} expected An array of the expected values.", "static": "", "guessedname": "itemsAreSame", "guessedtype": "function", "params": [{"type": "Array", "name": "expected", "description": " An array of the expected values."}, {"type": "Array", "name": "actual", "description": " Any array of the actual values."}, {"type": "String", "name": "message", "description": " (Optional) The message to display if the assertion fails."}]}, "contains": {"description": "Asserts that a value is present in an array. This uses the triple equals \nsign so no type cohersion may occur.", "param": "{Object} needle The value that is expected in the array.", "static": "", "guessedname": "contains", "guessedtype": "function", "params": [{"type": "Object", "name": "needle", "description": " The value that is expected in the array."}, {"type": "Array", "name": "haystack", "description": " An array of values."}, {"type": "String", "name": "message", "description": " (Optional) The message to display if the assertion fails."}]}, "containsItems": {"description": "Asserts that a set of values are present in an array. This uses the triple equals \nsign so no type cohersion may occur. For this assertion to pass, all values must\nbe found.", "param": "{Object[]} needles An array of values that are expected in the array.", "static": "", "guessedname": "containsItems", "guessedtype": "function", "params": [{"type": "Object[]", "name": "needles", "description": " An array of values that are expected in the array."}, {"type": "Array", "name": "haystack", "description": " An array of values to check."}, {"type": "String", "name": "message", "description": " (Optional) The message to display if the assertion fails."}]}, "doesNotContainItems": {"description": "Asserts that a set of values are not present in an array. This uses the triple equals \nsign so no type cohersion may occur. For this assertion to pass, all values must\nnot be found.", "param": "{Object[]} needles An array of values that are not expected in the array.", "static": "", "guessedname": "doesNotContainItems", "guessedtype": "function", "params": [{"type": "Object[]", "name": "needles", "description": " An array of values that are not expected in the array."}, {"type": "Array", "name": "haystack", "description": " An array of values to check."}, {"type": "String", "name": "message", "description": " (Optional) The message to display if the assertion fails."}]}, "itemsAreEquivalent": {"return": {"type": "Void", "description": ""}, "description": "Asserts that the values in an array are equivalent, and in the same position,\nas values in another array. This uses a function to determine if the values\nare equivalent. Note that the array objects themselves\nneed not be the same for this test to pass.", "param": "{Array} expected An array of the expected values.", "static": "", "guessedname": "itemsAreEquivalent", "guessedtype": "function", "params": [{"type": "Array", "name": "expected", "description": " An array of the expected values."}, {"type": "Array", "name": "actual", "description": " Any array of the actual values."}, {"type": "Function", "name": "comparator", "description": " A function that returns true if the values are equivalent\nor false if not."}, {"type": "String", "name": "message", "description": " (Optional) The message to display if the assertion fails."}]}, "itemsAreEqual": {"description": "Asserts that the values in an array are equal, and in the same position,\nas values in another array. This uses the double equals sign\nso type cohersion may occur. Note that the array objects themselves\nneed not be the same for this test to pass.", "param": "{Array} expected An array of the expected values.", "static": "", "guessedname": "itemsAreEqual", "guessedtype": "function", "params": [{"type": "Array", "name": "expected", "description": " An array of the expected values."}, {"type": "Array", "name": "actual", "description": " Any array of the actual values."}, {"type": "String", "name": "message", "description": " (Optional) The message to display if the assertion fails."}]}, "isEmpty": {"description": "Asserts that an array is empty.", "param": "{Array} actual The array to test.", "static": "", "guessedname": "isEmpty", "guessedtype": "function", "params": [{"type": "Array", "name": "actual", "description": " The array to test."}, {"type": "String", "name": "message", "description": " (Optional) The message to display if the assertion fails."}]}, "lastIndexOf": {"description": "Asserts that the given value is contained in an array at the specified index,\nstarting from the back of the array.\nThis uses the triple equals sign so no type cohersion will occur.", "param": "{Object} needle The value to look for.", "static": "", "guessedname": "lastIndexOf", "guessedtype": "function", "params": [{"type": "Object", "name": "needle", "description": " The value to look for."}, {"type": "Array", "name": "haystack", "description": " The array to search in."}, {"type": "int", "name": "index", "description": " The index at which the value should exist."}, {"type": "String", "name": "message", "description": " (Optional) The message to display if the assertion fails."}]}, "isNotEmpty": {"description": "Asserts that an array is not empty.", "param": "{Array} actual The array to test.", "static": "", "guessedname": "isNotEmpty", "guessedtype": "function", "params": [{"type": "Array", "name": "actual", "description": " The array to test."}, {"type": "String", "name": "message", "description": " (Optional) The message to display if the assertion fails."}]}, "doesNotContainMatch": {"description": "Asserts that no values matching a condition are present in an array. This uses\na function to determine a match.", "param": "{Function} matcher A function that returns true if the items matches or false if not.", "static": "", "guessedname": "doesNotContainMatch", "guessedtype": "function", "params": [{"type": "Function", "name": "matcher", "description": " A function that returns true if the items matches or false if not."}, {"type": "Array", "name": "haystack", "description": " An array of values."}, {"type": "String", "name": "message", "description": " (Optional) The message to display if the assertion fails."}]}}, "static": "", "file": "test.js", "guessedtype": "property", "shortname": "ArrayAssert", "description": "The ArrayAssert object provides functions to test JavaScript array objects\nfor a variety of cases."}, "AUI~event~input": {"name": "AUI~event~input", "namespace": "", "module": "aui-event", "properties": {"A.Node.DOM_EVENTS.input": {"type": "Event.Handle", "static": "", "description": "A.Node.DOM_EVENTS.input event.", "guessedname": "input", "guessedtype": "property"}}, "guessedname": "L", "methods": {"void();": {"guessedname": "requires", "guessedtype": "property"}}, "file": "aui-event.js", "guessedtype": "property", "shortname": "AUI~event~input", "events": {"input": {"return": "{Event.Handle} the detach handle", "description": "This event fires when the value of the element changes, either as a result of\na keystroke, or from an input event.", "param": "type {String} 'input'", "params": [{"type": "String", "name": "type", "description": "  'input'"}, {"type": "Function", "name": "fn", "description": "  the callback function"}, {"type": "String|Node|etc", "name": "el", "description": "  the element to bind (typically document)"}, {"type": "Object", "name": "o", "description": "  optional context object"}, {"type": "", "name": "args", "description": " 0..n additional arguments that should be provided\nto the listener."}], "guessedname": "on", "guessedtype": "function"}}, "description": "An object that encapsulates text changed events for textareas and input\nelement of type text and password. This event only occurs when the element\nis focused."}, "Rating": {"name": "Rating", "configs": {"elements": {"description": "<a href=\"NodeList.html\">NodeList</a> of elements used on the\nRating. Each element is one Star.", "writeonce": "", "readonly": "", "guessedname": "elements", "guessedtype": "property", "type": "NodeList"}, "labelNode": {"default": "Generated div element.", "type": "String", "description": "DOM Node to display the text of the StarRating. If not\nspecified try to query using HTML_PARSER an element inside\nboundingBox which matches <code>aui-rating-label-element</code>.", "guessedname": "labelNode", "guessedtype": "property"}, "defaultSelected": {"description": "The number of selected starts when the Rating render.", "writeonce": "", "default": "0", "guessedname": "defaultSelected", "guessedtype": "property", "type": "Number"}, "inputName": {"default": "''", "type": "String", "description": "Name of the <a\nhref=\"Rating.html#config_hiddenInput\">hiddenInput</a> element. If\nnot specified will use the name of the replaced radio.", "guessedname": "inputName", "guessedtype": "property"}, "value": {"default": "null", "type": "String", "description": "Stores the value of the current selected Rating element.", "guessedname": "value", "guessedtype": "property"}, "label": {"default": "''", "type": "String", "description": "Label to be displayed with the Rating elements.", "guessedname": "label", "guessedtype": "property"}, "disabled": {"default": "false", "type": "boolean", "description": "Whether the Rating is disabled or not. Disabled Ratings don't allow\nhover or click, just display selected stars.", "guessedname": "disabled", "guessedtype": "property"}, "hiddenInput": {"type": "Node", "description": "Hidden input to handle the selected value. This hidden input\nreplace the radio elements and keep the same name.", "guessedname": "hiddenInput", "guessedtype": "property"}, "selectedIndex": {"default": "-1", "type": "Number", "description": "Stores the index of the selected element.", "guessedname": "selectedIndex", "guessedtype": "property"}, "title": {"default": "null", "type": "String", "description": "If set, will be used when there is no DOM <code>title</code> on the\nradio elements.", "guessedname": "title", "guessedtype": "property"}, "size": {"default": "5", "type": "Number", "description": "Number of Rating elements to be displayed.", "guessedname": "size", "guessedtype": "property"}, "showTitle": {"default": "true", "type": "boolean", "description": "If <code>true</code> will extract the value of the\n<code>title</code> attribute on the radio, and use it on the\ngenerated Rating elements.", "guessedname": "showTitle", "guessedtype": "property"}, "canReset": {"default": "true", "type": "boolean", "description": "If <code>true</code> could be reseted (i.e., have no values\nselected).", "guessedname": "canReset", "guessedtype": "property"}}, "constructors": [{"params": [{"type": "Object", "name": "config", "description": "  Object literal specifying widget configuration properties."}], "description": "<p><img src=\"assets/images/aui-rating/main.png\"/></p>\nA base class for Rating, providing:\n<ul>\n<li>A non-obstrusive star rating control</li>\n<li>Could be based on a set of radio input boxes</li>\n</ul>\nQuick Example:<br/>\n<pre><code>var instance = new A.Rating({\nboundingBox: '#rating',\ndefaultSelected: 3,\ndisabled: false,\nlabel: 'Label'\n}).render();\n</code></pre>\nCheck the list of <a href=\"Rating.html#configattributes\">Configuration Attributes</a> available for\nRating."}], "namespace": "", "module": "aui-rating", "events": {"showTitleChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "showTitleChange", "description": "Fires when the value for the configuration attribute 'showTitle' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "canResetChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "canResetChange", "description": "Fires when the value for the configuration attribute 'canReset' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "itemClick": {"preventable": "_defRatingItemClickFn", "params": [{"type": "Event.Facade", "name": "event", "description": " The itemClick event."}], "description": "Handles the itemClick event.", "param": "{Event.Facade} event The itemClick event.", "type": "{Event.Custom}"}, "sizeChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "sizeChange", "description": "Fires when the value for the configuration attribute 'size' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "inputNameChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "inputNameChange", "description": "Fires when the value for the configuration attribute 'inputName' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "hiddenInputChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "hiddenInputChange", "description": "Fires when the value for the configuration attribute 'hiddenInput' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "selectedIndexChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "selectedIndexChange", "description": "Fires when the value for the configuration attribute 'selectedIndex' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "itemSelect": {"preventable": "_defRatingItemSelectFn", "params": [{"type": "Event.Facade", "name": "event", "description": " The itemSelect event."}], "description": "Handles the itemSelect event.", "param": "{Event.Facade} event The itemOver event.", "type": "{Event.Custom}"}, "valueChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "valueChange", "description": "Fires when the value for the configuration attribute 'value' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "defaultSelectedChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "defaultSelectedChange", "description": "Fires when the value for the configuration attribute 'defaultSelected' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "elementsChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "elementsChange", "description": "Fires when the value for the configuration attribute 'elements' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "labelNodeChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "labelNodeChange", "description": "Fires when the value for the configuration attribute 'labelNode' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "itemOut": {"preventable": "_defRatingItemOutFn", "params": [{"type": "Event.Facade", "name": "event", "description": " The itemOut event."}], "description": "Handles the itemOut event.", "param": "{Event.Facade} event The itemOut event.", "type": "{Event.Custom}"}, "titleChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "titleChange", "description": "Fires when the value for the configuration attribute 'title' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "disabledChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "disabledChange", "description": "Fires when the value for the configuration attribute 'disabled' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "labelChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "labelChange", "description": "Fires when the value for the configuration attribute 'label' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "guessedname": "Rating", "methods": {"_defRatingItemOverFn": {"description": "Fires the itemOver event.", "param": "{EventFacade} event itemOver event facade", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": " itemOver event facade"}], "guessedname": "_defRatingItemOverFn", "guessedtype": "function"}, "_renderLabel": {"protected": "", "description": "Render the Rating label.", "guessedname": "_renderLabel", "guessedtype": "function"}, "_handleMouseOverEvent": {"description": "Fires the mouseOver event.", "param": "{EventFacade} event mouseOver event facade", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": " mouseOver event facade"}], "guessedname": "_handleMouseOverEvent", "guessedtype": "function"}, "_handleClickEvent": {"description": "Fires the click event.", "param": "{EventFacade} event click event facade", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": " click event facade"}], "guessedname": "_handleClickEvent", "guessedtype": "function"}, "initializer": {"protected": "", "description": "Construction logic executed during Rating instantiation. Lifecycle.", "guessedname": "initializer", "guessedtype": "function"}, "select": {"param": "{Number} index Index to be selected", "params": [{"type": "Number", "name": "index", "description": " Index to be selected"}], "description": "Selects the <code>index</code> Rating element.", "guessedname": "select", "guessedtype": "function"}, "_defRatingItemClickFn": {"description": "Fires the itemClick event.", "param": "{EventFacade} event itemClick event facade", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": " itemClick event facade"}], "guessedname": "_defRatingItemClickFn", "guessedtype": "function"}, "clearSelection": {"description": "Clear all selected starts to the default state.", "guessedname": "clearSelection", "guessedtype": "function"}, "_defRatingItemSelectFn": {"description": "Fires the itemSelect event.", "param": "{EventFacade} event itemSelect event facade", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": " itemSelect event facade"}], "guessedname": "_defRatingItemSelectFn", "guessedtype": "function"}, "bindUI": {"protected": "", "description": "Bind the events on the Rating UI. Lifecycle.", "guessedname": "bindUI", "guessedtype": "function"}, "_createElements": {"protected": "", "return": {"type": "NodeList", "description": ""}, "description": "Create rating elements based on the <code>size</code>\nattribute. It's only invoked when the HTML_PARSER does not find\nnothing.", "guessedname": "_createElements", "guessedtype": "function"}, "_parseInputElements": {"protected": "", "description": "Parse the HTML radio elements from the markup to be Rating elements.", "guessedname": "_parseInputElements", "guessedtype": "function"}, "_createEvents": {"protected": "", "description": "Create the custom events.", "guessedname": "_createEvents", "guessedtype": "function"}, "_syncElements": {"protected": "", "description": "Sync the Rating elements.", "guessedname": "_syncElements", "guessedtype": "function"}, "_canFireCustomEvent": {"return": {"type": "Boolean", "description": ""}, "description": "Check if the Rating element can fire the custom events. Disabled\nelements won't fire nothing.", "param": "{EventFacade} event", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "guessedname": "_canFireCustomEvent", "guessedtype": "function"}, "indexOf": {"return": {"type": "Number", "description": ""}, "description": "Finds the index of the <code>elem</code>.", "param": "{Node} elem Rating element", "params": [{"type": "Node", "name": "elem", "description": " Rating element"}], "guessedname": "indexOf", "guessedtype": "function"}, "_handleMouseOutEvent": {"description": "Fires the mouseOut event.", "param": "{EventFacade} event mouseOut event facade", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": " mouseOut event facade"}], "guessedname": "_handleMouseOutEvent", "guessedtype": "function"}, "_getInputData": {"protected": "", "description": "Get the <code>index</code> element input data stored on <a\nhref=\"Rating.html#property_inputElementsData\">inputElementsData</a>.", "guessedname": "_getInputData", "guessedtype": "function"}, "syncUI": {"protected": "", "description": "Sync the Rating UI. Lifecycle.", "guessedname": "syncUI", "guessedtype": "function"}, "fillTo": {"param": "{Number} index Index to be selected", "params": [{"type": "Number", "name": "index", "description": " Index to be selected"}, {"type": "String", "name": "className", "description": " Class name to be applied when fill the Rating elements"}], "description": "Add the <code>className</code> on the the <code>index</code> element\nand all the previous Rating elements.", "guessedname": "fillTo", "guessedtype": "function"}, "_renderElements": {"protected": "", "description": "Render the Rating elements.", "guessedname": "_renderElements", "guessedtype": "function"}, "_syncLabelUI": {"protected": "", "description": "Sync the Rating label UI.", "guessedname": "_syncLabelUI", "guessedtype": "function"}, "_defRatingItemOutFn": {"description": "Fires the itemOut event.", "param": "{EventFacade} event itemOut event facade", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": " itemOut event facade"}], "guessedname": "_defRatingItemOutFn", "guessedtype": "function"}, "_afterSetLabel": {"description": "Fires after the value of the\n<a href=\"Rating.html#config_label\">label</a> attribute change.", "param": "{EventFacade} event", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "guessedname": "_afterSetLabel", "guessedtype": "function"}, "renderUI": {"protected": "", "description": "Create the DOM structure for the Rating. Lifecycle.", "guessedname": "renderUI", "guessedtype": "function"}}, "extends": "Component", "superclass": "Component", "file": "aui-rating.js", "guessedtype": "property", "shortname": "Rating", "properties": {"Rating.ATTRS": {"type": "Object", "static": "", "description": "Static property used to define the default attribute\nconfiguration for the Rating.", "guessedname": "ATTRS", "guessedtype": "property"}, "StarRating.HTML_PARSER": {"type": "Object", "static": "", "description": "Object hash, defining how attribute values are to be parsed from\nmarkup contained in the widget's content box.", "guessedname": "HTML_PARSER", "guessedtype": "property"}, "Rating.NAME": {"type": "String", "static": "", "description": "Static property provides a string to identify the class.", "guessedname": "NAME", "guessedtype": "property"}}, "description": "<p><img src=\"assets/images/aui-rating/main.png\"/></p>\nA base class for Rating, providing:\n<ul>\n<li>A non-obstrusive star rating control</li>\n<li>Could be based on a set of radio input boxes</li>\n</ul>\nQuick Example:<br/>\n<pre><code>var instance = new A.Rating({\nboundingBox: '#rating',\ndefaultSelected: 3,\ndisabled: false,\nlabel: 'Label'\n}).render();\n</code></pre>\nCheck the list of <a href=\"Rating.html#configattributes\">Configuration Attributes</a> available for\nRating."}, "DataSchema.XML": {"name": "DataSchema.XML", "namespace": "", "module": "dataschema", "guessedname": "SchemaXML", "methods": {"_parseResult": {"return": {"type": "Object", "description": "Schema-parsed data."}, "description": "Schema-parsed result to add to results list.", "param": "fields {Array} Required. A collection of field definition.", "protected": "", "static": "", "guessedname": "_parseResult", "guessedtype": "function", "params": [{"type": "Array", "name": "fields", "description": "  Required. A collection of field definition."}, {"type": "Object", "name": "context", "description": "  Required. XML node or document to search within."}]}, "_parseResults": {"return": {"type": "Object", "description": "Schema-parsed data."}, "description": "Schema-parsed list of results from full data", "param": "schema {Object} Schema to parse against.", "protected": "", "static": "", "guessedname": "_parseResults", "guessedtype": "function", "params": [{"type": "Object", "name": "schema", "description": "  Schema to parse against."}, {"type": "Object", "name": "context", "description": "  XML node document parse."}, {"type": "Object", "name": "data_out", "description": "  In-progress schema-parsed data to update."}]}, "_parseMeta": {"return": {"type": "Object", "description": "Schema-parsed data."}, "description": "Parses results data according to schema", "param": "xmldoc_in {Object} XML document parse.", "protected": "", "static": "", "guessedname": "_parseMeta", "guessedtype": "function", "params": [{"type": "Object", "name": "xmldoc_in", "description": "  XML document parse."}, {"type": "Object", "name": "data_out", "description": "  In-progress schema-parsed data to update."}]}, "_getLocationValue": {"return": {"type": "Object", "description": "Data value or null."}, "description": "Get an XPath-specified value for a given field from an XML node or document.", "param": "field {String | Object} Field definition.", "protected": "", "static": "", "guessedname": "_getLocationValue", "guessedtype": "function", "params": [{"type": "String | Object", "name": "field", "description": "  Field definition."}, {"type": "Object", "name": "context", "description": "  XML node or document to search within."}]}, "_parseField": {"description": "Schema-parsed result field.", "param": "field {String | Object} Required. Field definition.", "protected": "", "static": "", "guessedname": "_parseField", "guessedtype": "function", "params": [{"type": "String | Object", "name": "field", "description": "  Required. Field definition."}, {"type": "Object", "name": "result", "description": "  Required. Schema parsed data object."}, {"type": "Object", "name": "context", "description": "  Required. XML node or document to search within."}]}, "apply": {"return": {"type": "Object", "description": "Schema-parsed data."}, "description": "Applies a given schema to given XML data.", "param": "schema {Object} Schema to apply.", "static": "", "guessedname": "apply", "guessedtype": "function", "params": [{"type": "Object", "name": "schema", "description": "  Schema to apply."}, {"type": "XMLDoc", "name": "data", "description": "  XML document."}]}, "_getXPathResult": {"return": {"type": "Object", "description": "Data collection or null."}, "description": "Fetches the XPath-specified result for a given location in an XML node or document.", "param": "locator {String} The XPath location.", "protected": "", "static": "", "guessedname": "_getXPathResult", "guessedtype": "function", "params": [{"type": "String", "name": "locator", "description": "  The XPath location."}, {"type": "Object", "name": "context", "description": "  XML node or document to search within."}, {"type": "Object", "name": "xmldoc", "description": "  XML document to resolve namespace."}]}}, "static": "", "superclass": "DataSchema.Base", "file": "dataschema.js", "guessedtype": "property", "extends": "DataSchema.Base", "shortname": "DataSchema.XML", "description": "XML subclass for the DataSchema Utility."}, "YUI~dump": {"name": "YUI~dump", "namespace": "", "module": "dump", "methods": {"dump": {"return": {"type": "string", "description": "the dump result"}, "description": "Returns a simple string representation of the object or array.\nOther types of objects will be returned unprocessed.  Arrays\nare expected to be indexed.  Use object notation for\nassociative arrays.", "param": "o {object} The object to dump", "params": [{"type": "object", "name": "o", "description": "  The object to dump"}, {"type": "int", "name": "d", "description": "  How deep to recurse child objects, default 3"}], "guessedname": "dump", "guessedtype": "function", "todo": "dumping a window is causing an unhandled exception in\nFireFox.\nThis method is in the 'dump' module, which is not bundled with\nthe core YUI object"}}, "file": "dump.js", "shortname": "YUI~dump", "description": "The following methods are added to the YUI instance"}, "Test.Assert": {"name": "Test.Assert", "namespace": "Test", "module": "test", "guessedname": "Assert", "methods": {"isTrue": {"description": "Asserts that a value is true. This uses the triple equals sign\nso no type cohersion may occur.", "param": "{Object} actual The actual value to test.", "static": "", "guessedname": "isTrue", "guessedtype": "function", "params": [{"type": "Object", "name": "actual", "description": " The actual value to test."}, {"type": "String", "name": "message", "description": " (Optional) The message to display if the assertion fails."}]}, "isFalse": {"description": "Asserts that a value is false. This uses the triple equals sign\nso no type cohersion may occur.", "param": "{Object} actual The actual value to test.", "static": "", "guessedname": "isFalse", "guessedtype": "function", "params": [{"type": "Object", "name": "actual", "description": " The actual value to test."}, {"type": "String", "name": "message", "description": " (Optional) The message to display if the assertion fails."}]}, "isNotNull": {"description": "Asserts that a value is not null. This uses the triple equals sign\nso no type cohersion may occur.", "param": "{Object} actual The actual value to test.", "static": "", "guessedname": "isNotNull", "guessedtype": "function", "params": [{"type": "Object", "name": "actual", "description": " The actual value to test."}, {"type": "String", "name": "message", "description": " (Optional) The message to display if the assertion fails."}]}, "fail": {"description": "Forces an assertion error to occur.", "param": "{String} message (Optional) The message to display with the failure.", "static": "", "guessedname": "fail", "guessedtype": "function", "params": [{"type": "String", "name": "message", "description": " (Optional) The message to display with the failure."}]}, "isFunction": {"description": "Asserts that a value is a function.", "param": "{Object} actual The value to test.", "static": "", "guessedname": "isFunction", "guessedtype": "function", "params": [{"type": "Object", "name": "actual", "description": " The value to test."}, {"type": "String", "name": "message", "description": " (Optional) The message to display if the assertion fails."}]}, "isNaN": {"description": "Asserts that a value is not a number.", "param": "{Object} actual The value to test.", "static": "", "guessedname": "isNaN", "guessedtype": "function", "params": [{"type": "Object", "name": "actual", "description": " The value to test."}, {"type": "String", "name": "message", "description": " (Optional) The message to display if the assertion fails."}]}, "isBoolean": {"description": "Asserts that a value is a Boolean.", "param": "{Object} actual The value to test.", "static": "", "guessedname": "isBoolean", "guessedtype": "function", "params": [{"type": "Object", "name": "actual", "description": " The value to test."}, {"type": "String", "name": "message", "description": " (Optional) The message to display if the assertion fails."}]}, "areNotSame": {"description": "Asserts that a value is not the same as another. This uses the triple equals sign\nso no type cohersion may occur.", "param": "{Object} unexpected The unexpected value.", "static": "", "guessedname": "areNotSame", "guessedtype": "function", "params": [{"type": "Object", "name": "unexpected", "description": " The unexpected value."}, {"type": "Object", "name": "actual", "description": " The actual value to test."}, {"type": "String", "name": "message", "description": " (Optional) The message to display if the assertion fails."}]}, "isNotNaN": {"description": "Asserts that a value is not the special NaN value.", "param": "{Object} actual The value to test.", "static": "", "guessedname": "isNotNaN", "guessedtype": "function", "params": [{"type": "Object", "name": "actual", "description": " The value to test."}, {"type": "String", "name": "message", "description": " (Optional) The message to display if the assertion fails."}]}, "areNotEqual": {"description": "Asserts that a value is not equal to another. This uses the double equals sign\nso type cohersion may occur.", "param": "{Object} unexpected The unexpected value.", "static": "", "guessedname": "areNotEqual", "guessedtype": "function", "params": [{"type": "Object", "name": "unexpected", "description": " The unexpected value."}, {"type": "Object", "name": "actual", "description": " The actual value to test."}, {"type": "String", "name": "message", "description": " (Optional) The message to display if the assertion fails."}]}, "areSame": {"description": "Asserts that a value is the same as another. This uses the triple equals sign\nso no type cohersion may occur.", "param": "{Object} expected The expected value.", "static": "", "guessedname": "areSame", "guessedtype": "function", "params": [{"type": "Object", "name": "expected", "description": " The expected value."}, {"type": "Object", "name": "actual", "description": " The actual value to test."}, {"type": "String", "name": "message", "description": " (Optional) The message to display if the assertion fails."}]}, "_getCount": {"protected": "", "static": "", "description": "Returns the number of assertions that have been performed.", "guessedname": "_getCount", "guessedtype": "function"}, "isUndefined": {"description": "Asserts that a value is undefined. This uses the triple equals sign\nso no type cohersion may occur.", "param": "{Object} actual The actual value to test.", "static": "", "guessedname": "isUndefined", "guessedtype": "function", "params": [{"type": "Object", "name": "actual", "description": " The actual value to test."}, {"type": "String", "name": "message", "description": " (Optional) The message to display if the assertion fails."}]}, "isArray": {"description": "Asserts that a value is an array.", "param": "{Object} actual The value to test.", "static": "", "guessedname": "isArray", "guessedtype": "function", "params": [{"type": "Object", "name": "actual", "description": " The value to test."}, {"type": "String", "name": "message", "description": " (Optional) The message to display if the assertion fails."}]}, "Y.assert": {"description": "Asserts that a given condition is true. If not, then a Y.Assert.Error object is thrown\nand the test fails.", "param": "{Boolean} condition The condition to test.", "static": "", "guessedname": "assert", "guessedtype": "function", "params": [{"type": "Boolean", "name": "condition", "description": " The condition to test."}, {"type": "String", "name": "message", "description": " The message to display if the assertion fails."}]}, "isTypeOf": {"description": "Asserts that a value is of a particular type.", "param": "{String} expectedType The expected type of the variable.", "static": "", "guessedname": "isTypeOf", "guessedtype": "function", "params": [{"type": "String", "name": "expectedType", "description": " The expected type of the variable."}, {"type": "Object", "name": "actualValue", "description": " The actual value to test."}, {"type": "String", "name": "message", "description": " (Optional) The message to display if the assertion fails."}]}, "_formatMessage": {"return": {"type": "String", "description": "The final error message, containing either or both."}, "description": "Formats a message so that it can contain the original assertion message\nin addition to the custom message.", "param": "{String} customMessage The message passed in by the developer.", "protected": "", "static": "", "guessedname": "_formatMessage", "guessedtype": "function", "params": [{"type": "String", "name": "customMessage", "description": " The message passed in by the developer."}, {"type": "String", "name": "defaultMessage", "description": " The message created by the error by default."}]}, "_increment": {"protected": "", "static": "", "description": "Increments the number of assertions that have been performed.", "guessedname": "_increment", "guessedtype": "function"}, "areEqual": {"description": "Asserts that a value is equal to another. This uses the double equals sign\nso type cohersion may occur.", "param": "{Object} expected The expected value.", "static": "", "guessedname": "areEqual", "guessedtype": "function", "params": [{"type": "Object", "name": "expected", "description": " The expected value."}, {"type": "Object", "name": "actual", "description": " The actual value to test."}, {"type": "String", "name": "message", "description": " (Optional) The message to display if the assertion fails."}]}, "isNumber": {"description": "Asserts that a value is a number.", "param": "{Object} actual The value to test.", "static": "", "guessedname": "isNumber", "guessedtype": "function", "params": [{"type": "Object", "name": "actual", "description": " The value to test."}, {"type": "String", "name": "message", "description": " (Optional) The message to display if the assertion fails."}]}, "isObject": {"description": "Asserts that a value is an object.", "param": "{Object} actual The value to test.", "static": "", "guessedname": "isObject", "guessedtype": "function", "params": [{"type": "Object", "name": "actual", "description": " The value to test."}, {"type": "String", "name": "message", "description": " (Optional) The message to display if the assertion fails."}]}, "isString": {"description": "Asserts that a value is a string.", "param": "{Object} actual The value to test.", "static": "", "guessedname": "isString", "guessedtype": "function", "params": [{"type": "Object", "name": "actual", "description": " The value to test."}, {"type": "String", "name": "message", "description": " (Optional) The message to display if the assertion fails."}]}, "isNotUndefined": {"description": "Asserts that a value is not undefined. This uses the triple equals sign\nso no type cohersion may occur.", "param": "{Object} actual The actual value to test.", "static": "", "guessedname": "isNotUndefined", "guessedtype": "function", "params": [{"type": "Object", "name": "actual", "description": " The actual value to test."}, {"type": "String", "name": "message", "description": " (Optional) The message to display if the assertion fails."}]}, "isNull": {"description": "Asserts that a value is null. This uses the triple equals sign\nso no type cohersion may occur.", "param": "{Object} actual The actual value to test.", "static": "", "guessedname": "isNull", "guessedtype": "function", "params": [{"type": "Object", "name": "actual", "description": " The actual value to test."}, {"type": "String", "name": "message", "description": " (Optional) The message to display if the assertion fails."}]}, "_reset": {"protected": "", "static": "", "description": "Resets the number of assertions that have been performed to 0.", "guessedname": "_reset", "guessedtype": "function"}, "isInstanceOf": {"description": "Asserts that a value is an instance of a particular object. This may return\nincorrect results when comparing objects from one frame to constructors in\nanother frame. For best results, don't use in a cross-frame manner.", "param": "{Function} expected The function that the object should be an instance of.", "static": "", "guessedname": "isInstanceOf", "guessedtype": "function", "params": [{"type": "Function", "name": "expected", "description": " The function that the object should be an instance of."}, {"type": "Object", "name": "actual", "description": " The object to test."}, {"type": "String", "name": "message", "description": " (Optional) The message to display if the assertion fails."}]}, "Y.fail": {"description": "Forces an assertion error to occur. Shortcut for Y.Assert.fail().", "param": "{String} message (Optional) The message to display with the failure.", "static": "", "guessedname": "fail", "guessedtype": "property", "params": [{"type": "String", "name": "message", "description": " (Optional) The message to display with the failure."}]}}, "static": "", "file": "test.js", "guessedtype": "property", "shortname": "Assert", "properties": {"_asserts": {"guessedname": "_asserts", "type": "int", "description": "The number of assertions performed.", "private": "", "guessedtype": "property"}}, "description": "The Assert object provides functions to test JavaScript values against\nknown and expected results. Whenever a comparison (assertion) fails,\nan error is thrown."}, "ArrayList": {"name": "ArrayList", "constructors": [{"params": [{"type": " Array ", "name": "items", "description": "  array of items this list will be responsible for"}], "description": "Generic ArrayList class for managing lists of items and iterating operations\nover them.  The targeted use for this class is for augmentation onto a\nclass that is responsible for managing multiple instances of another class\n(e.g. NodeList for Nodes).  The recommended use is to augment your class with\nArrayList, then use ArrayList.addMethod to mirror the API of the constituent\nitems on the list's API.\nThe default implementation creates immutable lists, but mutability can be\nprovided via the arraylist-add submodule or by implementing mutation methods\ndirectly on the augmented class's prototype."}], "namespace": "", "module": "collection", "methods": {"indexOf": {"return": {"type": " Integer ", "description": "Array index if found.  Otherwise -1"}, "description": "Finds the first index of the needle in the managed array of items.", "param": "needle { mixed } The item to search for", "params": [{"type": " mixed ", "name": "needle", "description": "  The item to search for"}], "guessedname": "indexOf", "guessedtype": "function"}, "some": {"return": {"type": " Boolean ", "description": "True if the function returned true on an item"}, "description": "<p>Execute a function on each item of the list, optionally providing a\ncustom execution context.  Default context is the item.</p>\n<p>The callback signature is <code>callback( item, index )</code>.</p>\n<p>Unlike <code>each</code>, if the callback returns true, the\niteratation will stop.</p>", "param": "fn { Function } the function to execute", "params": [{"type": " Function ", "name": "fn", "description": "  the function to execute"}, {"type": " mixed ", "name": "context", "description": "  optional override 'this' in the function"}], "guessedname": "some", "guessedtype": "function"}, "addMethod": {"description": "<p>Adds a pass through method to dest (typically the prototype of a list\nclass) that calls the named method on each item in the list with\nwhatever parameters are passed in.  Allows for API indirection via list\ninstances.</p>\n<p>Accepts a single string name or an array of string names.</p>\n<pre><code>list.each( function ( item ) {\nitem.methodName( 1, 2, 3 );\n} );\n// becomes\nlist.methodName( 1, 2, 3 );</code></pre>\n<p>Additionally, the pass through methods use the item retrieved by the\n<code>_item</code> method in case there is any special behavior that is\nappropriate for API mirroring.</p>", "param": "dest { Object } Object or prototype to receive the iterator method", "static": "", "guessedname": "addMethod", "guessedtype": "function", "params": [{"type": " Object ", "name": "dest", "description": "  Object or prototype to receive the iterator method"}, {"type": " String | Array ", "name": "name", "description": "  Name of method of methods to create"}]}, "item": {"return": {"type": " mixed ", "description": "the item at the requested index"}, "description": "Get an item by index from the list.  Override this method if managing a\nlist of objects that have a different public representation (e.g. Node\ninstances vs DOM nodes).  The iteration methods that accept a user\nfunction will use this method for access list items for operation.", "param": "i { Integer } index to fetch", "params": [{"type": " Integer ", "name": "i", "description": "  index to fetch"}], "guessedname": "item", "guessedtype": "function"}, "isEmpty": {"return": {"type": " Boolean ", "description": "true if 1 or more items are being managed"}, "description": "Is this instance managing any items?", "guessedname": "isEmpty", "guessedtype": "function"}, "each": {"return": {"type": " ArrayList ", "description": "this instance"}, "description": "<p>Execute a function on each item of the list, optionally providing a\ncustom execution context.  Default context is the item.</p>\n<p>The callback signature is <code>callback( item, index )</code>.</p>", "chainable": "", "param": "fn { Function } the function to execute", "params": [{"type": " Function ", "name": "fn", "description": "  the function to execute"}, {"type": " mixed ", "name": "context", "description": "  optional override 'this' in the function"}], "guessedname": "each", "guessedtype": "function"}, "_item": {"return": {"type": " mixed ", "description": "The item appropriate for pass through API methods"}, "description": "Protected method for optimizations that may be appropriate for API\nmirroring. Similar in functionality to <code>item</code>, but is used by\nmethods added with <code>ArrayList.addMethod()</code>.", "param": "i { Integer } Index of item to fetch", "protected": "", "params": [{"type": " Integer ", "name": "i", "description": "  Index of item to fetch"}], "guessedname": "_item", "guessedtype": "property"}, "size": {"return": {"type": " Integer ", "description": "Number of items in the list"}, "description": "How many items are in this list?", "guessedname": "size", "guessedtype": "function"}}, "file": "collection.js", "shortname": "ArrayList", "description": "Generic ArrayList class for managing lists of items and iterating operations\nover them.  The targeted use for this class is for augmentation onto a\nclass that is responsible for managing multiple instances of another class\n(e.g. NodeList for Nodes).  The recommended use is to augment your class with\nArrayList, then use ArrayList.addMethod to mirror the API of the constituent\nitems on the list's API.\nThe default implementation creates immutable lists, but mutability can be\nprovided via the arraylist-add submodule or by implementing mutation methods\ndirectly on the augmented class's prototype."}, "ThumbRating": {"name": "ThumbRating", "configs": {"size": {"description": "The size on ThumbRating is always 2 (i.e., thumb up and thumb down).", "default": "2", "readonly": "", "guessedname": "size", "guessedtype": "property", "type": "Number"}}, "constructors": [{"params": [{"type": "Object", "name": "config", "description": "  Object literal specifying widget configuration properties."}], "description": "<p><img src=\"assets/images/aui-rating/thumb-rating.png\"/></p>\nA base class for ThumbRating, providing:\n<ul>\n<li>A non-obstrusive star rating control using Thumb up and Thumb down icons</li>\n<li>Could be based on a set of radio input boxes</li>\n</ul>\nQuick Example:<br/>\n<pre><code>var instance = new A.ThumbRating({\nboundingBox: '#rating',\ndefaultSelected: 3,\ndisabled: false,\nlabel: 'Label'\n}).render();\n</code></pre>\nCheck the list of <a href=\"ThumbRating.html#configattributes\">Configuration Attributes</a> available for\nThumbRating."}], "namespace": "", "module": "aui-rating", "events": {"sizeChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "sizeChange", "description": "Fires when the value for the configuration attribute 'size' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "guessedname": "ThumbRating", "methods": {"_syncElements": {"protected": "", "description": "Empty method, no logic needed on this method on ThumbRating.", "guessedname": "_syncElements", "guessedtype": "function"}, "fillTo": {"param": "{Number} index Index to be selected", "params": [{"type": "Number", "name": "index", "description": " Index to be selected"}, {"type": "String", "name": "className", "description": " Class name to be applied when fill the Rating elements"}], "description": "Add the <code>className</code> on the the <code>index</code> element\nand all the previous Rating elements.", "guessedname": "fillTo", "guessedtype": "function"}, "renderUI": {"protected": "", "description": "Create the DOM structure for the ThumbRating. Lifecycle.", "guessedname": "renderUI", "guessedtype": "function"}}, "extends": "Rating", "superclass": "Rating", "file": "aui-rating.js", "guessedtype": "property", "shortname": "ThumbRating", "properties": {"ThumbRating.ATTRS": {"type": "Object", "static": "", "description": "Static property used to define the default attribute\nconfiguration for the ThumbRating.", "guessedname": "ATTRS", "guessedtype": "property"}, "ThumbRating.NAME": {"type": "String", "static": "", "description": "Static property provides a string to identify the class.", "guessedname": "NAME", "guessedtype": "property"}}, "description": "<p><img src=\"assets/images/aui-rating/thumb-rating.png\"/></p>\nA base class for ThumbRating, providing:\n<ul>\n<li>A non-obstrusive star rating control using Thumb up and Thumb down icons</li>\n<li>Could be based on a set of radio input boxes</li>\n</ul>\nQuick Example:<br/>\n<pre><code>var instance = new A.ThumbRating({\nboundingBox: '#rating',\ndefaultSelected: 3,\ndisabled: false,\nlabel: 'Label'\n}).render();\n</code></pre>\nCheck the list of <a href=\"ThumbRating.html#configattributes\">Configuration Attributes</a> available for\nThumbRating."}, "Loader": {"name": "Loader", "constructors": [{"params": [{"type": "", "name": "o", "description": " an optional set of configuration options.  Valid options:\n<ul>\n<li>base:\nThe base dir</li>\n<li>comboBase:\nThe YUI combo service base dir. Ex: http://yui.yahooapis.com/combo?</li>\n<li>root:\nThe root path to prepend to module names for the combo service. Ex: 2.5.2/build/</li>\n<li>filter:\nA filter to apply to result urls.  This filter will modify the default\npath for all modules.  The default path for the YUI library is the\nminified version of the files (e.g., event-min.js).  The filter property\ncan be a predefined filter or a custom filter.  The valid predefined \nfilters are:\n<dl>\n<dt>DEBUG</dt>\n<dd>Selects the debug versions of the library (e.g., event-debug.js).\nThis option will automatically include the Logger widget</dd>\n<dt>RAW</dt>\n<dd>Selects the non-minified version of the library (e.g., event.js).</dd>\n</dl>\nYou can also define a custom filter, which must be an object literal \ncontaining a search expression and a replace string:\n<pre>\nmyFilter: &#123; \n'searchExp': \"-min\\\\.js\", \n'replaceStr': \"-debug.js\"\n&#125;\n</pre>\n</li>\n<li>filters: per-component filter specification.  If specified for a given component, this overrides the filter config</li>\n<li>combine:\nUse the YUI combo service to reduce the number of http connections required to load your dependencies</li>\n<li>ignore:\nA list of modules that should never be dynamically loaded</li>\n<li>force:\nA list of modules that should always be loaded when required, even if already present on the page</li>\n<li>insertBefore:\nNode or id for a node that should be used as the insertion point for new nodes</li>\n<li>charset:\ncharset for dynamic nodes (deprecated, use jsAttributes or cssAttributes)</li>\n<li>jsAttributes: object literal containing attributes to add to script nodes</li>\n<li>cssAttributes: object literal containing attributes to add to link nodes</li>\n<li>timeout:\nnumber of milliseconds before a timeout occurs when dynamically loading nodes.  in not set, there is no timeout</li>\n<li>context:\nexecution context for all callbacks</li>\n<li>onSuccess:\ncallback for the 'success' event</li>\n<li>onFailure: callback for the 'failure' event</li>\n<li>onCSS: callback for the 'CSSComplete' event.  When loading YUI components with CSS\nthe CSS is loaded first, then the script.  This provides a moment you can tie into to improve\nthe presentation of the page while the script is loading.</li>\n<li>onTimeout:\ncallback for the 'timeout' event</li>\n<li>onProgress:\ncallback executed each time a script or css file is loaded</li>\n<li>modules:\nA list of module definitions.  See Loader.addModule for the supported module metadata</li>\n</ul>"}], "description": "Loader dynamically loads script and css files.  It includes the dependency\ninfo for the version of the library in use, and will automatically pull in\ndependencies for the modules requested.  It supports rollup files and will\nautomatically use these when appropriate in order to minimize the number of\nhttp connections required to load all of the dependencies.  It can load the\nfiles from the Yahoo! CDN, and it can utilize the combo service provided on\nthis network to reduce the number of http connections required to download \nYUI files.\nWhile the loader can be instantiated by the end user, it normally is not."}], "namespace": "", "module": "loader", "guessedname": "NOT_FOUND", "see": "YUI.use for the normal use case.  The use function automatically will\npull in missing dependencies.", "methods": {"getRequires": {"param": "mod The module definition from moduleInfo", "params": [{"type": "", "name": "mod", "description": " The module definition from moduleInfo"}], "description": "Returns an object containing properties for all modules required\nin order to load the requested module", "guessedname": "getRequires", "guessedtype": "function"}, "onProgress": {"type": "function", "description": "Callback executed each time a script or css file is loaded"}, "onCSS": {"type": "function", "description": "Callback for the 'CSSComplete' event.  When loading YUI components with CSS\nthe CSS is loaded first, then the script.  This provides a moment you can tie into to improve\nthe presentation of the page while the script is loading."}, "onTimeout": {"type": "function", "description": "Callback that will be executed if a timeout occurs"}, "getProvides": {"return": {"type": "", "description": "what this module provides"}, "description": "Returns a hash of module names the supplied module satisfies.", "param": "name {string} The name of the module", "params": [{"type": "string", "name": "name", "description": "  The name of the module"}], "guessedname": "getProvides", "guessedtype": "function"}, "_reduce": {"private": "", "description": "Remove superceded modules and loaded modules.  Called by\ncalculate() after we have the mega list of all dependencies", "guessedname": "_reduce", "guessedtype": "function"}, "calculate": {"param": "o optional options object", "params": [{"type": "", "name": "o", "description": " optional options object"}, {"type": "", "name": "type", "description": " optional argument to prune modules"}], "description": "Calculates the dependency tree, the result is stored in the sorted \nproperty", "guessedname": "calculate", "guessedtype": "function"}, "_filter": {"return": {"type": "string", "description": "the filtered string"}, "description": "Apply filter defined for this instance to a url/path\nmethod _filter", "private": "", "params": [{"type": "string", "name": "u", "description": "  the string to filter"}, {"type": "string", "name": "name", "description": "  the name of the module, if we are processing\na single module as opposed to a combined url"}], "param": "u {string} the string to filter", "guessedname": "_filter", "guessedtype": "function"}, "_addSkin": {"return": {"type": "string", "description": "the module name for the skin"}, "description": "Adds the skin def to the module info", "private": "", "params": [{"type": "string", "name": "skin", "description": "  the name of the skin"}, {"type": "string", "name": "mod", "description": "  the name of the module"}, {"type": "string", "name": "parent", "description": "  parent module if this is a skin of a\nsubmodule or plugin"}], "param": "skin {string} the name of the skin", "guessedname": "_addSkin", "guessedtype": "function"}, "_explode": {"private": "", "description": "Inspects the required modules list looking for additional \ndependencies.  Expands the required list to include all \nrequired modules.  Called by calculate()", "guessedname": "_explode", "guessedtype": "function"}, "insert": {"param": "o optional options object", "params": [{"type": "", "name": "o", "description": " optional options object"}, {"type": "string", "name": "type", "description": "  the type of dependency to insert"}], "description": "inserts the requested modules and their dependencies.  \n<code>type</code> can be \"js\" or \"css\".  Both script and \ncss are inserted if type is not provided.", "guessedname": "insert", "guessedtype": "function"}, "formatSkin": {"return": {"type": "string", "description": "the full skin module name"}, "description": "Returns the skin module name for the specified skin name.  If a\nmodule name is supplied, the returned skin module name is \nspecific to the module passed in.", "param": "skin {string} the name of the skin", "params": [{"type": "string", "name": "skin", "description": "  the name of the skin"}, {"type": "string", "name": "mod", "description": "  optional: the name of a module to skin"}], "guessedname": "formatSkin", "guessedtype": "function"}, "addModule": {"return": {"type": "", "description": "the module definition or null if \nthe object passed in did not provide all required attributes"}, "description": "Add a new module to the component metadata.         \n<dl>\n<dt>name:</dt>       <dd>required, the component name</dd>\n<dt>type:</dt>       <dd>required, the component type (js or css)</dd>\n<dt>path:</dt>       <dd>required, the path to the script from \"base\"</dd>\n<dt>requires:</dt>   <dd>array of modules required by this component</dd>\n<dt>optional:</dt>   <dd>array of optional modules for this component</dd>\n<dt>supersedes:</dt> <dd>array of the modules this component replaces</dd>\n<dt>after:</dt>      <dd>array of modules the components which, if present, should be sorted above this one</dd>\n<dt>rollup:</dt>     <dd>the number of superseded modules required for automatic rollup</dd>\n<dt>fullpath:</dt>   <dd>If fullpath is specified, this is used instead of the configured base + path</dd>\n<dt>skinnable:</dt>  <dd>flag to determine if skin assets should automatically be pulled in</dd>\n<dt>submodules:</dt> <dd>a hash of submodules</dd>\n<dt>lang:</dt>       <dd>array of BCP 47 language tags of\nlanguages for which this module has localized resource bundles,\ne.g., [\"en-GB\",\"zh-Hans-CN\"]</dd>\n</dl>", "param": "o An object containing the module data", "params": [{"type": "", "name": "o", "description": " An object containing the module data"}, {"type": "", "name": "name", "description": " the module name (optional), required if not in the module data"}], "guessedname": "addModule", "guessedtype": "function"}, "loadNext": {"param": "mname {string} optional the name of the module that has\nbeen loaded (which is usually why it is time to load the next\none)", "params": [{"type": "string", "name": "mname", "description": "  optional the name of the module that has\nbeen loaded (which is usually why it is time to load the next\none)"}], "description": "Executed every time a module is loaded, and if we are in a load\ncycle, we attempt to load the next script.  Public so that it\nis possible to call this if using a method other than\nY.register to determine when scripts are fully loaded", "guessedname": "loadNext", "guessedtype": "function"}, "addGroup": {"return": {"type": "boolean", "description": "true if the module was added, false if \nthe object passed in did not provide all required attributes"}, "description": "Add a new module group\n<dl>\n<dt>name:</dt>      <dd>required, the group name</dd>\n<dt>base:</dt>      <dd>The base dir for this module group</dd>\n<dt>root:</dt>      <dd>The root path to add to each combo resource path</dd>\n<dt>combine:</dt>   <dd>combo handle</dd>\n<dt>comboBase:</dt> <dd>combo service base path</dd>\n<dt>modules:</dt>   <dd>the group of modules</dd>\n</dl>", "param": "o An object containing the module data", "params": [{"type": "", "name": "o", "description": " An object containing the module data"}, {"type": "", "name": "name", "description": " the module name (optional), required if not in the module data"}], "guessedname": "addGroup", "guessedtype": "function"}, "_rollup": {"guessedname": "_rollup", "description": "Look for rollup packages to determine if all of the modules a\nrollup supersedes are required.  If so, include the rollup to\nhelp reduce the total number of connections required.  Called\nby calculate().  This is an optional feature, and requires the\nappropriate submodule to function.", "private": "", "guessedtype": "function"}, "getLangPackName": {"function": "getLangPackName", "return": {"type": "string", "description": "the language pack module name"}, "description": "Builds a module name for a language pack", "param": "lang {string} the language code", "params": [{"type": "string", "name": "lang", "description": "  the language code"}, {"type": "string", "name": "mname", "description": "  the module to build it for"}], "guessedname": "getLangPackName", "guessedtype": "function"}, "_sort": {"private": "", "description": "Sorts the dependency tree.  The last step of calculate()", "guessedname": "_sort", "guessedtype": "function"}, "onFailure": {"type": "function", "description": "Callback that will be executed if there is a failure"}, "require": {"param": "what {string[] | string*} the modules to load", "params": [{"type": "string[] | string*", "name": "what", "description": "  the modules to load"}], "description": "Add a requirement for one or more module", "guessedname": "require", "guessedtype": "function"}, "_setup": {"private": "", "description": "Investigates the current YUI configuration on the page.  By default,\nmodules already detected will not be loaded again unless a force\noption is encountered.  Called by calculate()", "guessedname": "_setup", "guessedtype": "function"}, "onSuccess": {"type": "function", "description": "Callback that will be executed when the loader is finished\nwith an insert"}, "_url": {"return": {"type": "string", "description": "the full url"}, "description": "Generates the full url for a module\nmethod _url", "private": "", "params": [{"type": "string", "name": "path", "description": "  the path fragment"}], "param": "path {string} the path fragment", "guessedname": "_url", "guessedtype": "function"}}, "file": "loader.js", "guessedtype": "property", "shortname": "Loader", "properties": {"cssAttributes": {"type": "object", "description": "An object literal containing attributes to add to link nodes"}, "force": {"type": "string[]", "description": "A list of modules that should always be loaded, even\nif they have already been inserted into the page."}, "allowRollup": {"default": "true", "type": "boolean", "description": "Should we allow rollups", "guessedname": "allowRollup", "guessedtype": "property"}, "maxURLLength": {"type": "int", "description": "Max url length for combo urls.  The default is 2048 for\ninternet explorer, and 8192 otherwise.  This is the URL\nlimit for the Yahoo! hosted combo servers.  If consuming\na different combo service that has a different URL limit\nit is possible to override this default by supplying \nthe maxURLLength config option.  The config option will\nonly take effect if lower than the default.\nBrowsers:\nIE: 2048\nOther A-Grade Browsers: Higher that what is typically supported \n'capable' mobile browsers: @TODO\nServers:\nApache: 8192", "guessedname": "maxURLLength", "guessedtype": "property"}, "rollups": {"description": "List of rollup files found in the library metadata"}, "filters": {"type": "object", "description": "per-component filter specification.  If specified for a given component, this \noverrides the filter config.", "guessedname": "filters", "guessedtype": "property"}, "skin": {"description": "Provides the information used to skin the skinnable components.\nThe following skin definition would result in 'skin1' and 'skin2'\nbeing loaded for calendar (if calendar was requested), and\n'sam' for all other skinnable components:\n<code>\nskin: {\n// The default skin, which is automatically applied if not\n// overriden by a component-specific skin definition.\n// Change this in to apply a different skin globally\ndefaultSkin: 'sam', \n// This is combined with the loader base property to get\n// the default root directory for a skin. ex:\n// http://yui.yahooapis.com/2.3.0/build/assets/skins/sam/\nbase: 'assets/skins/',\n// Any component-specific overrides can be specified here,\n// making it possible to load different skins for different\n// components.  It is possible to load more than one skin\n// for a given component as well.\noverrides: {\ncalendar: ['skin1', 'skin2']\n}\n}\n</code>", "guessedname": "skin", "guessedtype": "property"}, "loaded": {"type": "{string: boolean}", "propery": "loaded", "description": "Set when beginning to compute the dependency tree. \nComposed of what YUI reports to be loaded combined\nwith what has been loaded by any instance on the page\nwith the version number specified in the metadata.", "guessedname": "loaded", "guessedtype": "property"}, "_internalCallback": {"description": "Internal callback to handle multiple internal insert() calls\nso that css is inserted prior to js", "private": ""}, "inserted": {"type": "{string: boolean}", "description": "List of modules inserted by the utility", "guessedname": "inserted", "guessedtype": "property"}, "charset": {"deprecated": ", use cssAttributes or jsAttributes", "type": "string", "description": "The charset attribute for inserted nodes"}, "loadOptional": {"default": "false", "type": "boolean", "description": "Whether or not to load optional dependencies for \nthe requested modules"}, "ignoreRegistered": {"default": "false", "description": "Ignore modules registered on the YUI global"}, "attaching": {"description": "A list of modules to attach to the YUI instance when complete.\nIf not supplied, the sorted list of dependencies are applied."}, "combine": {"default": "true if a base dir isn't in the config", "type": "boolean", "description": "If configured, the loader will attempt to use the combo\nservice for YUI resources and configured external resources.", "guessedname": "combine", "guessedtype": "property"}, "moduleInfo": {"description": "The library metadata"}, "filter": {"type": "string|{searchExp: string, replaceStr: string}", "description": "A filter to apply to result urls.  This filter will modify the default\npath for all modules.  The default path for the YUI library is the\nminified version of the files (e.g., event-min.js).  The filter property\ncan be a predefined filter or a custom filter.  The valid predefined \nfilters are:\n<dl>\n<dt>DEBUG</dt>\n<dd>Selects the debug versions of the library (e.g., event-debug.js).\nThis option will automatically include the Logger widget</dd>\n<dt>RAW</dt>\n<dd>Selects the non-minified version of the library (e.g., event.js).</dd>\n</dl>\nYou can also define a custom filter, which must be an object literal \ncontaining a search expression and a replace string:\n<pre>\nmyFilter: &#123; \n'searchExp': \"-min\\\\.js\", \n'replaceStr': \"-debug.js\"\n&#125;\n</pre>"}, "comboBase": {"default": "http://yui.yahooapis.com/combo?", "type": "string", "description": "Base path for the combo service", "guessedname": "comboBase", "guessedtype": "property"}, "skipped": {"description": "List of skipped modules during insert() because the module\nwas not defined", "guessedname": "skipped", "guessedtype": "property"}, "context": {"default": "{YUI} the YUI instance", "description": "The execution context for all callbacks", "guessedname": "context", "guessedtype": "property"}, "insertBefore": {"type": "string|HTMLElement", "description": "Node reference or id where new nodes should be inserted before"}, "jsAttributes": {"type": "object", "description": "An object literal containing attributes to add to script nodes"}, "base": {"default": "http://yui.yahooapis.com/[YUI VERSION]/build/", "type": "string", "description": "The base directory.", "guessedname": "base", "guessedtype": "property"}, "sorted": {"type": "string[]", "description": "All of the derived dependencies in sorted order, which\nwill be populated when either calculate() or insert()\nis called", "guessedname": "sorted", "guessedtype": "property"}, "data": {"description": "Data that is passed to all callbacks"}, "required": {"type": "{string: boolean}", "description": "The list of requested modules", "guessedname": "required", "guessedtype": "property"}, "ignore": {"type": "string[]", "description": "A list of modules that should not be loaded, even if\nthey turn up in the dependency tree"}, "patterns": {"type": "Object", "description": "If a module name is predefined when requested, it is checked againsts\nthe patterns provided in this property.  If there is a match, the\nmodule is added with the default configuration.\nAt the moment only supporting module prefixes, but anticipate supporting\nat least regular expressions."}, "dirty": {"default": "true", "type": "boolean", "description": "Flag to indicate the dependency tree needs to be recomputed\nif insert is called again.", "guessedname": "dirty", "guessedtype": "property"}, "timeout": {"type": "int", "description": "Timeout value in milliseconds.  If set, self value will be used by\nthe get utility.  the timeout event will fire if\na timeout occurs.", "guessedname": "timeout", "guessedtype": "property"}, "root": {"default": "[YUI VERSION]/build/", "type": "string", "description": "Root path to prepend to module path for the combo\nservice", "guessedname": "root", "guessedtype": "property"}}, "description": "Loader dynamically loads script and css files.  It includes the dependency\ninfo for the version of the library in use, and will automatically pull in\ndependencies for the modules requested.  It supports rollup files and will\nautomatically use these when appropriate in order to minimize the number of\nhttp connections required to load all of the dependencies.  It can load the\nfiles from the Yahoo! CDN, and it can utilize the combo service provided on\nthis network to reduce the number of http connections required to download \nYUI files.\nWhile the loader can be instantiated by the end user, it normally is not."}, "LiveSearch": {"name": "LiveSearch", "configs": {"index": {"default": "[]", "type": "Array", "description": "Index for the nodes content.", "guessedname": "index", "guessedtype": "property"}, "hide": {"default": "function(node) { return node.hide(); }", "type": "function", "description": "Function to be executed to hide the node when the data of that node\nnot matches with the filter.", "guessedname": "hide", "guessedtype": "property"}, "show": {"default": "function(node) { return node.show(); }", "type": "function", "description": "Function to be executed to show the node when the data of that node\nmatches with the filter.", "guessedname": "show", "guessedtype": "property"}, "delay": {"default": "250", "type": "Number", "description": "Number of milliseconds the filter will be applied to the node list\nafter the user stop typing.", "guessedname": "delay", "guessedtype": "property"}, "matchRegex": {"default": "(.)*", "type": "RegExp", "description": "The input <code>value</code> need to matches with this RegExp to be\naccept as a filter (i.e., in order to accept only digits you\ncould use /\\d+/g).", "guessedname": "matchRegex", "guessedtype": "property"}, "input": {"type": "Node | String", "description": "The <code>value</code> of this input node is used to filter the\nresults.", "guessedname": "input", "guessedtype": "property"}, "nodes": {"type": "Node | NodeList", "description": "Nodes to be indexed for the filtering.", "guessedname": "nodes", "guessedtype": "property"}, "data": {"default": "function(node) { return node.html(); }", "type": "function", "description": "<p>Function to extract the content from the node for the indexing. The\ndefault uses the <code>node.html()</code>. In case if you need to\nindex the id of the nodes, here goes one example:</p>\nExample indexing the id of the node instead of the HTML:\n<pre><code>function(node) {\nreturn node.attr('id');\n}\n</code></pre>", "guessedname": "data", "guessedtype": "property"}}, "constructors": [{"params": [{"type": "Object", "name": "config", "description": "  Object literal specifying widget configuration properties."}], "description": "<p><img src=\"assets/images/aui-live-search/main.png\"/></p>\nA base class for LiveSearch, providing:\n<ul>\n<li>Real-time filtering for DOM elements based on a input query</li>\n</ul>\nQuick Example:<br/>\n<pre><code>var instance = new A.LiveSearch({\ninput: '#input',\nnodes: '#search .entry'\n});\n</code></pre>\nCheck the list of <a href=\"LiveSearch.html#configattributes\">Configuration Attributes</a> available for\nLiveSearch."}], "namespace": "", "module": "aui-live-search", "events": {"matchRegexChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "matchRegexChange", "description": "Fires when the value for the configuration attribute 'matchRegex' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "hideChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "hideChange", "description": "Fires when the value for the configuration attribute 'hide' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "indexChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "indexChange", "description": "Fires when the value for the configuration attribute 'index' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "delayChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "delayChange", "description": "Fires when the value for the configuration attribute 'delay' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "inputChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "inputChange", "description": "Fires when the value for the configuration attribute 'input' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "showChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "showChange", "description": "Fires when the value for the configuration attribute 'show' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "dataChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "dataChange", "description": "Fires when the value for the configuration attribute 'data' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "nodesChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "nodesChange", "description": "Fires when the value for the configuration attribute 'nodes' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "guessedname": "LiveSearch", "methods": {"_setNodes": {"return": {"type": "Node | NodeList | String", "description": ""}, "description": "Setter for <a href=\"LiveSearch.html#config_nodes\">nodes</a>.", "param": "{Node | NodeList | String} v", "protected": "", "params": [{"type": "Node | NodeList | String", "name": "v", "description": ""}], "guessedname": "_setNodes", "guessedtype": "function"}, "search": {"description": "Fires the search event.", "param": "{EventFacade} event search event facade", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": " search event facade"}], "guessedname": "search", "guessedtype": "function"}, "_inputKeyUp": {"description": "Fires the keyup event on\n<a href=\"LiveSearch.html#config_input\">input</a>.", "param": "{EventFacade} event keyup event facade", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": " keyup event facade"}], "guessedname": "_inputKeyUp", "guessedtype": "function"}, "refreshIndex": {"description": "Refreshes the <a href=\"LiveSearch.html#config_index\">index</a>.", "guessedname": "refreshIndex", "guessedtype": "function"}, "initializer": {"protected": "", "description": "Construction logic executed during LiveSearch instantiation. Lifecycle.", "guessedname": "initializer", "guessedtype": "function"}, "filter": {"return": {"type": "Array", "description": "Matched results."}, "description": "Filter the <a href=\"LiveSearch.html#config_nodes\">nodes</a> based on\nthe input value.", "param": "{String} query Query to filter results", "params": [{"type": "String", "name": "query", "description": " Query to filter results"}], "guessedname": "filter", "guessedtype": "function"}, "bindUI": {"protected": "", "description": "Bind the events on the LiveSearch UI. Lifecycle.", "guessedname": "bindUI", "guessedtype": "function"}, "destroy": {"protected": "", "description": "Descructor lifecycle implementation for the LiveSearch class.\nPurges events attached to the node (and all child nodes).", "guessedname": "destroy", "guessedtype": "function"}, "_normalizeQuery": {"return": {"type": "String", "description": ""}, "description": "Normalize the input query. With <code>trim</code>,\n<code>matchRegex</code> and replace '*' to '' (on a regex empty match\nwith everything like *).", "param": "{String} query Query to filter results", "protected": "", "params": [{"type": "String", "name": "query", "description": " Query to filter results"}], "guessedname": "_normalizeQuery", "guessedtype": "function"}}, "extends": "Base", "superclass": "Base", "file": "aui-live-search.js", "guessedtype": "property", "shortname": "LiveSearch", "properties": {"query": {"protected": "", "type": "String", "description": "Stores the query value.", "guessedname": "query", "guessedtype": "property"}, "LiveSearch.NAME": {"type": "String", "static": "", "description": "Static property provides a string to identify the class.", "guessedname": "NAME", "guessedtype": "property"}, "LiveSearch.ATTRS": {"type": "Object", "static": "", "description": "Static property used to define the default attribute\nconfiguration for the LiveSearch.", "guessedname": "ATTRS", "guessedtype": "property"}, "timer": {"protected": "", "type": "Object", "description": "Handles the <a href=\"YUI.html#method_later\">later</a> Object.", "guessedname": "timer", "guessedtype": "property"}, "normalizedQuery": {"protected": "", "type": "String", "description": "Stores the normalized query value given from\n<a href=\"LiveSearch.html#config__normalizeQuery\">_normalizeQuery</a>.", "guessedname": "normalizedQuery", "guessedtype": "property"}}, "description": "<p><img src=\"assets/images/aui-live-search/main.png\"/></p>\nA base class for LiveSearch, providing:\n<ul>\n<li>Real-time filtering for DOM elements based on a input query</li>\n</ul>\nQuick Example:<br/>\n<pre><code>var instance = new A.LiveSearch({\ninput: '#input',\nnodes: '#search .entry'\n});\n</code></pre>\nCheck the list of <a href=\"LiveSearch.html#configattributes\">Configuration Attributes</a> available for\nLiveSearch."}, "Resize": {"name": "Resize", "configs": {"tickX": {"default": "false", "type": "Number | false", "description": "The number of x ticks to span the resize to.", "guessedname": "tickX", "guessedtype": "property"}, "tickY": {"default": "false", "type": "Number | false", "description": "The number of y ticks to span the resize to.", "guessedname": "tickY", "guessedtype": "property"}, "changeLeftHandles": {"default": "false", "type": "boolean", "description": "Whether the handle being dragged can change the left.", "guessedname": "changeLeftHandles", "guessedtype": "property"}, "maxWidth": {"default": "Infinity", "type": "Number", "description": "The maximum width of the element", "guessedname": "maxWidth", "guessedtype": "property"}, "wrap": {"default": "false", "type": "boolean", "description": "True to wrap an element with a div if needed (required for textareas\nand images, defaults to false) in favor of the handles config option.\nThe wrapper element type (default div) could be over-riden passing the\n<code>wrapper</code> attribute.", "guessedname": "wrap", "guessedtype": "property"}, "constrainBorderInfo": {"default": "{}", "type": "Object", "description": "Cache the border widths of the contrain node if constrain\noption is being used.", "guessedname": "constrainBorderInfo", "guessedtype": "property"}, "activeHandle": {"description": "Stores the active handle during the resize.", "default": "null", "private": "", "guessedname": "activeHandle", "guessedtype": "property", "type": "String"}, "wrapper": {"description": "Element to wrap the <code>wrapTypes</code>. This element will house\nthe handles elements.", "writeonce": "", "default": "div", "guessedname": "wrapper", "guessedtype": "property", "type": "String | Node"}, "minWidth": {"default": "15", "type": "Number", "description": "The minimum width of the element", "guessedname": "minWidth", "guessedtype": "property"}, "handles": {"default": "all", "type": "Array | String", "description": "The handles to use (any combination of): 't', 'b', 'r', 'l', 'bl',\n'br', 'tl', 'tr'. Can use a shortcut of All.", "guessedname": "handles", "guessedtype": "property"}, "preserveRatio": {"default": "false", "type": "boolean", "description": "Maintain the element's ratio when resizing.", "guessedname": "preserveRatio", "guessedtype": "property"}, "autoHide": {"default": "false", "type": "boolean", "description": "False to ensure that the resize handles are always visible, true to\ndisplay them only when the user mouses over the resizable borders.", "guessedname": "autoHide", "guessedtype": "property"}, "proxyEl": {"default": "Generated using an internal HTML markup", "type": "String | Node", "description": "The Resize proxy element.", "guessedname": "proxyEl", "guessedtype": "property"}, "changeWidthHandles": {"default": "false", "type": "boolean", "description": "Whether the handle being dragged can change the width.", "guessedname": "changeWidthHandles", "guessedtype": "property"}, "node": {"type": "Node", "description": "The selector or element to resize. Required.", "guessedname": "node", "guessedtype": "property"}, "minHeight": {"default": "15", "type": "Number", "description": "The minimum height of the element", "guessedname": "minHeight", "guessedtype": "property"}, "changeHeightHandles": {"default": "false", "type": "boolean", "description": "Whether the handle being dragged can change the height.", "guessedname": "changeHeightHandles", "guessedtype": "property"}, "resizing": {"default": "false", "type": "boolean", "description": "True when the element is being Resized.", "guessedname": "resizing", "guessedtype": "property"}, "activeHandleEl": {"description": "Stores the active handle element during the resize.", "default": "null", "private": "", "guessedname": "activeHandleEl", "guessedtype": "property", "type": "Node"}, "changeTopHandles": {"default": "false", "type": "boolean", "description": "Whether the handle being dragged can change the top.", "guessedname": "changeTopHandles", "guessedtype": "property"}, "wrapTypes": {"description": "Elements that requires a wrapper by default. Normally are elements\nwhich cannot have children elements.", "default": "/canvas|textarea|input|select|button|img/i", "readonly": "", "guessedname": "wrapTypes", "guessedtype": "property", "type": "Regex"}, "maxHeight": {"default": "Infinity", "type": "Number", "description": "The maximum height of the element", "guessedname": "maxHeight", "guessedtype": "property"}, "constrain": {"type": "{String/Object/Node}", "description": "Will attempt to constrain the resize node to the boundaries. Arguments:<br>\n'view': Contrain to Viewport<br>\n'#selector_string': Constrain to this node<br>\n'{Region Object}': An Object Literal containing a valid region (top, right, bottom, left) of page positions", "guessedname": "constrain", "guessedtype": "property"}, "proxy": {"default": "false", "type": "boolean", "description": "Resize a proxy element instead of the real element.", "guessedname": "proxy", "guessedtype": "property"}}, "constructors": [{"params": [{"type": "Object", "name": "config", "description": "  Object literal specifying widget configuration properties."}], "description": "<p><img src=\"assets/images/aui-resize/main.png\"/></p>\nA base class for Resize, providing:\n<ul>\n<li>Basic Lifecycle (initializer, renderUI, bindUI, syncUI, destructor)</li>\n<li>Applies drag handles to an element to make it resizable</li>\n<li>Here is the list of valid resize handles:\n<code>[ 't', 'tr', 'r', 'br', 'b', 'bl', 'l', 'tl' ]</code>. You can\nread this list as top, top-right, right, bottom-right, bottom,\nbottom-left, left, top-left.</li>\n<li>The drag handles are inserted into the element and positioned\nabsolute. Some elements, such as a textarea or image, don't support\nchildren. To overcome that, set wrap:true in your config and the\nelement willbe wrapped for you automatically.</li>\n</ul>\nQuick Example:\n<pre><code>var instance = new A.Resize({\nnode: '#resize1',\nproxy: true,\npreserveRatio: true,\nwrap: true,\nmaxHeight: 170,\nmaxWidth: 400,\nhandles: 't, tr, r, br, b, bl, l, tl'\n});\n</code></pre>\nCheck the list of <a href=\"Resize.html#configattributes\">Configuration Attributes</a> available for\nResize."}], "namespace": "", "module": "aui-resize", "events": {"proxyChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "proxyChange", "description": "Fires when the value for the configuration attribute 'proxy' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "wrapTypesChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "wrapTypesChange", "description": "Fires when the value for the configuration attribute 'wrapTypes' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "constrainChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "constrainChange", "description": "Fires when the value for the configuration attribute 'constrain' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "tickYChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "tickYChange", "description": "Fires when the value for the configuration attribute 'tickY' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "changeLeftHandlesChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "changeLeftHandlesChange", "description": "Fires when the value for the configuration attribute 'changeLeftHandles' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "handlesChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "handlesChange", "description": "Fires when the value for the configuration attribute 'handles' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "resize:start": {"description": "Handles the resize start event. Fired when a handle starts to be\ndragged.", "param": "{Event.Facade} event The resize start event.", "params": [{"type": "Event.Facade", "name": "event", "description": " The resize start event."}], "preventable": "_defResizeStartFn", "bubbles": "Resize", "type": "{Event.Custom}"}, "tickXChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "tickXChange", "description": "Fires when the value for the configuration attribute 'tickX' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "resize:mouseUp": {"description": "Handles the resize mouseUp event. Fired when a mouseUp event happens on a\nhandle.", "param": "{Event.Facade} event The resize mouseUp event.", "params": [{"type": "Event.Facade", "name": "event", "description": " The resize mouseUp event."}], "preventable": "_defMouseUpFn", "bubbles": "Resize", "type": "{Event.Custom}"}, "constrainBorderInfoChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "constrainBorderInfoChange", "description": "Fires when the value for the configuration attribute 'constrainBorderInfo' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "changeHeightHandlesChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "changeHeightHandlesChange", "description": "Fires when the value for the configuration attribute 'changeHeightHandles' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "autoHideChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "autoHideChange", "description": "Fires when the value for the configuration attribute 'autoHide' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "maxHeightChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "maxHeightChange", "description": "Fires when the value for the configuration attribute 'maxHeight' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "resize:resize": {"description": "Handles the resize event. Fired on each pixel when the handle is\nbeing dragged.", "param": "{Event.Facade} event The resize event.", "params": [{"type": "Event.Facade", "name": "event", "description": " The resize event."}], "preventable": "_defResizeFn", "bubbles": "Resize", "type": "{Event.Custom}"}, "minWidthChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "minWidthChange", "description": "Fires when the value for the configuration attribute 'minWidth' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "resize:end": {"description": "Handles the resize end event. Fired when a handle stop to be\ndragged.", "param": "{Event.Facade} event The resize end event.", "params": [{"type": "Event.Facade", "name": "event", "description": " The resize end event."}], "preventable": "_defResizeEndFn", "bubbles": "Resize", "type": "{Event.Custom}"}, "proxyElChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "proxyElChange", "description": "Fires when the value for the configuration attribute 'proxyEl' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "nodeChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "nodeChange", "description": "Fires when the value for the configuration attribute 'node' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "activeHandleChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "activeHandleChange", "description": "Fires when the value for the configuration attribute 'activeHandle' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "minHeightChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "minHeightChange", "description": "Fires when the value for the configuration attribute 'minHeight' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "preserveRatioChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "preserveRatioChange", "description": "Fires when the value for the configuration attribute 'preserveRatio' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "resizingChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "resizingChange", "description": "Fires when the value for the configuration attribute 'resizing' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "wrapperChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "wrapperChange", "description": "Fires when the value for the configuration attribute 'wrapper' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "activeHandleElChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "activeHandleElChange", "description": "Fires when the value for the configuration attribute 'activeHandleEl' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "changeTopHandlesChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "changeTopHandlesChange", "description": "Fires when the value for the configuration attribute 'changeTopHandles' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "wrapChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "wrapChange", "description": "Fires when the value for the configuration attribute 'wrap' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "maxWidthChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "maxWidthChange", "description": "Fires when the value for the configuration attribute 'maxWidth' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "changeWidthHandlesChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "changeWidthHandlesChange", "description": "Fires when the value for the configuration attribute 'changeWidthHandles' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "guessedname": "Resize", "methods": {"_updateConstrainBorderInfo": {"private": "", "description": "Update <code>instance.constrainBorderInfo</code> values (bottom,\nleft, top, right).", "guessedname": "_updateConstrainBorderInfo", "guessedtype": "function"}, "_checkRatio": {"protected": "", "description": "Update the current values on <a href=\"Resize.html#property_info\">info</a>\ncalculating the correct ratio for the other values.", "guessedname": "_checkRatio", "guessedtype": "function"}, "_checkRegion": {"protected": "", "return": {"type": "boolean", "description": ""}, "description": "Check whether the resizable node is inside the constrain region.", "guessedname": "_checkRegion", "guessedtype": "function"}, "_setupHandleDD": {"description": "Initialize the DragDrop on the handle.", "param": "{String} handle Handle name.", "params": [{"type": "String", "name": "handle", "description": " Handle name."}, {"type": "Node", "name": "node", "description": " Node reference which the DragDrop will be created."}], "private": "", "guessedname": "_setupHandleDD", "guessedtype": "function"}, "initializer": {"protected": "", "description": "Construction logic executed during Resize instantiation. Lifecycle.", "guessedname": "initializer", "guessedtype": "function"}, "_syncProxyUI": {"protected": "", "description": "Sync the proxy UI with internal values from\n<a href=\"Resize.html#property_info\">info</a>.", "guessedname": "_syncProxyUI", "guessedtype": "function"}, "renderer": {"protected": "", "description": "Creates DOM (or manipulates DOM for progressive enhancement)\nThis method is invoked by initializer(). It's chained automatically for\nsubclasses if required.", "guessedname": "renderer", "guessedtype": "function"}, "_checkConstrain": {"description": "Helper method to update the current values on\n<a href=\"Resize.html#property_info\">info</a> to respect the\nconstrain node.", "param": "{String} axis 'top' or 'left'", "protected": "", "params": [{"type": "String", "name": "axis", "description": " 'top' or 'left'"}, {"type": "String", "name": "axisConstrain", "description": " 'bottom' or 'right'"}, {"type": "String", "name": "offset", "description": " 'offsetHeight' or 'offsetWidth'"}], "guessedname": "_checkConstrain", "guessedtype": "function"}, "_handleResizeEvent": {"description": "Fires the resize:resize event.", "param": "{EventFacade} event resize:resize event facade", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": " resize:resize event facade"}], "guessedname": "_handleResizeEvent", "guessedtype": "function"}, "_syncUI": {"protected": "", "description": "Sync the Resize UI with internal values from\n<a href=\"Resize.html#property_info\">info</a>.", "guessedname": "_syncUI", "guessedtype": "function"}, "_defResizeFn": {"description": "Default resize:resize handler", "param": "{EventFacade} event The Event object", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": " The Event object"}], "guessedname": "_defResizeFn", "guessedtype": "function"}, "_getInfo": {"description": "<p>Generates metadata to the <a href=\"Resize.html#property_info\">info</a>\nand <a href=\"Resize.html#property_originalInfo\">originalInfo</a></p>\n<pre><code>bottom, actXY, left, top, offsetHeight, offsetWidth, right</code></pre>", "param": "{Node} node", "params": [{"type": "Node", "name": "node", "description": ""}, {"type": "EventFacade", "name": "event", "description": ""}], "private": "", "guessedname": "_getInfo", "guessedtype": "function"}, "_recalculateXY": {"private": "", "description": "Update left and top information on\n<a href=\"Resize.html#property_info\">info</a> based on the new top and left.", "guessedname": "_recalculateXY", "guessedtype": "function"}, "_updateChangeHandleInfo": {"private": "", "description": "Update <code>instance.changeHeightHandles,\ninstance.changeLeftHandles, instance.changeTopHandles,\ninstance.changeWidthHandles</code> information.", "guessedname": "_updateChangeHandleInfo", "guessedtype": "function"}, "_onHandleMouseOut": {"description": "Mouseout event handler for the handles.", "param": "{EventFacade} event", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "guessedname": "_onHandleMouseOut", "guessedtype": "function"}, "destructor": {"protected": "", "description": "Descructor lifecycle implementation for the Resize class. Purges events attached\nto the node (and all child nodes) and removes the Resize handles.", "guessedname": "destructor", "guessedtype": "function"}, "_buildHandle": {"description": "Creates the handle element based on the handle name and initialize the\nDragDrop on it.", "param": "{String} handle Handle name ('t', 'tr', 'b', ...).", "protected": "", "params": [{"type": "String", "name": "handle", "description": " Handle name ('t', 'tr', 'b', ...)."}], "guessedname": "_buildHandle", "guessedtype": "function"}, "_renderProxy": {"protected": "", "description": "Render the <a href=\"Resize.html#config_proxyEl\">proxyEl</a> element and\nmake it sibling of the <a href=\"Resize.html#config_node\">node</a>.", "guessedname": "_renderProxy", "guessedtype": "function"}, "_getConstrainRegion": {"protected": "", "return": {"type": "Object Region", "description": ""}, "description": "Get the constrain region based on the <code>constrain</code>\nattribute.", "guessedname": "_getConstrainRegion", "guessedtype": "function"}, "bindUI": {"protected": "", "description": "Bind the events on the Resize UI. Lifecycle.", "guessedname": "bindUI", "guessedtype": "function"}, "_checkHeight": {"protected": "", "description": "Update the current values on <a href=\"Resize.html#property_info\">info</a>\nto respect the maxHeight and minHeight.", "guessedname": "_checkHeight", "guessedtype": "function"}, "_createEvents": {"private": "", "description": "Create the custom events used on the Resize.", "guessedname": "_createEvents", "guessedtype": "function"}, "_resize": {"protected": "", "description": "Basic resize calculations.", "guessedname": "_resize", "guessedtype": "function"}, "_updateInfo": {"private": "", "description": "Update <a href=\"Resize.html#property_info\">info</a> values (bottom, actXY, left, top, offsetHeight, offsetWidth, right).", "guessedname": "_updateInfo", "guessedtype": "function"}, "_onHandleMouseOver": {"description": "Mouseover event handler for the handles.", "param": "{EventFacade} event", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "guessedname": "_onHandleMouseOver", "guessedtype": "function"}, "_handleMouseUpEvent": {"description": "Fires the resize:mouseUp event.", "param": "{EventFacade} event resize:mouseUp event facade", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": " resize:mouseUp event facade"}], "guessedname": "_handleMouseUpEvent", "guessedtype": "function"}, "_defResizeStartFn": {"description": "Default resize:start handler", "param": "{EventFacade} event The Event object", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": " The Event object"}], "guessedname": "_defResizeStartFn", "guessedtype": "function"}, "_renderHandles": {"protected": "", "description": "Responsible for loop each handle element and append to the wrapper.", "guessedname": "_renderHandles", "guessedtype": "function"}, "_defMouseUpFn": {"description": "Default resize:mouseUp handler", "param": "{EventFacade} event The Event object", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": " The Event object"}], "guessedname": "_defMouseUpFn", "guessedtype": "function"}, "_onWrapperMouseEnter": {"description": "Mouseenter event handler for the <a href=\"Resize.html#config_wrapper\">wrapper</a>.", "param": "{EventFacade} event", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "guessedname": "_onWrapperMouseEnter", "guessedtype": "function"}, "_setHideHandlesUI": {"description": "Set the visibility of the handles.", "param": "{boolean} val True to hide the handles, false to show.", "protected": "", "params": [{"type": "boolean", "name": "val", "description": " True to hide the handles, false to show."}], "guessedname": "_setHideHandlesUI", "guessedtype": "function"}, "eachHandle": {"param": "{function} fn Callback function to be executed for each handle.", "params": [{"type": "function", "name": "fn", "description": " Callback function to be executed for each handle."}], "description": "<p>Loop through each handle which is being used and executes a callback.</p>\n<p>Example:</p>\n<pre><code>instance.eachHandle(\nfunction(handleName, index) { ... }\n);</code></pre>", "guessedname": "eachHandle", "guessedtype": "function"}, "_bindHandle": {"private": "", "description": "Bind the events related to the handles (_onHandleMouseOver, _onHandleMouseOut).", "guessedname": "_bindHandle", "guessedtype": "function"}, "_handleResizeEndEvent": {"description": "Fires the resize:end event.", "param": "{EventFacade} event resize:end event facade", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": " resize:end event facade"}], "guessedname": "_handleResizeEndEvent", "guessedtype": "function"}, "_checkWidth": {"protected": "", "description": "Update the current values on <a href=\"Resize.html#property_info\">info</a>\nto respect the maxWidth and minWidth.", "guessedname": "_checkWidth", "guessedtype": "function"}, "_setOffset": {"description": "Set offsetWidth and offsetHeight of the passed node.", "param": "{Node} node Node", "protected": "", "params": [{"type": "Node", "name": "node", "description": " Node"}, {"type": "number", "name": "offsetWidth", "description": ""}, {"type": "number", "name": "offsetHeight", "description": ""}], "guessedname": "_setOffset", "guessedtype": "function"}, "_onWrapperMouseLeave": {"description": "Mouseleave event handler for the <a href=\"Resize.html#config_wrapper\">wrapper</a>.", "param": "{EventFacade} event", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "guessedname": "_onWrapperMouseLeave", "guessedtype": "function"}, "_defResizeEndFn": {"description": "Default resize:end handler", "param": "{EventFacade} event The Event object", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": " The Event object"}], "guessedname": "_defResizeEndFn", "guessedtype": "function"}, "syncUI": {"protected": "", "description": "Sync the Resize UI.", "guessedname": "syncUI", "guessedtype": "function"}, "_handleResizeStartEvent": {"description": "Fires the resize:start event.", "param": "{EventFacade} event resize:start event facade", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": " resize:start event facade"}], "guessedname": "_handleResizeStartEvent", "guessedtype": "function"}, "_afterResize": {"description": "Fires after resize:resize event.", "param": "{EventFacade} event resize:resize custom event", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": " resize:resize custom event"}], "guessedname": "_afterResize", "guessedtype": "function"}, "_setActiveHandlesUI": {"description": "Set the active state of the handles.", "param": "{boolean} val True to activate the handles, false to deactivate.", "protected": "", "params": [{"type": "boolean", "name": "val", "description": " True to activate the handles, false to deactivate."}], "guessedname": "_setActiveHandlesUI", "guessedtype": "function"}, "_copyStyles": {"description": "Copy relevant styles of the <a href=\"Resize.html#config_node\">node</a>\nto the <a href=\"Resize.html#config_wrapper\">wrapper</a>.", "param": "{Node} node Node from.", "protected": "", "params": [{"type": "Node", "name": "node", "description": " Node from."}, {"type": "Node", "name": "wrapper", "description": " Node to."}], "guessedname": "_copyStyles", "guessedtype": "function"}, "renderUI": {"protected": "", "description": "Create the DOM structure for the Resize. Lifecycle.", "guessedname": "renderUI", "guessedtype": "function"}, "_bindDD": {"private": "", "description": "Bind the handles DragDrop events to the Resize instance.", "guessedname": "_bindDD", "guessedtype": "function"}}, "extends": "Base", "superclass": "Base", "file": "aui-resize.js", "guessedtype": "property", "shortname": "Resize", "properties": {"Resize.NAME": {"type": "String", "static": "", "description": "Static property provides a string to identify the class.", "guessedname": "NAME", "guessedtype": "property"}, "info": {"protected": "", "type": "Object", "description": "Stores the current values for the height, width, top and left. You are\nable to manipulate these values on resize in order to change the resize\nbehavior.", "guessedname": "info", "guessedtype": "property"}, "originalInfo": {"protected": "", "type": "Object", "description": "Stores the original values for the height, width, top and left, stored\non resize start.", "guessedname": "originalInfo", "guessedtype": "property"}, "Resize.ATTRS": {"type": "Object", "static": "", "description": "Static property used to define the default attribute\nconfiguration for the Resize.", "guessedname": "ATTRS", "guessedtype": "property"}}, "description": "<p><img src=\"assets/images/aui-resize/main.png\"/></p>\nA base class for Resize, providing:\n<ul>\n<li>Basic Lifecycle (initializer, renderUI, bindUI, syncUI, destructor)</li>\n<li>Applies drag handles to an element to make it resizable</li>\n<li>Here is the list of valid resize handles:\n<code>[ 't', 'tr', 'r', 'br', 'b', 'bl', 'l', 'tl' ]</code>. You can\nread this list as top, top-right, right, bottom-right, bottom,\nbottom-left, left, top-left.</li>\n<li>The drag handles are inserted into the element and positioned\nabsolute. Some elements, such as a textarea or image, don't support\nchildren. To overcome that, set wrap:true in your config and the\nelement willbe wrapped for you automatically.</li>\n</ul>\nQuick Example:\n<pre><code>var instance = new A.Resize({\nnode: '#resize1',\nproxy: true,\npreserveRatio: true,\nwrap: true,\nmaxHeight: 170,\nmaxWidth: 400,\nhandles: 't, tr, r, br, b, bl, l, tl'\n});\n</code></pre>\nCheck the list of <a href=\"Resize.html#configattributes\">Configuration Attributes</a> available for\nResize."}, "Tab": {"name": "Tab", "constructors": [{"params": [{"type": "Object", "name": "config", "description": "  Object literal specifying tabview configuration properties."}], "description": "Provides Tab instances for use with TabView"}], "namespace": "", "module": "tabview", "events": {"contentChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "contentChange", "description": "Fires when the value for the configuration attribute 'content' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "labelChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "labelChange", "description": "Fires when the value for the configuration attribute 'label' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "triggerEventChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "triggerEventChange", "description": "Fires when the value for the configuration attribute 'triggerEvent' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "panelNodeChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "panelNodeChange", "description": "Fires when the value for the configuration attribute 'panelNode' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "guessedname": "Tab", "uses": ["WidgetChild"], "superclass": "Widget", "file": "tabview.js", "guessedtype": "property", "extends": "Widget", "shortname": "Tab", "configs": {"triggerEvent": {"default": "\"click\"", "type": "String", "guessedname": "triggerEvent", "guessedtype": "property"}, "content": {"type": "String", "guessedname": "content", "guessedtype": "property"}, "panelNode": {"type": "Y.Node", "guessedname": "panelNode", "guessedtype": "property"}, "label": {"type": "String", "guessedname": "label", "guessedtype": "property"}}, "description": "Provides Tab instances for use with TabView"}, "Attribute": {"name": "Attribute", "namespace": "", "module": "attribute", "methods": {"_setAttrVal": {"return": {"type": "booolean", "description": "true if the new attribute value was stored, false if not."}, "description": "Updates the stored value of the attribute in the privately held State object,\nif validation and setter passes.", "private": "", "params": [{"type": "String", "name": "attrName", "description": " The attribute name."}, {"type": "String", "name": "subAttrName", "description": " The sub-attribute name, if setting a sub-attribute property (\"x.y.z\")."}, {"type": "Any", "name": "prevVal", "description": " The currently stored value of the attribute."}, {"type": "Any", "name": "newVal", "description": " The value which is going to be stored."}], "param": "{String} attrName The attribute name.", "guessedname": "_setAttrVal", "guessedtype": "function"}, "set": {"return": {"type": "Object", "description": "A reference to the host object."}, "description": "Sets the value of an attribute.", "chainable": "", "param": "{String} name The name of the attribute. If the \ncurrent value of the attribute is an Object, dot notation can be used\nto set the value of a property within the object (e.g. <code>set(\"x.y.z\", 5)</code>).", "params": [{"type": "String", "name": "name", "description": " The name of the attribute. If the \ncurrent value of the attribute is an Object, dot notation can be used\nto set the value of a property within the object (e.g. <code>set(\"x.y.z\", 5)</code>)."}, {"type": "Any", "name": "value", "description": " The value to set the attribute to."}, {"type": "Object", "name": "opts", "description": " (Optional) Optional event data to be mixed into\nthe event facade passed to subscribers of the attribute's change event. This \ncan be used as a flexible way to identify the source of a call to set, allowing \nthe developer to distinguish between set called internally by the host, vs. \nset called externally by the application developer."}], "guessedname": "set", "guessedtype": "function"}, "getAttrs": {"return": {"type": "Object", "description": "An object with attribute name/value pairs."}, "description": "Gets multiple attribute values.", "param": "{Array | boolean} attrs Optional. An array of attribute names. If omitted, all attribute values are\nreturned. If set to true, all attributes modified from their initial values are returned.", "params": [{"type": "Array | boolean", "name": "attrs", "description": " Optional. An array of attribute names. If omitted, all attribute values are\nreturned. If set to true, all attributes modified from their initial values are returned."}], "guessedname": "getAttrs", "guessedtype": "function"}, "_fireAttrChange": {"description": "Utility method to help setup the event payload and fire the attribute change event.", "param": "{String} attrName The name of the attribute", "params": [{"type": "String", "name": "attrName", "description": " The name of the attribute"}, {"type": "String", "name": "subAttrName", "description": " The full path of the property being changed, \nif this is a sub-attribute value being change. Otherwise null."}, {"type": "Any", "name": "currVal", "description": " The current value of the attribute"}, {"type": "Any", "name": "newVal", "description": " The new value of the attribute"}, {"type": "Object", "name": "opts", "description": " Any additional event data to mix into the attribute change event's event facade."}], "private": "", "guessedname": "_fireAttrChange", "guessedtype": "function"}, "modifyAttr": {"param": "{String} name The name of the attribute whose configuration is to be updated.", "params": [{"type": "String", "name": "name", "description": " The name of the attribute whose configuration is to be updated."}, {"type": "Object", "name": "config", "description": " An object with configuration property/value pairs, specifying the configuration properties to modify."}], "description": "Updates the configuration of an attribute which has already been added.\n<p>\nThe properties which can be modified through this interface are limited\nto the following subset of attributes, which can be safely modified\nafter a value has already been set on the attribute: readOnly, writeOnce, \nbroadcast and getter.\n</p>", "guessedname": "modifyAttr", "guessedtype": "function"}, "_protectAttrs": {"return": {"type": "Object", "description": "A protected version of the attrs argument."}, "description": "Utility method to protect an attribute configuration\nhash, by merging the entire object and the individual \nattr config objects.", "param": "{Object} attrs A hash of attribute to configuration object pairs.", "protected": "", "params": [{"type": "Object", "name": "attrs", "description": " A hash of attribute to configuration object pairs."}], "guessedname": "_protectAttrs", "guessedtype": "function"}, "_setAttr": {"return": {"type": "Object", "description": "A reference to the host object."}, "description": "Provides the common implementation for the public set and protected _set methods.\nSee <a href=\"#method_set\">set</a> for argument details.", "chainable": "", "param": "{String} name The name of the attribute.", "protected": "", "params": [{"type": "String", "name": "name", "description": " The name of the attribute."}, {"type": "Any", "name": "value", "description": " The value to set the attribute to."}, {"type": "Object", "name": "opts", "description": " (Optional) Optional event data to be mixed into\nthe event facade passed to subscribers of the attribute's change event."}, {"type": "boolean", "name": "force", "description": " If true, allows the caller to set values for \nreadOnly or writeOnce attributes which have already been set."}], "guessedname": "_setAttr", "guessedtype": "function"}, "_normAttrVals": {"return": {"type": "Object", "description": ""}, "description": "Utility method to normalize attribute values. The base implementation \nsimply merges the hash to protect the original.", "private": "", "params": [{"type": "Object", "name": "valueHash", "description": " An object with attribute name/value pairs"}], "param": "{Object} valueHash An object with attribute name/value pairs", "guessedname": "_normAttrVals", "guessedtype": "function"}, "_defAttrChangeFn": {"description": "Default function for attribute change events.", "param": "{EventFacade} e The event object for attribute change events.", "params": [{"type": "EventFacade", "name": "e", "description": " The event object for attribute change events."}], "private": "", "guessedname": "_defAttrChangeFn", "guessedtype": "function"}, "_addLazyAttr": {"description": "Finishes initializing an attribute which has been lazily added.", "param": "{Object} name The name of the attribute", "params": [{"type": "Object", "name": "name", "description": " The name of the attribute"}], "private": "", "guessedname": "_addLazyAttr", "guessedtype": "function"}, "_getAttrInitVal": {"return": {"type": "Any", "description": "The initial value of the attribute."}, "description": "Returns the initial value of the given attribute from\neither the default configuration provided, or the \nover-ridden value if it exists in the set of initValues \nprovided and the attribute is not read-only.", "private": "", "params": [{"type": "String", "name": "attr", "description": " The name of the attribute"}, {"type": "Object", "name": "cfg", "description": " The attribute configuration object"}, {"type": "Object", "name": "initValues", "description": " The object with simple and complex attribute name/value pairs returned from _normAttrVals"}], "param": "{String} attr The name of the attribute", "guessedname": "_getAttrInitVal", "guessedtype": "function"}, "_getAttr": {"return": {"type": "Any", "description": "The value of the attribute."}, "description": "Provides the common implementation for the public get method,\nallowing Attribute hosts to over-ride either method.\nSee <a href=\"#method_get\">get</a> for argument details.", "chainable": "", "param": "{String} name The name of the attribute.", "protected": "", "params": [{"type": "String", "name": "name", "description": " The name of the attribute."}], "guessedname": "_getAttr", "guessedtype": "function"}, "_getAttrs": {"return": {"type": "Object", "description": "An object with attribute name/value pairs."}, "description": "Implementation behind the public getAttrs method, to get multiple attribute values.", "param": "{Array | boolean} attrs Optional. An array of attribute names. If omitted, all attribute values are\nreturned. If set to true, all attributes modified from their initial values are returned.", "protected": "", "params": [{"type": "Array | boolean", "name": "attrs", "description": " Optional. An array of attribute names. If omitted, all attribute values are\nreturned. If set to true, all attributes modified from their initial values are returned."}], "guessedname": "_getAttrs", "guessedtype": "function"}, "removeAttr": {"param": "{String} name The name of the attribute to be removed.", "params": [{"type": "String", "name": "name", "description": " The name of the attribute to be removed."}], "description": "Removes an attribute from the host object", "guessedname": "removeAttr", "guessedtype": "function"}, "get": {"return": {"type": "Any", "description": "The value of the attribute"}, "description": "Returns the current value of the attribute. If the attribute\nhas been configured with a 'getter' function, this method will delegate\nto the 'getter' to obtain the value of the attribute.", "param": "{String} name The name of the attribute. If the value of the attribute is an Object, \ndot notation can be used to obtain the value of a property of the object (e.g. <code>get(\"x.y.z\")</code>)", "params": [{"type": "String", "name": "name", "description": " The name of the attribute. If the value of the attribute is an Object, \ndot notation can be used to obtain the value of a property of the object (e.g. <code>get(\"x.y.z\")</code>)"}], "guessedname": "get", "guessedtype": "function"}, "_setStateVal": {"description": "Sets the stored value for the attribute, in either the \ninternal state object, or the state proxy if it exits", "param": "{String} name The name of the attribute", "params": [{"type": "String", "name": "name", "description": " The name of the attribute"}, {"type": "Any", "name": "value", "description": " The value of the attribute"}], "private": "", "guessedname": "_setStateVal", "guessedtype": "function"}, "addAttrs": {"return": {"type": "Object", "description": "A reference to the host object."}, "description": "Configures a group of attributes, and sets initial values.\n<p>\n<strong>NOTE:</strong> This method does not isolate the configuration object by merging/cloning. \nThe caller is responsible for merging/cloning the configuration object if required.\n</p>", "chainable": "", "param": "{Object} cfgs An object with attribute name/configuration pairs.", "params": [{"type": "Object", "name": "cfgs", "description": " An object with attribute name/configuration pairs."}, {"type": "Object", "name": "values", "description": " An object with attribute name/value pairs, defining the initial values to apply.\nValues defined in the cfgs argument will be over-written by values in this argument unless defined as read only."}, {"type": "boolean", "name": "lazy", "description": " Whether or not to delay the intialization of these attributes until the first call to get/set.\nIndividual attributes can over-ride this behavior by defining a lazyAdd configuration property in their configuration.\nSee <a href=\"#method_addAttr\">addAttr</a>."}], "guessedname": "addAttrs", "guessedtype": "function"}, "_getStateVal": {"return": {"type": "Any", "description": "The stored value of the attribute"}, "description": "Gets the stored value for the attribute, from either the \ninternal state object, or the state proxy if it exits", "private": "", "params": [{"type": "String", "name": "name", "description": " The name of the attribute"}], "param": "{String} name The name of the attribute", "guessedname": "_getStateVal", "guessedtype": "function"}, "_setAttrs": {"return": {"type": "Object", "description": "A reference to the host object."}, "description": "Implementation behind the public setAttrs method, to set multiple attribute values.", "chainable": "", "param": "{Object} attrs  An object with attributes name/value pairs.", "protected": "", "params": [{"type": "Object", "name": "attrs", "description": "  An object with attributes name/value pairs."}], "guessedname": "_setAttrs", "guessedtype": "function"}, "reset": {"return": {"type": "Object", "description": "A reference to the host object."}, "description": "Resets the attribute (or all attributes) to its initial value, as long as\nthe attribute is not readOnly, or writeOnce.", "chainable": "", "param": "{String} name Optional. The name of the attribute to reset.  If omitted, all attributes are reset.", "params": [{"type": "String", "name": "name", "description": " Optional. The name of the attribute to reset.  If omitted, all attributes are reset."}], "guessedname": "reset", "guessedtype": "function"}, "addAttr": {"return": {"type": "Object", "description": "A reference to the host object."}, "description": "<p>\nAdds an attribute with the provided configuration to the host object.\n</p>\n<p>\nThe config argument object supports the following properties:\n</p>\n<dl>\n<dt>value &#60;Any&#62;</dt>\n<dd>The initial value to set on the attribute</dd>\n<dt>valueFn &#60;Function | String&#62;</dt>\n<dd>\n<p>A function, which will return the initial value to set on the attribute. This is useful\nfor cases where the attribute configuration is defined statically, but needs to \nreference the host instance (\"this\") to obtain an initial value.\nIf defined, valueFn has precedence over the value property.</p>\n<p>valueFn can also be set to a string, representing the name of the instance method to be used to retrieve the value.</p>\n</dd>\n<dt>readOnly &#60;boolean&#62;</dt>\n<dd>Whether or not the attribute is read only. Attributes having readOnly set to true\ncannot be modified by invoking the set method.</dd>\n<dt>writeOnce &#60;boolean&#62;</dt>\n<dd>Whether or not the attribute is \"write once\". Attributes having writeOnce set to true, \ncan only have their values set once, be it through the default configuration, \nconstructor configuration arguments, or by invoking set.</dd>\n<dt>setter &#60;Function | String&#62;</dt>\n<dd>\n<p>The setter function used to massage or normalize the value passed to the set method for the attribute. \nThe value returned by the setter will be the final stored value. Returning\n<a href=\"#property_Attribute.INVALID_VALUE\">Attribute.INVALID_VALUE</a>, from the setter will prevent\nthe value from being stored.\n</p>\n<p>setter can also be set to a string, representing the name of the instance method to be used as the setter function.</p>\n</dd>\n<dt>getter &#60;Function | String&#62;</dt>\n<dd>\n<p>\nThe getter function used to massage or normalize the value returned by the get method for the attribute.\nThe value returned by the getter function is the value which will be returned to the user when they \ninvoke get.\n</p>\n<p>getter can also be set to a string, representing the name of the instance method to be used as the getter function.</p>\n</dd>\n<dt>validator &#60;Function | String&#62;</dt>\n<dd>\n<p>\nThe validator function invoked prior to setting the stored value. Returning\nfalse from the validator function will prevent the value from being stored.\n</p>\n<p>validator can also be set to a string, representing the name of the instance method to be used as the validator function.</p>\n</dd>\n<dt>broadcast &#60;int&#62;</dt>\n<dd>If and how attribute change events for this attribute should be broadcast. See CustomEvent's <a href=\"CustomEvent.html#property_broadcast\">broadcast</a> property for \nvalid values. By default attribute change events are not broadcast.</dd>\n<dt>lazyAdd &#60;boolean&#62;</dt>\n<dd>Whether or not to delay initialization of the attribute until the first call to get/set it. \nThis flag can be used to over-ride lazy initialization on a per attribute basis, when adding multiple attributes through \nthe <a href=\"#method_addAttrs\">addAttrs</a> method.</dd>\n</dl>\n<p>The setter, getter and validator are invoked with the value and name passed in as the first and second arguments, and with\nthe context (\"this\") set to the host object.</p>\n<p>Configuration properties outside of the list mentioned above are considered private properties used internally by attribute, and are not intended for public use.</p>", "chainable": "", "param": "{String} name The name of the attribute.", "params": [{"type": "String", "name": "name", "description": " The name of the attribute."}, {"type": "Object", "name": "config", "description": " An object with attribute configuration property/value pairs, specifying the configuration for the attribute.\n<p>\n<strong>NOTE:</strong> The configuration object is modified when adding an attribute, so if you need \nto protect the original values, you will need to merge the object.\n</p>"}, {"type": "boolean", "name": "lazy", "description": " (optional) Whether or not to add this attribute lazily (on the first call to get/set)."}], "guessedname": "addAttr", "guessedtype": "function"}, "attrAdded": {"return": {"type": "boolean", "description": "true if an attribute with the given name has been added, false if it hasn't. This method will return true for lazily added attributes."}, "description": "Checks if the given attribute has been added to the host", "param": "{String} name The name of the attribute to check.", "params": [{"type": "String", "name": "name", "description": " The name of the attribute to check."}], "guessedname": "attrAdded", "guessedtype": "function"}, "_isLazyAttr": {"return": {"type": "boolean", "description": "true if it's a lazily added attribute, false otherwise."}, "description": "Checks whether or not the attribute is one which has been\nadded lazily and still requires initialization.", "private": "", "params": [{"type": "String", "name": "name", "description": " The name of the attribute"}], "param": "{String} name The name of the attribute", "guessedname": "_isLazyAttr", "guessedtype": "function"}, "_addAttrs": {"description": "Implementation behind the public addAttrs method. \nThis method is invoked directly by get if it encounters a scenario \nin which an attribute's valueFn attempts to obtain the \nvalue an attribute in the same group of attributes, which has not yet \nbeen added (on demand initialization).", "param": "{Object} cfgs An object with attribute name/configuration pairs.", "params": [{"type": "Object", "name": "cfgs", "description": " An object with attribute name/configuration pairs."}, {"type": "Object", "name": "values", "description": " An object with attribute name/value pairs, defining the initial values to apply.\nValues defined in the cfgs argument will be over-written by values in this argument unless defined as read only."}, {"type": "boolean", "name": "lazy", "description": " Whether or not to delay the intialization of these attributes until the first call to get/set.\nIndividual attributes can over-ride this behavior by defining a lazyAdd configuration property in their configuration.\nSee <a href=\"#method_addAttr\">addAttr</a>."}], "private": "", "guessedname": "_addAttrs", "guessedtype": "function"}, "setAttrs": {"return": {"type": "Object", "description": "A reference to the host object."}, "description": "Sets multiple attribute values.", "chainable": "", "param": "{Object} attrs  An object with attributes name/value pairs.", "params": [{"type": "Object", "name": "attrs", "description": "  An object with attributes name/value pairs."}], "guessedname": "setAttrs", "guessedtype": "function"}, "_set": {"return": {"type": "Object", "description": "A reference to the host object."}, "description": "Allows setting of readOnly/writeOnce attributes. See <a href=\"#method_set\">set</a> for argument details.", "chainable": "", "param": "{String} name The name of the attribute.", "protected": "", "params": [{"type": "String", "name": "name", "description": " The name of the attribute."}, {"type": "Any", "name": "val", "description": " The value to set the attribute to."}, {"type": "Object", "name": "opts", "description": " (Optional) Optional event data to be mixed into\nthe event facade passed to subscribers of the attribute's change event."}], "guessedname": "_set", "guessedtype": "function"}}, "uses": ["EventTarget"], "file": "attribute.js", "shortname": "Attribute", "properties": {"Attribute._ATTR_CFG": {"description": "The list of properties which can be configured for \neach attribute (e.g. setter, getter, writeOnce etc.).\nThis property is used internally as a whitelist for faster\nY.mix operations.", "protected": "", "static": "", "guessedname": "_ATTR_CFG", "guessedtype": "property", "type": "Array"}, "Attribute.INVALID_VALUE": {"description": "<p>The value to return from an attribute setter in order to prevent the set from going through.</p>\n<p>You can return this value from your setter if you wish to combine validator and setter \nfunctionality into a single setter function, which either returns the massaged value to be stored or \nAttribute.INVALID_VALUE to prevent invalid values from being stored.</p>", "static": "", "guessedname": "INVALID_VALUE", "guessedtype": "property", "type": "Object", "final": ""}}, "description": "<p>\nAttribute provides configurable attribute support along with attribute change events. It is designed to be \naugmented on to a host class, and provides the host with the ability to configure attributes to store and retrieve state, \nalong with attribute change events.\n</p>\n<p>For example, attributes added to the host can be configured:</p>\n<ul>\n<li>As read only.</li>\n<li>As write once.</li>\n<li>With a setter function, which can be used to manipulate\nvalues passed to Attribute's <a href=\"#method_set\">set</a> method, before they are stored.</li>\n<li>With a getter function, which can be used to manipulate stored values,\nbefore they are returned by Attribute's <a href=\"#method_get\">get</a> method.</li>\n<li>With a validator function, to validate values before they are stored.</li>\n</ul>\n<p>See the <a href=\"#method_addAttr\">addAttr</a> method, for the complete set of configuration\noptions available for attributes</p>.\n<p><strong>NOTE:</strong> Most implementations will be better off extending the <a href=\"Base.html\">Base</a> class, \ninstead of augmenting Attribute directly. Base augments Attribute and will handle the initial configuration \nof attributes for derived classes, accounting for values passed into the constructor.</p>"}, "TreeNodeCheck": {"name": "TreeNodeCheck", "configs": {"checkName": {"default": "'tree-node-check'", "type": "String", "description": "Name of the checkbox element used on the current TreeNode.", "guessedname": "checkName", "guessedtype": "property"}, "checkEl": {"default": "Generated DOM element.", "type": "Node | String", "description": "Checkbox element.", "guessedname": "checkEl", "guessedtype": "property"}, "checkContainerEl": {"default": "Generated DOM element.", "type": "Node | String", "description": "Container element for the checkbox.", "guessedname": "checkContainerEl", "guessedtype": "property"}, "checked": {"default": "false", "type": "boolean", "description": "Whether the TreeNode is checked or not.", "guessedname": "checked", "guessedtype": "property"}}, "constructors": [{"params": [{"type": "Object", "name": "config", "description": "  Object literal specifying widget configuration properties."}], "description": "<p><img src=\"assets/images/aui-tree-nod-check/main.png\"/></p>\nA base class for TreeNodeCheck, providing:\n<ul>\n<li>Widget Lifecycle (initializer, renderUI, bindUI, syncUI, destructor)</li>\n<li>Checkbox support for the TreeNode</li>\n</ul>\nCheck the list of <a href=\"TreeNodeCheck.html#configattributes\">Configuration Attributes</a> available for\nTreeNodeCheck."}], "namespace": "", "module": "aui-tree", "events": {"checkContainerElChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "checkContainerElChange", "description": "Fires when the value for the configuration attribute 'checkContainerEl' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "checkNameChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "checkNameChange", "description": "Fires when the value for the configuration attribute 'checkName' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "checkElChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "checkElChange", "description": "Fires when the value for the configuration attribute 'checkEl' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "checkedChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "checkedChange", "description": "Fires when the value for the configuration attribute 'checked' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "guessedname": "TreeNodeCheck", "methods": {"uncheck": {"description": "Uncheck the current TreeNode.", "guessedname": "uncheck", "guessedtype": "function"}, "check": {"description": "Check the current TreeNode.", "guessedname": "check", "guessedtype": "function"}, "toggleCheck": {"description": "Toggle the check status of the current TreeNode.", "guessedname": "toggleCheck", "guessedtype": "function"}}, "extends": "TreeNodeIO", "superclass": "TreeNodeIO", "file": "aui-tree.js", "guessedtype": "property", "shortname": "TreeNodeCheck", "properties": {"TreeNode.ATTRS": {"type": "Object", "static": "", "description": "Static property used to define the default attribute\nconfiguration for the TreeNode.", "guessedname": "ATTRS", "guessedtype": "property"}, "TreeNode.NAME": {"type": "String", "static": "", "description": "Static property provides a string to identify the class.", "guessedname": "NAME", "guessedtype": "property"}}, "description": "<p><img src=\"assets/images/aui-tree-nod-check/main.png\"/></p>\nA base class for TreeNodeCheck, providing:\n<ul>\n<li>Widget Lifecycle (initializer, renderUI, bindUI, syncUI, destructor)</li>\n<li>Checkbox support for the TreeNode</li>\n</ul>\nCheck the list of <a href=\"TreeNodeCheck.html#configattributes\">Configuration Attributes</a> available for\nTreeNodeCheck."}, "WidgetPosition": {"name": "WidgetPosition", "namespace": "", "module": "widget-position", "events": {"yChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "yChange", "description": "Fires when the value for the configuration attribute 'y' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "xyChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "xyChange", "description": "Fires when the value for the configuration attribute 'xy' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "xChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "xChange", "description": "Fires when the value for the configuration attribute 'x' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "configs": {"y": {"default": "0", "type": "number", "description": "Page Y co-ordinate for the widget. This attribute acts as a facade for the \nxy attribute. Changes in position can be monitored by listening for xyChange events.", "guessedname": "y", "guessedtype": "property"}, "x": {"default": "0", "type": "number", "description": "Page X co-ordinate for the widget. This attribute acts as a facade for the \nxy attribute. Changes in position can be monitored by listening for xyChange events.", "guessedname": "x", "guessedtype": "property"}, "xy": {"default": "[0,0]", "type": "Array", "description": "Page XY co-ordinate pair for the widget.", "guessedname": "xy", "guessedtype": "property"}}, "methods": {"_getX": {"return": {"type": "Number", "description": "The X page co-ordinate value"}, "description": "Default getter for the X attribute. The value is retrieved from \nthe XY attribute, which is the sole store for the XY state.", "guessedname": "_getX", "guessedtype": "function"}, "_validateXY": {"return": {"type": "boolean", "description": "true if valid, false if not."}, "description": "Default validator for the XY attribute", "param": "{Array} val The XY page co-ordinate value which is being set.", "params": [{"type": "Array", "name": "val", "description": " The XY page co-ordinate value which is being set."}], "guessedname": "_validateXY", "guessedtype": "function"}, "_setX": {"param": "{Number} val The X page co-ordinate value", "params": [{"type": "Number", "name": "val", "description": " The X page co-ordinate value"}], "description": "Default setter for the X attribute. The setter passes the X value through\nto the XY attribute, which is the sole store for the XY state.", "guessedname": "_setX", "guessedtype": "function"}, "_uiSetXY": {"description": "Updates the UI to reflect the XY page co-ordinates passed in.", "param": "{String} val The XY page co-ordinates value to be reflected in the UI", "protected": "", "params": [{"type": "String", "name": "val", "description": " The XY page co-ordinates value to be reflected in the UI"}], "guessedname": "_uiSetXY", "guessedtype": "function"}, "move": {"param": "{Number} x The new x position", "params": [{"type": "Number", "name": "x", "description": " The new x position"}, {"type": "Number", "name": "y", "description": " The new y position\n<p>Or</p>"}, {"type": "Array", "name": "x,", "description": " y values passed as an array ([x, y]), to support\nsimple pass through of Node.getXY results"}], "description": "Moves the Widget to the specified page xy co-ordinate position.", "guessedname": "move", "guessedtype": "function"}, "_syncUIPosition": {"protected": "", "description": "Synchronizes the UI to match the Widgets xy page position state.\n<p>\nThis method in invoked after syncUI is invoked for the Widget class\nusing YUI's aop infrastructure.\n</p>", "guessedname": "_syncUIPosition", "guessedtype": "function"}, "_getY": {"return": {"type": "Number", "description": "The Y page co-ordinate value"}, "description": "Default getter for the Y attribute. The value is retrieved from \nthe XY attribute, which is the sole store for the XY state.", "guessedname": "_getY", "guessedtype": "function"}, "syncXY": {"description": "Synchronizes the Panel's \"xy\", \"x\", and \"y\" properties with the \nWidget's position in the DOM.", "guessedname": "syncXY", "guessedtype": "function"}, "_setY": {"param": "{Number} val The Y page co-ordinate value", "params": [{"type": "Number", "name": "val", "description": " The Y page co-ordinate value"}], "description": "Default setter for the Y attribute. The setter passes the Y value through\nto the XY attribute, which is the sole store for the XY state.", "guessedname": "_setY", "guessedtype": "function"}, "_afterXYChange": {"description": "Default attribute change listener for the xy attribute, responsible\nfor updating the UI, in response to attribute changes.", "param": "{EventFacade} e The event facade for the attribute change", "protected": "", "params": [{"type": "EventFacade", "name": "e", "description": " The event facade for the attribute change"}], "guessedname": "_afterXYChange", "guessedtype": "function"}, "_renderUIPosition": {"protected": "", "description": "Creates/Initializes the DOM to support xy page positioning.\n<p>\nThis method in invoked after renderUI is invoked for the Widget class\nusing YUI's aop infrastructure.\n</p>", "guessedname": "_renderUIPosition", "guessedtype": "function"}, "_bindUIPosition": {"protected": "", "description": "Binds event listeners responsible for updating the UI state in response to \nWidget position related state changes.\n<p>\nThis method in invoked after bindUI is invoked for the Widget class\nusing YUI's aop infrastructure.\n</p>", "guessedname": "_bindUIPosition", "guessedtype": "function"}}, "param": "{Object} config User configuration object", "file": "widget-position.js", "shortname": "WidgetPosition", "properties": {"WidgetPosition.POSITIONED_CLASS_NAME": {"description": "Default class used to mark the boundingBox of a positioned widget.", "default": "\"yui-widget-positioned\"", "static": "", "guessedname": "POSITIONED_CLASS_NAME", "guessedtype": "property", "type": "String"}, "WidgetPosition.ATTRS": {"type": "Object", "static": "", "description": "Static property used to define the default attribute \nconfiguration introduced by WidgetPosition.", "guessedname": "ATTRS", "guessedtype": "property"}}, "description": "Widget extension, which can be used to add positioning support to the base Widget class, \nthrough the <a href=\"Base.html#method_build\">Base.build</a> method."}, "Do.Prevent": {"name": "Do.Prevent", "namespace": "", "module": "event-custom", "guessedname": "Prevent", "file": "event-custom.js", "guessedtype": "function", "shortname": "Do.Prevent", "description": "Return a Prevent object when you want to prevent the wrapped function\nfrom executing, but want the remaining listeners to execute"}, "TreeViewDD": {"name": "TreeViewDD", "configs": {"checked": {"default": "false", "type": "boolean", "description": "Whether the TreeNode is checked or not.", "guessedname": "checked", "guessedtype": "property"}, "helper": {"default": "null", "type": "Node | String", "description": "Dragdrop helper element.", "guessedname": "helper", "guessedtype": "property"}, "scrollDelay": {"default": "100", "type": "Number", "description": "Delay of the scroll while dragging the TreeNodes.", "guessedname": "scrollDelay", "guessedtype": "property"}, "checkEl": {"default": "Generated DOM element.", "type": "Node | String", "description": "Checkbox element.", "guessedname": "checkEl", "guessedtype": "property"}, "checkName": {"default": "'tree-node-check'", "type": "String", "description": "Name of the checkbox element used on the current TreeNode.", "guessedname": "checkName", "guessedtype": "property"}, "checkContainerEl": {"default": "Generated DOM element.", "type": "Node | String", "description": "Container element for the checkbox.", "guessedname": "checkContainerEl", "guessedtype": "property"}, "dropAction": {"default": "null", "type": "String", "description": "Drop action (i.e. could be 'append', 'below' or 'above').", "guessedname": "dropAction", "guessedtype": "property"}, "nodeContent": {"default": "null", "type": "Node", "description": "Reference for the current drop node.", "guessedname": "nodeContent", "guessedtype": "property"}, "lastY": {"default": "0", "type": "Number", "description": "Last Y.", "guessedname": "lastY", "guessedtype": "property"}}, "constructors": [{"params": [{"type": "Object", "name": "config", "description": "  Object literal specifying widget configuration properties."}], "description": "A base class for TreeViewDD, providing:\n<ul>\n<li>Widget Lifecycle (initializer, renderUI, bindUI, syncUI, destructor)</li>\n<li>DragDrop support for the TreeNodes</li>\n</ul>\nQuick Example:<br/>\nCheck the list of <a href=\"TreeViewDD.html#configattributes\">Configuration Attributes</a> available for\nTreeViewDD."}], "namespace": "", "module": "aui-tree", "events": {"checkContainerElChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "checkContainerElChange", "description": "Fires when the value for the configuration attribute 'checkContainerEl' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "dropActionChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "dropActionChange", "description": "Fires when the value for the configuration attribute 'dropAction' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "nodeContentChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "nodeContentChange", "description": "Fires when the value for the configuration attribute 'nodeContent' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "helperChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "helperChange", "description": "Fires when the value for the configuration attribute 'helper' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "checkedChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "checkedChange", "description": "Fires when the value for the configuration attribute 'checked' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "checkElChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "checkElChange", "description": "Fires when the value for the configuration attribute 'checkEl' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "checkNameChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "checkNameChange", "description": "Fires when the value for the configuration attribute 'checkName' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "scrollDelayChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "scrollDelayChange", "description": "Fires when the value for the configuration attribute 'scrollDelay' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "lastYChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "lastYChange", "description": "Fires when the value for the configuration attribute 'lastY' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "guessedname": "TreeViewDD", "methods": {"uncheck": {"description": "Uncheck the current TreeNode.", "guessedname": "uncheck", "guessedtype": "function"}, "_bindDragDrop": {"protected": "", "description": "Bind DragDrop events.", "guessedname": "_bindDragDrop", "guessedtype": "function"}, "_onDropExit": {"description": "Fires on drop exit event.", "param": "{EventFacade} event append event facade", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": " append event facade"}], "guessedname": "_onDropExit", "guessedtype": "function"}, "_onDragAlign": {"description": "Fires on drag align event.", "param": "{EventFacade} event append event facade", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": " append event facade"}], "guessedname": "_onDragAlign", "guessedtype": "function"}, "toggleCheck": {"description": "Toggle the check status of the current TreeNode.", "guessedname": "toggleCheck", "guessedtype": "function"}, "check": {"description": "Check the current TreeNode.", "guessedname": "check", "guessedtype": "function"}, "_onDragStart": {"description": "Fires on drag start event.", "param": "{EventFacade} event append event facade", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": " append event facade"}], "guessedname": "_onDragStart", "guessedtype": "function"}, "_createDrag": {"description": "Setup DragDrop on the TreeNodes.", "param": "{Node} node", "protected": "", "params": [{"type": "Node", "name": "node", "description": ""}], "guessedname": "_createDrag", "guessedtype": "function"}, "_onDropOver": {"description": "Fires on drop over event.", "param": "{EventFacade} event append event facade", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": " append event facade"}], "guessedname": "_onDropOver", "guessedtype": "function"}, "_updateNodeState": {"description": "Update the CSS node state (i.e. going down, going up, append etc).", "param": "{EventFacade} event", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "guessedname": "_updateNodeState", "guessedtype": "function"}, "_appendState": {"description": "Set the append CSS state on the passed <code>nodeContent</code>.", "param": "{Node} nodeContent", "protected": "", "params": [{"type": "Node", "name": "nodeContent", "description": ""}], "guessedname": "_appendState", "guessedtype": "function"}, "_resetState": {"description": "Set the reset CSS state on the passed <code>nodeContent</code>.", "param": "{Node} nodeContent", "protected": "", "params": [{"type": "Node", "name": "nodeContent", "description": ""}], "guessedname": "_resetState", "guessedtype": "function"}, "bindUI": {"protected": "", "description": "Bind the events on the TreeViewDD UI. Lifecycle.", "guessedname": "bindUI", "guessedtype": "function"}, "_goingUpState": {"description": "Set the going up CSS state on the passed <code>nodeContent</code>.", "param": "{Node} nodeContent", "protected": "", "params": [{"type": "Node", "name": "nodeContent", "description": ""}], "guessedname": "_goingUpState", "guessedtype": "function"}, "_onDropHit": {"description": "Fires on drop hit event.", "param": "{EventFacade} event append event facade", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": " append event facade"}], "guessedname": "_onDropHit", "guessedtype": "function"}, "_goingDownState": {"description": "Set the going down CSS state on the passed <code>nodeContent</code>.", "param": "{Node} nodeContent", "protected": "", "params": [{"type": "Node", "name": "nodeContent", "description": ""}], "guessedname": "_goingDownState", "guessedtype": "function"}, "renderUI": {"protected": "", "description": "Create the DOM structure for the TreeViewDD. Lifecycle.", "guessedname": "renderUI", "guessedtype": "function"}, "_handleEvent": {"description": "Fires after the append event.", "param": "{EventFacade} event append event facade", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": " append event facade"}], "guessedname": "_afterAppend", "guessedtype": "function"}}, "extends": "TreeView", "superclass": "TreeView", "file": "aui-tree.js", "guessedtype": "property", "shortname": "TreeViewDD", "properties": {"TreeNode.NAME": {"type": "String", "static": "", "description": "Static property provides a string to identify the class.", "guessedname": "NAME", "guessedtype": "property"}, "TreeViewDD.ATTRS": {"type": "Object", "static": "", "description": "Static property used to define the default attribute\nconfiguration for the TreeViewDD.", "guessedname": "ATTRS", "guessedtype": "property"}, "direction": {"protected": "", "type": "String", "description": "Direction of the drag (i.e. could be 'up' or 'down').", "guessedname": "direction", "guessedtype": "property"}, "TreeNode.ATTRS": {"type": "Object", "static": "", "description": "Static property used to define the default attribute\nconfiguration for the TreeNode.", "guessedname": "ATTRS", "guessedtype": "property"}, "TreeViewDD.NAME": {"type": "String", "static": "", "description": "Static property provides a string to identify the class.", "guessedname": "NAME", "guessedtype": "property"}}, "description": "A base class for TreeViewDD, providing:\n<ul>\n<li>Widget Lifecycle (initializer, renderUI, bindUI, syncUI, destructor)</li>\n<li>DragDrop support for the TreeNodes</li>\n</ul>\nQuick Example:<br/>\nCheck the list of <a href=\"TreeViewDD.html#configattributes\">Configuration Attributes</a> available for\nTreeViewDD."}, "State": {"name": "State", "constructors": [{"description": "The State class maintains state for a collection of named items, with \na varying number of properties defined.\nIt avoids the need to create a separate class for the item, and separate instances \nof these classes for each item, by storing the state in a 2 level hash table, \nimproving performance when the number of items is likely to be large."}], "namespace": "", "module": "attribute", "guessedname": "State", "methods": {"addAll": {"param": "name {String} The name of the item.", "params": [{"type": "String", "name": "name", "description": "  The name of the item."}, {"type": "Object", "name": "o", "description": "  A hash of property/value pairs."}], "description": "Adds multiple properties to an item.", "guessedname": "addAll", "guessedtype": "function"}, "get": {"return": {"type": "Any", "description": "The value of the supplied property."}, "description": "For a given item, returns the value of the property requested, or undefined if not found.", "param": "name {String} The name of the item", "params": [{"type": "String", "name": "name", "description": "  The name of the item"}, {"type": "String", "name": "key", "description": "  Optional. The property value to retrieve."}], "guessedname": "get", "guessedtype": "function"}, "getAll": {"return": {"type": "Object", "description": "An object with property/value pairs for the item."}, "description": "For the given item, returns a disposable object with all of the\nitem's property/value pairs.", "param": "name {String} The name of the item", "params": [{"type": "String", "name": "name", "description": "  The name of the item"}], "guessedname": "getAll", "guessedtype": "function"}, "remove": {"param": "name {String} The name of the item.", "params": [{"type": "String", "name": "name", "description": "  The name of the item."}, {"type": "String", "name": "key", "description": "  The property to remove."}], "description": "Removes a property from an item.", "guessedname": "remove", "guessedtype": "function"}, "removeAll": {"param": "name {String} The name of the item.", "params": [{"type": "String", "name": "name", "description": "  The name of the item."}, {"type": "Object|Array", "name": "o", "description": "  Collection of properties to delete. If not provided, the entire item is removed."}], "description": "Removes multiple properties from an item, or remove the item completely.", "guessedname": "removeAll", "guessedtype": "function"}, "add": {"param": "name {String} The name of the item.", "params": [{"type": "String", "name": "name", "description": "  The name of the item."}, {"type": "String", "name": "key", "description": "  The name of the property."}, {"type": "Any", "name": "val", "description": "  The value of the property."}], "description": "Adds a property to an item.", "guessedname": "add", "guessedtype": "function"}}, "file": "attribute.js", "guessedtype": "function", "shortname": "State", "properties": {"data": {"description": "Hash of attributes", "guessedname": "data", "guessedtype": "property"}}, "description": "The State class maintains state for a collection of named items, with \na varying number of properties defined.\nIt avoids the need to create a separate class for the item, and separate instances \nof these classes for each item, by storing the state in a 2 level hash table, \nimproving performance when the number of items is likely to be large."}, "CustomEvent": {"name": "CustomEvent", "constructors": [{"params": [{"type": "String", "name": "type", "description": " The type of event, which is passed to the callback\nwhen the event fires"}, {"type": "", "name": "o", "description": " configuration object"}], "description": "The CustomEvent class lets you define events for your application\nthat can be subscribed to by one or more independent component."}], "namespace": "", "module": "event-custom", "guessedname": "CustomEvent", "methods": {"on": {"return": {"type": "EventHandle", "description": "An object with a detach method to detch the handler(s)"}, "description": "Listen for this event", "param": "{Function} fn The function to execute", "params": [{"type": "Function", "name": "fn", "description": " The function to execute"}, {"type": "object", "name": "context", "description": "  optional execution context."}, {"type": "mixed", "name": "arg*", "description": "  0..n additional arguments to supply to the subscriber\nwhen the event fires."}], "guessedname": "on", "guessedtype": "function"}, "_notify": {"description": "Notify a single subscriber", "param": "s {Subscriber} the subscriber", "params": [{"type": "Subscriber", "name": "s", "description": "  the subscriber"}, {"type": "Array", "name": "args", "description": "  the arguments array to apply to the listener"}], "private": "", "guessedname": "_notify", "guessedtype": "function"}, "monitor": {"return": {"type": "EventHandle", "description": "return value from the monitor event subscription"}, "description": "Monitor the event state for the subscribed event.  The first parameter\nis what should be monitored, the rest are the normal parameters when\nsubscribing to an event.", "param": "what {string} what to monitor ('detach', 'attach', 'publish')", "params": [{"type": "string", "name": "what", "description": "  what to monitor ('detach', 'attach', 'publish')"}], "guessedname": "monitor", "guessedtype": "function"}, "_delete": {"param": "subscriber object", "params": [{"type": "", "name": "subscriber", "description": " object"}], "private": "", "guessedname": "_delete", "guessedtype": "function"}, "fire": {"return": {"type": "boolean", "description": "false if one of the subscribers returned false, \ntrue otherwise"}, "description": "Notifies the subscribers.  The callback functions will be executed\nfrom the context specified when the event was created, and with the \nfollowing parameters:\n<ul>\n<li>The type of event</li>\n<li>All of the arguments fire() was executed with as an array</li>\n<li>The custom object (if any) that was passed into the subscribe() \nmethod</li>\n</ul>", "param": "{Object*} arguments an arbitrary set of parameters to pass to \nthe handler.", "params": [{"type": "Object*", "name": "arguments", "description": " an arbitrary set of parameters to pass to \nthe handler."}], "guessedname": "fire", "guessedtype": "function"}, "unsubscribeAll": {"deprecated": "use detachAll", "return": {"type": "int", "description": "The number of listeners unsubscribed"}, "description": "Removes all listeners", "guessedname": "unsubscribeAll", "guessedtype": "function"}, "after": {"return": {"type": "EventHandle", "description": "handle Unsubscribe handle"}, "description": "Listen for this event after the normal subscribers have been notified and\nthe default behavior has been applied.  If a normal subscriber prevents the \ndefault behavior, it also prevents after listeners from firing.", "param": "{Function} fn The function to execute", "params": [{"type": "Function", "name": "fn", "description": " The function to execute"}, {"type": "object", "name": "context", "description": "  optional execution context."}, {"type": "mixed", "name": "arg*", "description": "  0..n additional arguments to supply to the subscriber\nwhen the event fires."}], "guessedname": "after", "guessedtype": "function"}, "applyConfig": {"param": "o hash of properties to apply", "params": [{"type": "", "name": "o", "description": " hash of properties to apply"}, {"type": "boolean", "name": "force", "description": "  if true, properties that exist on the event \nwill be overwritten."}], "description": "Apply configuration properties.  Only applies the CONFIG whitelist", "guessedname": "applyConfig", "guessedtype": "function"}, "preventDefault": {"description": "Prevents the execution of this event's defaultFn", "guessedname": "preventDefault", "guessedtype": "function"}, "detachAll": {"return": {"type": "int", "description": "The number of listeners unsubscribed"}, "description": "Removes all listeners", "guessedname": "detachAll", "guessedtype": "function"}, "subscribe": {"return": {"type": "EventHandle", "description": "Unsubscribe handle"}, "description": "Listen for this event", "deprecated": "use on", "param": "{Function} fn The function to execute", "params": [{"type": "Function", "name": "fn", "description": " The function to execute"}], "guessedname": "subscribe", "guessedtype": "function"}, "getSubscriber": {"return": {"type": "Subscriber", "description": "or null"}, "description": "Returns the first subscriber that matches the provided function and/or\ncontext.  Both function and context parameters are optional.  Omitting\neither will return the first match on the other parameter, and omitting both\nwill return the first subscriber.", "since": "3.1.0", "param": "fn {Function} Optional. The subscribed callback function", "params": [{"type": "Function", "name": "fn", "description": "  Optional. The subscribed callback function"}, {"type": "Object", "name": "ctx", "description": "  Optional.  The context override for the callback"}], "guessedname": "getSubscriber", "in": "", "guessedtype": "function"}, "halt": {"param": "immediate {boolean} if true additional listeners\non the current target will not be executed", "params": [{"type": "boolean", "name": "immediate", "description": "  if true additional listeners\non the current target will not be executed"}], "description": "Stops the event propagation and prevents the default\nevent behavior.", "guessedname": "halt", "guessedtype": "function"}, "unsubscribe": {"return": {"type": "int|undefined", "description": "returns the number of subscribers unsubscribed"}, "description": "Detach listeners.", "deprecated": "use detach", "param": "{Function} fn  The subscribed function to remove, if not supplied\nall will be removed", "params": [{"type": "Function", "name": "fn", "description": "  The subscribed function to remove, if not supplied\nall will be removed"}, {"type": "Object", "name": "context", "description": " The context object passed to subscribe."}], "guessedname": "unsubscribe", "guessedtype": "function"}, "stopImmediatePropagation": {"description": "Stops propagation to bubble targets, and prevents any remaining\nsubscribers on the current target from executing.", "guessedname": "stopImmediatePropagation", "guessedtype": "function"}, "getSubs": {"return": {"type": "Array", "description": "first item is the on subscribers, second the after"}, "description": "Get all of the subscribers to this event and any sibling event", "guessedname": "getSubs", "guessedtype": "function"}, "detach": {"return": {"type": "int", "description": "returns the number of subscribers unsubscribed"}, "description": "Detach listeners.", "param": "{Function} fn  The subscribed function to remove, if not supplied\nall will be removed", "params": [{"type": "Function", "name": "fn", "description": "  The subscribed function to remove, if not supplied\nall will be removed"}, {"type": "Object", "name": "context", "description": " The context object passed to subscribe."}], "guessedname": "detach", "guessedtype": "function"}, "stopPropagation": {"description": "Stop propagation to bubble targets", "guessedname": "stopPropagation", "guessedtype": "function"}, "log": {"param": "msg {string} message to log", "params": [{"type": "string", "name": "msg", "description": "  message to log"}, {"type": "string", "name": "cat", "description": "  log category"}], "description": "Logger abstraction to centralize the application of the silent flag", "guessedname": "log", "guessedtype": "function"}}, "file": "event-custom.js", "guessedtype": "function", "shortname": "CustomEvent", "properties": {"fired": {"default": "false;", "type": "boolean", "description": "This event has fired if true"}, "afters": {"type": "Subscriber{}", "description": "'After' subscribers", "guessedname": "afters", "guessedtype": "property"}, "monitored": {"type": "boolean", "description": "Monitor when an event is attached or detached."}, "silent": {"type": "boolean", "description": "By default all custom events are logged in the debug build, set silent\nto true to disable debug outpu for this event.", "guessedname": "silent", "guessedtype": "property"}, "firedWith": {"type": "Array", "description": "An array containing the arguments the custom event\nwas last fired with."}, "preventable": {"default": "true", "type": "boolean", "description": "Specifies whether or not this event's default function\ncan be cancelled by a subscriber by executing preventDefault() \non the event facade", "guessedname": "preventable", "guessedtype": "property"}, "stoppedFn": {"type": "Function", "description": "The function to execute if a subscriber calls\nstopPropagation or stopImmediatePropagation"}, "type": {"type": "string", "description": "The type of event, returned to subscribers when the event fires", "guessedname": "type", "guessedtype": "property"}, "defaultFn": {"type": "Function", "description": "The default function to execute after event listeners\nhave fire, but only if the default action was not\nprevented."}, "prevented": {"type": "int", "description": "Flag for preventDefault that is modified during fire().\nif it is not 0, the default behavior for this event"}, "queuable": {"default": "false", "type": "boolean", "description": "Specifies whether this event should be queued when the host is actively\nprocessing an event.  This will effect exectution order of the callbacks\nfor the various events."}, "host": {"type": "EventTarget", "description": "Specifies the host for this custom event.  This is used\nto enable event bubbling"}, "subscribers": {"type": "Subscriber{}", "description": "The subscribers to this event", "guessedname": "subscribers", "guessedtype": "property"}, "emitFacade": {"default": "false", "type": "boolean", "description": "If set to true, the custom event will deliver an EventFacade object\nthat is similar to a DOM event object."}, "bubbles": {"default": "true", "type": "boolean", "description": "Specifies whether or not a subscriber can stop the event propagation\nvia stopPropagation(), stopImmediatePropagation(), or halt()\nEvents can only bubble if emitFacade is true.", "guessedname": "bubbles", "guessedtype": "property"}, "broadcast": {"type": "int", "description": "If 0, this event does not broadcast.  If 1, the YUI instance is notified\nevery time this event fires.  If 2, the YUI instance and the YUI global\n(if event is enabled on the global) are notified every time this event\nfires."}, "fireOnce": {"default": "false;", "type": "boolean", "description": "This event should only fire one time if true, and if\nit has fired, any new subscribers should be notified\nimmediately."}, "preventedFn": {"type": "Function", "description": "The function to execute if a subscriber calls\npreventDefault"}, "stopped": {"type": "int", "description": "Flag for stopPropagation that is modified during fire()\n1 means to stop propagation to bubble targets.  2 means\nto also stop additional subscribers on this target."}, "context": {"type": "object", "description": "The context the the event will fire from by default.  Defaults to the YUI\ninstance.", "guessedname": "context", "guessedtype": "property"}, "signature": {"default": "9", "type": "int", "description": "Supports multiple options for listener signatures in order to\nport YUI 2 apps.", "guessedname": "signature", "guessedtype": "property"}, "async": {"default": "false", "type": "boolean", "description": "fireOnce listeners will fire syncronously unless async\nis set to true"}}, "description": "The CustomEvent class lets you define events for your application\nthat can be subscribed to by one or more independent component."}, "Plugin.Drop": {"name": "Plugin.Drop", "constructors": [{"description": "Simple Drop plugin that can be attached to a Node via the plug method."}], "namespace": "Plugin", "module": "dd", "guessedname": "Drop", "extends": "DD.Drop", "superclass": "DD.Drop", "file": "dd.js", "guessedtype": "function", "shortname": "Drop", "properties": {"NS": {"type": "{String}", "description": "The Drop instance will be placed on the Node instance under the drop namespace. It can be accessed via Node.drop;", "guessedname": "NS", "guessedtype": "property"}, "NAME": {"type": "{String}", "description": "dd-drop-plugin", "guessedname": "NAME", "guessedtype": "property"}}, "description": "Simple Drop plugin that can be attached to a Node via the plug method."}, "OverlayContextPanelManager": {"name": "OverlayContextPanelManager", "constructors": [{"params": [{"type": "Object", "name": "config", "description": "  Object literal specifying widget configuration properties."}], "description": "A base class for OverlayContextPanelManager:"}], "namespace": "", "module": "aui-overlay", "guessedname": "OverlayContextPanelManager", "static": "", "superclass": "OverlayManager", "file": "aui-overlay.js", "guessedtype": "property", "extends": "OverlayManager", "shortname": "OverlayContextPanelManager", "description": "A base class for OverlayContextPanelManager:"}, "DataSource.Get": {"name": "DataSource.Get", "configs": {"scriptCallbackParam": {"default": "\"callback\"", "type": "String", "description": "Callback string parameter name sent to the remote script. By default,\nrequests are sent to\n&#60;URI&#62;?&#60;scriptCallbackParam&#62;=callbackFunction", "guessedname": "scriptCallbackParam", "guessedtype": "property"}, "asyncMode": {"default": "\"allowAll\"", "type": "String", "description": "Defines request/response management in the following manner:\n<dl>\n<!--<dt>queueRequests</dt>\n<dd>If a request is already in progress, wait until response is\nreturned before sending the next request.</dd>\n<dt>cancelStaleRequests</dt>\n<dd>If a request is already in progress, cancel it before\nsending the next request.</dd>-->\n<dt>ignoreStaleResponses</dt>\n<dd>Send all requests, but handle only the response for the most\nrecently sent request.</dd>\n<dt>allowAll</dt>\n<dd>Send all requests and handle all responses.</dd>\n</dl>", "guessedname": "asyncMode", "guessedtype": "property"}, "generateRequestCallback": {"type": "Function", "description": "Accepts the DataSource instance and a callback ID, and returns a callback\nparam/value string that gets appended to the script URI. Implementers\ncan customize this string to match their server's query syntax.", "guessedname": "generateRequestCallback", "guessedtype": "property"}, "get": {"default": "Y.Get", "type": "Y.Get", "description": "Pointer to Get Utility.", "guessedname": "get", "guessedtype": "property"}}, "constructors": [{"description": "Get Utility subclass for the DataSource Utility."}], "namespace": "", "module": "datasource", "events": {"generateRequestCallbackChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "generateRequestCallbackChange", "description": "Fires when the value for the configuration attribute 'generateRequestCallback' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "scriptCallbackParamChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "scriptCallbackParamChange", "description": "Fires when the value for the configuration attribute 'scriptCallbackParam' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "getChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "getChange", "description": "Fires when the value for the configuration attribute 'get' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "asyncModeChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "asyncModeChange", "description": "Fires when the value for the configuration attribute 'asyncMode' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "guessedname": "DSGet", "methods": {"_defRequestFn": {"description": "Passes query string to Get Utility. Fires <code>response</code> event when\nresponse is received asynchronously.", "param": "e {Event.Facade} Event Facade with the following properties:\n<dl>\n<dt>tId (Number)</dt> <dd>Unique transaction ID.</dd>\n<dt>request (Object)</dt> <dd>The request.</dd>\n<dt>callback (Object)</dt> <dd>The callback object with the following properties:\n<dl>\n<dt>success (Function)</dt> <dd>Success handler.</dd>\n<dt>failure (Function)</dt> <dd>Failure handler.</dd>\n</dl>\n</dd>\n<dt>cfg (Object)</dt> <dd>Configuration object.</dd>\n</dl>", "protected": "", "params": [{"type": "Event.Facade", "name": "e", "description": "  Event Facade with the following properties:\n<dl>\n<dt>tId (Number)</dt> <dd>Unique transaction ID.</dd>\n<dt>request (Object)</dt> <dd>The request.</dd>\n<dt>callback (Object)</dt> <dd>The callback object with the following properties:\n<dl>\n<dt>success (Function)</dt> <dd>Success handler.</dd>\n<dt>failure (Function)</dt> <dd>Failure handler.</dd>\n</dl>\n</dd>\n<dt>cfg (Object)</dt> <dd>Configuration object.</dd>\n</dl>"}], "guessedname": "_defRequestFn", "guessedtype": "function"}, "_generateRequest": {"description": "Default method for adding callback param to url.  See\ngenerateRequestCallback attribute.", "param": "guid {String} unique identifier for callback function wrapper", "protected": "", "params": [{"type": "String", "name": "guid", "description": "  unique identifier for callback function wrapper"}], "guessedname": "_generateRequest", "guessedtype": "function"}}, "extends": "DataSource.Local", "superclass": "DataSource.Local", "file": "datasource.js", "guessedtype": "function", "shortname": "DataSource.Get", "properties": {"NAME": {"description": "Class name.", "value": "\"dataSourceGet\"", "static": "", "guessedname": "NAME", "guessedtype": "property", "type": "String", "final": ""}, "_last": {"protected": "", "type": "{String}", "description": "Stores the most recent request id for validation against stale\nresponse handling.", "guessedname": "_last", "guessedtype": "property"}}, "description": "Get Utility subclass for the DataSource Utility."}, "TreeData": {"name": "TreeData", "configs": {"index": {"default": "{}", "type": "Object", "description": "Index the nodes.", "guessedname": "index", "guessedtype": "property"}, "container": {"default": "null", "type": "Node | String", "description": "Container to nest children nodes. If has cntainer it's not a leaf.", "guessedname": "container", "guessedtype": "property"}, "children": {"default": "[]", "type": "Array", "description": "Array of children (i.e. could be a JSON metadata object or a TreeNode instance).", "guessedname": "children", "guessedtype": "property"}}, "constructors": [{"params": [{"type": "Object", "name": "config", "description": "  Object literal specifying widget configuration properties."}], "description": "A base class for TreeData, providing:\n<ul>\n<li>Widget Lifecycle (initializer, renderUI, bindUI, syncUI, destructor)</li>\n<li>Handle the data of the tree</li>\n<li>Basic DOM implementation (append/remove/insert)</li>\n<li>Indexing management to handle the children nodes</li>\n</ul>\nCheck the list of <a href=\"TreeData.html#configattributes\">Configuration Attributes</a> available for\nTreeData."}], "namespace": "", "module": "aui-tree", "events": {"indexChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "indexChange", "description": "Fires when the value for the configuration attribute 'index' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "containerChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "containerChange", "description": "Fires when the value for the configuration attribute 'container' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "childrenChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "childrenChange", "description": "Fires when the value for the configuration attribute 'children' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "guessedname": "TreeData", "methods": {"selectAll": {"description": "Select all children of the TreeData.", "guessedname": "selectAll", "guessedtype": "function"}, "appendChild": {"param": "{TreeNode} node", "params": [{"type": "TreeNode", "name": "node", "description": ""}, {"type": "boolean", "name": "cancelBubbling", "description": ""}], "description": "Append a child node to the TreeData.", "guessedname": "appendChild", "guessedtype": "function"}, "createNode": {"return": {"type": "TreeNode", "description": ""}, "description": "Create a TreeNode instance.", "param": "{Object} options", "params": [{"type": "Object", "name": "options", "description": ""}], "guessedname": "createNode", "guessedtype": "function"}, "_collapseAll": {"protected": "", "description": "Collapse all children of the TreeData.", "guessedname": "_collapseAll", "guessedtype": "function"}, "initializer": {"protected": "", "description": "Construction logic executed during TreeData instantiation. Lifecycle.", "guessedname": "initializer", "guessedtype": "function"}, "_setChildren": {"return": {"type": "Array", "description": ""}, "description": "Setter for <a href=\"TreeData.html#config_children\">children</a>.", "param": "{Array} v", "protected": "", "params": [{"type": "Array", "name": "v", "description": ""}], "guessedname": "_setChildren", "guessedtype": "function"}, "getNodeByChild": {"return": {"type": "TreeNode", "description": ""}, "description": "Get a TreeNode instance by a child DOM Node.", "param": "{Node} child", "params": [{"type": "Node", "name": "child", "description": ""}], "guessedname": "getNodeByChild", "guessedtype": "function"}, "getChildren": {"return": {"type": "Array", "description": ""}, "description": "Get an Array of the children nodes of the current TreeData.", "param": "{boolean} deep", "params": [{"type": "boolean", "name": "deep", "description": ""}], "guessedname": "getChildren", "guessedtype": "function"}, "isRegistered": {"return": {"type": "boolean", "description": ""}, "description": "Whether the TreeNode is registered on this TreeData.", "param": "{TreeNode} node", "params": [{"type": "TreeNode", "name": "node", "description": ""}], "guessedname": "isRegistered", "guessedtype": "function"}, "updateReferences": {"param": "{node} TreeNode", "params": [{"type": "node", "name": "TreeNode", "description": ""}, {"type": "parentNode", "name": "TreeNode", "description": ""}, {"type": "ownerTree", "name": "TreeView", "description": ""}], "description": "Update the references of the passed TreeNode.", "guessedname": "updateReferences", "guessedtype": "function"}, "_removeChild": {"param": "{TreeData} node", "params": [{"type": "TreeData", "name": "node", "description": ""}], "description": "Remove the passed <code>node</code> from the current TreeData.", "guessedname": "_removeChild", "guessedtype": "function"}, "removeChild": {"param": "{TreeData} node", "params": [{"type": "TreeData", "name": "node", "description": ""}], "description": "Remove the passed <code>node</code> from the current TreeData.", "guessedname": "removeChild", "guessedtype": "function"}, "indexOf": {"return": {"type": "Number", "description": ""}, "description": "Index of the passed TreeNode on the <a\nhref=\"TreeData.html#config_children\">children</a> attribute.", "param": "{TreeNode} node", "params": [{"type": "TreeNode", "name": "node", "description": ""}], "guessedname": "indexOf", "guessedtype": "function"}, "hasChildNodes": {"return": {"type": "boolean", "description": ""}, "description": "Whether the TreeData contains children or not.", "guessedname": "hasChildNodes", "guessedtype": "function"}, "updateIndex": {"param": "{Object} index", "params": [{"type": "Object", "name": "index", "description": ""}], "description": "Update the <a href=\"TreeData.html#config_index\">index</a> attribute value.", "guessedname": "updateIndex", "guessedtype": "function"}, "insertAfter": {"param": "{TreeNode} treeNode", "params": [{"type": "TreeNode", "name": "treeNode", "description": ""}, {"type": "TreeNode", "name": "refTreeNode", "description": ""}], "description": "Insert <code>treeNode</code> after the <code>refTreeNode</code>.", "guessedname": "insertAfter", "guessedtype": "function"}, "_expandAll": {"protected": "", "description": "Expand all children of the TreeData.", "guessedname": "_expandAll", "guessedtype": "function"}, "getNodeById": {"return": {"type": "TreeNode", "description": ""}, "description": "Get a TreeNode by id.", "param": "{String} uid", "params": [{"type": "String", "name": "uid", "description": ""}], "guessedname": "getNodeById", "guessedtype": "function"}, "empty": {"description": "Delete all children of the current TreeData.", "guessedname": "empty", "guessedtype": "function"}, "expandAll": {"description": "Expand all children of the TreeData.", "guessedname": "expandAll", "guessedtype": "function"}, "insertBefore": {"param": "{TreeNode} treeNode", "params": [{"type": "TreeNode", "name": "treeNode", "description": ""}, {"type": "TreeNode", "name": "refTreeNode", "description": ""}], "description": "Insert <code>treeNode</code> before the <code>refTreeNode</code>.", "guessedname": "insertBefore", "guessedtype": "function"}, "unregisterNode": {"param": "{TreeNode} node", "params": [{"type": "TreeNode", "name": "node", "description": ""}], "description": "Unregister the passed TreeNode from this TreeData.", "guessedname": "unregisterNode", "guessedtype": "function"}, "getEventOutputMap": {"return": {"type": "Object", "description": ""}, "description": "Get an object containing metadata for the custom events.", "param": "{TreeData} node", "params": [{"type": "TreeData", "name": "node", "description": ""}], "guessedname": "getEventOutputMap", "guessedtype": "function"}, "registerNode": {"param": "{TreeNode} node", "params": [{"type": "TreeNode", "name": "node", "description": ""}], "description": "Register the passed TreeNode on this TreeData.", "guessedname": "registerNode", "guessedtype": "function"}, "_appendChild": {"description": "Append a child node to the TreeData.", "param": "{TreeNode} node", "protected": "", "params": [{"type": "TreeNode", "name": "node", "description": ""}, {"type": "boolean", "name": "cancelBubbling", "description": ""}], "guessedname": "_appendChild", "guessedtype": "function"}, "insert": {"param": "{TreeNode} treeNode", "params": [{"type": "TreeNode", "name": "treeNode", "description": ""}, {"type": "TreeNode", "name": "refTreeNode", "description": ""}, {"type": "TreeNode", "name": "where", "description": " 'before' or 'after'"}], "description": "Insert <code>treeNode</code> before or after the <code>refTreeNode</code>.", "guessedname": "insert", "guessedtype": "function"}, "eachChildren": {"param": "{function} fn callback", "params": [{"type": "function", "name": "fn", "description": " callback"}, {"type": "boolean", "name": "fn", "description": " recursive"}], "description": "Loop each children and execute the <code>fn</code> callback.", "guessedname": "eachChildren", "guessedtype": "function"}, "item": {"return": {"type": "TreeNode", "description": ""}, "description": "Get a TreeNode children by index.", "param": "{Number} index", "params": [{"type": "Number", "name": "index", "description": ""}], "guessedname": "item", "guessedtype": "function"}, "bubbleEvent": {"param": "{String} eventType", "params": [{"type": "String", "name": "eventType", "description": ""}, {"type": "Array", "name": "args", "description": ""}, {"type": "boolean", "name": "cancelBubbling", "description": ""}, {"type": "boolean", "name": "stopActionPropagation", "description": ""}], "description": "Bubble event to all parent nodes.", "guessedname": "bubbleEvent", "guessedtype": "function"}, "refreshIndex": {"description": "Refresh the index (i.e. re-index all nodes).", "guessedname": "refreshIndex", "guessedtype": "function"}, "collapseAll": {"description": "Collapse all children of the TreeData.", "guessedname": "collapseAll", "guessedtype": "function"}}, "extends": "Base", "superclass": "Base", "file": "aui-tree.js", "guessedtype": "property", "shortname": "TreeData", "properties": {"TreeData.ATTRS": {"type": "Object", "static": "", "description": "Static property used to define the default attribute\nconfiguration for the TreeData.", "guessedname": "ATTRS", "guessedtype": "property"}, "TreeData.NAME": {"type": "String", "static": "", "description": "Static property provides a string to identify the class.", "guessedname": "NAME", "guessedtype": "property"}, "UI_EVENTS": {"protected": "", "type": "Object", "description": "Empty UI_EVENTS.", "guessedname": "UI_EVENTS", "guessedtype": "property"}}, "description": "A base class for TreeData, providing:\n<ul>\n<li>Widget Lifecycle (initializer, renderUI, bindUI, syncUI, destructor)</li>\n<li>Handle the data of the tree</li>\n<li>Basic DOM implementation (append/remove/insert)</li>\n<li>Indexing management to handle the children nodes</li>\n</ul>\nCheck the list of <a href=\"TreeData.html#configattributes\">Configuration Attributes</a> available for\nTreeData."}, "Textboxlist": {"name": "Textboxlist", "constructors": [{"params": [{"type": "Object", "name": "config", "description": "  Object literal specifying widget configuration properties."}], "description": "A base class for Textboxlist, providing:\n<ul>\n<li>Widget Lifecycle (initializer, renderUI, bindUI, syncUI, destructor)</li>\n<li>Text box list</li>\n</ul>\nCheck the list of <a href=\"Textboxlist.html#configattributes\">Configuration Attributes</a> available for\nTextboxlist."}], "namespace": "", "module": "aui-textboxlist", "guessedname": "TextboxList", "methods": {"bindUI": {"protected": "", "description": "Bind the events on the Textboxlist UI. Lifecycle.", "guessedname": "bindUI", "guessedtype": "function"}, "renderUI": {"protected": "", "description": "Create the DOM structure for the Textboxlist. Lifecycle.", "guessedname": "renderUI", "guessedtype": "function"}, "initializer": {"protected": "", "description": "Construction logic executed during Textboxlist instantiation. Lifecycle.", "guessedname": "initializer", "guessedtype": "function"}}, "extends": "AutoComplete", "superclass": "AutoComplete", "file": "aui-textboxlist.js", "guessedtype": "property", "shortname": "Textboxlist", "properties": {"Textboxlist.ATTRS": {"type": "Object", "static": "", "description": "Static property used to define the default attribute\nconfiguration for the Textboxlist.", "guessedname": "ATTRS", "guessedtype": "property"}, "Textboxlist.NAME": {"type": "String", "static": "", "description": "Static property provides a string to identify the class.", "guessedname": "NAME", "guessedtype": "property"}}, "description": "A base class for Textboxlist, providing:\n<ul>\n<li>Widget Lifecycle (initializer, renderUI, bindUI, syncUI, destructor)</li>\n<li>Text box list</li>\n</ul>\nCheck the list of <a href=\"Textboxlist.html#configattributes\">Configuration Attributes</a> available for\nTextboxlist."}, "Editable": {"name": "Editable", "configs": {"formatInput": {"default": "null", "type": "function", "description": "Function to format the input text displayed on the input.", "guessedname": "formatInput", "guessedtype": "property"}, "node": {"type": "Node", "description": "Node to setup the editable.", "guessedname": "node", "guessedtype": "property"}, "icons": {"default": "[]", "type": "Array", "description": "Array with icons for the <a href=\"Toolbar.html\">Toolbar</a>.", "guessedname": "icons", "guessedtype": "property"}, "eventType": {"default": "'click'", "type": "String", "description": "Event type to initialize the editable.", "guessedname": "eventType", "guessedtype": "property"}, "cancelButton": {"default": "Button constructor Object.", "type": "String", "description": "<a href=\"ButtonItem.html\">ButtonItem</a> constructor Object for the\ncancelButton.", "guessedname": "cancelButton", "guessedtype": "property"}, "contentText": {"default": "''", "type": "String", "description": "Content text.", "guessedname": "contentText", "guessedtype": "property"}, "formatOutput": {"default": "null", "type": "function", "description": "Function to format the output text displayed on the input.", "guessedname": "formatOutput", "guessedtype": "property"}, "saveButton": {"default": "Button constructor Object.", "type": "String", "description": "<a href=\"ButtonItem.html\">ButtonItem</a> constructor Object for the\nsaveButton.", "guessedname": "saveButton", "guessedtype": "property"}, "renderTo": {"type": "String | Node", "description": "Node to render the editable.", "guessedname": "renderTo", "guessedtype": "property"}, "inputType": {"default": "'text'", "type": "String", "description": "Type of the input used to edit the <a\nhref=\"Editable.html#config_node\">node</a>.", "guessedname": "inputType", "guessedtype": "property"}}, "constructors": [{"params": [{"type": "Object", "name": "config", "description": "  Object literal specifying widget configuration properties."}], "description": "<p><img src=\"assets/images/aui-editable/main.png\"/></p>\nA base class for Editable, providing:\n<ul>\n<li>Widget Lifecycle (initializer, renderUI, bindUI, syncUI, destructor)</li>\n<li>Edit in place elements</li>\n</ul>\nQuick Example:<br/>\n<pre><code>var instance = new A.Editable({\nnode: '#editor'\n}).render();\n</code></pre>\nCheck the list of <a href=\"Editable.html#configattributes\">Configuration Attributes</a> available for\nEditable."}], "namespace": "", "module": "aui-editable", "events": {"cancelButtonChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "cancelButtonChange", "description": "Fires when the value for the configuration attribute 'cancelButton' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "save": {"preventable": "_defSaveFn", "params": [{"type": "Event.Facade", "name": "event", "description": " The save event."}], "description": "Handles the save event.", "param": "{Event.Facade} event The save event.", "type": "{Event.Custom}"}, "formatInputChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "formatInputChange", "description": "Fires when the value for the configuration attribute 'formatInput' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "startEditing": {"preventable": "_defStartEditingFn", "params": [{"type": "Event.Facade", "name": "event", "description": " The startEditing event."}], "description": "Handles the startEditing event.", "param": "{Event.Facade} event The startEditing event.", "type": "{Event.Custom}"}, "renderToChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "renderToChange", "description": "Fires when the value for the configuration attribute 'renderTo' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "nodeChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "nodeChange", "description": "Fires when the value for the configuration attribute 'node' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "stopEditing": {"preventable": "_defStopEditingFn", "params": [{"type": "Event.Facade", "name": "event", "description": " The stopEditing event."}], "description": "Handles the stopEditing event.", "param": "{Event.Facade} event The stopEditing event.", "type": "{Event.Custom}"}, "saveButtonChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "saveButtonChange", "description": "Fires when the value for the configuration attribute 'saveButton' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "eventTypeChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "eventTypeChange", "description": "Fires when the value for the configuration attribute 'eventType' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "cancel": {"preventable": "_defCancelFn", "params": [{"type": "Event.Facade", "name": "event", "description": " The cancel event."}], "description": "Handles the cancel event.", "param": "{Event.Facade} event The cancel event.", "type": "{Event.Custom}"}, "inputTypeChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "inputTypeChange", "description": "Fires when the value for the configuration attribute 'inputType' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "formatOutputChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "formatOutputChange", "description": "Fires when the value for the configuration attribute 'formatOutput' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "iconsChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "iconsChange", "description": "Fires when the value for the configuration attribute 'icons' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "contentTextChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "contentTextChange", "description": "Fires when the value for the configuration attribute 'contentText' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "guessedname": "Editable", "methods": {"_createEvents": {"protected": "", "description": "Create the Events.", "guessedname": "_createEvents", "guessedtype": "function"}, "_defCancelFn": {"description": "Fires the cancel event.", "param": "{EventFacade} event cancel event facade", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": " cancel event facade"}], "guessedname": "_defCancelFn", "guessedtype": "function"}, "syncUI": {"protected": "", "description": "Sync the Editable UI. Lifecycle.", "guessedname": "syncUI", "guessedtype": "function"}, "_onKeypressEditable": {"description": "Fires <code>onkeypress</code> occurs on the editable element.", "param": "{EventFacade} event", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "guessedname": "_onKeypressEditable", "guessedtype": "function"}, "_onMouseEnterEditable": {"description": "Fires <code>onmouseenter</code> occurs on the editable element.", "param": "{EventFacade} event", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "guessedname": "_onMouseEnterEditable", "guessedtype": "function"}, "_toText": {"return": {"type": "String", "description": ""}, "description": "Converts HTML to text.", "param": "{String} text HTML input.", "protected": "", "params": [{"type": "String", "name": "text", "description": " HTML input."}], "guessedname": "_toText", "guessedtype": "function"}, "_toHTML": {"return": {"type": "String", "description": ""}, "description": "Converts the new lines <code>\\n</code> to <code><br/></code> (i.e.,\nnl2br).", "param": "{String} text Input text.", "protected": "", "params": [{"type": "String", "name": "text", "description": " Input text."}], "guessedname": "_toHTML", "guessedtype": "function"}, "_startEditing": {"description": "Fires when start editing.", "param": "{EventFacade} event", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "guessedname": "_startEditing", "guessedtype": "function"}, "initializer": {"protected": "", "description": "Construction logic executed during Editable instantiation. Lifecycle.", "guessedname": "initializer", "guessedtype": "function"}, "_defSaveFn": {"description": "Fires the save event.", "param": "{EventFacade} event save event facade", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": " save event facade"}], "guessedname": "_defSaveFn", "guessedtype": "function"}, "_defStartEditingFn": {"description": "Fires the startEditing event.", "param": "{EventFacade} event startEditing event facade", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": " startEditing event facade"}], "guessedname": "_defStartEditingFn", "guessedtype": "function"}, "_setOutput": {"description": "Set the <code>innerHTML</code> of the <a\nhref=\"Editable.html#config_node\">node</a>.", "param": "{String} value", "protected": "", "params": [{"type": "String", "name": "value", "description": ""}], "guessedname": "_setOutput", "guessedtype": "function"}, "_afterFocusedChangeEditable": {"description": "Fires the <a href=\"Editable.html#event_stopEditing\">stopEditing</a>\nevent.", "param": "{EventFacade} event", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "guessedname": "_afterFocusedChangeEditable", "guessedtype": "function"}, "_syncContentText": {"description": "Sync the content text.", "param": "{EventFacade} event", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "guessedname": "_syncContentText", "guessedtype": "function"}, "cancel": {"description": "Cancel the editable. Return to the original state.", "guessedname": "cancel", "guessedtype": "function"}, "bindUI": {"protected": "", "description": "Bind the events on the Editable UI. Lifecycle.", "guessedname": "bindUI", "guessedtype": "function"}, "_setInput": {"description": "Set the value of the <a\nhref=\"Editable.html#property_inputNode\">inputNode</a>.", "param": "{String} value Value of the input.", "protected": "", "params": [{"type": "String", "name": "value", "description": " Value of the input."}], "guessedname": "_setInput", "guessedtype": "function"}, "save": {"description": "Save the editable. Fires the\n<a href=\"Editable.html#event_save\">save</a> event.", "guessedname": "save", "guessedtype": "function"}, "_defStopEditingFn": {"description": "Fires the stopEditing event.", "param": "{EventFacade} event stopEditing event facade", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": " stopEditing event facade"}], "guessedname": "_defStopEditingFn", "guessedtype": "function"}, "renderUI": {"protected": "", "description": "Create the DOM structure for the Editable. Lifecycle.", "guessedname": "renderUI", "guessedtype": "function"}, "_onMouseLeaveEditable": {"description": "Fires <code>onmouseleave</code> occurs on the editable element.", "param": "{EventFacade} event", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "guessedname": "_onMouseLeaveEditable", "guessedtype": "function"}}, "extends": "Component", "superclass": "Component", "file": "aui-editable.js", "guessedtype": "property", "shortname": "Editable", "properties": {"Editable.ATTRS": {"type": "Object", "static": "", "description": "Static property used to define the default attribute\nconfiguration for the Editable.", "guessedname": "ATTRS", "guessedtype": "property"}, "Editable.NAME": {"type": "String", "static": "", "description": "Static property provides a string to identify the class.", "guessedname": "NAME", "guessedtype": "property"}}, "description": "<p><img src=\"assets/images/aui-editable/main.png\"/></p>\nA base class for Editable, providing:\n<ul>\n<li>Widget Lifecycle (initializer, renderUI, bindUI, syncUI, destructor)</li>\n<li>Edit in place elements</li>\n</ul>\nQuick Example:<br/>\n<pre><code>var instance = new A.Editable({\nnode: '#editor'\n}).render();\n</code></pre>\nCheck the list of <a href=\"Editable.html#configattributes\">Configuration Attributes</a> available for\nEditable."}, "Selector": {"name": "Selector", "for": "Selector", "namespace": "", "module": "dom", "methods": {"query": {"return": {"type": "Array", "description": "An array of nodes that match the given selector."}, "description": "Retrieves a set of nodes based on a given CSS selector.", "param": "{string} selector The CSS Selector to test the node against.", "static": "", "guessedname": "query", "guessedtype": "function", "params": [{"type": "string", "name": "selector", "description": " The CSS Selector to test the node against."}, {"type": "HTMLElement", "name": "root", "description": " optional An HTMLElement to start the query from. Defaults to Y.config.doc"}, {"type": "Boolean", "name": "firstOnly", "description": " optional Whether or not to return only the first match."}]}, "ancestor": {"return": {"type": "HTMLElement", "description": "The ancestor node matching the selector, or null."}, "description": "A convenience function to emulate Y.Node's aNode.ancestor(selector).", "param": "{HTMLElement} element An HTMLElement to start the query from.", "static": "", "guessedname": "ancestor", "guessedtype": "function", "params": [{"type": "HTMLElement", "name": "element", "description": " An HTMLElement to start the query from."}, {"type": "String", "name": "selector", "description": " The CSS selector to test the node against."}, {"type": "Boolean", "name": "testSelf", "description": " optional Whether or not to include the element in the scan"}]}, "_tokenize": {"description": "Break selector into token units per simple selector.\nCombinator is attached to the previous token.", "guessedname": "_tokenize", "guessedtype": "function"}}, "static": "", "file": "selector.js", "shortname": "Selector", "properties": {"shorthand": {"type": "object", "description": "Mapping of shorthand tokens to corresponding attribute selector", "guessedname": "shorthand", "guessedtype": "property"}, "operators": {"type": "object", "description": "List of operators and corresponding boolean functions. \nThese functions are passed the attribute and the current node's value of the attribute.", "guessedname": "operators", "guessedtype": "property"}, "PARENT_NODE": {"description": "Provides helper methods for collecting and filtering DOM elements.", "guessedname": "PARENT_NODE", "guessedtype": "property"}}, "description": "Provides support for using CSS selectors to query the DOM"}, "DataSourceXMLSchema": {"name": "DataSourceXMLSchema", "namespace": "", "module": "datasource", "guessedname": "DataSourceXMLSchema", "methods": {"_beforeDefDataFn\n<dl>\n<dt>tId (Number)</dt> <dd>Unique transaction ID.</dd>\n<dt>request (Object)</dt> <dd>The request.</dd>\n<dt>callback (Object)</dt> <dd>The callback object with the following properties:\n<dl>\n<dt>success (Function)</dt> <dd>Success handler.</dd>\n<dt>failure (Function)</dt> <dd>Failure handler.</dd>\n</dl>\n</dd>\n<dt>data (Object)</dt> <dd>Raw data.</dd>\n</dl>": {"protected": "", "description": "Parses raw data into a normalized response.", "guessedname": "_beforeDefDataFn", "guessedtype": "function"}, "initializer": {"description": "Internal init() handler.", "param": "config {Object} Config object.", "params": [{"type": "Object", "name": "config", "description": "  Config object."}], "private": "", "guessedname": "initializer", "guessedtype": "function"}}, "extends": "Plugin.Base", "superclass": "Plugin.Base", "file": "datasource.js", "guessedtype": "function", "shortname": "DataSourceXMLSchema", "properties": {"NS": {"description": "The namespace for the plugin. This will be the property on the host which\nreferences the plugin instance.", "value": "\"schema\"", "static": "", "guessedname": "NS", "guessedtype": "property", "type": "String", "final": ""}, "NAME": {"description": "Class name.", "value": "\"dataSourceXMLSchema\"", "static": "", "guessedname": "NAME", "guessedtype": "property", "type": "String", "final": ""}}, "description": "Adds schema-parsing to the DataSource Utility."}, "Plugin.Align": {"name": "Plugin.Align", "namespace": "", "module": "align-plugin", "methods": {"to": {"parm": "region {String || Node || HTMLElement || Object} The node or\nregion to align with. Defaults to the viewport region.", "description": "Aligns node with a point on another node or region.\nPossible alignment points are:\n<dl>\n<dt>tl</dt>\n<dd>top left</dd>\n<dt>tr</dt>\n<dd>top right</dd>\n<dt>bl</dt>\n<dd>bottom left</dd>\n<dt>br</dt>\n<dd>bottom right</dd>\n<dt>tc</dt>\n<dd>top center</dd>\n<dt>bc</dt>\n<dd>bottom center</dd>\n<dt>rc</dt>\n<dd>right center</dd>\n<dt>lc</dt>\n<dd>left center</dd>\n<dt>cc</dt>\n<dd>center center</dd>\n</dl>", "guessedname": "to", "guessedtype": "function"}, "center": {"parm": "region {Node || HTMLElement || Object} optional The node or\nregion to align with. Defaults to the viewport region.\nthe window is resized. If centering to viewport, this defaults\nto true, otherwise default is false.", "description": "Aligns the center of a node to the center of another node or region.", "guessedname": "center", "guessedtype": "function"}, "destroy": {"description": "Removes the resize handler, if any. This is called automatically\nwhen unplugged from the host node.", "guessedname": "destroy", "guessedtype": "function"}}, "param": "{Object} User configuration object", "file": "align-plugin.js", "shortname": "Plugin.Align", "description": "Node plugin which can be used to align a node with another node,\nregion, or the viewport."}, "DD.Drop": {"name": "DD.Drop", "configs": {"node": {"type": "Node", "description": "Y.Node instanace to use as the element to make a Drop Target", "guessedname": "node", "guessedtype": "property"}, "useShim": {"deprecated": "", "type": "Boolean", "description": "Use the Drop shim. Default: true", "guessedname": "useShim", "guessedtype": "property"}, "padding": {"type": "String", "description": "CSS style padding to make the Drop Target bigger than the node.", "guessedname": "padding", "guessedtype": "property"}, "groups": {"type": "Array", "description": "Array of groups to add this drop into.", "guessedname": "groups", "guessedtype": "property"}, "lock": {"type": "Boolean", "description": "Set to lock this drop element.", "guessedname": "lock", "guessedtype": "property"}, "bubbles": {"deprecated": "", "type": "Object", "description": "Controls the default bubble parent for this Drop instance. Default: Y.DD.DDM. Set to false to disable bubbling. Use bubbleTargets in config.", "guessedname": "bubbles", "guessedtype": "property"}}, "constructors": [{"description": "Provides the ability to create a Drop Target."}], "namespace": "DD", "module": "dd", "properties": {"_groups": {"guessedname": "_groups", "type": "Array", "description": "The groups this target belongs to.", "private": "", "guessedtype": "property"}, "_valid": {"guessedname": "_valid", "type": "Boolean", "description": "Flag for determining if the target is valid in this operation.", "private": "", "guessedtype": "property"}, "shim": {"type": "{Object}", "description": "Node reference to the targets shim", "guessedname": "shim", "guessedtype": "property"}, "region": {"type": "Object", "description": "A region object associated with this target, used for checking regions while dragging.", "guessedname": "region", "guessedtype": "property"}, "_bubbleTargets": {"private": "", "description": "The default bubbleTarget for this object. Default: Y.DD.DDM", "guessedname": "_bubbleTargets", "guessedtype": "property"}, "overTarget": {"type": "Boolean", "description": "This flag is tripped when a drag element is over this target.", "guessedname": "overTarget", "guessedtype": "property"}}, "guessedname": "NODE", "methods": {"addToGroup": {"return": {"type": "Self", "description": ""}, "description": "Add this Drop instance to a group, this should be used for on-the-fly group additions.", "chainable": "", "param": "{String} g The group to add this Drop Instance to.", "params": [{"type": "String", "name": "g", "description": " The group to add this Drop Instance to."}], "guessedname": "addToGroup", "guessedtype": "function"}, "_handleOverTarget": {"description": "This handles the over target call made from this object or from the DDM", "private": "", "guessedname": "_handleTargetOver", "guessedtype": "function"}, "removeFromGroup": {"return": {"type": "Self", "description": ""}, "description": "Remove this Drop instance from a group, this should be used for on-the-fly group removals.", "chainable": "", "param": "{String} g The group to remove this Drop Instance from.", "params": [{"type": "String", "name": "g", "description": " The group to remove this Drop Instance from."}], "guessedname": "removeFromGroup", "guessedtype": "function"}, "_createEvents": {"description": "This method creates all the events for this Event Target and publishes them so we get Event Bubbling.", "private": "", "guessedname": "_createEvents", "guessedtype": "function"}, "_handleOut": {"description": "Handles out of target calls/checks", "private": "", "guessedname": "_handleOut", "guessedtype": "function"}, "sizeShim": {"description": "Positions and sizes the shim with the raw data from the node, this can be used to programatically adjust the Targets shim for Animation..", "guessedname": "sizeShim", "guessedtype": "function"}, "initializer": {"description": "Private lifecycle method", "private": "", "guessedname": "initializer", "guessedtype": "function"}, "_handleOutEvent": {"description": "Handles the mouseout DOM event on the Target Shim", "private": "", "guessedname": "_handleOutEvent", "guessedtype": "function"}, "_createShim": {"description": "Creates the Target shim and adds it to the DDM's playground..", "private": "", "guessedname": "_createShim", "guessedtype": "function"}, "inGroup": {"return": {"type": "", "description": "Boolean"}, "description": "Check if this target is in one of the supplied groups.", "param": "{Array} groups The groups to check against", "params": [{"type": "Array", "name": "groups", "description": " The groups to check against"}], "guessedname": "inGroup", "guessedtype": "function"}, "_activateShim": {"description": "Activates the shim and adds some interaction CSS classes", "private": "", "guessedname": "_activateShim", "guessedtype": "function"}, "_deactivateShim": {"description": "Removes classes from the target, resets some flags and sets the shims deactive position [-999, -999]", "private": "", "guessedname": "_deactivateShim", "guessedtype": "function"}, "destructor": {"description": "Lifecycle destructor, unreg the drag from the DDM and remove listeners", "private": "", "guessedname": "destructor", "guessedtype": "function"}, "_handleOverEvent": {"description": "Handles the mouseover DOM event on the Target Shim", "private": "", "guessedname": "_handleOverEvent", "guessedtype": "function"}}, "extends": "Base", "superclass": "Base", "file": "dd.js", "guessedtype": "property", "shortname": "Drop", "events": {"paddingChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "paddingChange", "description": "Fires when the value for the configuration attribute 'padding' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "groupsChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "groupsChange", "description": "Fires when the value for the configuration attribute 'groups' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "drop:enter": {"description": "Fires when a drag element enters this target.", "param": "{Event.Facade} event An Event Facade object with the following specific property added:\n<dl>\n<dt>drop</dt><dd>The drop object at the time of the event.</dd>\n<dt>drag</dt><dd>The drag object at the time of the event.</dd>\n</dl>", "params": [{"type": "Event.Facade", "name": "event", "description": " An Event Facade object with the following specific property added:\n<dl>\n<dt>drop</dt><dd>The drop object at the time of the event.</dd>\n<dt>drag</dt><dd>The drag object at the time of the event.</dd>\n</dl>"}], "guessedname": "EV_DROP_ENTER", "guessedtype": "property", "bubbles": "DDM", "type": "{Event.Custom}"}, "bubblesChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "bubblesChange", "description": "Fires when the value for the configuration attribute 'bubbles' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "drop:over": {"description": "Fires when a drag element is over this target.", "param": "{Event.Facade} event An Event Facade object with the following specific property added:\n<dl>\n<dt>drop</dt><dd>The drop object at the time of the event.</dd>\n<dt>drag</dt><dd>The drag object at the time of the event.</dd>\n</dl>", "params": [{"type": "Event.Facade", "name": "event", "description": " An Event Facade object with the following specific property added:\n<dl>\n<dt>drop</dt><dd>The drop object at the time of the event.</dd>\n<dt>drag</dt><dd>The drag object at the time of the event.</dd>\n</dl>"}], "guessedname": "EV_DROP_OVER", "guessedtype": "property", "bubbles": "DDM", "type": "{Event.Custom}"}, "nodeChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "nodeChange", "description": "Fires when the value for the configuration attribute 'node' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "drop:hit": {"description": "Fires when a draggable node is dropped on this Drop Target. (Fired from dd-ddm-drop)", "param": "{Event.Facade} event An Event Facade object with the following specific property added:\n<dl>\n<dt>drop</dt><dd>The best guess on what was dropped on.</dd>\n<dt>drag</dt><dd>The drag object at the time of the event.</dd>\n<dt>others</dt><dd>An array of all the other drop targets that was dropped on.</dd>\n</dl>", "params": [{"type": "Event.Facade", "name": "event", "description": " An Event Facade object with the following specific property added:\n<dl>\n<dt>drop</dt><dd>The best guess on what was dropped on.</dd>\n<dt>drag</dt><dd>The drag object at the time of the event.</dd>\n<dt>others</dt><dd>An array of all the other drop targets that was dropped on.</dd>\n</dl>"}], "guessedname": "Drop", "guessedtype": "function", "bubbles": "DDM", "type": "{Event.Custom}"}, "useShimChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "useShimChange", "description": "Fires when the value for the configuration attribute 'useShim' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "lockChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "lockChange", "description": "Fires when the value for the configuration attribute 'lock' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "drop:exit": {"description": "Fires when a drag element exits this target.", "param": "{Event.Facade} event An Event Facade object", "params": [{"type": "Event.Facade", "name": "event", "description": " An Event Facade object"}], "guessedname": "EV_DROP_EXIT", "guessedtype": "property", "bubbles": "DDM", "type": "{Event.Custom}"}}, "description": "Provides the ability to create a Drop Target."}, "NestedList": {"name": "NestedList", "constructors": [{"params": [{"type": "Object", "name": "config", "description": "  Object literal specifying widget configuration properties."}], "description": "A base class for NestedList, providing:\n<ul>\n<li>Widget Lifecycle (initializer, renderUI, bindUI, syncUI, destructor)</li>\n<li>Nested sortable utility</li>\n</ul>\nQuick Example:<br/>\n<pre><code>var nl = new A.NestedList({\nnodes: '#demo li',\ndropContainer: 'ul.droppable'\n});\n</code></pre>\nCheck the list of <a href=\"NestedList.html#configattributes\">Configuration Attributes</a> available for\nNestedList."}], "namespace": "", "module": "aui-nested-list", "guessedname": "NestedList", "methods": {"initializer": {"protected": "", "description": "Construction logic executed during NestedList instantiation. Lifecycle.", "guessedname": "initializer", "guessedtype": "function"}}, "extends": "Base", "superclass": "Base", "file": "aui-nested-list.js", "guessedtype": "property", "shortname": "NestedList", "properties": {"NestedList.ATTRS": {"type": "Object", "static": "", "description": "Static property used to define the default attribute\nconfiguration for the NestedList.", "guessedname": "ATTRS", "guessedtype": "property"}, "NestedList.NAME": {"type": "String", "static": "", "description": "Static property provides a string to identify the class.", "guessedname": "NAME", "guessedtype": "property"}}, "description": "A base class for NestedList, providing:\n<ul>\n<li>Widget Lifecycle (initializer, renderUI, bindUI, syncUI, destructor)</li>\n<li>Nested sortable utility</li>\n</ul>\nQuick Example:<br/>\n<pre><code>var nl = new A.NestedList({\nnodes: '#demo li',\ndropContainer: 'ul.droppable'\n});\n</code></pre>\nCheck the list of <a href=\"NestedList.html#configattributes\">Configuration Attributes</a> available for\nNestedList."}, "OverlayBase": {"name": "OverlayBase", "constructors": [{"params": [{"type": "Object", "name": "object", "description": " The user configuration for the instance."}], "description": "A basic Overlay Widget, which can be positioned based on Page XY co-ordinates and is stackable (z-index support).\nIt also provides alignment and centering support and uses a standard module format for it's content, with header,\nbody and footer section support."}], "namespace": "", "module": "aui-overlay", "guessedname": "OverlayBase", "uses": ["WidgetStdMod", "WidgetPosition", "WidgetStack", "WidgetPositionAlign", "WidgetPositionConstrain"], "superclass": "Component", "file": "aui-overlay.js", "guessedtype": "property", "extends": "Component", "shortname": "OverlayBase", "description": "A basic Overlay Widget, which can be positioned based on Page XY co-ordinates and is stackable (z-index support).\nIt also provides alignment and centering support and uses a standard module format for it's content, with header,\nbody and footer section support."}, "DataType.Number": {"name": "DataType.Number", "description": "DataType.Number provides a set of utility functions to operate against Number objects.", "namespace": "", "module": "datatype", "guessedname": "LANG", "static": "", "file": "datatype-debug.js", "guessedtype": "property", "shortname": "DataType.Number", "methods": {"parse": {"return": {"type": "Number", "description": "A number, or null."}, "params": [{"type": "String | Number | Boolean", "name": "data", "description": "  Data to convert. The following\nvalues return as null: null, undefined, NaN, \"\"."}], "description": "Converts data to type Number.", "guessedname": "parse", "guessedtype": "function"}, "format": {"return": {"type": "String", "description": "Formatted number for display. Note, the following values\nreturn as \"\": null, undefined, NaN, \"\"."}, "params": [{"type": "Number", "name": "data", "description": "  Number."}, {"type": "Object} (Optional) Optional configuration values:\n<dl>\n<dt>prefix {String}</dd>\n<dd>String prepended before each number, like a currency designator \"$\"</dd>\n<dt>decimalPlaces {Number}</dd>\n<dd>Number of decimal places to round. Must be a number 0 to 20.</dd>\n<dt>decimalSeparator {String}</dd>\n<dd>Decimal separator</dd>\n<dt>thousandsSeparator {String}</dd>\n<dd>Thousands separator</dd>\n<dt>suffix {String", "name": "config", "description": " </dd>\n<dd>String appended after each number, like \" items\" (note the space)</dd>\n</dl>"}], "description": "Takes a Number and formats to string for display to user.", "guessedname": "format", "guessedtype": "function"}}}, "DataSourceArraySchema": {"name": "DataSourceArraySchema", "namespace": "", "module": "datasource", "guessedname": "DataSourceArraySchema", "methods": {"_beforeDefDataFn\n<dl>\n<dt>tId (Number)</dt> <dd>Unique transaction ID.</dd>\n<dt>request (Object)</dt> <dd>The request.</dd>\n<dt>callback (Object)</dt> <dd>The callback object with the following properties:\n<dl>\n<dt>success (Function)</dt> <dd>Success handler.</dd>\n<dt>failure (Function)</dt> <dd>Failure handler.</dd>\n</dl>\n</dd>\n<dt>data (Object)</dt> <dd>Raw data.</dd>\n</dl>": {"protected": "", "description": "Parses raw data into a normalized response.", "guessedname": "_beforeDefDataFn", "guessedtype": "function"}, "initializer": {"description": "Internal init() handler.", "param": "config {Object} Config object.", "params": [{"type": "Object", "name": "config", "description": "  Config object."}], "private": "", "guessedname": "initializer", "guessedtype": "function"}}, "extends": "Plugin.Base", "superclass": "Plugin.Base", "file": "datasource.js", "guessedtype": "function", "shortname": "DataSourceArraySchema", "properties": {"NS": {"description": "The namespace for the plugin. This will be the property on the host which\nreferences the plugin instance.", "value": "\"schema\"", "static": "", "guessedname": "NS", "guessedtype": "property", "type": "String", "final": ""}, "NAME": {"description": "Class name.", "value": "\"dataSourceArraySchema\"", "static": "", "guessedname": "NAME", "guessedtype": "property", "type": "String", "final": ""}}, "description": "Adds schema-parsing to the DataSource Utility."}, "A.io": {"name": "A.io", "namespace": "", "module": "aui-io", "methods": {"A.io.request": {"return": {"type": "IORequest", "description": ""}, "description": "Static method to invoke the <a href=\"IORequest.html\">IORequest</a>. Likewise <a href=\"io.html#method_io\">io</a>.", "param": "{String} uri URI to be requested.", "params": [{"type": "String", "name": "uri", "description": " URI to be requested."}, {"type": "Object", "name": "config", "description": " Configuration Object for the <a href=\"io.html\">IO</a>."}], "guessedname": "request", "guessedtype": "function"}}, "static": "", "file": "aui-io.js", "shortname": "A.io", "description": "Alloy IO extension"}, "DialogManager": {"name": "DialogManager", "constructors": [{"params": [{"type": "Object", "name": "config", "description": "  Object literal specifying widget configuration properties."}], "description": "A base class for DialogManager:"}], "namespace": "", "module": "aui-dialog", "guessedname": "DialogManager", "methods": {"refreshByChild": {"param": "{Node | String} child Child node of the Dialog.", "params": [{"type": "Node | String", "name": "child", "description": " Child node of the Dialog."}], "description": "<p>Invoke the <a href=\"IOPlugin.html#method_start\">start</a> method\nfrom the <a href=\"IOPlugin.html\">IOPlugin</a> plugged on this Dialog\ninstance. If there is no IOPlugin plugged it does nothing.</p>\nExample:\n<pre><code>A.DialogManager.refreshByChild('#dialogContent1');</code></pre>", "guessedname": "refreshByChild", "guessedtype": "function"}, "closeByChild": {"return": {"type": "Dialog", "description": ""}, "description": "<p>Invoke the <a href=\"Dialog.html#method_close\">close</a> method from\nthe Dialog which contains the <code>child</code> element.</p>\nExample:\n<pre><code>A.DialogManager.closeByChild('#dialogContent1');</code></pre>", "param": "{Node | String} child Child node of the Dialog.", "params": [{"type": "Node | String", "name": "child", "description": " Child node of the Dialog."}], "guessedname": "closeByChild", "guessedtype": "function"}, "findByChild": {"return": {"type": "Widget", "description": ""}, "description": "Find the <a href=\"Widget.html\">Widget</a> instance based on a child\nelement.", "param": "{Node | String} child Child node of the Dialog.", "params": [{"type": "Node | String", "name": "child", "description": " Child node of the Dialog."}], "guessedname": "findByChild", "guessedtype": "function"}}, "static": "", "superclass": "OverlayManager", "file": "aui-dialog.js", "guessedtype": "property", "extends": "OverlayManager", "shortname": "DialogManager", "description": "A base class for DialogManager:"}, "Profiler": {"name": "Profiler", "namespace": "", "module": "profiler", "guessedname": "Profiler", "methods": {"getFunctionReport": {"return": {"type": "Object", "description": "An object containing profile data for a given function."}, "description": "Returns an object containing profiling data for a single function.\nThe object has an entry for min, max, avg, calls, and points).", "deprecated": "Use getReport() instead.", "static": "", "guessedname": "getFunctionReport", "guessedtype": "function"}, "pause": {"return": {"type": "Void", "description": ""}, "description": "Pauses profiling information for a given name.", "param": "{String} name The name of the data point.", "static": "", "guessedname": "pause", "guessedtype": "function", "params": [{"type": "String", "name": "name", "description": " The name of the data point."}]}, "getReport": {"static": "", "return": {"type": "Object", "description": "An object containing profile data for a given function."}, "description": "Returns an object containing profiling data for a single function.\nThe object has an entry for min, max, avg, calls, and points).", "guessedname": "getReport", "guessedtype": "function"}, "start": {"return": {"type": "Void", "description": ""}, "description": "Start profiling information for a given name. The name cannot be the name\nof a registered function or object. This is used to start timing for a\nparticular block of code rather than instrumenting the entire function.", "param": "{String} name The name of the data point.", "static": "", "guessedname": "start", "guessedtype": "function", "params": [{"type": "String", "name": "name", "description": " The name of the data point."}]}, "getFullReport": {"static": "", "return": {"type": "Object", "description": "An object containing all profile data."}, "description": "Returns an object containing profiling data for all of the functions \nthat were profiled. The object has an entry for each function and \nreturns all information (min, max, average, calls, etc.) for each\nfunction.", "guessedname": "getFullReport", "guessedtype": "function"}, "unregisterFunction": {"return": {"type": "Void", "description": ""}, "description": "Removes a constructor function from profiling. Reverses the registerConstructor() method.", "param": "{String} name The full name of the function including namespacing. This\nis the name of the function that is stored in the report.", "static": "", "guessedname": "unregisterConstructor", "guessedtype": "function", "params": [{"type": "String", "name": "name", "description": " The full name of the function including namespacing. This\nis the name of the function that is stored in the report."}]}, "clear": {"return": {"type": "Void", "description": ""}, "description": "Removes all report data from the profiler.", "param": "{String} name (Optional) The name of the report to clear. If\nomitted, then all report data is cleared.", "static": "", "guessedname": "clear", "guessedtype": "function", "params": [{"type": "String", "name": "name", "description": " (Optional) The name of the report to clear. If\nomitted, then all report data is cleared."}]}, "stop": {"return": {"type": "Void", "description": ""}, "description": "Stops profiling information for a given name.", "param": "{String} name The name of the data point.", "static": "", "guessedname": "stop", "guessedtype": "function", "params": [{"type": "String", "name": "name", "description": " The name of the data point."}]}, "getCallCount": {"return": {"type": "int", "description": "The number of times the function was called."}, "description": "Returns the number of times that the given function has been called.", "param": "{String} name The name of the function whose data should be returned.", "static": "", "guessedname": "getCallCount", "guessedtype": "function", "params": [{"type": "String", "name": "name", "description": " The name of the function whose data should be returned."}]}, "registerFunction": {"return": {"type": "Void", "description": ""}, "description": "Sets up a function for profiling. It essentially overwrites the function with one\nthat has instrumentation data. This method also creates an entry for the function\nin the profile report. The original function is stored on the container object.", "param": "{String} name The full name of the function including namespacing. This\nis the name of the function that is stored in the report.", "static": "", "guessedname": "registerFunction", "guessedtype": "function", "params": [{"type": "String", "name": "name", "description": " The full name of the function including namespacing. This\nis the name of the function that is stored in the report."}, {"type": "Object", "name": "owner", "description": " (Optional) The object that owns the function. If the function\nisn't global then this argument is required. This could be the namespace that\nthe function belongs to or the object on which it's\na method."}, {"type": "Boolean", "name": "registerPrototype", "description": " (Optional) Indicates that the prototype should\nalso be instrumented. Setting to true has the same effect as calling\nregisterConstructor()."}]}, "instrument": {"return": {"type": "Function", "description": "An instrumented version of the function."}, "description": "Instruments a method to have profiling calls.", "param": "{String} name The name of the report for the function.", "static": "", "guessedname": "instrument", "guessedtype": "function", "params": [{"type": "String", "name": "name", "description": " The name of the report for the function."}, {"type": "Function", "name": "method", "description": " The function to instrument."}]}, "getOriginal": {"return": {"type": "Function|Object", "description": "The uninstrumented version of a function/object."}, "description": "Returns the uninstrumented version of a function/object.", "param": "{String} name The name of the function/object to retrieve.", "static": "", "guessedname": "getOriginal", "guessedtype": "function", "params": [{"type": "String", "name": "name", "description": " The name of the function/object to retrieve."}]}, "getAverage": {"return": {"type": "float", "description": "The average time it takes the function to execute."}, "description": "Returns the average amount of time (in milliseconds) that the function\nwith the given name takes to execute.", "param": "{String} name The name of the function whose data should be returned.\nIf an object type method, it should be 'constructor.prototype.methodName';\na normal object method would just be 'object.methodName'.", "static": "", "guessedname": "getAverage", "guessedtype": "function", "params": [{"type": "String", "name": "name", "description": " The name of the function whose data should be returned.\nIf an object type method, it should be 'constructor.prototype.methodName';\na normal object method would just be 'object.methodName'."}]}, "getMin": {"return": {"type": "float", "description": "The minimum time it takes the function to execute."}, "description": "Returns the minimum amount of time (in milliseconds) that the function\nwith the given name takes to execute.", "param": "{String} name The name of the function whose data should be returned.\nIf an object type method, it should be 'constructor.prototype.methodName';\na normal object method would just be 'object.methodName'.", "static": "", "guessedname": "getMin", "guessedtype": "function", "params": [{"type": "String", "name": "name", "description": " The name of the function whose data should be returned.\nIf an object type method, it should be 'constructor.prototype.methodName';\na normal object method would just be 'object.methodName'."}]}, "unregisterObject": {"return": {"type": "Void", "description": ""}, "description": "Unregisters an object for profiling. It takes the object and looks for functions.\nWhen a function is found, unregisterMethod() is called on it. If set to recrusive\nmode, it will also unregister objects found inside of this object, \nusing the same methodology.", "param": "{String} name The name of the object to unregister.", "static": "", "guessedname": "unregisterObject", "guessedtype": "function", "params": [{"type": "String", "name": "name", "description": " The name of the object to unregister."}, {"type": "Boolean", "name": "recurse", "description": " (Optional) Determines if subobject methods should also be\nunregistered."}]}, "getMax": {"return": {"type": "float", "description": "The maximum time it takes the function to execute."}, "description": "Returns the maximum amount of time (in milliseconds) that the function\nwith the given name takes to execute.", "param": "{String} name The name of the function whose data should be returned.\nIf an object type method, it should be 'constructor.prototype.methodName';\na normal object method would just be 'object.methodName'.", "static": "", "guessedname": "getMax", "guessedtype": "function", "params": [{"type": "String", "name": "name", "description": " The name of the function whose data should be returned.\nIf an object type method, it should be 'constructor.prototype.methodName';\na normal object method would just be 'object.methodName'."}]}, "registerConstructor": {"return": {"type": "Void", "description": ""}, "description": "Sets up a constructor for profiling, including all properties and methods on the prototype.", "param": "{string} name The fully-qualified name of the function including namespace information.", "static": "", "guessedname": "registerConstructor", "guessedtype": "function", "params": [{"type": "string", "name": "name", "description": " The fully-qualified name of the function including namespace information."}, {"type": "Object", "name": "owner", "description": " (Optional) The object that owns the function (namespace or containing object)."}]}, "registerObject": {"return": {"type": "Void", "description": ""}, "description": "Sets up an object for profiling. It takes the object and looks for functions.\nWhen a function is found, registerMethod() is called on it. If set to recrusive\nmode, it will also setup objects found inside of this object for profiling, \nusing the same methodology.", "param": "{String} name The name of the object to profile (shows up in report).", "static": "", "guessedname": "registerObject", "guessedtype": "function", "params": [{"type": "String", "name": "name", "description": " The name of the object to profile (shows up in report)."}, {"type": "Object", "name": "owner", "description": " (Optional) The object represented by the name."}, {"type": "Boolean", "name": "recurse", "description": " (Optional) Determines if subobject methods are also profiled."}]}}, "static": "", "file": "profiler.js", "guessedtype": "property", "shortname": "Profiler", "description": "Profiles functions in JavaScript."}, "Queue": {"name": "Queue", "namespace": "", "module": "yui", "methods": {"last": {"return": {"type": "MIXED", "description": "the last item in the queue"}, "description": "Get the last in the queue. LIFO support", "guessedname": "last", "guessedtype": "function"}, "indexOf": {"return": {"type": "Number", "description": "the index of the item or -1 if not found"}, "description": "Returns the current index in the queue of the specified item", "param": "needle {MIXED} the item to search for", "params": [{"type": "MIXED", "name": "needle", "description": "  the item to search for"}], "guessedname": "indexOf", "guessedtype": "function"}, "_init": {"protected": "", "description": "Initialize the queue", "guessedname": "_init", "guessedtype": "function"}, "remove": {"param": "item {MIXED} an item in the queue", "params": [{"type": "MIXED", "name": "item", "description": "  an item in the queue"}], "description": "Removes the referenced item from the queue", "guessedname": "remove", "guessedtype": "function"}, "next": {"return": {"type": "MIXED", "description": "the next item in the queue"}, "description": "Get the next item in the queue. FIFO support", "guessedname": "next", "guessedtype": "function"}, "add": {"param": "item* {MIXED} 0..n items", "params": [{"type": "MIXED", "name": "item*", "description": "  0..n items"}], "description": "Add 0..n items to the end of the queue", "guessedname": "add", "guessedtype": "function"}, "promote": {"param": "item {MIXED} an item in the queue", "params": [{"type": "MIXED", "name": "item", "description": "  an item in the queue"}], "description": "Moves the referenced item to the head of the queue", "guessedname": "promote", "guessedtype": "function"}, "size": {"return": {"type": "Number", "description": ""}, "description": "Returns the current number of queued items", "guessedname": "size", "guessedtype": "function"}}, "param": "item* {MIXED} 0..n items to seed the queue", "file": "aui.js", "shortname": "Queue", "properties": {"_q": {"protected": "", "type": "{Array}", "description": "The collection of enqueued items", "guessedname": "_q", "guessedtype": "property"}}, "description": "A simple FIFO queue.  Items are added to the Queue with add(1..n items) and\nremoved using next()."}, "DataSource.IO": {"name": "DataSource.IO", "configs": {"io": {"default": "Y.io", "type": "Y.io", "description": "Pointer to IO Utility.", "guessedname": "io", "guessedtype": "property"}}, "constructors": [{"description": "IO subclass for the DataSource Utility."}], "namespace": "", "module": "datasource", "events": {"ioChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "ioChange", "description": "Fires when the value for the configuration attribute 'io' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "guessedname": "DSIO", "methods": {"_defRequestFn": {"description": "Passes query string to IO. Fires <code>response</code> event when\nresponse is received asynchronously.", "param": "e {Event.Facade} Event Facade with the following properties:\n<dl>\n<dt>tId (Number)</dt> <dd>Unique transaction ID.</dd>\n<dt>request (Object)</dt> <dd>The request.</dd>\n<dt>callback (Object)</dt> <dd>The callback object with the following properties:\n<dl>\n<dt>success (Function)</dt> <dd>Success handler.</dd>\n<dt>failure (Function)</dt> <dd>Failure handler.</dd>\n</dl>\n</dd>\n<dt>cfg (Object)</dt> <dd>Configuration object.</dd>\n</dl>", "protected": "", "params": [{"type": "Event.Facade", "name": "e", "description": "  Event Facade with the following properties:\n<dl>\n<dt>tId (Number)</dt> <dd>Unique transaction ID.</dd>\n<dt>request (Object)</dt> <dd>The request.</dd>\n<dt>callback (Object)</dt> <dd>The callback object with the following properties:\n<dl>\n<dt>success (Function)</dt> <dd>Success handler.</dd>\n<dt>failure (Function)</dt> <dd>Failure handler.</dd>\n</dl>\n</dd>\n<dt>cfg (Object)</dt> <dd>Configuration object.</dd>\n</dl>"}], "guessedname": "_defRequestFn", "guessedtype": "function"}, "initializer": {"description": "Internal init() handler.", "param": "config {Object} Config object.", "params": [{"type": "Object", "name": "config", "description": "  Config object."}], "private": "", "guessedname": "initializer", "guessedtype": "function"}}, "extends": "DataSource.Local", "superclass": "DataSource.Local", "file": "datasource.js", "guessedtype": "function", "shortname": "DataSource.IO", "properties": {"NAME": {"description": "Class name.", "value": "\"dataSourceIO\"", "static": "", "guessedname": "NAME", "guessedtype": "property", "type": "String", "final": ""}, "_queue": {"description": "Object literal to manage asynchronous request/response\ncycles enabled if queue needs to be managed (asyncMode/ioConnMode):\n<dl>\n<dt>interval {Number}</dt>\n<dd>Interval ID of in-progress queue.</dd>\n<dt>conn</dt>\n<dd>In-progress connection identifier (if applicable).</dd>\n<dt>requests {Object[]}</dt>\n<dd>Array of queued request objects: {request:request, callback:callback}.</dd>\n</dl>", "default": "{interval:null, conn:null, requests:[]}", "private": "", "guessedname": "_queue", "guessedtype": "property", "type": "Object"}}, "description": "IO subclass for the DataSource Utility."}, "ImgLoadGroup": {"properties": {"_areFoldTriggersSet": {"guessedname": "_areFoldTriggersSet", "type": "Boolean", "description": "Boolean tracking whether the window scroll and window resize triggers have been set if this is a fold group.", "private": "", "guessedtype": "property"}, "_maxKnownHLimit": {"guessedname": "_maxKnownHLimit", "type": "Int", "description": "The maximum pixel height of the document that has been made visible.\nDuring fold checks, if the user scrolls up then there's no need to check for newly exposed images.", "private": "", "guessedtype": "property"}, "_imgObjs": {"guessedname": "_imgObjs", "type": "Object", "description": "Collection of images (<code>Y.ImgLoadImgObj</code> objects) registered with this group, keyed by DOM id.", "private": "", "guessedtype": "property"}, "_classImageEls": {"guessedname": "_classImageEls", "type": "Array", "description": "DOM elements having the class name that is associated with this group.\nElements are stored during the <code>_foldCheck</code> function and reused later during any subsequent <code>_foldCheck</code> calls - gives a slight performance improvement when the page fold is repeatedly checked.", "private": "", "guessedtype": "property"}, "_triggers": {"guessedname": "_triggers", "type": "Array", "description": "Collection of triggers for this group.\nKeeps track of each trigger's event handle, as returned from <code>Y.on</code>.", "private": "", "guessedtype": "property"}, "_className": {"guessedname": "_className", "type": "String", "description": "Keep the CSS class name in a member variable for ease and speed.", "private": "", "guessedtype": "property"}, "_timeout": {"guessedname": "_timeout", "type": "Object", "description": "Timeout object to keep a handle on the time limit.", "private": "", "guessedtype": "property"}}, "name": "ImgLoadGroup", "constructors": [{"description": "A group for images. A group can have one time limit and a series of triggers. Thus the images belonging to this group must share these constraints."}], "namespace": "", "module": "imageloader", "events": {"foldDistanceChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "foldDistanceChange", "description": "Fires when the value for the configuration attribute 'foldDistance' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "timeLimitChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "timeLimitChange", "description": "Fires when the value for the configuration attribute 'timeLimit' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "classNameChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "classNameChange", "description": "Fires when the value for the configuration attribute 'className' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "nameChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "nameChange", "description": "Fires when the value for the configuration attribute 'name' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "guessedname": "ImgLoadGroup", "methods": {"addCustomTrigger": {"description": "Adds a custom event trigger to the group.", "chainable": "", "param": "{String} name  The name of the event", "params": [{"type": "String", "name": "name", "description": "  The name of the event"}, {"type": "Object", "name": "obj", "description": "  The object on which to attach the event. <code>obj</code> is optional - by default the event is attached to the <code>Y</code> instance"}], "guessedname": "addCustomTrigger", "guessedtype": "function"}, "addTrigger": {"description": "Adds a trigger to the group. Arguments are passed to <code>Y.on</code>.", "chainable": "", "param": "{Object} obj  The DOM object to attach the trigger event to", "params": [{"type": "Object", "name": "obj", "description": "  The DOM object to attach the trigger event to"}, {"type": "String", "name": "type", "description": "  The event type"}], "guessedname": "addTrigger", "guessedtype": "function"}, "_setFoldTriggers": {"private": "", "description": "Sets the window scroll and window resize triggers for any group that is fold-conditional (i.e., has a fold distance set).", "guessedname": "_setFoldTriggers", "guessedtype": "function"}, "_init": {"private": "", "description": "Initialize all private members needed for the group.", "guessedname": "_init", "guessedtype": "function"}, "_clearTriggers": {"private": "", "description": "Clears the timeout and all triggers associated with the group.", "guessedname": "_clearTriggers", "guessedtype": "function"}, "_getFetchTimeout": {"guessedname": "_getFetchTimeout", "return": {"type": "Function", "description": "group's <code>fetch</code> method"}, "description": "Returns the group's <code>fetch</code> method, with the proper closure, for use with <code>setTimeout</code>.", "private": "", "guessedtype": "function"}, "_onloadTasks": {"private": "", "description": "Performs necessary setup at domready time.\nInitiates time limit for group; executes the fold check for the images.", "guessedname": "_onloadTasks", "guessedtype": "function"}, "registerImage": {"return": {"type": "Object", "description": "<code>Y.ImgLoadImgObj</code> that was registered"}, "description": "Registers an image with the group.\nArguments are passed through to a <code>Y.ImgLoadImgObj</code> constructor; see that class' attribute documentation for detailed information. \"<code>domId</code>\" is a required attribute.", "param": "{Object} *  A configuration object literal with attribute name/value pairs  (passed through to a <code>Y.ImgLoadImgObj</code> constructor)", "params": [{"type": "Object", "name": "*", "description": "  A configuration object literal with attribute name/value pairs  (passed through to a <code>Y.ImgLoadImgObj</code> constructor)"}], "guessedname": "registerImage", "guessedtype": "function"}, "_foldCheck": {"private": "", "description": "Checks the position of each image in the group. If any part of the image is within the specified distance (<code>foldDistance</code>) of the client viewport, the image is fetched immediately.", "guessedname": "_foldCheck", "guessedtype": "function"}, "fetch": {"description": "Displays the images in the group.\nThis method is called when a trigger fires or the time limit expires; it shouldn't be called externally, but is not private in the rare event that it needs to be called immediately.", "guessedname": "fetch", "guessedtype": "function"}, "_fetchByClass": {"private": "", "description": "Finds all elements in the DOM with the class name specified in the group. Removes the class from the element in order to let the style definitions trigger the image fetching.", "guessedname": "_fetchByClass", "guessedtype": "function"}}, "extends": "Base", "superclass": "Base", "file": "imageloader.js", "guessedtype": "function", "shortname": "ImgLoadGroup", "configs": {"className": {"type": "String", "description": "Class name that will identify images belonging to the group. This class name will be removed from each element in order to fetch images.\nThis class should have, in its CSS style definition, \"<code>background:none !important;</code>\".", "guessedname": "className", "guessedtype": "property"}, "timeLimit": {"type": "Number", "description": "Time limit, in seconds, after which images are fetched regardless of trigger events.", "guessedname": "timeLimit", "guessedtype": "property"}, "foldDistance": {"type": "Number", "description": "Distance below the fold for which images are loaded. Images are not loaded until they are at most this distance away from (or above) the fold.\nThis check is performed at page load (domready) and after any window scroll or window resize event (until all images are loaded).", "guessedname": "foldDistance", "guessedtype": "property"}, "name": {"type": "String", "description": "Name for the group. Only used to identify the group in logging statements.", "guessedname": "name", "guessedtype": "property"}}, "description": "A group for images. A group can have one time limit and a series of triggers. Thus the images belonging to this group must share these constraints."}, "Test.Wait": {"name": "Test.Wait", "constructors": [{"params": [{"type": "Function", "name": "segment", "description": " A function to run when the wait is over."}, {"type": "int", "name": "delay", "description": " The number of milliseconds to wait before running the code."}], "description": "Represents a stoppage in test execution to wait for an amount of time before\ncontinuing."}], "namespace": "Test", "module": "test", "guessedname": "Wait", "file": "test.js", "guessedtype": "function", "shortname": "Wait", "properties": {"delay": {"type": "int", "description": "The delay before running the segment of code.", "guessedname": "delay", "guessedtype": "property"}, "segment": {"type": "Function", "description": "The segment of code to run when the wait is over.", "guessedname": "segment", "guessedtype": "property"}}, "description": "Represents a stoppage in test execution to wait for an amount of time before\ncontinuing."}, "Do.Halt": {"name": "Do.Halt", "namespace": "", "module": "event-custom", "guessedname": "Halt", "file": "event-custom.js", "guessedtype": "function", "shortname": "Do.Halt", "description": "Return a Halt object when you want to terminate the execution\nof all subsequent subscribers as well as the wrapped method\nif it has not exectued yet."}, "SliderValueRange": {"name": "SliderValueRange", "configs": {"max": {"default": "100", "type": "{ Number }", "description": "The value associated with the farthest bottom, right position of\nthe rail.  Can be less than the configured <code>min</code> if\nyou want values to increase from right-to-left or bottom-to-top.", "guessedname": "max", "guessedtype": "property"}, "value": {"default": "(inferred from current thumb position)", "type": "{ Number }", "description": "The value associated with the thumb's current position on the\nrail. Defaults to the value inferred from the thumb's current\nposition. Specifying value in the constructor will move the\nthumb to the position that corresponds to the supplied value.", "guessedname": "value", "guessedtype": "property"}, "min": {"default": "0", "type": "{ Number }", "description": "The value associated with the farthest top, left position of the\nrail.  Can be greater than the configured <code>max</code> if you\nwant values to increase from right-to-left or bottom-to-top.", "guessedname": "min", "guessedtype": "property"}}, "namespace": "", "module": "slider", "events": {"valueChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "valueChange", "description": "Fires when the value for the configuration attribute 'value' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "minChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "minChange", "description": "Fires when the value for the configuration attribute 'min' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "maxChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "maxChange", "description": "Fires when the value for the configuration attribute 'max' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "methods": {"setValue": {"return": {"type": "Slider", "description": ""}, "description": "Updates the current value.  Override this if you want to introduce\ninput value parsing or preprocessing.  Otherwise equivalent to\nslider.set( \"value\", v );", "chainable": "", "param": "val {Number} The new value", "params": [{"type": "Number", "name": "val", "description": "  The new value"}], "guessedname": "setValue", "guessedtype": "function"}, "_defThumbMoveFn": {"description": "Dispatch the new position of the thumb into the value setting\noperations.", "param": "e { EventFacade } The host's thumbMove event", "protected": "", "params": [{"type": " EventFacade ", "name": "e", "description": "  The host's thumbMove event"}], "guessedname": "_defThumbMoveFn", "guessedtype": "function"}, "_validateNewMax": {"return": {"type": " Boolean ", "description": "True for numbers.  False otherwise."}, "description": "Validates new values assigned to <code>max</code> attribute.  Numbers\nare acceptable.  Override this to enforce different rules.", "param": "value { mixed } Value assigned to <code>max</code> attribute.", "protected": "", "params": [{"type": " mixed ", "name": "value", "description": "  Value assigned to <code>max</code> attribute."}], "guessedname": "_validateNewMax", "guessedtype": "function"}, "_bindValueLogic": {"protected": "", "description": "Override of stub method in SliderBase that is called at the end of\nits bindUI stage of render().  Subscribes to internal events to\ntrigger UI and related state updates.", "guessedname": "_bindValueLogic", "guessedtype": "function"}, "_valueToOffset": {"return": {"type": " Number ", "description": "The pixel offset"}, "description": "Converts a value into a pixel offset for use in positioning\nthe thumb according to the reverse of the\n<code>_offsetToValue( xy )</code> operation.", "param": "val { Number } The value to map to pixel X or Y position", "protected": "", "params": [{"type": " Number ", "name": "val", "description": "  The value to map to pixel X or Y position"}], "guessedname": "_valueToOffset", "guessedtype": "function"}, "_verifyValue": {"protected": "", "description": "Verifies that the current value is within the min - max range.  If\nnot, value is set to either min or max, depending on which is\ncloser.", "guessedname": "_verifyValue", "guessedtype": "function"}, "_setNewValue": {"return": {"type": " Number ", "description": "Normalized and constrained value"}, "description": "Restricts new values assigned to <code>value</code> attribute to be\nbetween the configured <code>min</code> and <code>max</code>.\nRounds to nearest integer value.", "param": "value { Number } Value assigned to <code>value</code> attribute", "protected": "", "params": [{"type": " Number ", "name": "value", "description": "  Value assigned to <code>value</code> attribute"}], "guessedname": "_setNewValue", "guessedtype": "function"}, "_syncThumbPosition": {"protected": "", "description": "Move the thumb to appropriate position if necessary.  Also resets\nthe cached offsets and recalculates the conversion factor to\ntranslate position to value.", "guessedname": "_syncThumbPosition", "guessedtype": "function"}, "_afterMaxChange": {"description": "Update position according to new max value.  If the new max results\nin the current value being out of range, the value is set to the\ncloser of min or max.", "param": "e { EventFacade } The <code>max</code> attribute change event.", "protected": "", "params": [{"type": " EventFacade ", "name": "e", "description": "  The <code>max</code> attribute change event."}], "guessedname": "_afterMaxChange", "guessedtype": "function"}, "_validateNewMin": {"return": {"type": " Boolean ", "description": "True for numbers.  False otherwise."}, "description": "Validates new values assigned to <code>min</code> attribute.  Numbers\nare acceptable.  Override this to enforce different rules.", "param": "value { mixed } Value assigned to <code>min</code> attribute.", "protected": "", "params": [{"type": " mixed ", "name": "value", "description": "  Value assigned to <code>min</code> attribute."}], "guessedname": "_validateNewMin", "guessedtype": "function"}, "_afterValueChange": {"description": "Propagate change to the thumb position unless the change originated\nfrom the thumbMove event.", "param": "e { EventFacade } The <code>valueChange</code> event.", "protected": "", "params": [{"type": " EventFacade ", "name": "e", "description": "  The <code>valueChange</code> event."}], "guessedname": "_afterValueChange", "guessedtype": "function"}, "_setPosition": {"protected": "", "description": "Positions the thumb in accordance with the translated value.", "guessedname": "_setPosition", "guessedtype": "function"}, "_nearestValue": {"return": {"type": " Number ", "description": "Current min, max, or value if within range"}, "description": "Returns the nearest valid value to the value input.  If the provided\nvalue is outside the min - max range, accounting for min > max\nscenarios, the nearest of either min or max is returned.  Otherwise,\nthe provided value is returned.", "param": "value { mixed } Value to test against current min - max range", "protected": "", "params": [{"type": " mixed ", "name": "value", "description": "  Value to test against current min - max range"}], "guessedname": "_nearestValue", "guessedtype": "function"}, "_calculateFactor": {"protected": "", "description": "Calculates and caches\n(range between max and min) / (rail length)\nfor fast runtime calculation of position -&gt; value.", "guessedname": "_calculateFactor", "guessedtype": "function"}, "_afterMinChange": {"description": "Update position according to new min value.  If the new min results\nin the current value being out of range, the value is set to the\ncloser of min or max.", "param": "e { EventFacade } The <code>min</code> attribute change event.", "protected": "", "params": [{"type": " EventFacade ", "name": "e", "description": "  The <code>min</code> attribute change event."}], "guessedname": "_afterMinChange", "guessedtype": "function"}, "_offsetToValue": {"return": {"type": " mixed ", "description": "Value corresponding to the provided pixel offset"}, "description": "<p>Converts a pixel position into a value.  Calculates current\nthumb offset from the leading edge of the rail multiplied by the\nratio of <code>(max - min) / (constraining dim)</code>.</p>\n<p>Override this if you want to use a different value mapping\nalgorithm.</p>", "param": "offset { Number } X or Y pixel offset", "protected": "", "params": [{"type": " Number ", "name": "offset", "description": "  X or Y pixel offset"}], "guessedname": "_offsetToValue", "guessedtype": "function"}, "getValue": {"return": {"type": "Number", "description": ""}, "description": "Returns the current value.  Override this if you want to introduce\noutput formatting. Otherwise equivalent to slider.get( \"value\" );", "guessedname": "getValue", "guessedtype": "function"}, "_initSliderValueRange": {"protected": "", "description": "Stub for construction logic.  Override if extending this class and\nyou need to set something up during the initializer phase.", "guessedname": "_initSliderValueRange", "guessedtype": "function"}}, "file": "slider.js", "shortname": "SliderValueRange", "properties": {"_factor": {"protected": "", "type": "{Number}", "description": "Factor used to translate value -&gt; position -&gt; value.", "guessedname": "_factor", "guessedtype": "property"}, "ATTRS": {"description": "Attributes that will be added onto host class.", "protected": "", "static": "", "guessedname": "ATTRS", "guessedtype": "property", "type": "{Object}"}}, "description": "One class of value algorithm that can be built onto SliderBase.  By default,\nvalues range between 0 and 100, but you can configure these on the\nbuilt Slider class by setting the <code>min</code> and <code>max</code>\nconfigurations.  Set the initial value (will cause the thumb to move to the\nappropriate location on the rail) in configuration as well if appropriate."}, "LoadingMask": {"name": "LoadingMask", "configs": {"messageEl": {"default": "Generated HTML div element.", "type": "String", "description": "Node element to display the message.", "guessedname": "messageEl", "guessedtype": "property"}, "strings": {"default": "{ loading: 'Loading&hellip;' }", "type": "Object", "description": "Strings used on the LoadingMask. See\n<a href=\"Widget.html#method_strings\">strings</a>.", "guessedname": "strings", "guessedtype": "property"}, "target": {"default": "null", "type": "Node | Widget", "description": "Node where the mask will be positioned and re-dimensioned.", "guessedname": "target", "guessedtype": "property"}}, "constructors": [{"params": [{"type": "Object", "name": "config", "description": "  Object literal specifying widget configuration properties."}], "description": "<p><img src=\"assets/images/aui-loading-mask/main.png\"/></p>\nA base class for LoadingMask, providing:\n<ul>\n<li>Cross browser mask functionality to cover an element or the entire page</li>\n<li>Customizable mask (i.e., background, opacity)</li>\n<li>Display a centered \"loading\" message on the masked node</li>\n</ul>\nQuick Example:<br/>\n<pre><code>node.plug(A.LoadingMask, { background: '#000' });</code></pre>\nCheck the list of <a href=\"LoadingMask.html#configattributes\">Configuration Attributes</a> available for\nLoadingMask."}], "namespace": "", "module": "aui-loading-mask", "events": {"messageElChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "messageElChange", "description": "Fires when the value for the configuration attribute 'messageEl' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "stringsChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "stringsChange", "description": "Fires when the value for the configuration attribute 'strings' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "targetChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "targetChange", "description": "Fires when the value for the configuration attribute 'target' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "guessedname": "LoadingMask", "methods": {"hide": {"description": "Invoke the\n<a href=\"LoadingMask.html#property_overlayMask\">overlayMask</a>\n<code>hide</code> method."}, "show": {"description": "Invoke the\n<a href=\"LoadingMask.html#property_overlayMask\">overlayMask</a>\n<code>show</code> method."}, "_createDynamicAttrs": {"description": "Create dynamic attributes listeners to invoke the setter on\n<a href=\"LoadingMask.html#property_overlayMask\">overlayMask</a> after\nthe attribute is set on the LoadingMask instance.", "param": "{Object} config Object literal specifying widget configuration properties.", "protected": "", "params": [{"type": "Object", "name": "config", "description": " Object literal specifying widget configuration properties."}], "guessedname": "_createDynamicAttrs", "guessedtype": "function"}, "refreshMask": {"description": "Invoke the\n<a href=\"LoadingMask.html#property_overlayMask\">overlayMask</a>\n<code>refreshMask</code> method.", "guessedname": "refreshMask", "guessedtype": "function"}, "initializer": {"protected": "", "description": "Construction logic executed during LoadingMask instantiation. Lifecycle.", "guessedname": "initializer", "guessedtype": "function"}, "toggle": {"description": "Invoke the\n<a href=\"LoadingMask.html#property_overlayMask\">overlayMask</a>\n<code>toggle</code> method."}, "_afterVisibleChange": {"description": "Fires after the value of the\n<a href=\"LoadingMask.html#config_visible\">visible</a> attribute change.", "param": "{EventFacade} event", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "guessedname": "_afterVisibleChange", "guessedtype": "function"}, "bindUI": {"protected": "", "description": "Bind the events on the LoadingMask UI. Lifecycle.", "guessedname": "bindUI", "guessedtype": "function"}, "_bindOverlayMaskUI": {"protected": "", "description": "Bind events to the\n<a href=\"LoadingMask.html#property_overlayMask\">overlayMask</a>.", "guessedname": "_bindOverlayMaskUI", "guessedtype": "function"}, "_renderOverlayMask": {"protected": "", "description": "Render\n<a href=\"LoadingMask.html#property_overlayMask\">overlayMask</a>\ninstance.", "guessedname": "_renderOverlayMask", "guessedtype": "function"}, "centerMessage": {"description": "Center the\n<a href=\"LoadingMask.html#config_messageEl\">messageEl</a> with the\n<a href=\"LoadingMask.html#config_target\">target</a> node.", "guessedname": "centerMessage", "guessedtype": "function"}, "renderUI": {"protected": "", "description": "Create the DOM structure for the LoadingMask. Lifecycle.", "guessedname": "renderUI", "guessedtype": "function"}}, "extends": "Plugin.Base", "superclass": "Plugin.Base", "file": "aui-loading-mask.js", "guessedtype": "property", "shortname": "LoadingMask", "properties": {"LoadingMask.ATTRS": {"type": "Object", "static": "", "description": "Static property used to define the default attribute\nconfiguration for the LoadingMask.", "guessedname": "ATTRS", "guessedtype": "property"}, "LoadingMask.NS": {"type": "String", "static": "", "description": "Static property provides a string to identify the namespace.", "guessedname": "NS", "guessedtype": "property"}, "overlayMask": {"protected": "", "type": "OverlayMask", "description": "Stores the <a href=\"OverlayMask.html\">OverlayMask</a> used\ninternally.", "guessedname": "overlayMask", "guessedtype": "property"}, "LoadingMask.NAME": {"type": "String", "static": "", "description": "Static property provides a string to identify the class.", "guessedname": "NAME", "guessedtype": "property"}}, "description": "<p><img src=\"assets/images/aui-loading-mask/main.png\"/></p>\nA base class for LoadingMask, providing:\n<ul>\n<li>Cross browser mask functionality to cover an element or the entire page</li>\n<li>Customizable mask (i.e., background, opacity)</li>\n<li>Display a centered \"loading\" message on the masked node</li>\n</ul>\nQuick Example:<br/>\n<pre><code>node.plug(A.LoadingMask, { background: '#000' });</code></pre>\nCheck the list of <a href=\"LoadingMask.html#configattributes\">Configuration Attributes</a> available for\nLoadingMask."}, "DataSourceCache": {"name": "DataSourceCache", "namespace": "", "module": "datasource", "guessedname": "DataSourceCache", "methods": {"_beforeDefRequestFn": {"description": "First look for cached response, then send request to live data.", "param": "e {Event.Facade} Event Facade with the following properties:\n<dl>\n<dt>tId (Number)</dt> <dd>Unique transaction ID.</dd>\n<dt>request (Object)</dt> <dd>The request.</dd>\n<dt>callback (Object)</dt> <dd>The callback object.</dd>\n<dt>cfg (Object)</dt> <dd>Configuration object.</dd>\n</dl>", "protected": "", "params": [{"type": "Event.Facade", "name": "e", "description": "  Event Facade with the following properties:\n<dl>\n<dt>tId (Number)</dt> <dd>Unique transaction ID.</dd>\n<dt>request (Object)</dt> <dd>The request.</dd>\n<dt>callback (Object)</dt> <dd>The callback object.</dd>\n<dt>cfg (Object)</dt> <dd>Configuration object.</dd>\n</dl>"}], "guessedname": "_beforeDefRequestFn", "guessedtype": "function"}, "_beforeDefResponseFn": {"description": "Adds data to cache before returning data.", "param": "e {Event.Facade} Event Facade with the following properties:\n<dl>\n<dt>tId (Number)</dt> <dd>Unique transaction ID.</dd>\n<dt>request (Object)</dt> <dd>The request.</dd>\n<dt>callback (Object)</dt> <dd>The callback object with the following properties:\n<dl>\n<dt>success (Function)</dt> <dd>Success handler.</dd>\n<dt>failure (Function)</dt> <dd>Failure handler.</dd>\n</dl>\n</dd>\n<dt>data (Object)</dt> <dd>Raw data.</dd>\n<dt>response (Object)</dt> <dd>Normalized response object with the following properties:\n<dl>\n<dt>cached (Object)</dt> <dd>True when response is cached.</dd>\n<dt>results (Object)</dt> <dd>Parsed results.</dd>\n<dt>meta (Object)</dt> <dd>Parsed meta data.</dd>\n<dt>error (Object)</dt> <dd>Error object.</dd>\n</dl>\n</dd>\n<dt>cfg (Object)</dt> <dd>Configuration object.</dd>\n</dl>", "protected": "", "params": [{"type": "Event.Facade", "name": "e", "description": "  Event Facade with the following properties:\n<dl>\n<dt>tId (Number)</dt> <dd>Unique transaction ID.</dd>\n<dt>request (Object)</dt> <dd>The request.</dd>\n<dt>callback (Object)</dt> <dd>The callback object with the following properties:\n<dl>\n<dt>success (Function)</dt> <dd>Success handler.</dd>\n<dt>failure (Function)</dt> <dd>Failure handler.</dd>\n</dl>\n</dd>\n<dt>data (Object)</dt> <dd>Raw data.</dd>\n<dt>response (Object)</dt> <dd>Normalized response object with the following properties:\n<dl>\n<dt>cached (Object)</dt> <dd>True when response is cached.</dd>\n<dt>results (Object)</dt> <dd>Parsed results.</dd>\n<dt>meta (Object)</dt> <dd>Parsed meta data.</dd>\n<dt>error (Object)</dt> <dd>Error object.</dd>\n</dl>\n</dd>\n<dt>cfg (Object)</dt> <dd>Configuration object.</dd>\n</dl>"}], "guessedname": "_beforeDefResponseFn", "guessedtype": "function"}, "initializer": {"description": "Internal init() handler.", "param": "config {Object} Config object.", "params": [{"type": "Object", "name": "config", "description": "  Config object."}], "private": "", "guessedname": "initializer", "guessedtype": "function"}}, "extends": "Cache", "superclass": "Cache", "file": "datasource.js", "guessedtype": "function", "shortname": "DataSourceCache", "properties": {"NS": {"description": "The namespace for the plugin. This will be the property on the host which\nreferences the plugin instance.", "value": "\"cache\"", "static": "", "guessedname": "NS", "guessedtype": "property", "type": "String", "final": ""}, "NAME": {"description": "Class name.", "value": "\"dataSourceCache\"", "static": "", "guessedname": "NAME", "guessedtype": "property", "type": "String", "final": ""}}, "description": "Adds cacheability to the DataSource Utility."}, "Assert.DateAssert": {"name": "Assert.DateAssert", "namespace": "Assert", "module": "test", "guessedname": "DateAssert", "methods": {"datesAreEqual": {"description": "Asserts that a date's month, day, and year are equal to another date's.", "param": "{Date} expected The expected date.", "static": "", "guessedname": "datesAreEqual", "guessedtype": "function", "params": [{"type": "Date", "name": "expected", "description": " The expected date."}, {"type": "Date", "name": "actual", "description": " The actual date to test."}, {"type": "String", "name": "message", "description": " (Optional) The message to display if the assertion fails."}]}, "XML": {"return": {"type": "String", "description": "An XML-formatted string of results."}, "description": "Returns test results formatted as an XML string.", "param": "{Object} result The results object created by TestRunner.", "static": "", "guessedname": "XML", "guessedtype": "function", "params": [{"type": "Object", "name": "result", "description": " The results object created by TestRunner."}]}, "TAP": {"return": {"type": "String", "description": "A TAP-formatted string of results."}, "description": "Returns test results formatted in TAP format.\nFor more information, see <a href=\"http://testanything.org/\">Test Anything Protocol</a>.", "param": "{Object} result The results object created by TestRunner.", "static": "", "guessedname": "TAP", "guessedtype": "function", "params": [{"type": "Object", "name": "result", "description": " The results object created by TestRunner."}]}, "JSON": {"return": {"type": "String", "description": "A JSON-formatted string of results."}, "description": "Returns test results formatted as a JSON string. Requires JSON utility.", "param": "{Object} coverage The coverage report object.", "static": "", "guessedname": "JSON", "guessedtype": "function", "params": [{"type": "Object", "name": "result", "description": " The results object created by TestRunner."}]}, "JUnitXML": {"return": {"type": "String", "description": "An XML-formatted string of results."}, "description": "Returns test results formatted in JUnit XML format.", "param": "{Object} result The results object created by TestRunner.", "static": "", "guessedname": "JUnitXML", "guessedtype": "function", "params": [{"type": "Object", "name": "result", "description": " The results object created by TestRunner."}]}, "XdebugJSON": {"return": {"type": "String", "description": "A JSON-formatted string of coverage data."}, "description": "Returns the coverage report in a JSON format compatible with\nXdebug. See <a href=\"http://www.xdebug.com/docs/code_coverage\">Xdebug Documentation</a>\nfor more information. Note: function coverage is not available\nin this format.", "param": "{Object} coverage The coverage report object.", "params": [{"type": "Object", "name": "coverage", "description": " The coverage report object."}], "guessedname": "XdebugJSON", "guessedtype": "function"}, "timesAreEqual": {"description": "Asserts that a date's hour, minutes, and seconds are equal to another date's.", "param": "{Date} expected The expected date.", "static": "", "guessedname": "timesAreEqual", "guessedtype": "function", "params": [{"type": "Date", "name": "expected", "description": " The expected date."}, {"type": "Date", "name": "actual", "description": " The actual date to test."}, {"type": "String", "name": "message", "description": " (Optional) The message to display if the assertion fails."}]}}, "static": "", "file": "test.js", "guessedtype": "property", "shortname": "DateAssert", "description": "The DateAssert object provides functions to test JavaScript Date objects\nfor a variety of cases."}, "PortalLayout": {"name": "PortalLayout", "constructors": [{"params": [{"type": "Object", "name": "config", "description": "  Object literal specifying widget configuration properties."}], "description": "A base class for PortalLayout, providing:\n<ul>\n<li>Widget Lifecycle (initializer, renderUI, bindUI, syncUI, destructor)</li>\n<li>DragDrop utility for drag lists, portal layouts (portlets)</li>\n</ul>\nQuick Example:<br/>\n<pre><code>var portalLayout = new A.PortalLayout({\ndragNodes: '.portlet',\ndropNodes: '.column',\nproxyNode: A.Node.create('<div class=\"aui-portal-layout-proxy\"></div>'),\nlazyStart: true\n</code></pre>\nCheck the list of <a href=\"PortalLayout.html#configattributes\">Configuration Attributes</a> available for\nPortalLayout."}], "namespace": "", "module": "aui-portal-layout", "guessedname": "PortalLayout", "methods": {"initializer": {"protected": "", "description": "Construction logic executed during PortalLayout instantiation. Lifecycle.", "guessedname": "initializer", "guessedtype": "function"}}, "extends": "Base", "superclass": "Base", "file": "aui-portal-layout.js", "guessedtype": "property", "shortname": "PortalLayout", "properties": {"PortalLayout.ATTRS": {"type": "Object", "static": "", "description": "Static property used to define the default attribute\nconfiguration for the PortalLayout.", "guessedname": "ATTRS", "guessedtype": "property"}, "PortalLayout.NAME": {"type": "String", "static": "", "description": "Static property provides a string to identify the class.", "guessedname": "NAME", "guessedtype": "property"}}, "description": "A base class for PortalLayout, providing:\n<ul>\n<li>Widget Lifecycle (initializer, renderUI, bindUI, syncUI, destructor)</li>\n<li>DragDrop utility for drag lists, portal layouts (portlets)</li>\n</ul>\nQuick Example:<br/>\n<pre><code>var portalLayout = new A.PortalLayout({\ndragNodes: '.portlet',\ndropNodes: '.column',\nproxyNode: A.Node.create('<div class=\"aui-portal-layout-proxy\"></div>'),\nlazyStart: true\n</code></pre>\nCheck the list of <a href=\"PortalLayout.html#configattributes\">Configuration Attributes</a> available for\nPortalLayout."}, "Assert.ShouldError": {"name": "Assert.ShouldError", "constructors": [{"params": [{"type": "String", "name": "message", "description": " The message to display when the error occurs."}], "description": "ShouldError is subclass of Error that is thrown whenever\na test is expected to throw an error but doesn't."}], "namespace": "Assert", "module": "test", "guessedname": "ShouldError", "extends": "Assert.Error", "superclass": "Assert.Error", "file": "test.js", "guessedtype": "function", "shortname": "ShouldError", "properties": {"name": {"type": "String", "description": "The name of the error that occurred.", "guessedname": "name", "guessedtype": "property"}}, "description": "ShouldError is subclass of Error that is thrown whenever\na test is expected to throw an error but doesn't."}, "Do.AlterReturn": {"name": "Do.AlterReturn", "namespace": "", "module": "event-custom", "guessedname": "AlterReturn", "file": "event-custom.js", "guessedtype": "function", "shortname": "Do.AlterReturn", "description": "Return an AlterReturn object when you want to change the result returned\nfrom the core method to the caller"}, "DataType.String": {"name": "DataType.String", "namespace": "", "module": "aui-datatype", "guessedname": "DS", "methods": {"evaluate": {"return": {"type": "boolean | null | number | String | undefined", "description": "Parsed value"}, "description": "Evaluates a string to a primitive value (if possible). Supports\n<code>true</code> and <code>false</code> also. Unrecognized strings are\nreturned without any modification.", "param": "{*} data Input data to be evaluated.", "params": [{"type": "*", "name": "data", "description": " Input data to be evaluated."}], "guessedname": "evaluate", "guessedtype": "function"}}, "static": "", "file": "aui-datatype.js", "guessedtype": "property", "shortname": "DataType.String", "description": "DataType.String provides a set of utility to provides a simple function\nthat evaluates a string to a primitive value (if possible). Supports\n<code>true</code> and <code>false</code> also."}, "Event": {"name": "Event", "namespace": "", "module": "event", "guessedname": "dom_wrappers", "methods": {"nativeRemove": {"description": "Basic remove listener", "private": "", "static": "", "param": "{HTMLElement} el      the element to bind the handler to", "guessedname": "nativeRemove", "guessedtype": "property", "params": [{"type": "HTMLElement", "name": "el", "description": "      the element to bind the handler to"}, {"type": "string", "name": "type", "description": "   the type of event handler"}, {"type": "function", "name": "fn", "description": "      the callback to invoke"}, {"type": "boolen", "name": "capture", "description": " capture or bubble phase"}]}, "getListeners": {"return": {"type": "Y.Custom.Event", "description": "the custom event wrapper for the DOM event(s)"}, "description": "Returns all listeners attached to the given element via addListener.\nOptionally, you can specify a specific type of event to return.", "param": "el {HTMLElement|string} the element or element id to inspect", "static": "", "guessedname": "getListeners", "guessedtype": "function", "params": [{"type": "HTMLElement|string", "name": "el", "description": "  the element or element id to inspect"}, {"type": "string", "name": "type", "description": "  optional type of listener to return. If\nleft out, all listeners will be returned"}]}, "getEvent": {"return": {"type": "Event", "description": "the event"}, "description": "Finds the event in the window object, the caller's arguments, or\nin the arguments of another method in the callstack.  This is\nexecuted automatically for events registered through the event\nmanager, so the implementer should not normally need to execute\nthis function at all.", "param": "{Event} e the event parameter from the handler", "static": "", "guessedname": "getEvent", "guessedtype": "function", "params": [{"type": "Event", "name": "e", "description": " the event parameter from the handler"}, {"type": "HTMLElement", "name": "el", "description": " the element the listener was attached to"}]}, "attach": {"return": {"type": "EventHandle", "description": "an object to that can be used to detach the listener"}, "description": "Adds an event listener", "param": "{String}   type     The type of event to append", "static": "", "guessedname": "attach", "guessedtype": "function", "params": [{"type": "String", "name": "type", "description": "     The type of event to append"}, {"type": "Function", "name": "fn", "description": "        The method the event invokes"}, {"type": "String|HTMLElement|Array|NodeList", "name": "el", "description": " An id, an element \nreference, or a collection of ids and/or elements to assign the \nlistener to."}, {"type": "Object", "name": "context", "description": " optional context object"}, {"type": "Boolean|object", "name": "args", "description": " 0..n arguments to pass to the callback"}]}, "_unload": {"guessedname": "_unload", "static": "", "description": "Removes all listeners registered by pe.event.  Called \nautomatically during the unload event.", "private": "", "guessedtype": "function"}, "purgeElement": {"description": "Removes all listeners attached to the given element via addListener.\nOptionally, the node's children can also be purged.\nOptionally, you can specify a specific type of event to remove.", "param": "{HTMLElement} el the element to purge", "static": "", "guessedname": "purgeElement", "guessedtype": "function", "params": [{"type": "HTMLElement", "name": "el", "description": " the element to purge"}, {"type": "boolean", "name": "recurse", "description": " recursively purge this element's children\nas well.  Use with caution."}, {"type": "string", "name": "type", "description": " optional type of listener to purge. If\nleft out, all listeners will be removed"}]}, "generateId": {"return": {"type": "string", "description": "the resulting id of the element"}, "description": "Generates an unique ID for the element if it does not already \nhave one.", "param": "el the element to create the id for", "static": "", "guessedname": "generateId", "guessedtype": "function", "params": [{"type": "", "name": "el", "description": " the element to create the id for"}]}, "_isValidCollection": {"return": {"type": "boolean", "description": "true if the object is array-like and populated"}, "description": "We want to be able to use getElementsByTagName as a collection\nto attach a group of events to.  Unfortunately, different \nbrowsers return different types of collections.  This function\ntests to determine if the object is array-like.  It will also \nfail if the object is an array, but is empty.", "deprecated": "was not meant to be used directly", "private": "", "static": "", "param": "o the object to test", "guessedname": "_isValidCollection", "guessedtype": "property", "params": [{"type": "", "name": "o", "description": " the object to test"}]}, "Event.define": {"description": "<p>Static method to register a synthetic event definition and implementation\nin the DOM Event subsystem.</p>\n<p>Pass either a string <code>type</code> and configuration object as\nseparate parameters or a configuration object that includes a\n<code>type</code> property as a single parameter.</p>\n<p>The configuration object should include implementation methods for\n<code>on</code> and <code>detach</code>.  This is the full list of\nconfiguration properties:</p>\n<dl>\n<dt><code>type</code></dt>\n<dd>Required if using the <code>Y.Event.define( config )</code>\nsignature.  The name of the synthetic event.  What goes\n<code>node.on(<strong>HERE</strong>, callback )</code>.</dd>\n<dt><code>on</code></dt>\n<dd><code>function ( node, subscription, fireEvent )</code> The\nimplementation logic for subscription.  Any special setup you need to\ndo to create the environment for the event being fired.  E.g. native\nDOM event subscriptions.  Store subscription related objects and\ninformation on the <code>subscription</code> object.  When the\ncriteria have been met to fire the synthetic event, call\n<code>fireEvent.fire()</code>.</dd>\n<dt><code>detach</code></dt>\n<dd><code>function ( node, subscription, fireEvent )</code> The\nimplementation logic for cleaning up a detached subscription. E.g.\ndetach any DOM subscriptions done in <code>on</code>.</dd>\n<dt><code>publishConfig</code></dt>\n<dd>(Object) The configuration object that will be used to instantiate\nthe underlying CustomEvent.  By default, the event is defined with\n<code>emitFacade: true</code> so subscribers will receive a DOM-like\nevent object.</dd>\n<dt><code>processArgs</code></dt>\n<dd><code>function ( argArray )</code>  Optional method to extract any\nadditional arguments from the subscription signature.  Using this\nallows <code>on</code> signatures like <code>node.on(\n&quot;hover&quot;, overCallback, outCallback )</code>.  Be sure that\nthe args passed in is pruned of any additional arguments using, for\nexample, <code>argArray.splice(2,1);</code>.  Data returned from the\nfunction will be stored on the <code>subscription</code> object passed\nto <code>on</code> and <code>detach</code> under\n<code>subscription._extra</code>.</dd>\n<dt>\n</dl>", "since": "3.1.0", "param": "type {String} Name given to the synthetic event", "static": "", "guessedname": "define", "in": "", "params": [{"type": "String", "name": "type", "description": "  Name given to the synthetic event"}, {"type": "Object", "name": "cfg", "description": "  configuration object.  Pass this as the first\nparameter if it includes the <code>type</code> property."}], "guessedtype": "function"}, "onContentReady": {"deprecated": "Use Y.on(\"contentready\")", "static": "", "params": [{"type": "string", "name": "id", "description": " the id of the element to look for."}, {"type": "function", "name": "fn", "description": " what to execute when the element is ready."}, {"type": "object", "name": "p_obj", "description": " an optional object to be passed back as\na parameter to fn."}, {"type": "boolean|object", "name": "p_override", "description": " If set to true, fn will execute\nin the context of p_obj.  If an object, fn will\nexectute in the context of that object"}], "description": "Works the same way as onAvailable, but additionally checks the\nstate of sibling elements to determine if the content of the\navailable element is safe to modify.\n<p>The callback is executed with a single parameter:\nthe custom object parameter, if provided.</p>", "param": "{string}   id the id of the element to look for."}, "startInterval": {"static": "", "private": "", "guessedname": "startInterval", "guessedtype": "function"}, "nativeAdd": {"description": "Adds a DOM event directly without the caching, cleanup, context adj, etc", "private": "", "static": "", "param": "{HTMLElement} el      the element to bind the handler to", "guessedname": "nativeAdd", "guessedtype": "property", "params": [{"type": "HTMLElement", "name": "el", "description": "      the element to bind the handler to"}, {"type": "string", "name": "type", "description": "   the type of event handler"}, {"type": "function", "name": "fn", "description": "      the callback to invoke"}, {"type": "boolen", "name": "capture", "description": " capture or bubble phase"}]}, "_poll": {"guessedname": "_poll", "static": "", "description": "Polling function that runs before the onload event fires, \nattempting to attach to DOM Nodes as soon as they are \navailable", "private": "", "guessedtype": "function"}, "onAvailable": {"deprecated": "Use Y.on(\"available\")", "static": "", "params": [{"type": "string||string[]", "name": "id", "description": " the id of the element, or an array\nof ids to look for."}, {"type": "function", "name": "fn", "description": " what to execute when the element is found."}, {"type": "object", "name": "p_obj", "description": " an optional object to be passed back as\na parameter to fn."}, {"type": "boolean|object", "name": "p_override", "description": " If set to true, fn will execute\nin the context of p_obj, if set to an object it\nwill execute in the context of that object"}, {"type": "boolean", "name": "checkContent", "description": "  check child node readiness (onContentReady)"}], "description": "Executes the supplied callback when the item with the supplied\nid is found.  This is meant to be used to execute behavior as\nsoon as possible as the page loads.  If you use this after the\ninitial page load it will poll for a fixed time for the element.\nThe number of times it will poll and the frequency are\nconfigurable.  By default it will poll for 10 seconds.\n<p>The callback is executed with a single parameter:\nthe custom object parameter, if provided.</p>", "param": "{string||string[]}   id the id of the element, or an array\nof ids to look for."}, "detach": {"return": {"type": "boolean", "description": "true if the unbind was successful, false otherwise."}, "description": "Removes an event listener.  Supports the signature the event was bound\nwith, but the preferred way to remove listeners is using the handle\nthat is returned when using Y.on", "param": "{String} type the type of event to remove.", "static": "", "guessedname": "detach", "guessedtype": "function", "params": [{"type": "String", "name": "type", "description": " the type of event to remove."}, {"type": "Function", "name": "fn", "description": " the method the event invokes.  If fn is\nundefined, then all event handlers for the type of event are \nremoved."}, {"type": "String|HTMLElement|Array|NodeList|EventHandle", "name": "el", "description": " An \nevent handle, an id, an element reference, or a collection \nof ids and/or elements to remove the listener from."}]}, "_load": {"guessedname": "_load", "static": "", "description": "hook up any deferred listeners", "private": "", "guessedtype": "function"}}, "static": "", "file": "event.js", "guessedtype": "property", "shortname": "Event", "properties": {"DOMReady": {"type": "boolean", "static": "", "description": "True when the document is initially usable", "guessedname": "DOMReady", "guessedtype": "property"}, "_retryCount": {"guessedname": "_retryCount", "static": "", "description": "The number of times to poll after window.onload.  This number is\nincreased if additional late-bound handlers are requested after\nthe page load.", "private": "", "guessedtype": "property"}, "POLL_RETRYS": {"description": "The number of times we should look for elements that are not\nin the DOM at the time the event is requested after the document\nhas been loaded.  The default is 1000@amp;40 ms, so it will poll\nfor 40 seconds or until all outstanding handlers are bound\n(whichever comes first).", "static": "", "guessedname": "POLL_RETRYS", "guessedtype": "property", "type": "int", "final": ""}, "_dri": {"guessedname": "_dri", "static": "", "description": "document readystate poll handle", "private": "", "guessedtype": "property"}, "_wrappers": {"description": "Custom event wrappers for DOM events.  Key is \n'event:' + Element uid stamp + event type", "private": "", "static": "", "guessedname": "_wrappers", "guessedtype": "property", "type": "Y.Event.Custom"}, "_loadComplete": {"description": "True after the onload event has fired", "private": "", "static": "", "guessedname": "_loadComplete", "guessedtype": "property", "type": "boolean"}, "POLL_INTERVAL": {"description": "The poll interval in milliseconds", "static": "", "guessedname": "POLL_INTERVAL", "guessedtype": "property", "type": "int", "final": ""}, "_interval": {"guessedname": "_interval", "static": "", "description": "poll handle", "private": "", "guessedtype": "property"}, "_el_events": {"guessedname": "_el_events", "static": "", "description": "Custom event wrapper map DOM events.  Key is \nElement uid stamp.  Each item is a hash of custom event\nwrappers as provided in the _wrappers collection.  This\nprovides the infrastructure for getListeners.", "private": "", "guessedtype": "property"}, "lastError": {"type": "Error", "static": "", "description": "addListener/removeListener can throw errors in unexpected scenarios.\nThese errors are suppressed, the method returns false, and this property\nis set", "guessedname": "lastError", "guessedtype": "property"}, "_avail": {"guessedname": "_avail", "static": "", "description": "onAvailable listeners", "private": "", "guessedtype": "property"}}, "description": "The event utility provides functions to add and remove event listeners,\nevent cleansing.  It also tries to automatically remove listeners it\nregisters during the unload event."}, "Plugin.NodeFX": {"name": "Plugin.NodeFX", "namespace": "", "module": "anim", "guessedname": "NodeFX", "extends": "Base", "superclass": "Base", "file": "anim.js", "guessedtype": "function", "shortname": "Plugin.NodeFX", "description": "Binds an Anim instance to a Node instance"}, "IORequest": {"name": "IORequest", "configs": {"responseData": {"default": "null", "type": "String | JSONObject | XMLDocument", "description": "This is a normalized attribute for the response data. It's useful\nto retrieve the correct type for the\n<a href=\"IORequest.html#config_dataType\">dataType</a> (i.e., in json\nrequests the <code>responseData</code>) is a JSONObject.", "guessedname": "responseData", "guessedtype": "property"}, "transaction": {"default": "null", "type": "Object", "description": "Stores the IO Object of the current transaction.", "guessedname": "transaction", "guessedtype": "property"}, "timeout": {"default": "Value mapped on YUI.AUI.defaults.io.", "type": "Number", "description": "See <a href=\"http://developer.yahoo.com/yui/3/io/#configuration\">IO\nConfiguration</a>.", "guessedname": "timeout", "guessedtype": "property"}, "form": {"default": "Value mapped on YUI.AUI.defaults.io.", "type": "Object", "description": "See <a href=\"http://developer.yahoo.com/yui/3/io/#configuration\">IO\nConfiguration</a>.", "guessedname": "form", "guessedtype": "property"}, "dataType": {"default": "null", "type": "String", "description": "The type of the request (i.e., could be xml, json, javascript, text).", "guessedname": "dataType", "guessedtype": "property"}, "cfg": {"description": "Object containing all the\n<a href=\"io.html#configattributes\">IO Configuration Attributes</a>.\nThis Object is passed to the <code>A.io</code> internally.", "default": "Object containing all the\n<a href=\"io.html#configattributes\">IO Configuration Attributes</a>.", "readonly": "", "guessedname": "cfg", "guessedtype": "property", "type": "String"}, "cache": {"default": "true", "type": "boolean", "description": "If <code>false</code> the current timestamp will be appended to the\nurl, avoiding the url to be cached.", "guessedname": "cache", "guessedtype": "property"}, "autoLoad": {"default": "true", "type": "boolean", "description": "If <code>true</code> invoke the\n<a href=\"IORequest.html#method_start\">start</a> method automatically,\ninitializing the IO transaction.", "guessedname": "autoLoad", "guessedtype": "property"}, "uri": {"default": "null", "type": "String", "description": "URI to be requested using AJAX.", "guessedname": "uri", "guessedtype": "property"}, "sync": {"default": "Value mapped on YUI.AUI.defaults.io.", "type": "boolean", "description": "See <a href=\"http://developer.yahoo.com/yui/3/io/#configuration\">IO\nConfiguration</a>.", "guessedname": "sync", "guessedtype": "property"}, "headers": {"default": "Object", "type": "Object", "description": "Set the correct ACCEPT header based on the dataType.", "guessedname": "headers", "guessedtype": "property"}, "arguments": {"default": "Value mapped on YUI.AUI.defaults.io.", "type": "Object", "description": "See <a href=\"http://developer.yahoo.com/yui/3/io/#configuration\">IO\nConfiguration</a>.", "guessedname": "arguments", "guessedtype": "property"}, "context": {"default": "Value mapped on YUI.AUI.defaults.io.", "type": "Object", "description": "See <a href=\"http://developer.yahoo.com/yui/3/io/#configuration\">IO\nConfiguration</a>.", "guessedname": "context", "guessedtype": "property"}, "active": {"default": "false", "type": "boolean", "description": "Whether the transaction is active or not.", "guessedname": "active", "guessedtype": "property"}, "data": {"default": "Value mapped on YUI.AUI.defaults.io.", "type": "Object", "description": "See <a href=\"http://developer.yahoo.com/yui/3/io/#configuration\">IO\nConfiguration</a>.", "guessedname": "data", "guessedtype": "property"}, "method": {"default": "Value mapped on YUI.AUI.defaults.io.", "type": "String", "description": "See <a href=\"http://developer.yahoo.com/yui/3/io/#configuration\">IO\nConfiguration</a>.", "guessedname": "method", "guessedtype": "property"}, "xdr": {"default": "Value mapped on YUI.AUI.defaults.io.", "type": "Object", "description": "See <a href=\"http://developer.yahoo.com/yui/3/io/#configuration\">IO\nConfiguration</a>.", "guessedname": "xdr", "guessedtype": "property"}}, "constructors": [{"params": [{"type": "Object", "name": "config", "description": "  Object literal specifying widget configuration properties."}], "description": "A base class for IORequest, providing:\n<ul>\n<li>Response data normalization for XML, JSON, JavaScript</li>\n<li>Cache options</li>\n</ul>\nQuick Example:<br/>\n<pre><code>A.io.request(uri, config);</code></pre>\nCheck the list of <a href=\"IORequest.html#configattributes\">Configuration Attributes</a> available for\nIORequest."}], "namespace": "", "module": "aui-io", "events": {"contextChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "contextChange", "description": "Fires when the value for the configuration attribute 'context' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "timeoutChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "timeoutChange", "description": "Fires when the value for the configuration attribute 'timeout' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "responseDataChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "responseDataChange", "description": "Fires when the value for the configuration attribute 'responseData' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "xdrChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "xdrChange", "description": "Fires when the value for the configuration attribute 'xdr' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "activeChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "activeChange", "description": "Fires when the value for the configuration attribute 'active' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "autoLoadChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "autoLoadChange", "description": "Fires when the value for the configuration attribute 'autoLoad' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "methodChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "methodChange", "description": "Fires when the value for the configuration attribute 'method' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "headersChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "headersChange", "description": "Fires when the value for the configuration attribute 'headers' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "cacheChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "cacheChange", "description": "Fires when the value for the configuration attribute 'cache' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "uriChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "uriChange", "description": "Fires when the value for the configuration attribute 'uri' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "dataTypeChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "dataTypeChange", "description": "Fires when the value for the configuration attribute 'dataType' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "cfgChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "cfgChange", "description": "Fires when the value for the configuration attribute 'cfg' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "transactionChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "transactionChange", "description": "Fires when the value for the configuration attribute 'transaction' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "argumentsChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "argumentsChange", "description": "Fires when the value for the configuration attribute 'arguments' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "syncChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "syncChange", "description": "Fires when the value for the configuration attribute 'sync' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "formChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "formChange", "description": "Fires when the value for the configuration attribute 'form' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "dataChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "dataChange", "description": "Fires when the value for the configuration attribute 'data' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "guessedname": "IORequest", "methods": {"_success": {"description": "Internal success callback for the IO transaction.", "param": "{Number} id ID of the IO transaction.", "protected": "", "params": [{"type": "Number", "name": "id", "description": " ID of the IO transaction."}, {"type": "Object", "name": "obj", "description": " IO transaction Object."}], "guessedname": "_success", "guessedtype": "function"}, "_setIOData": {"return": {"type": "String", "description": ""}, "description": "Applies the <code>YUI.AUI.defaults.io.dataFormatter</code> if defined.", "param": "{Object} value", "protected": "", "params": [{"type": "Object", "name": "value", "description": ""}], "guessedname": "_setIOData", "guessedtype": "function"}, "stop": {"description": "Stops the IO transaction.", "guessedname": "stop", "guessedtype": "function"}, "destructor": {"protected": "", "description": "Descructor lifecycle implementation for the IORequest class.\nPurges events attached to the node (and all child nodes).", "guessedname": "destructor", "guessedtype": "function"}, "_autoStart": {"protected": "", "description": "Invoke the <code>start</code> method (autoLoad attribute).", "guessedname": "_autoStart", "guessedtype": "function"}, "start": {"description": "Starts the IO transaction. Used to refresh the content also.", "guessedname": "start", "guessedtype": "function"}, "_end": {"description": "Internal end callback for the IO transaction.", "param": "{Number} id ID of the IO transaction.", "protected": "", "params": [{"type": "Number", "name": "id", "description": " ID of the IO transaction."}], "guessedname": "_end", "guessedtype": "function"}, "_parseURL": {"return": {"type": "String", "description": ""}, "description": "Parse the <a href=\"IORequest.html#config_uri\">uri</a> to add a\ntimestamp if <a href=\"IORequest.html#config_cache\">cache</a> is\n<code>true</code>. Also applies the\n<code>YUI.AUI.defaults.io.uriFormatter</code>.", "param": "{String} url", "protected": "", "params": [{"type": "String", "name": "url", "description": ""}], "guessedname": "_parseURL", "guessedtype": "function"}, "_setResponseData": {"return": {"type": "Object", "description": ""}, "description": "Setter for <a href=\"IORequest.html#config_responseData\">responseData</a>.", "param": "{Object} xhr XHR Object.", "protected": "", "params": [{"type": "Object", "name": "xhr", "description": " XHR Object."}], "guessedname": "_setResponseData", "guessedtype": "function"}, "initializer": {"protected": "", "description": "Construction logic executed during IORequest instantiation. Lifecycle.", "guessedname": "init", "guessedtype": "function"}}, "uses": ["io"], "superclass": "Plugin.Base", "file": "aui-io.js", "guessedtype": "property", "extends": "Plugin.Base", "shortname": "IORequest", "properties": {"IORequest.NAME": {"type": "String", "static": "", "description": "Static property provides a string to identify the class.", "guessedname": "NAME", "guessedtype": "property"}, "IORequest.ATTRS": {"type": "Object", "static": "", "description": "Static property used to define the default attribute\nconfiguration for the IORequest.", "guessedname": "ATTRS", "guessedtype": "property"}}, "description": "A base class for IORequest, providing:\n<ul>\n<li>Response data normalization for XML, JSON, JavaScript</li>\n<li>Cache options</li>\n</ul>\nQuick Example:<br/>\n<pre><code>A.io.request(uri, config);</code></pre>\nCheck the list of <a href=\"IORequest.html#configattributes\">Configuration Attributes</a> available for\nIORequest."}, "Calendar": {"name": "Calendar", "configs": {"dates": {"default": "Current date", "type": "Array", "description": "Dates which the calendar will show as selected by default.", "guessedname": "dates", "guessedtype": "property"}, "setValue": {"default": "true", "type": "boolean", "description": "If true set the selected date with the correct\n<a href=\"Calendar.html#config_dateFormat\">dateFormat</a> to the\nvalue of the input field which is hosting the Calendar.", "guessedname": "setValue", "guessedtype": "property"}, "dateFormat": {"default": "%m/%d/%Y", "type": "String", "description": "The default date format string which can be overriden for\nlocalization support. The format must be valid according to\n<a href=\"DataType.Date.html\">A.DataType.Date.format</a>.", "guessedname": "dateFormat", "guessedtype": "property"}, "selectMultipleDates": {"default": "false", "type": "boolean", "description": "Wether accepts to select multiple dates.", "guessedname": "selectMultipleDates", "guessedtype": "property"}, "firstDayOfWeek": {"default": "0", "type": "Number", "description": "First day of the week: Sunday is 0, Monday is 1.", "guessedname": "firstDayOfWeek", "guessedtype": "property"}, "currentYear": {"default": "Current year", "type": "Number", "description": "Current year number.", "guessedname": "currentYear", "guessedtype": "property"}, "currentDay": {"default": "Current day", "type": "Number", "description": "Current day number.", "guessedname": "currentDay", "guessedtype": "property"}, "maxDate": {"default": "null", "type": "String | Date", "description": "Maximum allowable date. Values supported by the Date\nconstructor are supported.", "guessedname": "maxDate", "guessedtype": "property"}, "currentMonth": {"default": "Current month", "type": "Number", "description": "Current month number.", "guessedname": "currentMonth", "guessedtype": "property"}, "stack": {"default": "true", "type": "boolean", "description": "If true is able to do stacking with another overlays.", "guessedname": "stack", "guessedtype": "property"}, "minDate": {"default": "null", "type": "Date | String", "description": "Minimum allowable date. Values supported by the Date\nconstructor are supported.", "guessedname": "minDate", "guessedtype": "property"}}, "constructors": [{"params": [{"type": "Object", "name": "config", "description": "  Object literal specifying widget configuration properties."}], "description": "<p><img src=\"assets/images/aui-calendar/main.png\"/></p>\nA base class for Calendar, providing:\n<ul>\n<li>Widget Lifecycle (initializer, renderUI, bindUI, syncUI, destructor)</li>\n<li>Setting Configuration Options</li>\n<li>Obtaining Selected Dates</li>\n<li>Creating International Calendars</li>\n<li>Customizing the Calendar</li>\n</ul>\nQuick Example:\n<pre><code>var instance = new A.Calendar({\ntrigger: '#input1',\ndates: ['09/14/2009', '09/15/2009'],\ndateFormat: '%d/%m/%y %A',\nsetValue: true,\nselectMultipleDates: true\n}).render();\n</code></pre>\nCheck the list of <a href=\"Calendar.html#configattributes\">Configuration Attributes</a> available for\nCalendar."}], "namespace": "", "module": "aui-calendar", "events": {"dateFormatChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "dateFormatChange", "description": "Fires when the value for the configuration attribute 'dateFormat' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "currentDayChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "currentDayChange", "description": "Fires when the value for the configuration attribute 'currentDay' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "firstDayOfWeekChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "firstDayOfWeekChange", "description": "Fires when the value for the configuration attribute 'firstDayOfWeek' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "minDateChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "minDateChange", "description": "Fires when the value for the configuration attribute 'minDate' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "selectMultipleDatesChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "selectMultipleDatesChange", "description": "Fires when the value for the configuration attribute 'selectMultipleDates' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "datesChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "datesChange", "description": "Fires when the value for the configuration attribute 'dates' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "currentYearChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "currentYearChange", "description": "Fires when the value for the configuration attribute 'currentYear' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "maxDateChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "maxDateChange", "description": "Fires when the value for the configuration attribute 'maxDate' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "stackChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "stackChange", "description": "Fires when the value for the configuration attribute 'stack' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "currentMonthChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "currentMonthChange", "description": "Fires when the value for the configuration attribute 'currentMonth' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "setValueChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "setValueChange", "description": "Fires when the value for the configuration attribute 'setValue' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "guessedname": "Calendar", "methods": {"_syncHeader": {"protected": "", "description": "Sync Calendar header UI.", "guessedname": "_syncHeader", "guessedtype": "function"}, "_getDayNameShort": {"return": {"type": "String", "description": ""}, "description": "Get a short day name of the passed weekDay from the locale map.", "param": "{Number} weekDay", "protected": "", "params": [{"type": "Number", "name": "weekDay", "description": ""}], "guessedname": "_getDayNameShort", "guessedtype": "function"}, "_getDayNameMin": {"return": {"type": "String", "description": ""}, "description": "Get a very short day name of the passed weekDay from the locale map.", "param": "{Number} weekDay", "protected": "", "params": [{"type": "Number", "name": "weekDay", "description": ""}], "guessedname": "_getDayNameMin", "guessedtype": "function"}, "_syncDays": {"protected": "", "description": "Sync Calendar days UI.", "guessedname": "_syncDays", "guessedtype": "function"}, "_getDayName": {"return": {"type": "String", "description": ""}, "description": "Get the day name of the passed weekDay from the locale map.", "param": "{Number} weekDay", "protected": "", "params": [{"type": "Number", "name": "weekDay", "description": ""}], "guessedname": "_getDayName", "guessedtype": "function"}, "_getLocaleMap": {"protected": "", "return": {"type": "Object", "description": ""}, "description": "Get the locale map containing the respective values for the\n<a href=\"Widget.html#config_locale\">locale</a> used.\n<pre><code>A.DataType.Date.Locale['pt-br'] = A.merge(\nA.DataType.Date.Locale['en'], {\na: ['Dom', 'Seg', 'Ter', 'Qua', 'Qui', 'Fri', 'Sat'],\nA: ['Domingo','Segunda-feira','Ter&ccedil;a-feira','Quarta-feira','Quinta-feira','Sexta-feira','Sabado'],\nb: ['Jan','Fev','Mar','Abr','Mai','Jun', 'Jul','Ago','Set','Out','Nov','Dez'],\nB: ['Janeiro','Fevereiro','Mar&ccedil;o','Abril','Maio','Junho', 'Julho','Agosto','Setembro','Outubro','Novembro','Dezembro'],\nc: '%a %d %b %Y %T %Z',\np: ['AM', 'PM'],\nP: ['am', 'pm'],\nr: '%I:%M:%S %p',\nx: '%d/%m/%y',\nX: '%T'\n}\n);</code></pre>", "guessedname": "_getLocaleMap", "guessedtype": "function"}, "initializer": {"protected": "", "description": "Construction logic executed during Calendar instantiation. Lifecycle.", "guessedname": "initializer", "guessedtype": "function"}, "getDaysInMonth": {"return": {"type": "Number", "description": ""}, "description": "Get the number of days in the passed year and month.", "param": "{Number} year Year in the format YYYY.", "params": [{"type": "Number", "name": "year", "description": " Year in the format YYYY."}, {"type": "Number", "name": "month", "description": " 0 for January 11 for December."}], "guessedname": "getDaysInMonth", "guessedtype": "function"}, "formatDate": {"return": {"type": "String", "description": ""}, "description": "Format a date with the passed mask. Used on\n<a href=\"Calendar.html#config_dateFormat\">dateFormat</a>.", "param": "{Date} date", "params": [{"type": "Date", "name": "date", "description": ""}, {"type": "String", "name": "mask", "description": " See <a href=\"Calendar.html#config_dateFormat\">dateFormat</a>."}], "guessedname": "formatDate", "guessedtype": "function"}, "alreadySelected": {"return": {"type": "boolean", "description": ""}, "description": "Check if a date is already selected.", "param": "{Date} date Date to be checked.", "params": [{"type": "Date", "name": "date", "description": " Date to be checked."}], "guessedname": "alreadySelected", "guessedtype": "function"}, "getCurrentDate": {"return": {"type": "Date", "description": ""}, "description": "Get current date.", "guessedname": "getCurrentDate", "guessedtype": "function"}, "_selectPrevMonth": {"description": "Navigate to the previous month. Fired from the previous icon on the\nCalendar header.", "param": "{EventFacade} event", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "guessedname": "_selectPrevMonth", "guessedtype": "function"}, "_renderMonthDays": {"protected": "", "description": "Render Calendar DOM month days elements.", "guessedname": "_renderMonthDays", "guessedtype": "function"}, "parseDate": {"return": {"type": "Date", "description": ""}, "description": "Parse a string to a Date object.", "param": "{String} dateString", "params": [{"type": "String", "name": "dateString", "description": ""}], "guessedname": "parseDate", "guessedtype": "function"}, "_syncSelectedDays": {"protected": "", "description": "Sync Calendar selected days UI.", "guessedname": "_syncSelectedDays", "guessedtype": "function"}, "_restrictDate": {"description": "Util method to disable day nodes between\n<a href=\"Calendar.html#config_minDate\">minDate</a> and\n<a href=\"Calendar.html#config_maxDate\">maxDate</a>.", "param": "{Date} currentDate Current date showed on the Calendar.", "protected": "", "params": [{"type": "Date", "name": "currentDate", "description": " Current date showed on the Calendar."}, {"type": "Node", "name": "monthDayNode", "description": " Day node to be disabled."}], "guessedname": "_restrictDate", "guessedtype": "function"}, "getFormattedSelectedDates": {"return": {"type": "Array", "description": ""}, "description": "Get the selected dates formatted by the\n<a href=\"Calendar.html#config_dateFormat\">dateFormat</a>.", "guessedname": "getFormattedSelectedDates", "guessedtype": "function"}, "_getMonthNameShort": {"return": {"type": "String", "description": ""}, "description": "Get a short month name of the passed month from the locale map.", "param": "{Number} month", "protected": "", "params": [{"type": "Number", "name": "month", "description": ""}], "guessedname": "_getMonthNameShort", "guessedtype": "function"}, "getFirstDate": {"return": {"type": "Date", "description": ""}, "description": "Get the Date for the first day of the passed year and month.", "param": "{Number} year Year in the format YYYY.", "params": [{"type": "Number", "name": "year", "description": " Year in the format YYYY."}, {"type": "Number", "name": "month", "description": " 0 for January 11 for December."}], "guessedname": "getFirstDate", "guessedtype": "function"}, "getLastDate": {"return": {"type": "Date", "description": ""}, "description": "Get the Date for the last day of the passed year and month.", "param": "{Number} year Year in the format YYYY.", "params": [{"type": "Number", "name": "year", "description": " Year in the format YYYY."}, {"type": "Number", "name": "month", "description": " 0 for January 11 for December."}], "guessedname": "getLastDate", "guessedtype": "function"}, "_normalizeYearMonth": {"return": {"type": "Object", "description": ""}, "description": "Returns an Object with the current day, month and year.", "param": "{Number} year Year in the format YYYY.", "protected": "", "params": [{"type": "Number", "name": "year", "description": " Year in the format YYYY."}, {"type": "Number", "name": "month", "description": " 0 for January 11 for December."}, {"type": "Number", "name": "day", "description": ""}], "guessedname": "_normalizeYearMonth", "guessedtype": "function"}, "_compareDates": {"return": {"type": "boolean", "description": ""}, "description": "Compare two dates.", "param": "{Date} d1", "protected": "", "params": [{"type": "Date", "name": "d1", "description": ""}, {"type": "Date", "name": "d2", "description": ""}], "guessedname": "_compareDates", "guessedtype": "function"}, "bindUI": {"protected": "", "description": "Bind the events on the Calendar UI. Lifecycle.", "guessedname": "bindUI", "guessedtype": "function"}, "_renderCalendar": {"protected": "", "description": "Render Calendar DOM elements.", "guessedname": "_renderCalendar", "guessedtype": "function"}, "_renderBlankDays": {"protected": "", "description": "Render Calendar DOM blank days elements. Blank days are used to align\nwith the week day column.", "guessedname": "_renderBlankDays", "guessedtype": "function"}, "_selectNextMonth": {"description": "Navigate to the next month. Fired from the next icon on the Calendar\nheader.", "param": "{EventFacade} event", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "guessedname": "_selectNextMonth", "guessedtype": "function"}, "_bindDelegateMonthDays": {"private": "", "description": "Delegate DOM events to the UI.", "guessedname": "_bindDelegateMonthDays", "guessedtype": "function"}, "_onMouseLeaveDays": {"description": "Fires on mouseleave days elements.", "param": "{EventFacade} event", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "guessedname": "_onMouseLeaveDays", "guessedtype": "function"}, "_eachSelectedDate": {"description": "Loop each date from <a href=\"Calendar.html#config_dates\">dates</a> and\nexecutes a callback.", "param": "{function} fn Callback to be executed for each date.", "protected": "", "params": [{"type": "function", "name": "fn", "description": " Callback to be executed for each date."}, {"type": "Dates", "name": "dates", "description": " Optional dates Array to loop through. If not passed it will use\nthe <a href=\"Calendar.html#config_dates\">dates</a>."}], "guessedname": "_eachSelectedDate", "guessedtype": "function"}, "_selectDate": {"protected": "", "description": "Select the current date returned by\n<a href=\"Calendar.html#method_getCurrentDate\">getCurrentDate</a>.", "guessedname": "_selectDate", "guessedtype": "function"}, "getDetailedSelectedDates": {"return": {"type": "Array", "description": ""}, "description": "Get an Array with selected dates with detailed information (day, month, year).\n<pre><code>[{\nyear: date.getFullYear(),\nmonth: date.getMonth(),\nday: date.getDate()\n}]</code></pre>", "guessedname": "getDetailedSelectedDates", "guessedtype": "function"}, "_afterSetDates": {"description": "Fires after select event.", "param": "{EventFacade} event select custom event", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": " select custom event"}], "guessedname": "_afterSetDates", "guessedtype": "function"}, "_onMouseEnterDays": {"description": "Fires on mouseenter days elements.", "param": "{EventFacade} event", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "guessedname": "_onMouseEnterDays", "guessedtype": "function"}, "_bindDOMEvents": {"private": "", "description": "Bind DOM events to the UI.", "guessedname": "_bindDOMEvents", "guessedtype": "function"}, "_onClickDays": {"description": "Fires on click days elements.", "param": "{EventFacade} event", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "guessedname": "_onClickDays", "guessedtype": "function"}, "_setStack": {"return": {"type": "boolean", "description": ""}, "description": "Setter for the <a href=\"Calendar.html#config_stack\">stack</a> attribute.", "param": "{boolean} value", "protected": "", "params": [{"type": "boolean", "name": "value", "description": ""}], "guessedname": "_setStack", "guessedtype": "function"}, "getSelectedDates": {"return": {"type": "Array", "description": ""}, "description": "Get the selected dates.", "guessedname": "getSelectedDates", "guessedtype": "function"}, "_getMonthName": {"return": {"type": "String", "description": ""}, "description": "Get a month name of the passed month from the locale map.", "param": "{Number} month", "protected": "", "params": [{"type": "Number", "name": "month", "description": ""}], "guessedname": "_getMonthName", "guessedtype": "function"}, "_setDates": {"return": {"type": "Array", "description": ""}, "description": "Setter for the <a href=\"Calendar.html#config_dates\">dates</a> attribute.", "param": "{Array} value", "protected": "", "params": [{"type": "Array", "name": "value", "description": ""}], "guessedname": "_setDates", "guessedtype": "function"}, "_syncView": {"protected": "", "description": "Sync Calendar header, days and selected days UI.", "guessedname": "_syncView", "guessedtype": "function"}, "syncUI": {"protected": "", "description": "Sync the Calendar UI. Lifecycle.", "guessedname": "syncUI", "guessedtype": "function"}, "_setMinMaxDate": {"return": {"type": "Date", "description": ""}, "description": "Setter for the <a href=\"Calendar.html#config_maxDates\">maxDates</a> or\n<a href=\"Calendar.html#config_mainDates\">minDates</a> attributes.", "param": "{Date} value", "protected": "", "params": [{"type": "Date", "name": "value", "description": ""}], "guessedname": "_setMinMaxDate", "guessedtype": "function"}, "_renderWeekDays": {"protected": "", "description": "Render Calendar DOM week days elements.", "guessedname": "_renderWeekDays", "guessedtype": "function"}, "getFirstDayOfWeek": {"return": {"type": "Number", "description": ""}, "description": "Get the first day of week of the passed year and month.", "param": "{Number} year Year in the format YYYY.", "params": [{"type": "Number", "name": "year", "description": " Year in the format YYYY."}, {"type": "Number", "name": "month", "description": " 0 for January 11 for December."}], "guessedname": "getFirstDayOfWeek", "guessedtype": "function"}, "_navigateMonth": {"description": "Navigate through months and re-sync the UI.", "param": "{Number} offset Offset of the number of months to navigate.\nCould be a positive or a negative offset.", "protected": "", "params": [{"type": "Number", "name": "offset", "description": " Offset of the number of months to navigate.\nCould be a positive or a negative offset."}], "guessedname": "_navigateMonth", "guessedtype": "function"}, "_removeDate": {"description": "Remove the passed date from\n<a href=\"Calendar.html#config_dates\">dates</a>.", "param": "{Date} date Date to remove", "protected": "", "params": [{"type": "Date", "name": "date", "description": " Date to remove"}], "guessedname": "_removeDate", "guessedtype": "function"}, "renderUI": {"protected": "", "description": "Create the DOM structure for the Calendar. Lifecycle.", "guessedname": "renderUI", "guessedtype": "function"}}, "extends": "OverlayContext", "superclass": "OverlayContext", "file": "aui-calendar.js", "guessedtype": "property", "shortname": "Calendar", "properties": {"weekDaysNode": {"protected": "", "type": "Node", "description": "Container for house the week days elements.", "guessedname": "weekDaysNode", "guessedtype": "property"}, "monthDaysNode": {"protected": "", "type": "Node", "description": "Container for house the month days elements.", "guessedname": "monthDaysNode", "guessedtype": "property"}, "headerContentNode": {"protected": "", "type": "Node", "description": "This node is the WidgetStdMod.HEADER of the Calendar Overlay.\nContainer to the\n<a href=\"Calendar.html#property_headertitleNode\">headertitleNode</a>.", "guessedname": "headerContentNode", "guessedtype": "property"}, "headerTitleNode": {"protected": "", "type": "Node", "description": "Header title Node.", "guessedname": "headerTitleNode", "guessedtype": "property"}, "Calendar.ATTRS": {"type": "Object", "static": "", "description": "Static property used to define the default attribute\nconfiguration for the Calendar.", "guessedname": "ATTRS", "guessedtype": "property"}, "Calendar.NAME": {"type": "String", "static": "", "description": "Static property provides a string to identify the class.", "guessedname": "NAME", "guessedtype": "property"}}, "description": "<p><img src=\"assets/images/aui-calendar/main.png\"/></p>\nA base class for Calendar, providing:\n<ul>\n<li>Widget Lifecycle (initializer, renderUI, bindUI, syncUI, destructor)</li>\n<li>Setting Configuration Options</li>\n<li>Obtaining Selected Dates</li>\n<li>Creating International Calendars</li>\n<li>Customizing the Calendar</li>\n</ul>\nQuick Example:\n<pre><code>var instance = new A.Calendar({\ntrigger: '#input1',\ndates: ['09/14/2009', '09/15/2009'],\ndateFormat: '%d/%m/%y %A',\nsetValue: true,\nselectMultipleDates: true\n}).render();\n</code></pre>\nCheck the list of <a href=\"Calendar.html#configattributes\">Configuration Attributes</a> available for\nCalendar."}, "OverlayManager": {"name": "OverlayManager", "configs": {"zIndexBase": {"default": "1000", "type": "Number", "description": "The zIndex base to be used on the stacking for all overlays\nregistered on the OverlayManager.", "guessedname": "zIndexBase", "guessedtype": "property"}}, "constructors": [{"params": [{"type": "Object", "name": "config", "description": "  Object literal specifying widget configuration properties."}], "description": "<p><img src=\"assets/images/aui-overlay-manager/main.png\"/></p>\nA base class for OverlayManager, providing:\n<ul>\n<li>Grouping overlays</li>\n<li>Show or hide the entire group of registered overlays</li>\n<li>Basic Overlay Stackability (zIndex support)</li>\n</ul>\nQuick Example:<br/>\n<pre><code>var groupOverlayManager = new A.OverlayManager();\ngroupOverlayManager.register([overlay1, overlay2, overlay3]);\ngroupOverlayManager.hideAll();\n</code></pre>\nCheck the list of <a href=\"OverlayManager.html#configattributes\">Configuration Attributes</a> available for\nOverlayManager."}], "namespace": "", "module": "aui-overlay", "events": {"zIndexBaseChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "zIndexBaseChange", "description": "Fires when the value for the configuration attribute 'zIndexBase' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "guessedname": "OverlayManager", "methods": {"_onFocusedChange": {"description": "Fires when the <a href=\"Widget.html#config_focused\">focused</a>\nattribute change. Used to invoke\n<a href=\"OverlayManager.html#method_bringToTop\">bringToTop</a>.", "param": "{EventFacade} event", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "guessedname": "_onFocusedChange", "guessedtype": "function"}, "hideAll": {"description": "Invoke the <a href=\"Overlay.html#method_hide\">hide</a> method from\nall registered Overlays.", "guessedname": "hideAll", "guessedtype": "function"}, "_registered": {"return": {"type": "boolean", "description": ""}, "description": "Check if the overlay is registered.", "param": "{Overlay} overlay Overlay", "protected": "", "params": [{"type": "Overlay", "name": "overlay", "description": " Overlay"}], "guessedname": "_registered", "guessedtype": "function"}, "_onMouseDown": {"description": "Mousedown event handler, used to invoke\n<a href=\"OverlayManager.html#method_bringToTop\">bringToTop</a>.", "param": "{EventFacade} event", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "guessedname": "_onMouseDown", "guessedtype": "function"}, "register": {"return": {"type": "Array", "description": "Registered overlays"}, "description": "Register the passed <a href=\"Overlay.html\">Overlay</a> to this\nOverlayManager.", "param": "{Overlay} overlay <a href=\"Overlay.html\">Overlay</a> instance to be registered", "params": [{"type": "Overlay", "name": "overlay", "description": " <a href=\"Overlay.html\">Overlay</a> instance to be registered"}], "guessedname": "register", "guessedtype": "function"}, "showAll": {"description": "Invoke the <a href=\"Overlay.html#method_show\">show</a> method from\nall registered Overlays.", "guessedname": "showAll", "guessedtype": "function"}, "remove": {"return": {"type": "null", "description": ""}, "description": "Remove the passed <a href=\"Overlay.html\">Overlay</a> from this\nOverlayManager.", "param": "{Overlay} overlay <a href=\"Overlay.html\">Overlay</a> instance to be removed", "params": [{"type": "Overlay", "name": "overlay", "description": " <a href=\"Overlay.html\">Overlay</a> instance to be removed"}], "guessedname": "remove", "guessedtype": "function"}, "destructor": {"protected": "", "description": "Descructor lifecycle implementation for the OverlayManager class.\nPurges events attached to the node (and all child nodes).", "guessedname": "destructor", "guessedtype": "function"}, "bringToTop": {"param": "{Overlay} overlay Instance of\n<a href=\"Overlay.html\">Overlay</a>.", "params": [{"type": "Overlay", "name": "overlay", "description": " Instance of\n<a href=\"Overlay.html\">Overlay</a>."}], "description": "Set the passed overlay zIndex to the highest value.", "guessedname": "bringToTop", "guessedtype": "function"}, "each": {"return": {"type": "null", "description": ""}, "description": "Loop through all registered <a href=\"Overlay.html\">Overlay</a> and\nexecute a callback.", "param": "{function} fn Callback to be executed on the\n<a href=\"Array.html#method_each\">Array.each</a>", "params": [{"type": "function", "name": "fn", "description": " Callback to be executed on the\n<a href=\"Array.html#method_each\">Array.each</a>"}], "guessedname": "each", "guessedtype": "function"}, "initializer": {"protected": "", "description": "Construction logic executed during OverlayManager instantiation. Lifecycle.", "guessedname": "initializer", "guessedtype": "function"}, "sortByZIndexDesc": {"return": {"type": "Number", "description": ""}, "description": "zIndex comparator. Used on Array.sort.", "param": "{Overlay} a Overlay", "params": [{"type": "Overlay", "name": "a", "description": " Overlay"}, {"type": "Overlay", "name": "b", "description": " Overlay"}], "guessedname": "sortByZIndexDesc", "guessedtype": "function"}}, "extends": "Base", "superclass": "Base", "file": "aui-overlay.js", "guessedtype": "property", "shortname": "OverlayManager", "properties": {"OverlayManager.ATTRS": {"type": "Object", "static": "", "description": "Static property used to define the default attribute\nconfiguration for the OverlayManager.", "guessedname": "ATTRS", "guessedtype": "property"}, "OverlayManager.NAME": {"type": "String", "static": "", "description": "Static property provides a string to identify the class.", "guessedname": "NAME", "guessedtype": "property"}}, "description": "<p><img src=\"assets/images/aui-overlay-manager/main.png\"/></p>\nA base class for OverlayManager, providing:\n<ul>\n<li>Grouping overlays</li>\n<li>Show or hide the entire group of registered overlays</li>\n<li>Basic Overlay Stackability (zIndex support)</li>\n</ul>\nQuick Example:<br/>\n<pre><code>var groupOverlayManager = new A.OverlayManager();\ngroupOverlayManager.register([overlay1, overlay2, overlay3]);\ngroupOverlayManager.hideAll();\n</code></pre>\nCheck the list of <a href=\"OverlayManager.html#configattributes\">Configuration Attributes</a> available for\nOverlayManager."}, "UA": {"name": "UA", "namespace": "", "module": "yui", "guessedname": "UA", "static": "", "file": "aui.js", "guessedtype": "function", "shortname": "UA", "properties": {"secure": {"type": "boolean", "static": "", "description": "Set to true if the page appears to be in SSL", "guessedname": "secure", "guessedtype": "property"}, "opera": {"type": "float", "static": "", "description": "Opera version number or 0.  Example: 9.2", "guessedname": "opera", "guessedtype": "property"}, "ie": {"type": "float", "static": "", "description": "Internet Explorer version number or 0.  Example: 6", "guessedname": "ie", "guessedtype": "property"}, "air": {"type": "float", "description": "Adobe AIR version number or 0.  Only populated if webkit is detected.\nExample: 1.0", "guessedname": "air", "guessedtype": "property"}, "mobile": {"type": "string", "static": "", "description": "The mobile property will be set to a string containing any relevant\nuser agent information when a modern mobile browser is detected.\nCurrently limited to Safari on the iPhone/iPod Touch, Nokia N-series\ndevices with the WebKit-based browser, and Opera Mini.", "guessedname": "mobile", "guessedtype": "property"}, "caja": {"type": "float", "description": "Google Caja version number or 0.", "guessedname": "caja", "guessedtype": "property"}, "os": {"type": "string", "static": "", "description": "The operating system.  Currently only detecting windows or macintosh", "guessedname": "os", "guessedtype": "property"}, "webkit": {"type": "float", "static": "", "description": "AppleWebKit version.  KHTML browsers that are not WebKit browsers \nwill evaluate to 1, other browsers 0.  Example: 418.9\n<pre>\nSafari 1.3.2 (312.6): 312.8.1 <-- Reports 312.8 -- currently the \nlatest available for Mac OSX 10.3.\nSafari 2.0.2:         416     <-- hasOwnProperty introduced\nSafari 2.0.4:         418     <-- preventDefault fixed\nSafari 2.0.4 (419.3): 418.9.1 <-- One version of Safari may run\ndifferent versions of webkit\nSafari 2.0.4 (419.3): 419     <-- Tiger installations that have been\nupdated, but not updated\nto the latest patch.\nWebkit 212 nightly:   522+    <-- Safari 3.0 precursor (with native SVG\nand many major issues fixed).\nSafari 3.0.4 (523.12) 523.12  <-- First Tiger release - automatic update\nfrom 2.x via the 10.4.11 OS patch\nWebkit nightly 1/2008:525+    <-- Supports DOMContentLoaded event.\nyahoo.com user agent hack removed.\n</pre>\nhttp://en.wikipedia.org/wiki/Safari_version_history", "guessedname": "webkit", "guessedtype": "property"}, "gecko": {"type": "float", "static": "", "description": "Gecko engine revision number.  Will evaluate to 1 if Gecko \nis detected but the revision could not be found. Other browsers\nwill be 0.  Example: 1.8\n<pre>\nFirefox 1.0.0.4: 1.7.8   <-- Reports 1.7\nFirefox 1.5.0.9: 1.8.0.9 <-- 1.8\nFirefox 2.0.0.3: 1.8.1.3 <-- 1.81\nFirefox 3.0   <-- 1.9\nFirefox 3.5   <-- 1.91\n</pre>", "guessedname": "gecko", "guessedtype": "property"}, "chrome": {"type": "float", "static": "", "description": "Chrome will be detected as webkit, but this property will also\nbe populated with the Chrome version number", "guessedname": "chrome", "guessedtype": "property"}}, "description": "YUI user agent detection.\nDo not fork for a browser if it can be avoided.  Use feature detection when\nyou can.  Use the user agent as a last resort.  UA stores a version\nnumber for the browser engine, 0 otherwise.  This value may or may not map\nto the version number of the browser using the engine.  The value is \npresented as a float so that it can easily be used for boolean evaluation \nas well as for looking for a particular range of versions.  Because of this, \nsome of the granularity of the version info may be lost (e.g., Gecko 1.8.0.9 \nreports 1.8)."}, "DataSourceJSONSchema": {"name": "DataSourceJSONSchema", "namespace": "", "module": "datasource", "guessedname": "DataSourceJSONSchema", "methods": {"_beforeDefDataFn\n<dl>\n<dt>tId (Number)</dt> <dd>Unique transaction ID.</dd>\n<dt>request (Object)</dt> <dd>The request.</dd>\n<dt>callback (Object)</dt> <dd>The callback object with the following properties:\n<dl>\n<dt>success (Function)</dt> <dd>Success handler.</dd>\n<dt>failure (Function)</dt> <dd>Failure handler.</dd>\n</dl>\n</dd>\n<dt>data (Object)</dt> <dd>Raw data.</dd>\n</dl>": {"protected": "", "description": "Parses raw data into a normalized response.", "guessedname": "_beforeDefDataFn", "guessedtype": "function"}, "initializer": {"description": "Internal init() handler.", "param": "config {Object} Config object.", "params": [{"type": "Object", "name": "config", "description": "  Config object."}], "private": "", "guessedname": "initializer", "guessedtype": "function"}}, "extends": "Plugin.Base", "superclass": "Plugin.Base", "file": "datasource.js", "guessedtype": "function", "shortname": "DataSourceJSONSchema", "properties": {"NS": {"description": "The namespace for the plugin. This will be the property on the host which\nreferences the plugin instance.", "value": "\"schema\"", "static": "", "guessedname": "NS", "guessedtype": "property", "type": "String", "final": ""}, "NAME": {"description": "Class name.", "value": "\"dataSourceJSONSchema\"", "static": "", "guessedname": "NAME", "guessedtype": "property", "type": "String", "final": ""}}, "description": "Adds schema-parsing to the DataSource Utility."}, "DD.Scroll": {"properties": {"_scrollTimer": {"guessedname": "_scrollTimer", "type": "{Y.later}", "description": "Holder for the Timer object returned from Y.later.", "private": "", "guessedtype": "property"}, "_dimCache": {"guessedname": "_dimCache", "type": "Object", "description": "Cache of the dragNode dims.", "private": "", "guessedtype": "property"}, "_vpRegionCache": {"guessedname": "_vpRegionCache", "type": "Object", "description": "Cache of the Viewport dims.", "private": "", "guessedtype": "property"}, "_scrolling": {"guessedname": "_scrolling", "type": "Boolean", "description": "Tells if we are actively scrolling or not.", "private": "", "guessedtype": "property"}}, "name": "DD.Scroll", "constructors": [{"description": "Base scroller class used to create the Plugin.DDNodeScroll and Plugin.DDWinScroll.\nThis class should not be called on it's own, it's designed to be a plugin."}], "namespace": "DD", "module": "dd", "events": {"hostChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "hostChange", "description": "Fires when the value for the configuration attribute 'host' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "windowScrollChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "windowScrollChange", "description": "Fires when the value for the configuration attribute 'windowScroll' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "verticalChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "verticalChange", "description": "Fires when the value for the configuration attribute 'vertical' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "bufferChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "bufferChange", "description": "Fires when the value for the configuration attribute 'buffer' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "horizontalChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "horizontalChange", "description": "Fires when the value for the configuration attribute 'horizontal' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "parentScrollChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "parentScrollChange", "description": "Fires when the value for the configuration attribute 'parentScroll' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "scrollDelayChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "scrollDelayChange", "description": "Fires when the value for the configuration attribute 'scrollDelay' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "guessedname": "S", "methods": {"_cancelScroll": {"description": "Cancel a currently running scroll timer.", "private": "", "guessedname": "_cancelScroll", "guessedtype": "function"}, "end": {"description": "Called from the drag:end event", "guessedname": "end", "guessedtype": "function"}, "start": {"description": "Called from the drag:start event", "guessedname": "start", "guessedtype": "function"}, "align": {"description": "Called from the drag:align event to determine if we need to scroll.", "guessedname": "align", "guessedtype": "function"}, "_checkWinScroll": {"description": "Check to see if we need to fire the scroll timer. If scroll timer is running this will scroll the window.", "param": "{Boolean} move Should we move the window. From Y.later", "params": [{"type": "Boolean", "name": "move", "description": " Should we move the window. From Y.later"}], "private": "", "guessedname": "_checkWinScroll", "guessedtype": "function"}, "_setDimCache": {"description": "Set the cache of the dragNode dims.", "private": "", "guessedname": "_setDimCache", "guessedtype": "function"}, "toString": {"return": {"type": "", "description": "String name for the object"}, "description": "General toString method for logging", "guessedname": "toString", "guessedtype": "function"}, "_initScroll": {"description": "Cancel a previous scroll timer and init a new one.", "private": "", "guessedname": "_initScroll", "guessedtype": "function"}, "_getVPRegion": {"description": "Sets the _vpRegionCache property with an Object containing the dims from the viewport.", "private": "", "guessedname": "_getVPRegion", "guessedtype": "function"}}, "extends": "Base", "superclass": "Base", "file": "dd.js", "guessedtype": "function", "shortname": "Scroll", "configs": {"vertical": {"type": "Boolean", "description": "Allow vertical scrolling, default: true.", "guessedname": "vertical", "guessedtype": "property"}, "scrollDelay": {"type": "Number", "description": "The number of milliseconds delay to pass to the auto scroller. Default: 235", "guessedname": "scrollDelay", "guessedtype": "property"}, "buffer": {"type": "Number", "description": "The number of pixels from the edge of the screen to turn on scrolling. Default: 30", "guessedname": "buffer", "guessedtype": "property"}, "windowScroll": {"type": "Boolean", "description": "Turn on window scroll support, default: false", "guessedname": "windowScroll", "guessedtype": "property"}, "host": {"type": "Object", "description": "The host we are plugged into.", "guessedname": "host", "guessedtype": "property"}, "parentScroll": {"type": "Node", "description": "Internal config option to hold the node that we are scrolling. Should not be set by the developer.", "guessedname": "parentScroll", "guessedtype": "property"}, "horizontal": {"type": "Boolean", "description": "Allow horizontal scrolling, default: true.", "guessedname": "horizontal", "guessedtype": "property"}}, "description": "Base scroller class used to create the Plugin.DDNodeScroll and Plugin.DDWinScroll.\nThis class should not be called on it's own, it's designed to be a plugin."}, "TreeNodeIO": {"name": "TreeNodeIO", "configs": {"loaded": {"default": "false", "type": "boolean", "description": "Whether the current TreeNode has loaded the content.", "guessedname": "loaded", "guessedtype": "property"}, "loading": {"default": "false", "type": "boolean", "description": "Whether the current TreeNode IO transaction is loading.", "guessedname": "loading", "guessedtype": "property"}, "cache": {"default": "true", "type": "boolean", "description": "Whether the current TreeNode should cache the loaded content or not.", "guessedname": "cache", "guessedtype": "property"}, "io": {"default": "Default IO Configuration.", "type": "Object", "description": "IO options for the current TreeNode load the children.", "guessedname": "io", "guessedtype": "property"}}, "constructors": [{"params": [{"type": "Object", "name": "config", "description": "  Object literal specifying widget configuration properties."}], "description": "A base class for TreeNodeIO, providing:\n<ul>\n<li>Widget Lifecycle (initializer, renderUI, bindUI, syncUI, destructor)</li>\n<li>Ajax support to load the children of the current TreeNode</li>\n</ul>\nQuick Example:<br/>\n<pre><code>var treeNodeIO = new A.TreeNodeIO({\nlabel: 'TreeNodeIO',\ncache: false,\nio: {\nurl: 'assets/content.html'\n}\n});\n</code></pre>\nCheck the list of <a href=\"TreeNodeIO.html#configattributes\">Configuration Attributes</a> available for\nTreeNodeIO."}], "namespace": "", "module": "aui-tree", "events": {"loadingChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "loadingChange", "description": "Fires when the value for the configuration attribute 'loading' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "loadedChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "loadedChange", "description": "Fires when the value for the configuration attribute 'loaded' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "ioChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "ioChange", "description": "Fires when the value for the configuration attribute 'io' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "cacheChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "cacheChange", "description": "Fires when the value for the configuration attribute 'cache' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "guessedname": "TreeNodeIO", "methods": {"_createEvents": {"private": "", "description": "Create custom events.", "guessedname": "_createEvents", "guessedtype": "function"}, "ioFailureHandler": {"description": "IO Failure handler.", "guessedname": "ioFailureHandler", "guessedtype": "function"}, "_syncPaginatorIOData": {"protected": "", "description": "Adds two extra IO data parameter to the request to handle the\npaginator. By default these parameters are <code>limit</code> and\n<code>start</code>.", "guessedname": "_syncPaginatorIOData", "guessedtype": "function"}, "ioCompleteHandler": {"description": "IO Complete handler.", "guessedname": "ioCompleteHandler", "guessedtype": "function"}, "initIO": {"description": "Initialize the IO transaction setup on the <a\nhref=\"TreeNode.html#config_io\">io</a> attribute.", "guessedname": "initIO", "guessedtype": "function"}, "ioStartHandler": {"description": "IO Start handler.", "guessedname": "ioStartHandler", "guessedtype": "function"}, "_defPaginatorClickFn": {"description": "Default paginatorClick event handler. Increment the\n<code>paginator.start</code> to the next <code>paginator.limit</code>.", "param": "{EventFacade} event The Event object", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": " The Event object"}], "guessedname": "_defPaginatorClickFn", "guessedtype": "function"}, "_syncPaginatorUI": {"protected": "", "description": "Sync the paginator link UI.", "guessedname": "_syncPaginatorUI", "guessedtype": "function"}, "_setIO": {"return": {"type": "Object", "description": ""}, "description": "Setter for <a href=\"TreeNodeIO.html#config_io\">io</a>.", "param": "{Object} v", "protected": "", "params": [{"type": "Object", "name": "v", "description": ""}], "guessedname": "_setIO", "guessedtype": "function"}, "_inheritOwnerTreeAttrs": {"protected": "", "description": "If not specified on the TreeNode some attributes are inherited from the\nownerTree by this method.", "guessedname": "_inheritOwnerTreeAttrs", "guessedtype": "function"}, "_bindPaginatorUI": {"protected": "", "description": "Bind events to the paginator \"show more\" link.", "guessedname": "_bindPaginatorUI", "guessedtype": "function"}, "_handlePaginatorClickEvent": {"description": "Fires the paginatorClick event.", "param": "{EventFacade} event paginatorClick event facade", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": " paginatorClick event facade"}], "guessedname": "_handlePaginatorClickEvent", "guessedtype": "function"}, "bindUI": {"protected": "", "description": "Bind the events on the TreeNodeIO UI. Lifecycle.", "guessedname": "bindUI", "guessedtype": "function"}, "ioSuccessHandler": {"description": "IO Success handler.", "guessedname": "ioSuccessHandler", "guessedtype": "function"}, "renderUI": {"protected": "", "description": "Create the DOM structure for the TreeNodeIO. Lifecycle.", "guessedname": "renderUI", "guessedtype": "function"}}, "extends": "TreeNode", "superclass": "TreeNode", "file": "aui-tree.js", "guessedtype": "property", "shortname": "TreeNodeIO", "properties": {"TreeNode.ATTRS": {"type": "Object", "static": "", "description": "Static property used to define the default attribute\nconfiguration for the TreeNode.", "guessedname": "ATTRS", "guessedtype": "property"}, "TreeNode.NAME": {"type": "String", "static": "", "description": "Static property provides a string to identify the class.", "guessedname": "NAME", "guessedtype": "property"}}, "description": "A base class for TreeNodeIO, providing:\n<ul>\n<li>Widget Lifecycle (initializer, renderUI, bindUI, syncUI, destructor)</li>\n<li>Ajax support to load the children of the current TreeNode</li>\n</ul>\nQuick Example:<br/>\n<pre><code>var treeNodeIO = new A.TreeNodeIO({\nlabel: 'TreeNodeIO',\ncache: false,\nio: {\nurl: 'assets/content.html'\n}\n});\n</code></pre>\nCheck the list of <a href=\"TreeNodeIO.html#configattributes\">Configuration Attributes</a> available for\nTreeNodeIO."}, "Object": {"name": "Object", "namespace": "", "module": "yui", "methods": {"setValue": {"return": {"type": "Object", "description": "The modified object, with the new sub value set, or \nundefined, if the path was invalid."}, "description": "Sets the sub-attribute value at the provided path on the \nvalue object.  Returns the modified value object, or \nundefined if the path is invalid.", "param": "o             The object on which to set the sub value.", "params": [{"type": "", "name": "o", "description": "             The object on which to set the sub value."}, {"type": "Array", "name": "path", "description": "   A path array, specifying the object traversal path\nat which to set the sub value."}, {"type": "Any", "name": "val", "description": "      The new value for the sub-attribute."}], "guessedname": "setValue", "guessedtype": "function"}, "keys": {"return": {"type": "string[]", "description": "the keys"}, "description": "Returns an array containing the object's keys", "param": "o an object", "static": "", "guessedname": "keys", "guessedtype": "function", "params": [{"type": "", "name": "o", "description": " an object"}], "todo": "use native Object.keys() if available"}, "_extract": {"return": {"type": "boolean|Array", "description": "the extracted info"}, "description": "Extracts the keys, values, or size from an object", "private": "", "static": "", "param": "o the object", "guessedname": "_extract", "guessedtype": "function", "params": [{"type": "", "name": "o", "description": " the object"}, {"type": "", "name": "what", "description": " what to extract (0: keys, 1: values, 2: size)"}]}, "hasValue": {"return": {"type": "boolean", "description": "true if the object contains the value"}, "description": "Returns true if the object contains a given value", "param": "o an object", "static": "", "guessedname": "hasValue", "guessedtype": "function", "params": [{"type": "", "name": "o", "description": " an object"}, {"type": "", "name": "v", "description": " the value to query"}]}, "getValue": {"return": {"type": "Any", "description": "The value stored in the path, undefined if not found,\nundefined if the source is not an object.  Returns the source object \nif an empty path is provided."}, "description": "Retrieves the sub value at the provided path,\nfrom the value object provided.", "param": "o The object from which to extract the property value", "params": [{"type": "", "name": "o", "description": " The object from which to extract the property value"}, {"type": "Array", "name": "path", "description": "  A path array, specifying the object traversal path\nfrom which to obtain the sub value."}], "guessedname": "getValue", "guessedtype": "function"}, "each": {"return": {"type": "YUI", "description": "the YUI instance"}, "description": "Executes a function on each item. The function\nreceives the value, the key, and the object\nas paramters (in that order).", "param": "o the object to iterate", "static": "", "guessedname": "each", "guessedtype": "function", "params": [{"type": "", "name": "o", "description": " the object to iterate"}, {"type": "Function", "name": "f", "description": "  the function to execute on each item. The function \nreceives three arguments: the value, the the key, the full object."}, {"type": "", "name": "c", "description": " the execution context"}, {"type": "boolean", "name": "proto", "description": "  include proto"}]}, "()": {"return": {"type": "Object", "description": "the new object"}, "description": "Y.Object(o) returns a new object based upon the supplied object.", "param": "o the supplier object", "static": "", "guessedname": "Object", "guessedtype": "function", "params": [{"type": "", "name": "o", "description": " the supplier object"}], "todo": "Use native Object.create() when available"}, "values": {"return": {"type": "Array", "description": "the values"}, "description": "Returns an array containing the object's values", "param": "o an object", "static": "", "guessedname": "values", "guessedtype": "function", "params": [{"type": "", "name": "o", "description": " an object"}], "todo": "use native Object.values() if available"}, "owns": {"return": {"type": "boolean", "description": "true if the object has the property on the instance"}, "description": "Determines whether or not the property was added\nto the object instance.  Returns false if the property is not present\nin the object, or was inherited from the prototype.", "param": "o {any} The object being testing", "static": "", "guessedname": "owns", "guessedtype": "property", "params": [{"type": "any", "name": "o", "description": "  The object being testing"}, {"type": "string", "name": "p", "description": "  the property to look for"}]}, "hasKey": {"return": {"type": "boolean", "description": "true if the object contains the key"}, "description": "Returns true if the object contains a given key", "param": "o an object", "static": "", "guessedname": "hasKey", "guessedtype": "property", "params": [{"type": "", "name": "o", "description": " an object"}, {"type": "", "name": "k", "description": " the key to query"}]}, "size": {"return": {"type": "int", "description": "the size"}, "description": "Returns the size of an object", "param": "o an object", "static": "", "guessedname": "size", "guessedtype": "function", "params": [{"type": "", "name": "o", "description": " an object"}], "todo": "use native Object.size() if available"}}, "file": "aui.js", "shortname": "Object", "description": "Adds the following Object utilities to the YUI instance"}, "ColorPicker": {"name": "ColorPicker", "constructors": [{"params": [{"type": "Object", "name": "config", "description": "  Object literal specifying widget configuration properties."}], "description": "A base class for ColorPicker, providing:\n<ul>\n<li>Widget Lifecycle (initializer, renderUI, bindUI, syncUI, destructor)</li>\n<li>ColorPicker utility</li>\n</ul>\nCheck the list of <a href=\"ColorPicker.html#configattributes\">Configuration Attributes</a> available for\nColorPicker."}], "namespace": "", "module": "aui-color-picker", "guessedname": "ColorPicker", "methods": {"bindUI": {"protected": "", "description": "Bind the events on the ColorPicker UI. Lifecycle.", "guessedname": "bindUI", "guessedtype": "function"}, "syncUI": {"protected": "", "description": "Sync the ColorPicker UI. Lifecycle.", "guessedname": "syncUI", "guessedtype": "function"}, "renderUI": {"protected": "", "description": "Create the DOM structure for the ColorPicker. Lifecycle.", "guessedname": "renderUI", "guessedtype": "function"}}, "extends": "OverlayContext", "superclass": "OverlayContext", "file": "aui-color-picker.js", "guessedtype": "property", "shortname": "ColorPicker", "properties": {"ColorPicker.ATTRS": {"type": "Object", "static": "", "description": "Static property used to define the default attribute\nconfiguration for the ColorPicker.", "guessedname": "ATTRS", "guessedtype": "property"}, "ColorPicker.NAME": {"type": "String", "static": "", "description": "Static property provides a string to identify the class.", "guessedname": "NAME", "guessedtype": "property"}}, "description": "A base class for ColorPicker, providing:\n<ul>\n<li>Widget Lifecycle (initializer, renderUI, bindUI, syncUI, destructor)</li>\n<li>ColorPicker utility</li>\n</ul>\nCheck the list of <a href=\"ColorPicker.html#configattributes\">Configuration Attributes</a> available for\nColorPicker."}, "ImageViewer": {"name": "ImageViewer", "configs": {"links": {"type": "String | NodeList", "description": "Selector or NodeList containing the links where the ImageViewer\nextracts the information to generate the thumbnails.", "guessedname": "links", "guessedtype": "property"}, "image": {"description": "Image node element used to load the images.", "default": "Generated img element.", "readonly": "", "guessedname": "image", "guessedtype": "property", "type": "Node"}, "totalLinks": {"description": "Helper attribute to get the <code>size</code> of the <a\nhref=\"ImageViewer.html#config_links\">links</a> NodeList.", "default": "true", "readonly": "", "guessedname": "totalLinks", "guessedtype": "property", "type": "boolean"}, "arrowRightEl": {"description": "The element to be used as arrow right.", "default": "Generated HTML div element.", "readonly": "", "guessedname": "arrowRightEl", "guessedtype": "property", "type": "Node"}, "infoTemplate": {"default": "'Image {current} of {total}'", "type": "String", "description": "String template used to display the information.", "guessedname": "infoTemplate", "guessedtype": "property"}, "loader": {"default": "Generated HTML div element.", "type": "Node", "description": "HTML element to house the <code>img</code> which is being loaded.", "guessedname": "loader", "guessedtype": "property"}, "infoEl": {"description": "The element to be used as info.", "default": "Generated HTML div element.", "readonly": "", "guessedname": "infoEl", "guessedtype": "property", "type": "Node"}, "preloadAllImages": {"default": "false", "type": "boolean", "description": "Preload all images grabbed from the <a\nhref=\"ImageViewer.html#config_links\">links</a> attribute.", "guessedname": "preloadAllImages", "guessedtype": "property"}, "closeEl": {"description": "The element to be used as close.", "default": "Generated HTML div element.", "readonly": "", "guessedname": "closeEl", "guessedtype": "property", "type": "Node"}, "captionFromTitle": {"default": "true", "type": "boolean", "description": "If <code>true</code> the <a\nhref=\"ImageViewer.html#config_caption\">caption</a> will be pulled\nfrom the title DOM attribute.", "guessedname": "captionFromTitle", "guessedtype": "property"}, "imageAnim": {"default": "Predefined <a href=\"Anim.html\">Anim</a> configuration.", "type": "Object", "description": "Configuration attributes passed to the <a href=\"Anim.html\">Anim</a>\nclass.", "guessedname": "imageAnim", "guessedtype": "property"}, "loading": {"default": "false", "type": "boolean", "description": "Whether the image is during a loading state.", "guessedname": "loading", "guessedtype": "property"}, "showClose": {"default": "true", "type": "boolean", "description": "Show close icon control.", "guessedname": "showClose", "guessedtype": "property"}, "maxWidth": {"default": "Infinity", "type": "Number", "description": "The maximum width of the element", "guessedname": "maxWidth", "guessedtype": "property"}, "showArrows": {"default": "true", "type": "boolean", "description": "Show the arrow controls.", "guessedname": "showArrows", "guessedtype": "property"}, "anim": {"default": "true", "type": "boolean", "description": "If <code>true</code> the navigation is animated.", "guessedname": "anim", "guessedtype": "property"}, "arrowLeftEl": {"description": "The element to be used as arrow left.", "default": "Generated HTML div element.", "readonly": "", "guessedname": "arrowLeftEl", "guessedtype": "property", "type": "Node"}, "centered": {"default": "true", "type": "boolean", "description": "If <code>true</code> the Overlay with the image will be positioned\non the center of the viewport.", "guessedname": "centered", "guessedtype": "property"}, "captionEl": {"description": "The element to be used as caption.", "default": "Generated HTML div element.", "readonly": "", "guessedname": "captionEl", "guessedtype": "property", "type": "Node"}, "loadingEl": {"default": "Generated HTML div element.", "type": "Node", "description": "The element to be used as loading.", "guessedname": "loadingEl", "guessedtype": "property"}, "maxHeight": {"default": "Infinity", "type": "Number", "description": "The maximum height of the element", "guessedname": "maxHeight", "guessedtype": "property"}, "caption": {"default": "''", "type": "String", "description": "The caption of the displayed image.", "guessedname": "caption", "guessedtype": "property"}, "currentIndex": {"default": "0", "type": "Number", "description": "Index of the current image.", "guessedname": "currentIndex", "guessedtype": "property"}, "modal": {"default": "{ opacity: .8, background: '#000' }", "type": "boolean | Object", "description": "Displays the modal <a href=\"OverlayMask.html\">OverlayMask</a> on\nthe viewport. Set to <code>false</code> to disable.", "guessedname": "modal", "guessedtype": "property"}}, "constructors": [{"params": [{"type": "Object", "name": "config", "description": "  Object literal specifying widget configuration properties."}], "description": "<p><img src=\"assets/images/aui-image-viewer-base/main.png\"/></p>\nA base class for ImageViewer, providing:\n<ul>\n<li>Widget Lifecycle (initializer, renderUI, bindUI, syncUI, destructor)</li>\n<li>Displays an image in a Overlay</li>\n<li>Keyboard navigation support</li>\n</ul>\nQuick Example:<br/>\n<pre><code>var instance = new A.ImageViewer({\nlinks: '#gallery1 a',\ncaption: 'Liferay Champion Soccer',\ncaptionFromTitle: true,\npreloadNeighborImages: true,\npreloadAllImages: true,\nshowInfo: true\n}).render();\n</code></pre>\nCheck the list of <a href=\"ImageViewer.html#configattributes\">Configuration Attributes</a> available for\nImageViewer."}], "namespace": "", "module": "aui-image-viewer", "events": {"preloadAllImagesChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "preloadAllImagesChange", "description": "Fires when the value for the configuration attribute 'preloadAllImages' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "load": {"type": "{Event.Custom}", "params": [{"type": "Event.Facade", "name": "event", "description": " The load event."}], "description": "Handles the load event. Fired when a image is laoded.", "param": "{Event.Facade} event The load event."}, "infoTemplateChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "infoTemplateChange", "description": "Fires when the value for the configuration attribute 'infoTemplate' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "modalChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "modalChange", "description": "Fires when the value for the configuration attribute 'modal' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "loaderChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "loaderChange", "description": "Fires when the value for the configuration attribute 'loader' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "request": {"type": "{Event.Custom}", "params": [{"type": "Event.Facade", "name": "event", "description": " The load event."}], "description": "Handles the request event. Fired when a image is requested.", "param": "{Event.Facade} event The load event."}, "maxWidthChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "maxWidthChange", "description": "Fires when the value for the configuration attribute 'maxWidth' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "linksChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "linksChange", "description": "Fires when the value for the configuration attribute 'links' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "imageAnimChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "imageAnimChange", "description": "Fires when the value for the configuration attribute 'imageAnim' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "showCloseChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "showCloseChange", "description": "Fires when the value for the configuration attribute 'showClose' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "infoElChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "infoElChange", "description": "Fires when the value for the configuration attribute 'infoEl' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "currentIndexChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "currentIndexChange", "description": "Fires when the value for the configuration attribute 'currentIndex' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "arrowRightElChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "arrowRightElChange", "description": "Fires when the value for the configuration attribute 'arrowRightEl' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "totalLinksChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "totalLinksChange", "description": "Fires when the value for the configuration attribute 'totalLinks' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "maxHeightChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "maxHeightChange", "description": "Fires when the value for the configuration attribute 'maxHeight' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "arrowLeftElChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "arrowLeftElChange", "description": "Fires when the value for the configuration attribute 'arrowLeftEl' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "showArrowsChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "showArrowsChange", "description": "Fires when the value for the configuration attribute 'showArrows' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "captionFromTitleChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "captionFromTitleChange", "description": "Fires when the value for the configuration attribute 'captionFromTitle' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "anim": {"type": "{Event.Custom}", "params": [{"type": "Event.Facade", "name": "event", "description": " The load event."}], "description": "Handles the anim event. Fired when the image anim ends.", "param": "{Event.Facade} event The load event."}, "animChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "animChange", "description": "Fires when the value for the configuration attribute 'anim' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "captionElChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "captionElChange", "description": "Fires when the value for the configuration attribute 'captionEl' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "loadingElChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "loadingElChange", "description": "Fires when the value for the configuration attribute 'loadingEl' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "loadingChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "loadingChange", "description": "Fires when the value for the configuration attribute 'loading' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "imageChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "imageChange", "description": "Fires when the value for the configuration attribute 'image' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "captionChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "captionChange", "description": "Fires when the value for the configuration attribute 'caption' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "centeredChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "centeredChange", "description": "Fires when the value for the configuration attribute 'centered' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "closeElChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "closeElChange", "description": "Fires when the value for the configuration attribute 'closeEl' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "guessedname": "ImageViewer", "methods": {"preloadImage": {"param": "{Number} currentIndex", "params": [{"type": "Number", "name": "currentIndex", "description": ""}], "description": "Preload an image based on its <code>index</code>.", "guessedname": "preloadImage", "guessedtype": "function"}, "_getInfoTemplate": {"return": {"type": "String", "description": "Parsed string."}, "description": "Get the <a href=\"ImageViewer.html#config_info\">info</a> template.", "param": "{String} v template", "protected": "", "params": [{"type": "String", "name": "v", "description": " template"}], "guessedname": "_getInfoTemplate", "guessedtype": "function"}, "hasNext": {"return": {"type": "boolean", "description": ""}, "description": "Check if there is a next element to navigate.", "guessedname": "hasNext", "guessedtype": "function"}, "show": {"description": "Show the ImageViewer UI.", "guessedname": "show", "guessedtype": "function"}, "showLoading": {"description": "Show the loading icon.", "guessedname": "showLoading", "guessedtype": "function"}, "hasLink": {"return": {"type": "boolean", "description": ""}, "description": "Check if there is a node reference for the <code>currentIndex</code>.", "param": "{Number} currentIndex", "params": [{"type": "Number", "name": "currentIndex", "description": ""}], "guessedname": "hasLink", "guessedtype": "function"}, "preloadAllImages": {"description": "Preload all images.", "guessedname": "preloadAllImages", "guessedtype": "function"}, "getLink": {"return": {"type": "Node", "description": ""}, "description": "Get the Node reference to the <code>currentIndex</code> element from\nthe <a href=\"ImageViewer.html#config_links\">links</a>.", "param": "{Number} currentIndex", "params": [{"type": "Number", "name": "currentIndex", "description": ""}], "guessedname": "getLink", "guessedtype": "function"}, "_getRatio": {"return": {"type": "Number", "description": ""}, "description": "Calculate the resize ratio for the loaded image.", "param": "{Number} width Image width", "protected": "", "params": [{"type": "Number", "name": "width", "description": " Image width"}, {"type": "Number", "name": "height", "description": " Image height"}], "guessedname": "_getRatio", "guessedtype": "function"}, "close": {"description": "Close the ImageViewer.", "guessedname": "close", "guessedtype": "function"}, "next": {"description": "Load the next image.", "guessedname": "next", "guessedtype": "function"}, "_afterLoadingChange": {"description": "Fires after the value of the\n<a href=\"ImageViewer.html#config_loading\">loading</a> attribute change.", "param": "{EventFacade} event", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "guessedname": "_afterLoadingChange", "guessedtype": "function"}, "hideMask": {"description": "Hide the <a href=\"OverlayMask.html\">OverlayMask</a> used when <a\nhref=\"ImageViewer.html#config_modal\">modal</a> is <code>true</code>.", "guessedname": "hideMask", "guessedtype": "function"}, "_renderControls": {"protected": "", "description": "Render the controls UI.", "guessedname": "_renderControls", "guessedtype": "function"}, "destructor": {"protected": "", "description": "Descructor lifecycle implementation for the ImageViewer class.\nPurges events attached to the node (and all child nodes).", "guessedname": "destructor", "guessedtype": "function"}, "hasPrev": {"return": {"type": "boolean", "description": ""}, "description": "Check if there is a previous element to navigate.", "guessedname": "hasPrev", "guessedtype": "function"}, "bindUI": {"protected": "", "description": "Bind the events on the ImageViewer UI. Lifecycle.", "guessedname": "bindUI", "guessedtype": "function"}, "loadImage": {"param": "{String} src Image src.", "params": [{"type": "String", "name": "src", "description": " Image src."}], "description": "Load an image <code>src</code> on the ImageViewer.", "guessedname": "loadImage", "guessedtype": "function"}, "_renderFooter": {"protected": "", "description": "Render the footer UI.", "guessedname": "_renderFooter", "guessedtype": "function"}, "_syncCaptionUI": {"protected": "", "description": "Sync the caption UI.", "guessedname": "_syncCaptionUI", "guessedtype": "function"}, "_onClickLinks": {"description": "Fires the click event on the links.", "param": "{EventFacade} event click event facade", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": " click event facade"}], "guessedname": "_onClickLinks", "guessedtype": "function"}, "showMask": {"description": "Show the the OverlayMask used on the <a\nhref=\"ImageViewer.html#config_modal\">modal</a>.", "guessedname": "showMask", "guessedtype": "function"}, "_onClickCloseEl": {"description": "Fires the click event on the close icon.", "param": "{EventFacade} event click event facade", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": " click event facade"}], "guessedname": "_onClickCloseEl", "guessedtype": "function"}, "_syncControlsUI": {"protected": "", "description": "Sync the controls UI.", "guessedname": "_syncControlsUI", "guessedtype": "function"}, "_syncInfoUI": {"protected": "", "description": "Sync the info UI.", "guessedname": "_syncInfoUI", "guessedtype": "function"}, "_afterVisibleChange": {"description": "Fires after the value of the\n<a href=\"ImageViewer.html#config_visible\">visible</a> attribute change.", "param": "{EventFacade} event", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "guessedname": "_afterVisibleChange", "guessedtype": "function"}, "_onClickRightArrow": {"description": "Fires the click event on the right arrow icon.", "param": "{EventFacade} event click event facade", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": " click event facade"}], "guessedname": "_onClickRightArrow", "guessedtype": "function"}, "_onClickLeftArrow": {"description": "Fires the click event on the left arrow icon.", "param": "{EventFacade} event click event facade", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": " click event facade"}], "guessedname": "_onClickLeftArrow", "guessedtype": "function"}, "_uiSetImageSize": {"description": "Set the size of the image and the overlay respecting the\nmaxHeight/maxWidth ratio.", "param": "{HTMLImage} image Image", "protected": "", "params": [{"type": "HTMLImage", "name": "image", "description": " Image"}], "guessedname": "_uiSetImageSize", "guessedtype": "function"}, "_syncImageViewerUI": {"protected": "", "description": "Sync the ImageViewer UI.", "guessedname": "_syncImageViewerUI", "guessedtype": "function"}, "hideControls": {"description": "Hide all UI controls (i.e., arrows, close icon etc).", "guessedname": "hideControls", "guessedtype": "function"}, "getCurrentLink": {"return": {"type": "Node", "description": ""}, "description": "Get the current loaded node link reference.", "guessedname": "getCurrentLink", "guessedtype": "function"}, "_onKeyInteraction": {"description": "Handles the key interaction (i.e., next, prev etc).", "param": "{EventFacade} event click event facade", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": " click event facade"}], "guessedname": "_onKeyInteraction", "guessedtype": "function"}, "_onLoadImage": {"description": "Fires on a image load.", "param": "{EventFacade} event", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "guessedname": "_onLoadImage", "guessedtype": "function"}, "_afterRender": {"description": "Fires after the ImageViewer render phase.", "param": "{EventFacade} event", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "guessedname": "_afterRender", "guessedtype": "function"}, "renderUI": {"protected": "", "description": "Create the DOM structure for the ImageViewer. Lifecycle.", "guessedname": "renderUI", "guessedtype": "function"}}, "extends": "OverlayBase", "superclass": "OverlayBase", "file": "aui-image-viewer.js", "guessedtype": "property", "shortname": "ImageViewer", "properties": {"ImageViewer.NAME": {"type": "String", "static": "", "description": "Static property provides a string to identify the class.", "guessedname": "NAME", "guessedtype": "property"}, "_keyHandler": {"protected": "", "type": "EventHandler", "description": "Handler for the key events.", "guessedname": "_keyHandler", "guessedtype": "property"}, "activeImage": {"protected": "", "type": "Number", "description": "The index of the active image.", "guessedname": "activeImage", "guessedtype": "property"}, "ImageViewer.ATTRS": {"type": "Object", "static": "", "description": "Static property used to define the default attribute\nconfiguration for the ImageViewer.", "guessedname": "ATTRS", "guessedtype": "property"}}, "description": "<p><img src=\"assets/images/aui-image-viewer-base/main.png\"/></p>\nA base class for ImageViewer, providing:\n<ul>\n<li>Widget Lifecycle (initializer, renderUI, bindUI, syncUI, destructor)</li>\n<li>Displays an image in a Overlay</li>\n<li>Keyboard navigation support</li>\n</ul>\nQuick Example:<br/>\n<pre><code>var instance = new A.ImageViewer({\nlinks: '#gallery1 a',\ncaption: 'Liferay Champion Soccer',\ncaptionFromTitle: true,\npreloadNeighborImages: true,\npreloadAllImages: true,\nshowInfo: true\n}).render();\n</code></pre>\nCheck the list of <a href=\"ImageViewer.html#configattributes\">Configuration Attributes</a> available for\nImageViewer."}, "DOM": {"name": "DOM", "namespace": "", "module": "dom", "guessedname": "NODE_TYPE", "methods": {"_getRegExp": {"return": {"type": "RegExp", "description": "An instance of RegExp"}, "description": "Memoizes dynamic regular expressions to boost runtime performance.", "private": "", "params": [{"type": "String", "name": "str", "description": " The string to convert to a regular expression."}, {"type": "String", "name": "flags", "description": " optional An optinal string of flags."}], "param": "{String} str The string to convert to a regular expression.", "guessedname": "_getRegExp", "guessedtype": "function"}, "getComputedStyle": {"return": {"type": "String", "description": "The computed value of the style property."}, "description": "Returns the computed style for the given node.", "param": "{HTMLElement} An HTMLElement to get the style from.", "params": [{"type": "HTMLElement", "name": "An", "description": " HTMLElement to get the style from."}, {"type": "String", "name": "att", "description": " The style property to get."}], "guessedname": "getComputedStyle", "guessedtype": "function"}, "addHTML": {"param": "{HTMLElement} node The node to insert into", "params": [{"type": "HTMLElement", "name": "node", "description": " The node to insert into"}, {"type": "String", "name": "content", "description": " The content to be inserted"}, {"type": "String", "name": "where", "description": " Where to insert the content; default is after lastChild"}], "description": "Inserts content in a node at the given location", "guessedname": "addHTML", "guessedtype": "function"}, "getText": {"return": {"type": "String", "description": "The text content of the element (includes text of any descending elements)."}, "description": "Returns the text content of the HTMLElement.", "param": "{HTMLElement} element The html element.", "params": [{"type": "HTMLElement", "name": "element", "description": " The html element."}], "guessedname": "getText", "guessedtype": "property"}, "setStyle": {"param": "{HTMLElement} An HTMLElement to apply the style to.", "params": [{"type": "HTMLElement", "name": "An", "description": " HTMLElement to apply the style to."}, {"type": "String", "name": "att", "description": " The style property to set."}, {"type": "String|Number", "name": "val", "description": " The value."}], "description": "Sets a style property for a given element.", "guessedname": "setStyle", "guessedtype": "function"}, "getX": {"return": {"type": "Int", "description": "The X position of the element"}, "description": "Gets the current X position of an element based on page coordinates. \nElement must be part of the DOM tree to have page coordinates\n(display:none or elements not appended return false).", "param": "element The target element", "params": [{"type": "", "name": "element", "description": " The target element"}], "guessedname": "getX", "guessedtype": "function"}, "getY": {"return": {"type": "Int", "description": "The Y position of the element"}, "description": "Gets the current Y position of an element based on page coordinates. \nElement must be part of the DOM tree to have page coordinates\n(display:none or elements not appended return false).", "param": "element The target element", "params": [{"type": "", "name": "element", "description": " The target element"}], "guessedname": "getY", "guessedtype": "function"}, "inRegion": {"return": {"type": "Boolean", "description": "True if in region, false if not."}, "description": "Check if any part of this node is in the passed region", "param": "{Object} node2 The node to get the region from or an Object literal of the region\n$param {Boolean} all Should all of the node be inside the region", "params": [{"type": "Object} node2 The node to get the region from or an Object literal of the region\n$param {Boolean", "name": "all", "description": " Should all of the node be inside the region"}, {"type": "Object", "name": "altRegion", "description": " An object literal containing the region for this node if we already have the data (for performance i.e. DragDrop)"}], "guessedname": "inRegion", "guessedtype": "function"}, "viewportRegion": {"return": {"type": "Object", "description": "Object literal containing the following about the visible region of the viewport: (top, right, bottom, left)"}, "description": "Returns an Object literal containing the following about the visible region of viewport: (top, right, bottom, left)", "guessedname": "viewportRegion", "guessedtype": "function"}, "setWidth": {"param": "{HTMLElement} element The DOM element.", "params": [{"type": "HTMLElement", "name": "element", "description": " The DOM element."}, {"type": "String|Int", "name": "size", "description": " The pixel height to size to"}], "description": "Sets the width of the element to the given size, regardless\nof box model, border, padding, etc.", "guessedname": "setWidth", "guessedtype": "function"}, "inViewportRegion": {"return": {"type": "Boolean", "description": "True if in region, false if not."}, "description": "Check if any part of this element is in the viewport", "param": "{HTMLElement} element The DOM element.", "params": [{"type": "HTMLElement", "name": "element", "description": " The DOM element."}, {"type": "Boolean", "name": "all", "description": " Should all of the node be inside the region"}, {"type": "Object", "name": "altRegion", "description": " An object literal containing the region for this node if we already have the data (for performance i.e. DragDrop)"}], "guessedname": "inViewportRegion", "guessedtype": "function"}, "_bruteContains": {"return": {"type": "Boolean", "description": "Whether or not the element is or contains the needle."}, "description": "Brute force version of contains.\nUsed for browsers without contains support for non-HTMLElement Nodes (textNodes, etc).", "private": "", "params": [{"type": "HTMLElement", "name": "element", "description": " The containing html element."}, {"type": "HTMLElement", "name": "needle", "description": " The html element that may be contained."}], "param": "{HTMLElement} element The containing html element.", "guessedname": "_bruteContains", "guessedtype": "function"}, "setX": {"param": "element The target element", "params": [{"type": "", "name": "element", "description": " The target element"}, {"type": "Int", "name": "x", "description": " The X values for new position (coordinates are page-based)"}], "description": "Set the X position of an html element in page coordinates, regardless of how the element is positioned.\nThe element(s) must be part of the DOM tree to have page coordinates (display:none or elements not appended return false).", "guessedname": "setX", "guessedtype": "function"}, "create": {"return": {"type": "HTMLElement|DocumentFragment", "description": "returns a single HTMLElement \nwhen creating one node, and a documentFragment when creating\nmultiple nodes."}, "description": "Creates a new dom node using the provided markup string.", "param": "{String} html The markup used to create the element", "params": [{"type": "String", "name": "html", "description": " The markup used to create the element"}, {"type": "HTMLDocument", "name": "doc", "description": " An optional document context"}], "guessedname": "create", "guessedtype": "function"}, "contains": {"return": {"type": "Boolean", "description": "Whether or not the element is or contains the needle."}, "description": "Determines whether or not one HTMLElement is or contains another HTMLElement.", "param": "{HTMLElement} element The containing html element.", "params": [{"type": "HTMLElement", "name": "element", "description": " The containing html element."}, {"type": "HTMLElement", "name": "needle", "description": " The html element that may be contained."}], "guessedname": "contains", "guessedtype": "function"}, "replaceClass": {"param": "{HTMLElement} element The DOM element", "params": [{"type": "HTMLElement", "name": "element", "description": " The DOM element"}, {"type": "String", "name": "oldClassName", "description": " the class name to be replaced"}, {"type": "String", "name": "newClassName", "description": " the class name that will be replacing the old class name"}], "description": "Replace a class with another class for a given element.\nIf no oldClassName is present, the newClassName is simply added.", "guessedname": "replaceClass", "guessedtype": "function"}, "winHeight": {"return": {"type": "Number", "description": "The current height of the viewport."}, "description": "Returns the inner height of the viewport (exludes scrollbar).", "guessedname": "winHeight", "guessedtype": "function"}, "setStyles": {"param": "{HTMLElement} node An HTMLElement to apply the styles to.", "params": [{"type": "HTMLElement", "name": "node", "description": " An HTMLElement to apply the styles to."}, {"type": "Object", "name": "hash", "description": " An object literal of property:value pairs."}], "description": "Sets multiple style properties.", "guessedname": "setStyles", "guessedtype": "function"}, "intersect": {"return": {"type": "Object", "description": "Object literal containing the following intersection data: (top, right, bottom, left, area, yoff, xoff, inRegion)"}, "description": "Find the intersect information for the passes nodes.", "param": "{HTMLElement} element The first element", "params": [{"type": "HTMLElement", "name": "element", "description": " The first element"}, {"type": "HTMLElement | Object", "name": "element2", "description": " The element or region to check the interect with"}, {"type": "Object", "name": "altRegion", "description": " An object literal containing the region for the first element if we already have the data (for performance i.e. DragDrop)"}], "guessedname": "intersect", "guessedtype": "function"}, "toggleClass": {"param": "{HTMLElement} element The DOM element", "params": [{"type": "HTMLElement", "name": "element", "description": " The DOM element"}, {"type": "String", "name": "className", "description": " the class name to be toggled"}, {"type": "Boolean", "name": "addClass", "description": " optional boolean to indicate whether class\nshould be added or removed regardless of current state"}], "description": "If the className exists on the node it is removed, if it doesn't exist it is added.", "guessedname": "toggleClass", "guessedtype": "function"}, "inDoc": {"return": {"type": "Boolean", "description": "Whether or not the element is attached to the document."}, "description": "Determines whether or not the HTMLElement is part of the document.", "param": "{HTMLElement} element The containing html element.", "params": [{"type": "HTMLElement", "name": "element", "description": " The containing html element."}, {"type": "HTMLElement", "name": "doc", "description": " optional The document to check."}], "guessedname": "inDoc", "guessedtype": "function"}, "swapXY": {"return": {"type": "Node", "description": ""}, "description": "Swap the xy position with another node", "param": "{Node} node The node to swap with", "params": [{"type": "Node", "name": "node", "description": " The node to swap with"}, {"type": "Node", "name": "otherNode", "description": " The other node to swap with"}], "guessedname": "swapXY", "guessedtype": "function"}, "addClass": {"param": "{HTMLElement} element The DOM element.", "params": [{"type": "HTMLElement", "name": "element", "description": " The DOM element."}, {"type": "String", "name": "className", "description": " the class name to add to the class attribute"}], "description": "Adds a class name to a given DOM element.", "guessedname": "addClass", "guessedtype": "function"}, "setHeight": {"param": "{HTMLElement} element The DOM element.", "params": [{"type": "HTMLElement", "name": "element", "description": " The DOM element."}, {"type": "String|Int", "name": "size", "description": " The pixel height to size to"}], "description": "Sets the height of the element to the given size, regardless\nof box model, border, padding, etc.", "guessedname": "setHeight", "guessedtype": "function"}, "winWidth": {"return": {"type": "Number", "description": "The current width of the viewport."}, "description": "Returns the inner width of the viewport (exludes scrollbar).", "guessedname": "winWidth", "guessedtype": "function"}, "removeClass": {"param": "{HTMLElement} element The DOM element.", "params": [{"type": "HTMLElement", "name": "element", "description": " The DOM element."}, {"type": "String", "name": "className", "description": " the class name to remove from the class attribute"}], "description": "Removes a class name from a given element.", "guessedname": "removeClass", "guessedtype": "function"}, "docScrollY": {"return": {"type": "Number", "description": "The current amount the screen is scrolled vertically."}, "description": "Amount page has been scroll vertically", "guessedname": "docScrollY", "guessedtype": "function"}, "getAttibute": {"return": {"type": "String", "description": "The current value of the attribute."}, "description": "Provides a normalized attribute interface.", "param": "{String | HTMLElement} el The target element for the attribute.", "params": [{"type": "String | HTMLElement", "name": "el", "description": " The target element for the attribute."}, {"type": "String", "name": "attr", "description": " The attribute to get."}], "guessedname": "getAttribute", "guessedtype": "function"}, "docHeight": {"return": {"type": "Number", "description": "The current height of the document."}, "description": "Document height", "guessedname": "docHeight", "guessedtype": "function"}, "docScrollX": {"return": {"type": "Number", "description": "The current amount the screen is scrolled horizontally."}, "description": "Amount page has been scroll horizontally", "guessedname": "docScrollX", "guessedtype": "function"}, "getStyle": {"param": "{HTMLElement} An HTMLElement to get the style from.", "params": [{"type": "HTMLElement", "name": "An", "description": " HTMLElement to get the style from."}, {"type": "String", "name": "att", "description": " The style property to get."}], "description": "Returns the current style value for the given property.", "guessedname": "getStyle", "guessedtype": "function"}, "setXY": {"param": "element The target element", "params": [{"type": "", "name": "element", "description": " The target element"}, {"type": "Array", "name": "xy", "description": " Contains X & Y values for new position (coordinates are page-based)"}, {"type": "Boolean", "name": "noRetry", "description": " By default we try and set the position a second time if the first fails"}], "description": "Set the position of an html element in page coordinates.\nThe element must be part of the DOM tree to have page coordinates (display:none or elements not appended return false).", "guessedname": "setXY", "guessedtype": "function"}, "_getWin": {"return": {"type": "Object", "description": "The window for the given element or the default window."}, "description": "returns the appropriate window.", "private": "", "params": [{"type": "HTMLElement", "name": "element", "description": " optional Target element."}], "param": "{HTMLElement} element optional Target element.", "guessedname": "_getWin", "guessedtype": "function"}, "setAttibute": {"param": "{String | HTMLElement} el The target element for the attribute.", "params": [{"type": "String | HTMLElement", "name": "el", "description": " The target element for the attribute."}, {"type": "String", "name": "attr", "description": " The attribute to set."}, {"type": "String", "name": "val", "description": " The value of the attribute."}], "description": "Provides a normalized attribute interface.", "guessedname": "setAttribute", "guessedtype": "function"}, "byId": {"return": {"type": "HTMLElement | null", "description": "The HTMLElement with the id, or null if none found."}, "description": "Returns the HTMLElement with the given ID (Wrapper for document.getElementById).", "param": "{String} id the id attribute", "params": [{"type": "String", "name": "id", "description": " the id attribute"}, {"type": "Object", "name": "doc", "description": " optional The document to search. Defaults to current document"}], "guessedname": "byId", "guessedtype": "function"}, "setY": {"param": "element The target element", "params": [{"type": "", "name": "element", "description": " The target element"}, {"type": "Int", "name": "y", "description": " The Y values for new position (coordinates are page-based)"}], "description": "Set the Y position of an html element in page coordinates, regardless of how the element is positioned.\nThe element(s) must be part of the DOM tree to have page coordinates (display:none or elements not appended return false).", "guessedname": "setY", "guessedtype": "function"}, "getXY": {"return": {"type": "Array", "description": "The XY position of the element\nTODO: test inDocument/display?"}, "description": "Gets the current position of an element based on page coordinates. \nElement must be part of the DOM tree to have page coordinates\n(display:none or elements not appended return false).", "param": "element The target element", "params": [{"type": "", "name": "element", "description": " The target element"}], "guessedname": "getXY", "guessedtype": "function"}, "elementByAxis": {"return": {"type": "HTMLElement | null", "description": "The matching element or null if none found."}, "description": "Searches the element by the given axis for the first matching element.", "param": "{HTMLElement} element The html element.", "params": [{"type": "HTMLElement", "name": "element", "description": " The html element."}, {"type": "String", "name": "axis", "description": " The axis to search (parentNode, nextSibling, previousSibling)."}, {"type": "Function", "name": "fn", "description": " optional An optional boolean test to apply."}, {"type": "Boolean", "name": "all", "description": " optional Whether all node types should be returned, or just element nodes.\nThe optional function is passed the current HTMLElement being tested as its only argument.\nIf no function is given, the first element is returned."}], "guessedname": "elementByAxis", "guessedtype": "function"}, "docWidth": {"return": {"type": "Number", "description": "The current width of the document."}, "description": "Document width", "guessedname": "docWidth", "guessedtype": "function"}, "setText": {"param": "{HTMLElement} element The html element.", "params": [{"type": "HTMLElement", "name": "element", "description": " The html element."}, {"type": "String", "name": "content", "description": " The content to add."}], "description": "Sets the text content of the HTMLElement.", "guessedname": "setText", "guessedtype": "property"}, "hasClass": {"return": {"type": "Boolean", "description": "Whether or not the element has the given class."}, "description": "Determines whether a DOM element has the given className.", "param": "{HTMLElement} element The DOM element.", "params": [{"type": "HTMLElement", "name": "element", "description": " The DOM element."}, {"type": "String", "name": "className", "description": " the class name to search for"}], "guessedname": "hasClass", "guessedtype": "function"}, "region": {"return": {"type": "Object", "description": "Object literal containing the following about this element: (top, right, bottom, left)"}, "description": "Returns an Object literal containing the following about this element: (top, right, bottom, left)", "param": "{HTMLElement} element The DOM element.", "params": [{"type": "HTMLElement", "name": "element", "description": " The DOM element."}], "guessedname": "region", "guessedtype": "function"}, "_getDoc": {"return": {"type": "Object", "description": "The document for the given element or the default document."}, "description": "returns the appropriate document.", "private": "", "params": [{"type": "HTMLElement", "name": "element", "description": " optional Target element."}], "param": "{HTMLElement} element optional Target element.", "guessedname": "_getDoc", "guessedtype": "function"}}, "file": "dom.js", "guessedtype": "property", "shortname": "DOM", "description": "Provides DOM helper methods."}, "YUI~array~invoke": {"name": "YUI~array~invoke", "namespace": "", "module": "collection", "methods": {"invoke": {"return": {"type": " Array ", "description": "All return values, indexed according to item index."}, "description": "<p>Execute a named method on an array of objects.  Items in the list that do\nnot have a function by that name will be skipped. For example,\n<code>Y.Array.invoke( arrayOfDrags, 'plug', Y.Plugin.DDProxy );</code></p>\n<p>The return values from each call are returned in an array.</p>", "param": "items { Array } Array of objects supporting the named method", "static": "", "guessedname": "invoke", "guessedtype": "function", "params": [{"type": " Array ", "name": "items", "description": "  Array of objects supporting the named method"}, {"type": " String ", "name": "name", "description": "  the name of the method to execute on each item"}, {"type": " mixed ", "name": "args*", "description": "  Any number of additional args are passed as\nparameters to the execution of the named method."}]}}, "file": "collection.js", "shortname": "YUI~array~invoke", "description": "Adds the <code>Y.Array.invoke( items, methodName )</code> utility method."}, "Cache": {"name": "Cache", "configs": {"max": {"default": "0", "type": "Number", "description": "Maximum number of entries the Cache can hold.\nSet to 0 to turn off caching.", "guessedname": "max", "guessedtype": "property"}, "entries": {"type": "Array", "description": "Cached entries.", "guessedname": "entries", "guessedtype": "property"}, "uniqueKeys": {"type": "Number", "description": "Validate uniqueness of stored keys. Default is false and\nis more performant.", "guessedname": "uniqueKeys", "guessedtype": "property"}, "size": {"type": "Number", "description": "Number of entries currently cached.", "guessedname": "size", "guessedtype": "property"}}, "constructors": [{"description": "Base class for the YUI Cache utility."}], "namespace": "", "module": "cache", "events": {"sizeChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "sizeChange", "description": "Fires when the value for the configuration attribute 'size' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "retrieve": {"params": [{"type": "Event.Facade", "name": "e", "description": "  Event Facade with the following properties:\n<dl>\n<dt>entry (Object)</dt> <dd>The retrieved entry.</dd>\n</dl>"}], "description": "Fired when an entry is retrieved from the cache.", "param": "e {Event.Facade} Event Facade with the following properties:\n<dl>\n<dt>entry (Object)</dt> <dd>The retrieved entry.</dd>\n</dl>"}, "entriesChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "entriesChange", "description": "Fires when the value for the configuration attribute 'entries' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "uniqueKeysChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "uniqueKeysChange", "description": "Fires when the value for the configuration attribute 'uniqueKeys' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "maxChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "maxChange", "description": "Fires when the value for the configuration attribute 'max' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "request": {"params": [{"type": "Event.Facade", "name": "e", "description": "  Event Facade with the following properties:\n<dl>\n<dt>request (Object)</dt> <dd>The request object.</dd>\n</dl>"}], "description": "Fired when an entry is requested from the cache.", "param": "e {Event.Facade} Event Facade with the following properties:\n<dl>\n<dt>request (Object)</dt> <dd>The request object.</dd>\n</dl>"}, "add": {"description": "Fired when an entry is added.", "param": "e {Event.Facade} Event Facade with the following properties:\n<dl>\n<dt>entry (Object)</dt> <dd>The cached entry.</dd>\n</dl>", "params": [{"type": "Event.Facade", "name": "e", "description": "  Event Facade with the following properties:\n<dl>\n<dt>entry (Object)</dt> <dd>The cached entry.</dd>\n</dl>"}], "guessedname": "defaultFn", "guessedtype": "property", "preventable": "_defAddFn"}, "flush": {"description": "Fired when the cache is flushed.", "param": "e {Event.Facade} Event Facade object.", "params": [{"type": "Event.Facade", "name": "e", "description": "  Event Facade object."}], "guessedname": "defaultFn", "guessedtype": "property", "preventable": "_defFlushFn"}}, "guessedname": "Cache", "methods": {"retrieve": {"return": {"type": "Object", "description": "Cached entry object with the properties request, response, and payload, or null."}, "description": "Retrieves cached entry for given request, if available, and refreshes\nentry in the cache. Returns null if there is no cache match.", "param": "request {Object} Request object.", "params": [{"type": "Object", "name": "request", "description": "  Request object."}], "guessedname": "retrieve", "guessedtype": "function"}, "add": {"param": "request {Object} Request value.", "params": [{"type": "Object", "name": "request", "description": "  Request value."}, {"type": "Object", "name": "response", "description": "  Response value."}, {"type": "Object", "name": "payload", "description": "  (optional) Arbitrary data payload."}], "description": "Adds a new entry to the cache of the format\n{request:request, response:response, payload:payload}.\nIf cache is full, evicts the stalest entry before adding the new one.", "guessedname": "add", "guessedtype": "function"}, "destructor": {"description": "Internal destroy() handler.", "private": "", "guessedname": "destructor", "guessedtype": "function"}, "_defFlushFn": {"description": "Flushes cache.", "param": "e {Event.Facade} Event Facade object.", "protected": "", "params": [{"type": "Event.Facade", "name": "e", "description": "  Event Facade object."}], "guessedname": "_defFlushFn", "guessedtype": "function"}, "_isMatch": {"return": {"type": "Boolean", "description": "True if current request matches given cached request, false otherwise."}, "description": "Default overridable method compares current request with given cache entry.\nReturns true if current request matches the cached request, otherwise\nfalse. Implementers should override this method to customize the\ncache-matching algorithm.", "param": "request {Object} Request object.", "protected": "", "params": [{"type": "Object", "name": "request", "description": "  Request object."}, {"type": "Object", "name": "entry", "description": "  Cached entry."}], "guessedname": "_isMatch", "guessedtype": "function"}, "flush": {"description": "Flushes cache.", "guessedname": "flush", "guessedtype": "function"}, "initializer": {"description": "Internal init() handler.", "param": "config {Object} Config object.", "params": [{"type": "Object", "name": "config", "description": "  Config object."}], "private": "", "guessedname": "initializer", "guessedtype": "function"}, "_defAddFn": {"description": "Adds entry to cache.", "param": "e {Event.Facade} Event Facade with the following properties:\n<dl>\n<dt>entry (Object)</dt> <dd>The cached entry.</dd>\n</dl>", "protected": "", "params": [{"type": "Event.Facade", "name": "e", "description": "  Event Facade with the following properties:\n<dl>\n<dt>entry (Object)</dt> <dd>The cached entry.</dd>\n</dl>"}], "guessedname": "_defAddFn", "guessedtype": "function"}}, "extends": "Plugin.Base", "superclass": "Plugin.Base", "file": "cache.js", "guessedtype": "function", "shortname": "Cache", "properties": {"_entries": {"guessedname": "_entries", "type": "Object[]", "description": "Array of request/response objects indexed chronologically.", "private": "", "guessedtype": "property"}, "NS": {"description": "The namespace for the plugin. This will be the property on the host which\nreferences the plugin instance.", "value": "\"cache\"", "static": "", "guessedname": "NS", "guessedtype": "property", "type": "String", "final": ""}, "NAME": {"description": "Class name.", "value": "\"cache\"", "static": "", "guessedname": "NAME", "guessedtype": "property", "type": "String", "final": ""}}, "description": "Base class for the YUI Cache utility."}, "ImgLoadImgObj": {"properties": {"_imgEl": {"guessedname": "_imgEl", "type": "Object", "description": "The Node object returned from <code>Y.one</code>, to avoid repeat calls to access the DOM.", "private": "", "guessedtype": "property"}, "_fetched": {"guessedname": "_fetched", "type": "Boolean", "description": "Whether this image has already been fetched.\nIn the case of fold-conditional groups, images won't be fetched twice.", "private": "", "guessedtype": "property"}, "_yPos": {"guessedname": "_yPos", "type": "Int", "description": "The vertical position returned from <code>getY</code>, to avoid repeat calls to access the DOM.\nThe Y position is checked only for images registered with fold-conditional groups. The position is checked first at page load (domready)\nand this caching enhancement assumes that the image's vertical position won't change after that first check.", "private": "", "guessedtype": "property"}}, "name": "ImgLoadImgObj", "constructors": [{"description": "Image objects to be registered with the groups"}], "namespace": "", "module": "imageloader", "events": {"isPngChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "isPngChange", "description": "Fires when the value for the configuration attribute 'isPng' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "heightChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "heightChange", "description": "Fires when the value for the configuration attribute 'height' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "sizingMethodChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "sizingMethodChange", "description": "Fires when the value for the configuration attribute 'sizingMethod' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "domIdChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "domIdChange", "description": "Fires when the value for the configuration attribute 'domId' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "setVisibleChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "setVisibleChange", "description": "Fires when the value for the configuration attribute 'setVisible' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "enabledChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "enabledChange", "description": "Fires when the value for the configuration attribute 'enabled' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "bgUrlChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "bgUrlChange", "description": "Fires when the value for the configuration attribute 'bgUrl' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "srcUrlChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "srcUrlChange", "description": "Fires when the value for the configuration attribute 'srcUrl' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "widthChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "widthChange", "description": "Fires when the value for the configuration attribute 'width' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "guessedname": "ImgLoadImgObj", "methods": {"_getYPos": {"guessedname": "_getYPos", "returns": "{Object} The Y position of the image", "description": "Gets the Y position of the node in page coordinates.\nExpects that the page-coordinate position of the image won't change.", "private": "", "guessedtype": "function"}, "_getImgEl": {"guessedname": "_getImgEl", "returns": "{Object} DOM element of the image as a <code>Y.Node</code> object", "description": "Gets the object (as a <code>Y.Node</code>) of the DOM element indicated by \"<code>domId</code>\".", "private": "", "guessedtype": "function"}, "_init": {"private": "", "description": "Initialize all private members needed for the group.", "guessedname": "_init", "guessedtype": "function"}, "fetch": {"return": {"type": "Boolean", "description": "Whether the image has been fetched (either during this execution or previously)"}, "description": "Displays the image; puts the URL into the DOM.\nThis method shouldn't be called externally, but is not private in the rare event that it needs to be called immediately.", "param": "{Int} withinY  The pixel distance from the top of the page, for which if the image lies within, it will be fetched. Undefined indicates that no check should be made, and the image should always be fetched", "params": [{"type": "Int", "name": "withinY", "description": "  The pixel distance from the top of the page, for which if the image lies within, it will be fetched. Undefined indicates that no check should be made, and the image should always be fetched"}], "guessedname": "fetch", "guessedtype": "function"}}, "extends": "Base", "superclass": "Base", "file": "imageloader.js", "guessedtype": "function", "shortname": "ImgLoadImgObj", "configs": {"isPng": {"type": "Boolean", "description": "Whether the image is a PNG.\nPNG images get special treatment in that the URL is specified through AlphaImageLoader for IE, versions 6 and earlier.\nOnly used with background images.", "guessedname": "isPng", "guessedtype": "property"}, "srcUrl": {"type": "String", "description": "Source URL for the image.\nFor an image whose URL is specified by a \"<code>src</code>\" attribute in the DOM element.", "guessedname": "srcUrl", "guessedtype": "property"}, "enabled": {"type": "String", "description": "AlphaImageLoader <code>enabled</code> property to be set for the image.\nOnly set if <code>isPng</code> value for this image is set to <code>true</code>.\nDefaults to <code>true</code>.", "guessedname": "enabled", "guessedtype": "property"}, "domId": {"type": "String", "description": "HTML DOM id of the image element.", "guessedname": "domId", "guessedtype": "property"}, "height": {"type": "Int", "description": "Pixel height of the image. Will be set as a <code>height</code> attribute on the DOM element after the image is fetched.\nDefaults to the natural height of the image (no <code>height</code> attribute will be set).\nUsually only used with src images.", "guessedname": "height", "guessedtype": "property"}, "width": {"type": "Int", "description": "Pixel width of the image. Will be set as a <code>width</code> attribute on the DOM element after the image is fetched.\nDefaults to the natural width of the image (no <code>width</code> attribute will be set).\nUsually only used with src images.", "guessedname": "width", "guessedtype": "property"}, "sizingMethod": {"type": "String", "description": "AlphaImageLoader <code>sizingMethod</code> property to be set for the image.\nOnly set if <code>isPng</code> value for this image is set to <code>true</code>.\nDefaults to <code>scale</code>.", "guessedname": "sizingMethod", "guessedtype": "property"}, "bgUrl": {"type": "String", "description": "Background URL for the image.\nFor an image whose URL is specified by \"<code>background-image</code>\" in the element's style.", "guessedname": "bgUrl", "guessedtype": "property"}, "setVisible": {"type": "Boolean", "description": "Whether the image's <code>style.visibility</code> should be set to <code>visible</code> after the image is fetched.\nUsed when setting images as <code>visibility:hidden</code> prior to image fetching.", "guessedname": "setVisible", "guessedtype": "property"}}, "description": "Image objects to be registered with the groups"}, "YUI~array~extras": {"name": "YUI~array~extras", "namespace": "", "module": "collection", "methods": {"Array.every": {"return": {"type": "boolean", "description": "true if every item in the array returns true\nfrom the supplied function."}, "description": "Executes the supplied function on each item in the array.", "param": "a {Array} the array to iterate", "static": "", "guessedname": "every", "guessedtype": "property", "params": [{"type": "Array", "name": "a", "description": "  the array to iterate"}, {"type": "Function", "name": "f", "description": "  the function to execute on each item"}, {"type": "", "name": "o", "description": " Optional context object"}]}, "Array.filter": {"return": {"type": "Array", "description": "The items on which the supplied function\nreturned true. If no items matched an empty array is \nreturned."}, "description": "Executes the supplied function on each item in the array.\nReturns a new array containing the items that the supplied\nfunction returned true for.", "param": "a {Array} the array to iterate", "static": "", "guessedname": "filter", "guessedtype": "property", "params": [{"type": "Array", "name": "a", "description": "  the array to iterate"}, {"type": "Function", "name": "f", "description": "  the function to execute on each item"}, {"type": "", "name": "o", "description": " Optional context object"}]}, "Array.partition": {"return": {"type": "", "description": "An object with two members, 'matches' and 'rejects',\nthat are arrays containing the items that were selected or \nrejected by the test function (or an empty array)."}, "description": "Partitions an array into two new arrays, one with the items\nthat match the supplied function, and one with the items that\ndo not.", "paran": "f {Function} a function that will receive each item \nin the collection and its index.", "param": "a {Array} a collection to iterate over", "static": "", "guessedname": "partition", "guessedtype": "function", "params": [{"type": "Array", "name": "a", "description": "  a collection to iterate over"}, {"type": "", "name": "o", "description": " Optional execution context of f."}]}, "Array.reject": {"return": {"type": "Array", "description": "The items on which the supplied function\nreturned false."}, "description": "The inverse of filter. Executes the supplied function on each item. \nReturns a new array containing the items that the supplied\nfunction returned *false* for.", "param": "a {Array} the array to iterate", "static": "", "guessedname": "reject", "guessedtype": "function", "params": [{"type": "Array", "name": "a", "description": "  the array to iterate"}, {"type": "Function", "name": "f", "description": "  the function to execute on each item"}, {"type": "", "name": "o", "description": " Optional context object"}]}, "Array.grep": {"return": {"type": "Array", "description": "All the items in the collection that \nproduce a match against the supplied regular expression. \nIf no items match, an empty array is returned."}, "description": "Iterates over an array, returning a new array of all the elements\nthat match the supplied regular expression", "param": "a {Array} a collection to iterate over", "static": "", "guessedname": "grep", "guessedtype": "function", "params": [{"type": "Array", "name": "a", "description": "  a collection to iterate over"}, {"type": "RegExp", "name": "pattern", "description": "  The regular expression to test against \neach item"}]}, "Array.map": {"return": {"type": "Array", "description": "A new array containing the return value\nof the supplied function for each item in the original\narray."}, "description": "Executes the supplied function on each item in the array.", "param": "a {Array} the array to iterate", "static": "", "guessedname": "map", "guessedtype": "property", "params": [{"type": "Array", "name": "a", "description": "  the array to iterate"}, {"type": "Function", "name": "f", "description": "  the function to execute on each item"}, {"type": "", "name": "o", "description": " Optional context object"}]}, "Array.unique": {"return": {"type": "Array", "description": "a copy of the array with duplicate entries removed"}, "description": "Returns a copy of the array with the duplicate entries removed", "param": "a {Array} the array to find the subset of uniques for", "static": "", "guessedname": "unique", "guessedtype": "function", "params": [{"type": "Array", "name": "a", "description": "  the array to find the subset of uniques for"}, {"type": "bool", "name": "sort", "description": "  flag to denote if the array is sorted or not. Defaults to false, the more general operation"}]}, "Array.lastIndexOf": {"return": {"type": "int", "description": "the index of hte item that contains the value or -1"}, "description": "Returns the index of the last item in the array\nthat contains the specified value, -1 if the\nvalue isn't found.", "param": "a {Array} the array to search", "static": "", "guessedname": "lastIndexOf", "guessedtype": "property", "params": [{"type": "Array", "name": "a", "description": "  the array to search"}, {"type": "", "name": "val", "description": " the value to search for"}]}, "Array.find": {"return": {"type": "object", "description": "the first item that the supplied function\nreturns true for, or null if it never returns true"}, "description": "Executes the supplied function on each item in the array,\nsearching for the first item that matches the supplied\nfunction.", "param": "a {Array} the array to search", "static": "", "guessedname": "find", "guessedtype": "function", "params": [{"type": "Array", "name": "a", "description": "  the array to search"}, {"type": "Function", "name": "f", "description": "  the function to execute on each item. \nIteration is stopped as soon as this function returns true\non an item."}, {"type": "", "name": "o", "description": " Optional context object"}]}, "Array.zip": {"return": {"type": "", "description": "An array of arrays formed by pairing each element \nof the first collection with an item in the second collection \nhaving the corresponding index."}, "description": "Creates an array of arrays by pairing the corresponding\nelements of two arrays together into a new array.", "param": "a {Array} a collection to iterate over", "static": "", "guessedname": "zip", "guessedtype": "function", "params": [{"type": "Array", "name": "a", "description": "  a collection to iterate over"}, {"type": "Array", "name": "a2", "description": "  another collection whose members will be \npaired with members of the first parameter"}]}, "Array.reduce": {"return": {"type": "", "description": "A value that results from iteratively applying the\nsupplied function to each element in the array."}, "description": "Executes the supplied function on each item in the array.\nReduce \"folds\" the array into a single value.", "param": "a {Array} the array to iterate", "static": "", "guessedname": "reduce", "guessedtype": "property", "params": [{"type": "Array", "name": "a", "description": "  the array to iterate"}, {"type": "", "name": "init", "description": " The initial value to start from"}, {"type": "Function", "name": "f", "description": "  the function to execute on each item. It\nis responsible for returning the updated value of the\ncomputation."}, {"type": "", "name": "o", "description": " Optional context object"}]}}, "file": "collection.js", "shortname": "YUI~array~extras", "description": "Adds the following array utilities to the YUI instance\n(Y.Array).  This is in addition to the methods provided\nin the core."}, "DataSchema.Base": {"name": "DataSchema.Base", "namespace": "", "module": "dataschema", "guessedname": "SchemaBase", "methods": {"parse": {"return": {"type": "Object", "description": "Type-converted value."}, "description": "Applies field parser, if defined", "param": "value {Object} Original value.", "params": [{"type": "Object", "name": "value", "description": "  Original value."}, {"type": "Object", "name": "field", "description": "  Field."}], "guessedname": "parse", "guessedtype": "function"}, "apply": {"return": {"type": "Object", "description": "Schema-parsed data."}, "description": "Overridable method returns data as-is.", "param": "schema {Object} Schema to apply.", "static": "", "guessedname": "apply", "guessedtype": "function", "params": [{"type": "Object", "name": "schema", "description": "  Schema to apply."}, {"type": "Object", "name": "data", "description": "  Data."}]}}, "static": "", "file": "dataschema.js", "guessedtype": "property", "shortname": "DataSchema.Base", "description": "Base class for the YUI DataSchema Utility."}, "OverlayContextManager": {"name": "OverlayContextManager", "constructors": [{"params": [{"type": "Object", "name": "config", "description": "  Object literal specifying widget configuration properties."}], "description": "A base class for OverlayContextManager:"}], "namespace": "", "module": "aui-overlay", "guessedname": "OverlayContextManager", "static": "", "superclass": "OverlayManager", "file": "aui-overlay.js", "guessedtype": "property", "extends": "OverlayManager", "shortname": "OverlayContextManager", "description": "A base class for OverlayContextManager:"}, "Do.Method": {"name": "Do.Method", "constructors": [{"params": [{"type": "", "name": "obj", "description": " The object to operate on"}, {"type": "", "name": "sFn", "description": " The name of the method to displace"}], "description": "Wrapper for a displaced method with aop enabled"}], "namespace": "", "module": "event-custom", "guessedname": "Method", "methods": {"register": {"param": "sid {string} the subscriber id", "params": [{"type": "string", "name": "sid", "description": "  the subscriber id"}, {"type": "Function", "name": "fn", "description": "  the function to execute"}, {"type": "string", "name": "when", "description": "  when to execute the function"}], "description": "Register a aop subscriber", "guessedname": "register", "guessedtype": "function"}, "exec": {"description": "Execute the wrapped method", "guessedname": "exec", "guessedtype": "function"}, "delete": {"param": "sid {string} the subscriber id", "params": [{"type": "string", "name": "sid", "description": "  the subscriber id"}, {"type": "Function", "name": "fn", "description": "  the function to execute"}, {"type": "string", "name": "when", "description": "  when to execute the function"}], "description": "Unregister a aop subscriber", "guessedname": "_delete", "guessedtype": "function"}}, "file": "event-custom.js", "guessedtype": "function", "shortname": "Do.Method", "description": "Wrapper for a displaced method with aop enabled"}, "SyntheticEvent": {"since": "3.1.0", "name": "SyntheticEvent", "constructors": [{"params": [{"type": "Object", "name": "cfg", "description": "  Implementation pieces and configuration"}], "description": "<p>Wrapper class for the integration of new events into the YUI event\ninfrastructure.  Don't instantiate this object directly, use\n<code>Y.Event.define( type, config )</code>.</p>\n<p>The configuration object must include the event <code>type</code>, and should include implementation methods for <code>on</code> and <code>detach</code>.  This is the full list of configuration properties:</p>\n<dl>\n<dt><code>type</code></dt>\n<dd>REQUIRED.  The name of the synthetic event.  What goes\n<code>node.on(<strong>HERE</strong>, callback )</code>.</dd>\n<dt><code>on</code></dt>\n<dd><code>function ( node, subscription, fireEvent )</code> The\nimplementation logic for subscription.  Any special setup you need to\ndo to create the environment for the event being fired.  E.g. native\nDOM event subscriptions.  Store subscription related objects and\ninformation on the <code>subscription</code> object.  When the\ncriteria have been met to fire the synthetic event, call\n<code>fireEvent.fire()</code>.</dd>\n<dt><code>detach</code></dt>\n<dd><code>function ( node, subscription, fireEvent )</code> The\nimplementation logic for cleaning up a detached subscription. E.g.\ndetach any DOM subscriptions done in <code>on</code>.</dd>\n<dt><code>publishConfig</code></dt>\n<dd>(Object) The configuration object that will be used to instantiate\nthe underlying CustomEvent.  By default, the event is defined with\n<code>emitFacade: true</code> so subscribers will receive a DOM-like\nevent object.</dd>\n<dt><code>processArgs</code></dt>\n<dd><code>function ( argArray )</code>  Optional method to extract any\nadditional arguments from the subscription signature.  Using this\nallows <code>on</code> signatures like <code>node.on(\n&quot;hover&quot;, overCallback, outCallback )</code>.  Be sure that\nthe args passed in is pruned of any additional arguments using, for\nexample, <code>argArray.splice(2,1);</code>.  Data returned from the\nfunction will be stored on the <code>subscription</code> object passed\nto <code>on</code> and <code>detach</code> under\n<code>subscription._extra</code>.</dd>\n<dt>\n</dl>"}], "namespace": "", "module": "event", "methods": {"on": {"description": "Initial receiver of the event subscription.  Passes off control to the\nimplementation <code>on</code> specified in the constructor\nconfiguration after setting up the boiler plate code necessary for clean\ndetaching and destruction in the Event infrastructure.  Note that the\nimplementation function specified in the configuration will be called\nonce for each node passed in <code>el</code>, and each will be a Node\ninstance.", "param": "type {String} the synthetic event name", "protected": "", "params": [{"type": "String", "name": "type", "description": "  the synthetic event name"}, {"type": "Function", "name": "fn", "description": "  the callback function"}, {"type": "HTMLElement | Node | HTMLElement[] | NodeList", "name": "el", "description": "  \nsubscription target(s)"}], "guessedname": "on", "guessedtype": "function"}, "detach": {"description": "Initial receiver of the event detach.  Passes off control to the\nimplementation <code>detach</code> specified in the constructor\nconfiguration after doing the necessary infrastructure cleanup.\nNote that the implementation function specified in the configuration\nwill be called once for each node passed in <code>el</code>, and each\nwill be a Node instance.", "param": "type { String } the synthetic event name", "protected": "", "params": [{"type": " String ", "name": "type", "description": "  the synthetic event name"}, {"type": "Function", "name": "fn", "description": "  the callback function"}, {"type": "HTMLElement | Node | HTMLElement[] | NodeList", "name": "el", "description": " \nsubscription target(s)"}], "guessedname": "detach", "guessedtype": "function"}, "_init": {"description": "Initializes the synthetic event.", "param": "cfg {Object} The configuration object passed to the constructor", "protected": "", "params": [{"type": "Object", "name": "cfg", "description": "  The configuration object passed to the constructor"}], "guessedname": "_init", "guessedtype": "function"}, "_processArgs": {"return": {"type": "MIXED", "description": "null by default, but override to return useful data"}, "description": "Stub implementation.  Specify this in the configuration object passed to \nthe constructor (rather, passed to <code>Y.Event.define</code>).", "param": "args {Array} Array of arguments passed to <code>on</code>", "protected": "", "params": [{"type": "Array", "name": "args", "description": "  Array of arguments passed to <code>on</code>"}], "guessedname": "_processArgs", "guessedtype": "function"}}, "file": "event-synthetic.js", "in": "", "shortname": "SyntheticEvent", "description": "<p>Wrapper class for the integration of new events into the YUI event\ninfrastructure.  Don't instantiate this object directly, use\n<code>Y.Event.define( type, config )</code>.</p>\n<p>The configuration object must include the event <code>type</code>, and should include implementation methods for <code>on</code> and <code>detach</code>.  This is the full list of configuration properties:</p>\n<dl>\n<dt><code>type</code></dt>\n<dd>REQUIRED.  The name of the synthetic event.  What goes\n<code>node.on(<strong>HERE</strong>, callback )</code>.</dd>\n<dt><code>on</code></dt>\n<dd><code>function ( node, subscription, fireEvent )</code> The\nimplementation logic for subscription.  Any special setup you need to\ndo to create the environment for the event being fired.  E.g. native\nDOM event subscriptions.  Store subscription related objects and\ninformation on the <code>subscription</code> object.  When the\ncriteria have been met to fire the synthetic event, call\n<code>fireEvent.fire()</code>.</dd>\n<dt><code>detach</code></dt>\n<dd><code>function ( node, subscription, fireEvent )</code> The\nimplementation logic for cleaning up a detached subscription. E.g.\ndetach any DOM subscriptions done in <code>on</code>.</dd>\n<dt><code>publishConfig</code></dt>\n<dd>(Object) The configuration object that will be used to instantiate\nthe underlying CustomEvent.  By default, the event is defined with\n<code>emitFacade: true</code> so subscribers will receive a DOM-like\nevent object.</dd>\n<dt><code>processArgs</code></dt>\n<dd><code>function ( argArray )</code>  Optional method to extract any\nadditional arguments from the subscription signature.  Using this\nallows <code>on</code> signatures like <code>node.on(\n&quot;hover&quot;, overCallback, outCallback )</code>.  Be sure that\nthe args passed in is pruned of any additional arguments using, for\nexample, <code>argArray.splice(2,1);</code>.  Data returned from the\nfunction will be stored on the <code>subscription</code> object passed\nto <code>on</code> and <code>detach</code> under\n<code>subscription._extra</code>.</dd>\n<dt>\n</dl>"}, "Node": {"name": "Node", "for": "Node", "configs": {"viewportRegion": {"type": "Node", "description": "Returns a region object for the node's viewport", "guessedname": "viewportRegion", "guessedtype": "property"}, "winWidth": {"type": "{Int}", "description": "Returns the inner width of the viewport (exludes scrollbar)."}, "text": {"type": "String", "description": "Allows for getting and setting the text of an element.\nFormatting is preserved and special characters are treated literally.", "guessedname": "text", "guessedtype": "property"}, "region": {"type": "Node", "description": "Returns a region object for the node", "guessedname": "region", "guessedtype": "property"}, "docScrollY": {"type": "{Int}", "description": "Amount page has been scroll horizontally"}, "docScrollX": {"type": "{Int}", "description": "Amount page has been scroll vertically"}, "winHeight": {"type": "{Int}", "description": "Returns the inner height of the viewport (exludes scrollbar)."}, "docHeight": {"type": "{Int}", "description": "Document height"}, "children": {"readonly": "", "type": "NodeList", "description": "Returns a NodeList instance of all HTMLElement children."}}, "constructors": [{"params": [{"type": "DOMNode", "name": "node", "description": " the DOM node to be mapped to the Node instance."}], "description": "The Node class provides a wrapper for manipulating DOM Nodes.\nNode properties can be accessed via the set/get methods.\nUse Y.get() to retrieve Node instances.\n<strong>NOTE:</strong> Node properties are accessed using\nthe <code>set</code> and <code>get</code> methods."}], "namespace": "", "module": "node", "methods": {"size": {"deprecated": "Use NodeList", "return": {"type": "Int", "description": "The number of items in the Node."}, "description": "Returns the current number of items in the Node.", "guessedname": "size", "guessedtype": "function"}, "appendChild": {"return": {"type": "Node", "description": "The appended node"}, "params": [{"type": "HTMLElement | Node", "name": "node", "description": " Node to be appended"}], "description": "Passes through to DOM method.", "param": "{HTMLElement | Node} node Node to be appended"}, "all": {"return": {"type": "NodeList", "description": "A NodeList instance for the matching HTMLCollection/Array."}, "description": "Retrieves a nodeList based on the given CSS selector.", "param": "{string} selector The CSS selector to test against.", "params": [{"type": "string", "name": "selector", "description": " The CSS selector to test against."}], "guessedname": "all", "guessedtype": "function"}, "set": {"description": "Sets an attribute on the Node instance.\nUnless pre-configured (via Node.ATTRS), set hands \noff to the underlying DOM node.  Only valid\nattributes/properties for the node will be set.\nTo set custom attributes use setAttribute.", "chainable": "", "param": "{String} attr The attribute to be set.", "params": [{"type": "String", "name": "attr", "description": " The attribute to be set."}, {"type": "any", "name": "val", "description": " The value to set the attribute to."}], "guessedname": "set", "guessedtype": "function"}, "getAttrs": {"return": {"type": "Object", "description": "An object with attribute name/value pairs."}, "description": "Returns an object containing the values for the requested attributes.", "param": "{Array} attrs an array of attributes to get values", "params": [{"type": "Array", "name": "attrs", "description": " an array of attributes to get values"}], "guessedname": "getAttrs", "guessedtype": "function"}, "getDOMNode": {"return": {"type": "HTMLNode", "description": "The DOM node bound to the Node instance.  If a DOM node is passed\nas the node argument, it is simply returned."}, "description": "Retrieves the DOM node bound to a Node instance", "param": "{Y.Node || HTMLNode} node The Node instance or an HTMLNode", "static": "", "guessedname": "getDOMNode", "guessedtype": "function", "params": [{"type": "Y.Node || HTMLNode", "name": "node", "description": " The Node instance or an HTMLNode"}]}, "removeAttribute": {"chainable": "", "params": [{"type": "String", "name": "attribute", "description": " The attribute to be removed"}], "description": "Passes through to DOM method.", "param": "{String} attribute The attribute to be removed"}, "getAttribute": {"return": {"type": "string", "description": "The attribute value"}, "params": [{"type": "string", "name": "name", "description": " The attribute name"}], "description": "Allows getting attributes on DOM nodes, normalizing in some cases.\nThis passes through to the DOM node, allowing for custom attributes.", "param": "{string} name The attribute name"}, "getComputedStyle": {"return": {"type": "String", "description": "The computed value of the style property for the element."}, "params": [{"type": "String", "name": "attr", "description": " The style attribute to retrieve."}], "description": "Returns the computed value for the given style property."}, "focus": {"chainable": "", "description": "Passes through to DOM method."}, "cloneNode": {"return": {"type": "Node", "description": "The clone"}, "params": [{"type": "Boolean", "name": "deep", "description": " Whether or not to perform a deep clone, which includes\nsubtree and attributes"}], "description": "Passes through to DOM method.", "param": "{Boolean} deep Whether or not to perform a deep clone, which includes\nsubtree and attributes"}, "one": {"return": {"type": "Node", "description": "A Node instance for the matching HTMLElement."}, "description": "Retrieves a Node instance of nodes based on the given CSS selector.", "param": "{string} selector The CSS selector to test against.", "params": [{"type": "string", "name": "selector", "description": " The CSS selector to test against."}], "guessedname": "one", "guessedtype": "function"}, "getX": {"return": {"type": "Int", "description": "The X position of the node"}, "description": "Gets the current position of the node in page coordinates."}, "getY": {"return": {"type": "Int", "description": "The Y position of the node"}, "description": "Gets the current position of the node in page coordinates."}, "select": {"chainable": "", "description": "Passes through to DOM method."}, "submit": {"chainable": "", "description": "Passes through to DOM method.\nOnly valid on FORM elements"}, "query": {"return": {"type": "Node", "description": "A Node instance for the matching HTMLElement."}, "description": "Retrieves a Node instance of nodes based on the given CSS selector.", "deprecated": "Use one()", "param": "{string} selector The CSS selector to test against.", "params": [{"type": "string", "name": "selector", "description": " The CSS selector to test against."}], "guessedname": "query", "guessedtype": "function"}, "prepend": {"description": "Inserts the content as the firstChild of the node.", "chainable": "", "param": "{String | Y.Node | HTMLElement} content The content to insert", "params": [{"type": "String | Y.Node | HTMLElement", "name": "content", "description": " The content to insert"}], "guessedname": "prepend", "guessedtype": "function"}, "queryAll": {"return": {"type": "NodeList", "description": "A NodeList instance for the matching HTMLCollection/Array."}, "description": "Retrieves a nodeList based on the given CSS selector.", "deprecated": "Use all()", "param": "{string} selector The CSS selector to test against.", "params": [{"type": "string", "name": "selector", "description": " The CSS selector to test against."}], "guessedname": "queryAll", "guessedtype": "function"}, "append": {"description": "Inserts the content as the lastChild of the node.", "chainable": "", "param": "{String | Y.Node | HTMLElement} content The content to insert", "params": [{"type": "String | Y.Node | HTMLElement", "name": "content", "description": " The content to insert"}], "guessedname": "append", "guessedtype": "function"}, "previous": {"return": {"type": "Node", "description": "Node instance or null if not found"}, "description": "Returns the previous matching sibling. \nReturns the nearest element node sibling if no method provided.", "param": "{String | Function} fn A selector or boolean method for testing elements.\nIf a function is used, it receives the current node being tested as the only argument.", "params": [{"type": "String | Function", "name": "fn", "description": " A selector or boolean method for testing elements.\nIf a function is used, it receives the current node being tested as the only argument."}], "guessedname": "previous", "guessedtype": "function"}, "setStyles": {"chainable": "", "params": [{"type": "Object", "name": "hash", "description": " An object literal of property:value pairs."}], "description": "Sets multiple style properties on the node."}, "invoke": {"return": {"type": "", "description": "Whatever the underly method returns. \nDOM Nodes and Collections return values\nare converted to Node/NodeList instances."}, "description": "Invokes a method on the Node instance", "param": "{String} method The name of the method to invoke", "params": [{"type": "String", "name": "method", "description": " The name of the method to invoke"}, {"type": "Any", "name": "a,", "description": " b, c, etc. Arguments to invoke the method with."}], "guessedname": "invoke", "guessedtype": "function"}, "clearData": {"description": "Clears stored data.", "chainable": "", "param": "{string} name The name of the field to clear. If no name\nis given, all data is cleared..", "params": [{"type": "string", "name": "name", "description": " The name of the field to clear. If no name\nis given, all data is cleared.."}], "guessedname": "clearData", "guessedtype": "function"}, "removeChild": {"return": {"type": "Node", "description": "The removed node"}, "params": [{"type": "HTMLElement | Node", "name": "node", "description": " Node to be removed"}], "description": "Passes through to DOM method.", "param": "{HTMLElement | Node} node Node to be removed"}, "setX": {"chainable": "", "params": [{"type": "Int", "name": "x", "description": " X value for new position (coordinates are page-based)"}], "description": "Set the position of the node in page coordinates, regardless of how the node is positioned."}, "Y.one": {"return": {"type": "Y.Node | null", "description": "a Node instance or null if no match found."}, "description": "Returns a single Node instance bound to the node or the\nfirst element matching the given selector. Returns null if no match found.\n<strong>Note:</strong> For chaining purposes you may want to\nuse <code>Y.all</code>, which returns a NodeList when no match is found.", "param": "{String | HTMLElement} node a node or Selector", "static": "", "guessedname": "one", "guessedtype": "function", "params": [{"type": "String | HTMLElement", "name": "node", "description": " a node or Selector"}]}, "contains": {"return": {"type": "Boolean", "description": "Whether or not this node is the needle its ancestor"}, "params": [{"type": "Node | HTMLElement", "name": "needle", "description": " The possible node or descendent"}], "description": "Determines whether the node is an ancestor of another HTML element in the DOM hierarchy.", "param": "{Node | HTMLElement} needle The possible node or descendent"}, "replaceClass": {"chainable": "", "params": [{"type": "String", "name": "oldClassName", "description": " the class name to be replaced"}, {"type": "String", "name": "newClassName", "description": " the class name that will be replacing the old class name"}], "description": "Replace a class with another class for each node.\nIf no oldClassName is present, the newClassName is simply added.", "param": "{String} oldClassName the class name to be replaced"}, "insertBefore": {"return": {"type": "Node", "description": "The inserted node"}, "params": [{"type": "HTMLElement | Node", "name": "newNode", "description": " Node to be appended"}, {"type": "HTMLElement | Node", "name": "refNode", "description": " Node to be inserted before"}], "description": "Passes through to DOM method.", "param": "{HTMLElement | Node} newNode Node to be appended"}, "next": {"return": {"type": "Node", "description": "Node instance or null if not found"}, "description": "Returns the next matching sibling. \nReturns the nearest element node sibling if no method provided.", "param": "{String | Function} fn A selector or boolean method for testing elements.\nIf a function is used, it receives the current node being tested as the only argument.", "params": [{"type": "String | Function", "name": "fn", "description": " A selector or boolean method for testing elements.\nIf a function is used, it receives the current node being tested as the only argument."}], "guessedname": "next", "guessedtype": "function"}, "toString": {"return": {"type": "String", "description": "A string representation of the Node instance"}, "description": "The method called when outputting Node instances as strings", "guessedname": "toString", "guessedtype": "function"}, "swap": {"description": "Swap DOM locations with the given node.\nThis does not change which DOM node each Node instance refers to.", "chainable": "", "param": "{Node} otherNode The node to swap with", "params": [{"type": "Node", "name": "otherNode", "description": " The node to swap with"}], "guessedname": "swap", "guessedtype": "property"}, "intersect": {"return": {"type": "Object", "description": "An object representing the intersection of the regions."}, "params": [{"type": "Node|Object", "name": "node2", "description": " The node or region to compare with."}, {"type": "Object", "name": "altRegion", "description": " An alternate region to use (rather than this node's)."}], "description": "Compares the intersection of the node with another node or region", "guessedname": "intersect", "guessedtype": "function"}, "blur": {"chainable": "", "description": "Passes through to DOM method."}, "test": {"return": {"type": "boolean", "description": "Whether or not the node matches the selector."}, "description": "Test if the supplied node matches the supplied selector.", "param": "{string} selector The CSS selector to test against.", "params": [{"type": "string", "name": "selector", "description": " The CSS selector to test against."}], "guessedname": "test", "guessedtype": "function"}, "siblings": {"return": {"type": "NodeList", "description": "NodeList instance bound to found siblings"}, "description": "Returns all matching siblings. \nReturns all siblings if no method provided.", "param": "{String | Function} fn A selector or boolean method for testing elements.\nIf a function is used, it receives the current node being tested as the only argument.", "params": [{"type": "String | Function", "name": "fn", "description": " A selector or boolean method for testing elements.\nIf a function is used, it receives the current node being tested as the only argument."}], "guessedname": "siblings", "guessedtype": "function"}, "ancestor": {"return": {"type": "Node", "description": "The matching Node instance or null if not found"}, "description": "Returns the nearest ancestor that passes the test applied by supplied boolean method.", "param": "{String | Function} fn A selector string or boolean method for testing elements.", "params": [{"type": "String | Function", "name": "fn", "description": " A selector string or boolean method for testing elements."}, {"type": "Boolean", "name": "testSelf", "description": " optional Whether or not to include the element in the scan \nIf a function is used, it receives the current node being tested as the only argument."}], "guessedname": "ancestor", "guessedtype": "function"}, "inDoc": {"return": {"type": "Boolean", "description": "Whether or not this node is appended to the document."}, "description": "Determines whether the node is appended to the document.", "param": "{Node|HTMLElement} doc optional An optional document to check against.\nDefaults to current document.", "params": [{"type": "Node|HTMLElement", "name": "doc", "description": " optional An optional document to check against.\nDefaults to current document."}], "guessedname": "inDoc", "guessedtype": "function"}, "hasClass": {"return": {"type": "Array", "description": "An array of booleans for each node bound to the NodeList."}, "params": [{"type": "String", "name": "className", "description": " the class name to search for"}], "description": "Determines whether each node has the given className.", "param": "{String} className the class name to search for"}, "swapXY": {"chainable": "", "params": [{"type": "Y.Node || HTMLElement", "name": "otherNode", "description": " The node to swap with."}], "description": "Swaps the XY position of this node with another node."}, "setData": {"description": "Stores arbitrary data on a Node instance.\nThis is not stored with the DOM node.", "chainable": "", "param": "{string} name The name of the field to set. If no name\nis given, name is treated as the data and overrides any existing data.", "params": [{"type": "string", "name": "name", "description": " The name of the field to set. If no name\nis given, name is treated as the data and overrides any existing data."}, {"type": "any", "name": "val", "description": " The value to be assigned to the field."}], "guessedname": "setData", "guessedtype": "function"}, "reset": {"chainable": "", "description": "Passes through to DOM method.\nOnly valid on FORM elements"}, "delegate": {"return": {"type": "Event.Handle", "description": "the detach handle"}, "params": [{"type": "String", "name": "type", "description": "  the event type to delegate"}, {"type": "Function", "name": "fn", "description": "  the function to execute"}, {"type": "String", "name": "selector", "description": "  a selector that must match the target of the event."}], "description": "Functionality to make the node a delegated event container", "guessedname": "delegate", "guessedtype": "function"}, "removeClass": {"chainable": "", "params": [{"type": "String", "name": "className", "description": " the class name to remove from the node's class attribute"}], "description": "Removes a class name from each node.", "param": "{String} className the class name to remove from the node's class attribute"}, "Y.get": {"description": "Returns a single Node instance bound to the node or the\nfirst element matching the given selector.", "deprecated": "Use Y.one", "param": "{String | HTMLElement} node a node or Selector", "static": "", "guessedname": "get", "guessedtype": "function", "params": [{"type": "String | HTMLElement", "name": "node", "description": " a node or Selector"}, {"type": "Y.Node || HTMLElement", "name": "doc", "description": " an optional document to scan. Defaults to Y.config.doc."}]}, "get": {"return": {"type": "any", "description": "The current value of the attribute"}, "description": "Returns an attribute value on the Node instance.\nUnless pre-configured (via Node.ATTRS), get hands \noff to the underlying DOM node.  Only valid\nattributes/properties for the node will be set.", "param": "{String} attr The attribute", "params": [{"type": "String", "name": "attr", "description": " The attribute"}], "guessedname": "get", "guessedtype": "function"}, "Node.unplug": {"static": "", "params": [{"type": "Function | Array", "name": "plugin", "description": " The plugin class, or an array of plugin classes"}], "description": "Unregisters any class level plugins which have been registered by the Node", "guessedname": "unplug", "guessedtype": "function"}, "getElementsByTagName": {"return": {"type": "NodeList", "description": "A NodeList representing the HTMLCollection"}, "params": [{"type": "String", "name": "tagName", "description": " The tagName to collect"}], "description": "Passes through to DOM method.", "param": "{String} tagName The tagName to collect"}, "each": {"description": "Applies the given function to each Node in the NodeList.", "deprecated": "Use NodeList", "chainable": "", "param": "{Function} fn The function to apply", "params": [{"type": "Function", "name": "fn", "description": " The function to apply"}, {"type": "Object", "name": "context", "description": " optional An optional context to apply the function with\nDefault context is the NodeList instance"}], "guessedname": "each", "guessedtype": "function"}, "DEFAULT_SETTER": {"return": {"type": "any", "description": "The value"}, "description": "The default setter for DOM properties \nCalled with instance context (this === the Node instance)", "param": "{String} name The attribute/property being set", "static": "", "guessedname": "DEFAULT_SETTER", "guessedtype": "function", "params": [{"type": "String", "name": "name", "description": " The attribute/property being set"}, {"type": "any", "name": "val", "description": " The value to be set"}]}, "addMethod": {"return": {"type": "any", "description": "Depends on what is returned from the DOM node."}, "description": "Adds methods to the Y.Node prototype, routing through scrubVal.", "param": "{String} name The name of the method to add", "static": "", "guessedname": "addMethod", "guessedtype": "function", "params": [{"type": "String", "name": "name", "description": " The name of the method to add"}, {"type": "Function", "name": "fn", "description": " The function that becomes the method"}, {"type": "Object", "name": "context", "description": " An optional context to call the method with\n(defaults to the Node instance)"}]}, "_get": {"return": {"type": "any", "description": "The current value of the attribute"}, "description": "Helper method for get.", "private": "", "params": [{"type": "String", "name": "attr", "description": " The attribute"}], "param": "{String} attr The attribute", "guessedname": "_get", "guessedtype": "function"}, "getStyle": {"return": {"type": "String", "description": "The current value of the style property for the element."}, "params": [{"type": "String", "name": "attr", "description": " The style attribute to retrieve."}], "description": "Returns the style's current value."}, "importMethod": {"description": "Imports utility methods to be added as Y.Node methods.", "param": "{Object} host The object that contains the method to import.", "static": "", "guessedname": "importMethod", "guessedtype": "function", "params": [{"type": "Object", "name": "host", "description": " The object that contains the method to import."}, {"type": "String", "name": "name", "description": " The name of the method to import"}, {"type": "String", "name": "altName", "description": " An optional name to use in place of the host name"}, {"type": "Object", "name": "context", "description": " An optional context to call the method with"}]}, "replaceChild": {"return": {"type": "Node", "description": "The replaced node"}, "params": [{"type": "HTMLElement | Node", "name": "node", "description": " Node to be inserted"}, {"type": "HTMLElement | Node", "name": "refNode", "description": " Node to be replaced"}], "description": "Passes through to DOM method.", "param": "{HTMLElement | Node} node Node to be inserted"}, "destroy": {"param": "{Boolean} recursivePurge (optional) Whether or not to remove listeners from the\nnode's subtree (default is false)", "params": [{"type": "Boolean", "name": "recursivePurge", "description": " (optional) Whether or not to remove listeners from the\nnode's subtree (default is false)"}], "description": "Nulls internal node references, removes any plugins and event listeners", "guessedname": "destroy", "guessedtype": "function"}, "toggleClass": {"chainable": "", "params": [{"type": "String", "name": "className", "description": " the class name to be toggled"}], "description": "If the className exists on the node it is removed, if it doesn't exist it is added.", "param": "{String} className the class name to be toggled"}, "setStyle": {"chainable": "", "params": [{"type": "String", "name": "attr", "description": " The style attribute to set."}, {"type": "String|Number", "name": "val", "description": " The value."}], "description": "Sets a style property of the node."}, "replace": {"description": "Replace the node with the other node. This is a DOM update only\nand does not change the node bound to the Node instance.\nShortcut for myNode.get('parentNode').replaceChild(newNode, myNode);", "chainable": "", "param": "{Y.Node || HTMLNode} newNode Node to be inserted", "params": [{"type": "Y.Node || HTMLNode", "name": "newNode", "description": " Node to be inserted"}], "guessedname": "replace", "guessedtype": "function"}, "setXY": {"chainable": "", "params": [{"type": "Array", "name": "xy", "description": " Contains X & Y values for new position (coordinates are page-based)"}], "description": "Set the position of the node in page coordinates, regardless of how the node is positioned."}, "setY": {"chainable": "", "params": [{"type": "Int", "name": "y", "description": " Y value for new position (coordinates are page-based)"}], "description": "Set the position of the node in page coordinates, regardless of how the node is positioned."}, "hasChildNodes": {"return": {"type": "Boolean", "description": "Whether or not the node has any childNodes"}, "description": "Passes through to DOM method."}, "setContent": {"description": "Replaces the node's current content with the content.", "chainable": "", "param": "{String | Y.Node | HTMLElement} content The content to insert", "params": [{"type": "String | Y.Node | HTMLElement", "name": "content", "description": " The content to insert"}], "guessedname": "setContent", "guessedtype": "function"}, "insert": {"description": "Inserts the content before the reference node.", "chainable": "", "param": "{String | Y.Node | HTMLElement} content The content to insert", "params": [{"type": "String | Y.Node | HTMLElement", "name": "content", "description": " The content to insert"}, {"type": "Int | Y.Node | HTMLElement | String", "name": "where", "description": " The position to insert at."}], "guessedname": "insert", "guessedtype": "function"}, "getData": {"return": {"type": "any | Object", "description": "Whatever is stored at the given field,\nor an object hash of all fields."}, "description": "Retrieves arbitrary data stored on a Node instance.\nThis is not stored with the DOM node.", "param": "{string} name Optional name of the data field to retrieve.\nIf no name is given, all data is returned.", "params": [{"type": "string", "name": "name", "description": " Optional name of the data field to retrieve.\nIf no name is given, all data is returned."}], "guessedname": "getData", "guessedtype": "function"}, "scrollIntoView": {"chainable": "", "description": "Passes through to DOM method."}, "DEFAULT_GETTER": {"return": {"type": "any", "description": "The current value"}, "description": "The default getter for DOM properties \nCalled with instance context (this === the Node instance)", "param": "{String} name The attribute/property to look up", "static": "", "guessedname": "DEFAULT_GETTER", "guessedtype": "function", "params": [{"type": "String", "name": "name", "description": " The attribute/property to look up"}]}, "setAttribute": {"chainable": "", "params": [{"type": "string", "name": "name", "description": " The attribute name"}, {"type": "string", "name": "value", "description": " The value to set"}], "description": "Allows setting attributes on DOM nodes, normalizing in some cases.\nThis passes through to the DOM node, allowing for custom attributes.", "param": "{string} name The attribute name"}, "remove": {"chainable": "", "description": "Removes the node from its parent.\nShortcut for myNode.get('parentNode').removeChild(myNode);", "guessedname": "remove", "guessedtype": "function"}, "purge": {"description": "Removes event listeners from the node and (optionally) its subtree", "chainable": "", "param": "{Boolean} recurse (optional) Whether or not to remove listeners from the\nnode's subtree", "params": [{"type": "Boolean", "name": "recurse", "description": " (optional) Whether or not to remove listeners from the\nnode's subtree"}, {"type": "String", "name": "type", "description": " (optional) Only remove listeners of the specified type"}], "guessedname": "purge", "guessedtype": "function"}, "item": {"return": {"type": "Node", "description": "The Node instance at the given index."}, "description": "Retrieves the Node instance at the given index.", "deprecated": "Use NodeList", "param": "{Number} index The index of the target Node.", "params": [{"type": "Number", "name": "index", "description": " The index of the target Node."}], "guessedname": "item", "guessedtype": "function"}, "Node.plug": {"static": "", "params": [{"type": "Function | Array", "name": "plugin", "description": " Either the plugin class, an array of plugin classes or an array of objects (with fn and cfg properties defined)"}, {"type": "Object", "name": "config", "description": " (Optional) If plugin is the plugin class, the configuration for the plugin"}], "description": "Registers plugins to be instantiated at the class level (plugins \nwhich should be plugged into every instance of Node by default).", "guessedname": "plug", "guessedtype": "function"}, "getXY": {"return": {"type": "Array", "description": "The XY position of the node"}, "description": "Gets the current position of the node in page coordinates."}, "compareTo": {"return": {"type": "Boolean", "description": "True if the nodes match, false if they do not."}, "description": "Compares nodes to determine if they match.\nNode instances can be compared to each other and/or HTMLElements.", "param": "{HTMLElement | Node} refNode The reference node to compare to the node.", "params": [{"type": "HTMLElement | Node", "name": "refNode", "description": " The reference node to compare to the node."}], "guessedname": "compareTo", "guessedtype": "function"}, "setAttrs": {"description": "Sets multiple attributes.", "chainable": "", "param": "{Object} attrMap an object of name/value pairs to set", "params": [{"type": "Object", "name": "attrMap", "description": " an object of name/value pairs to set"}], "guessedname": "setAttrs", "guessedtype": "function"}, "hasAttribute": {"return": {"type": "Boolean", "description": "Whether or not the attribute is present"}, "params": [{"type": "String", "name": "attribute", "description": " The attribute to test for"}], "description": "Passes through to DOM method.", "param": "{String} attribute The attribute to test for"}, "addClass": {"chainable": "", "params": [{"type": "String", "name": "className", "description": " the class name to add to the node's class attribute"}], "description": "Adds a class name to each node.", "param": "{String} className the class name to add to the node's class attribute"}, "create": {"return": {"type": "Node", "description": "A Node instance bound to a DOM node or fragment"}, "description": "Creates a new dom node using the provided markup string.", "param": "{String} html The markup used to create the element", "static": "", "guessedname": "create", "guessedtype": "function", "params": [{"type": "String", "name": "html", "description": " The markup used to create the element"}, {"type": "HTMLDocument", "name": "doc", "description": " An optional document context"}]}, "scrubVal": {"return": {"type": "Y.Node | Y.NodeList | any", "description": "Depends on what is returned from the DOM node."}, "description": "Checks Node return values and wraps DOM Nodes as Y.Node instances\nand DOM Collections / Arrays as Y.NodeList instances.\nOther return values just pass thru.  If undefined is returned (e.g. no return)\nthen the Node instance is returned for chainability.", "param": "{any} node The Node instance or an HTMLNode", "static": "", "guessedname": "scrubVal", "guessedtype": "function", "params": [{"type": "any", "name": "node", "description": " The Node instance or an HTMLNode"}]}, "inRegion": {"return": {"type": "Object", "description": "An object representing the intersection of the regions."}, "params": [{"type": "Node|Object", "name": "node2", "description": " The node or region to compare with."}, {"type": "Boolean", "name": "all", "description": " Whether or not all of the node must be in the region."}, {"type": "Object", "name": "altRegion", "description": " An alternate region to use (rather than this node's)."}], "description": "Determines whether or not the node is within the giving region.", "guessedname": "inRegion", "guessedtype": "function"}}, "file": "node-debug.js", "shortname": "Node", "properties": {"_node": {"private": "", "description": "The underlying DOM node bound to the Y.Node instance", "guessedname": "_node", "guessedtype": "property"}, "_instances": {"guessedname": "_instances", "static": "", "description": "A list of Node instances that have been created", "private": "", "guessedtype": "property"}, "NAME": {"static": "", "description": "The name of the component", "guessedname": "NAME", "guessedtype": "property"}, "DOM_EVENTS": {"static": "", "description": "List of events that route to DOM events", "guessedname": "DOM_EVENTS", "guessedtype": "property"}, "ATTRS": {"type": "object", "static": "", "description": "Static collection of configuration attributes for special handling", "guessedname": "ATTRS", "guessedtype": "property"}}, "description": "The Node class provides a wrapper for manipulating DOM Nodes.\nNode properties can be accessed via the set/get methods.\nUse Y.get() to retrieve Node instances.\n<strong>NOTE:</strong> Node properties are accessed using\nthe <code>set</code> and <code>get</code> methods."}, "Test.Runner": {"name": "Test.Runner", "namespace": "Test", "module": "test", "events": {"testcasebegin": {"static": "", "description": "Fires when a test case is opened but before the first \ntest is executed.", "guessedname": "TEST_CASE_BEGIN_EVENT", "guessedtype": "property"}, "testcasecomplete": {"static": "", "description": "Fires when all tests in a test case have been executed.", "guessedname": "TEST_CASE_COMPLETE_EVENT", "guessedtype": "property"}, "begin": {"static": "", "description": "Fires when the run() method is called.", "guessedname": "BEGIN_EVENT", "guessedtype": "property"}, "ignore": {"static": "", "description": "Fires when a test has been ignored.", "guessedname": "TEST_IGNORE_EVENT", "guessedtype": "property"}, "testsuitebegin": {"static": "", "description": "Fires when a test suite is opened but before the first \ntest is executed.", "guessedname": "TEST_SUITE_BEGIN_EVENT", "guessedtype": "property"}, "testsuitecomplete": {"static": "", "description": "Fires when all test cases in a test suite have been\ncompleted.", "guessedname": "TEST_SUITE_COMPLETE_EVENT", "guessedtype": "property"}, "pass": {"static": "", "description": "Fires when a test has passed.", "guessedname": "TEST_PASS_EVENT", "guessedtype": "property"}, "fail": {"static": "", "description": "Fires when a test has failed.", "guessedname": "TEST_FAIL_EVENT", "guessedtype": "property"}, "complete": {"static": "", "description": "Fires when all test suites and test cases have been completed.", "guessedname": "COMPLETE_EVENT", "guessedtype": "property"}}, "methods": {"disableLogging": {"static": "", "return": {"type": "Void", "description": ""}, "description": "Disable logging via Y.log(). Test output will not be visible unless\nTestRunner events are subscribed to.", "guessedname": "disableLogging", "guessedtype": "function"}, "_run": {"return": {"type": "Object", "description": "Results of the execution with properties passed, failed, and total."}, "description": "Runs a test case or test suite, returning the results.", "private": "", "static": "", "param": "{Y.Test.Case|Y.Test.Suite} testObject The test case or test suite to run.", "guessedname": "_run", "guessedtype": "function", "params": [{"type": "Y.Test.Case|Y.Test.Suite", "name": "testObject", "description": " The test case or test suite to run."}]}, "isRunning": {"return": {"type": "Boolean", "description": "True if the TestRunner is running, false if not."}, "description": "Indicates that the TestRunner is busy running tests and therefore can't\nbe stopped and results cannot be gathered.", "guessedname": "isRunning", "guessedtype": "function"}, "setName": {"return": {"type": "Void", "description": ""}, "description": "The name assigned to the master suite of the TestRunner. This is the name\nthat is output as the root's name when results are retrieved.", "param": "{String} name The name of the result set.", "params": [{"type": "String", "name": "name", "description": " The name of the result set."}], "guessedname": "setName", "guessedtype": "function"}, "getCoverage": {"return": {"type": "Object|String", "description": "Either the coverage object or, if a coverage\nformat is specified, a string representing the results in that format."}, "description": "Returns the coverage report for the files that have been executed.\nThis returns only coverage information for files that have been\ninstrumented using YUI Test Coverage and only those that were run\nin the same pass.", "param": "{Function} format (Optional) A coverage format to return results in.", "params": [{"type": "Function", "name": "format", "description": " (Optional) A coverage format to return results in."}], "guessedname": "getCoverage", "guessedtype": "function"}, "_logEvent": {"return": {"type": "Void", "description": ""}, "description": "Logs TestRunner events using Y.log().", "private": "", "static": "", "param": "{Object} event The event object for the event.", "guessedname": "_logEvent", "guessedtype": "function", "params": [{"type": "Object", "name": "event", "description": " The event object for the event."}]}, "_addTestCaseToTestTree": {"return": {"type": "Void", "description": ""}, "description": "Adds a test case to the test tree as a child of the specified node.", "private": "", "static": "", "param": "{TestNode} parentNode The node to add the test case to as a child.", "guessedname": "_addTestCaseToTestTree", "guessedtype": "function", "params": [{"type": "TestNode", "name": "parentNode", "description": " The node to add the test case to as a child."}, {"type": "Y.Test.Case", "name": "testCase", "description": " The test case to add."}]}, "getName": {"return": {"type": "String", "description": "The name of the result set."}, "description": "Retrieves the name of the current result set.", "guessedname": "getName", "guessedtype": "function"}, "resume": {"return": {"type": "Void", "description": ""}, "description": "Resumes the TestRunner after wait() was called.", "param": "{Function} segment The function to run as the rest\nof the haulted test.", "static": "", "guessedname": "resume", "guessedtype": "function", "params": [{"type": "Function", "name": "segment", "description": " The function to run as the rest\nof the haulted test."}]}, "getResults": {"return": {"type": "Object|String", "description": "Either the results object or, if a test format is \npassed as the argument, a string representing the results in a specific\nformat."}, "description": "Returns the last complete results set from the TestRunner. Null is returned\nif the TestRunner is running or no tests have been run.", "param": "{Function} format (Optional) A test format to return the results in.", "params": [{"type": "Function", "name": "format", "description": " (Optional) A test format to return the results in."}], "guessedname": "getResults", "guessedtype": "function"}, "enableLogging": {"static": "", "return": {"type": "Void", "description": ""}, "description": "Enable logging via Y.log(). Test output is published and can be read via\nlogreader.", "guessedname": "enableLogging", "guessedtype": "function"}, "_buildTestTree": {"return": {"type": "Void", "description": ""}, "description": "Builds the test tree based on items in the master suite. The tree is a hierarchical\nrepresentation of the test suites, test cases, and test functions. The resulting tree\nis stored in _root and the pointer _cur is set to the root initially.", "private": "", "static": "", "guessedname": "_buildTestTree", "guessedtype": "function"}, "_addTestSuiteToTestTree": {"return": {"type": "Void", "description": ""}, "description": "Adds a test suite to the test tree as a child of the specified node.", "private": "", "static": "", "param": "{TestNode} parentNode The node to add the test suite to as a child.", "guessedname": "_addTestSuiteToTestTree", "guessedtype": "function", "params": [{"type": "TestNode", "name": "parentNode", "description": " The node to add the test suite to as a child."}, {"type": "Y.Test.Suite", "name": "testSuite", "description": " The test suite to add."}]}, "_handleTestObjectComplete": {"return": {"type": "Void", "description": ""}, "description": "Handles the completion of a test object's tests. Tallies test results \nfrom one level up to the next.", "private": "", "params": [{"type": "TestNode", "name": "node", "description": " The TestNode representing the test object."}], "param": "{TestNode} node The TestNode representing the test object.", "guessedname": "_handleTestObjectComplete", "guessedtype": "function"}, "add": {"return": {"type": "Void", "description": ""}, "description": "Adds a test suite or test case to the list of test objects to run.", "param": "testObject Either a TestCase or a TestSuite that should be run.", "static": "", "guessedname": "add", "guessedtype": "function", "params": [{"type": "", "name": "testObject", "description": " Either a TestCase or a TestSuite that should be run."}]}, "isWaiting": {"static": "", "return": {"type": "Boolean", "description": "True if the TestRunner is waiting, false if not."}, "description": "Indicates if the TestRunner is waiting for a test to resume", "guessedname": "isWaiting", "guessedtype": "function"}, "_next": {"return": {"type": "TestNode", "description": "The next node in the test tree or null if the end is reached."}, "description": "Retrieves the next node in the test tree.", "private": "", "static": "", "guessedname": "_next", "guessedtype": "function"}, "run": {"return": {"type": "Void", "description": ""}, "description": "Runs the test suite.", "param": "{Boolean} oldMode (Optional) Specifies that the <= 2.8 way of\ninternally managing test suites should be used.", "static": "", "guessedname": "run", "guessedtype": "function", "params": [{"type": "Boolean", "name": "oldMode", "description": " (Optional) Specifies that the <= 2.8 way of\ninternally managing test suites should be used."}]}, "_handleError": {"return": {"type": "Void", "description": ""}, "description": "Handles an error as if it occurred within the currently executing\ntest. This is for mock methods that may be called asynchronously\nand therefore out of the scope of the TestRunner. Previously, this\nerror would bubble up to the browser. Now, this method is used\nto tell TestRunner about the error. This should never be called\nby anyplace other than the Mock object.", "private": "", "static": "", "param": "{Error} error The error object.", "guessedname": "_handleError", "guessedtype": "function", "params": [{"type": "Error", "name": "error", "description": " The error object."}]}, "clear": {"static": "", "return": {"type": "Void", "description": ""}, "description": "Removes all test objects from the runner.", "guessedname": "clear", "guessedtype": "function"}, "_runTest": {"return": {"type": "Void", "description": ""}, "description": "Runs a single test based on the data provided in the node.", "private": "", "static": "", "param": "{TestNode} node The TestNode representing the test to run.", "guessedname": "_runTest", "guessedtype": "function", "params": [{"type": "TestNode", "name": "node", "description": " The TestNode representing the test to run."}], "name": "_runTest"}}, "static": "", "file": "test.js", "shortname": "Runner", "properties": {"_running": {"description": "Indicates if the TestRunner is currently running tests.", "private": "", "static": "", "guessedname": "_running", "guessedtype": "property", "type": "Boolean"}, "_root": {"description": "Pointer to the root node in the test tree.", "private": "", "static": "", "guessedname": "_root", "guessedtype": "property", "type": "TestNode"}, "masterSuite": {"type": "Y.Test.Suite", "static": "", "description": "Suite on which to attach all TestSuites and TestCases to be run.", "private": ""}, "_log": {"description": "Indicates if the TestRunner will log events or not.", "private": "", "static": "", "guessedname": "_log", "guessedtype": "property", "type": "Boolean"}, "_waiting": {"description": "Indicates if the TestRunner is waiting as a result of\nwait() being called.", "private": "", "static": "", "guessedname": "_waiting", "guessedtype": "property", "type": "Boolean"}, "_cur": {"description": "Pointer to the current node in the test tree.", "private": "", "static": "", "guessedname": "_cur", "guessedtype": "property", "type": "TestNode"}, "_lastResults": {"description": "Holds copy of the results object generated when all tests are\ncomplete.", "private": "", "static": "", "guessedname": "_lastResults", "guessedtype": "property", "type": "Object"}}, "description": "Runs test suites and test cases, providing events to allowing for the\ninterpretation of test results."}, "Get": {"name": "Get", "namespace": "", "module": "yui", "guessedname": "Get", "methods": {"_purge": {"private": "", "description": "Removes the nodes for the specified queue", "guessedname": "_purge", "guessedtype": "function"}, "_finalize": {"description": "Called by the the helper for detecting script load in Safari", "private": "", "static": "", "param": "id {string} the transaction id", "guessedname": "_finalize", "guessedtype": "function", "params": [{"type": "string", "name": "id", "description": "  the transaction id"}]}, "_autoPurge": {"private": "", "description": "Removes processed queues and corresponding nodes", "guessedname": "_autoPurge", "guessedtype": "function"}, "_finish": {"description": "The request is complete, so executing the requester's callback", "param": "id {string} the id of the request", "params": [{"type": "string", "name": "id", "description": "  the id of the request"}], "private": "", "guessedname": "_finish", "guessedtype": "function"}, "_linkNode": {"return": {"type": "HTMLElement", "description": "the generated node"}, "description": "Generates a link node", "private": "", "params": [{"type": "string", "name": "url", "description": "  the url for the css file"}, {"type": "Window", "name": "win", "description": "  optional window to create the node in"}, {"type": "", "name": "attributes", "description": " optional attributes collection to apply to the new node"}], "param": "url {string} the url for the css file", "guessedname": "_linkNode", "guessedtype": "function"}, "script": {"return": {"type": "tId: string", "description": "an object containing info about the transaction"}, "description": "Fetches and inserts one or more script nodes into the head\nof the current document or the document in a specified window.", "param": "url {string|string[]} the url or urls to the script(s)", "static": "", "guessedname": "script", "guessedtype": "function", "params": [{"type": "string|string[]", "name": "url", "description": "  the url or urls to the script(s)"}, {"type": "object", "name": "opts", "description": "  Options: \n<dl>\n<dt>onSuccess</dt>\n<dd>\ncallback to execute when the script(s) are finished loading\nThe callback receives an object back with the following\ndata:\n<dl>\n<dt>win</dt>\n<dd>the window the script(s) were inserted into</dd>\n<dt>data</dt>\n<dd>the data object passed in when the request was made</dd>\n<dt>nodes</dt>\n<dd>An array containing references to the nodes that were\ninserted</dd>\n<dt>purge</dt>\n<dd>A function that, when executed, will remove the nodes\nthat were inserted</dd>\n<dt>\n</dl>\n</dd>\n<dt>onTimeout</dt>\n<dd>\ncallback to execute when a timeout occurs.\nThe callback receives an object back with the following\ndata:\n<dl>\n<dt>win</dt>\n<dd>the window the script(s) were inserted into</dd>\n<dt>data</dt>\n<dd>the data object passed in when the request was made</dd>\n<dt>nodes</dt>\n<dd>An array containing references to the nodes that were\ninserted</dd>\n<dt>purge</dt>\n<dd>A function that, when executed, will remove the nodes\nthat were inserted</dd>\n<dt>\n</dl>\n</dd>\n<dt>onEnd</dt>\n<dd>a function that executes when the transaction finishes, regardless of the exit path</dd>\n<dt>onFailure</dt>\n<dd>\ncallback to execute when the script load operation fails\nThe callback receives an object back with the following\ndata:\n<dl>\n<dt>win</dt>\n<dd>the window the script(s) were inserted into</dd>\n<dt>data</dt>\n<dd>the data object passed in when the request was made</dd>\n<dt>nodes</dt>\n<dd>An array containing references to the nodes that were\ninserted successfully</dd>\n<dt>purge</dt>\n<dd>A function that, when executed, will remove any nodes\nthat were inserted</dd>\n<dt>\n</dl>\n</dd>\n<dt>context</dt>\n<dd>the execution context for the callbacks</dd>\n<dt>win</dt>\n<dd>a window other than the one the utility occupies</dd>\n<dt>autopurge</dt>\n<dd>\nsetting to true will let the utilities cleanup routine purge \nthe script once loaded\n</dd>\n<dt>purgethreshold</dt>\n<dd>\nThe number of transaction before autopurge should be initiated\n</dd>\n<dt>data</dt>\n<dd>\ndata that is supplied to the callback when the script(s) are\nloaded.\n</dd>\n<dt>insertBefore</dt>\n<dd>node or node id that will become the new node's nextSibling</dd>\n</dl>\n<dt>charset</dt>\n<dd>Node charset, default utf-8 (deprecated, use the attributes config)</dd>\n<dt>attributes</dt>\n<dd>An object literal containing additional attributes to add to the link tags</dd>\n<dt>timeout</dt>\n<dd>Number of milliseconds to wait before aborting and firing the timeout event</dd>\n<pre>\n&nbsp;&nbsp;Y.Get.script(\n&nbsp;&nbsp;[\"http://yui.yahooapis.com/2.5.2/build/yahoo/yahoo-min.js\",\n&nbsp;&nbsp;&nbsp;\"http://yui.yahooapis.com/2.5.2/build/event/event-min.js\"], &#123;\n&nbsp;&nbsp;&nbsp;&nbsp;onSuccess: function(o) &#123;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.log(\"won't cause error because Y is the context\");\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Y.log(o.data); // foo\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Y.log(o.nodes.length === 2) // true\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// o.purge(); // optionally remove the script nodes immediately\n&nbsp;&nbsp;&nbsp;&nbsp;&#125;,\n&nbsp;&nbsp;&nbsp;&nbsp;onFailure: function(o) &#123;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Y.log(\"transaction failed\");\n&nbsp;&nbsp;&nbsp;&nbsp;&#125;,\n&nbsp;&nbsp;&nbsp;&nbsp;onTimeout: function(o) &#123;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Y.log(\"transaction timed out\");\n&nbsp;&nbsp;&nbsp;&nbsp;&#125;,\n&nbsp;&nbsp;&nbsp;&nbsp;data: \"foo\",\n&nbsp;&nbsp;&nbsp;&nbsp;timeout: 10000, // 10 second timeout\n&nbsp;&nbsp;&nbsp;&nbsp;context: Y, // make the YUI instance\n&nbsp;&nbsp;&nbsp;&nbsp;// win: otherframe // target another window/frame\n&nbsp;&nbsp;&nbsp;&nbsp;autopurge: true // allow the utility to choose when to remove the nodes\n&nbsp;&nbsp;&nbsp;&nbsp;purgetheshold: 1 // purge previous transaction before next transaction\n&nbsp;&nbsp;&#125;);\n</pre>"}]}, "_end": {"description": "The transaction is finished", "param": "id {string} the id of the request", "params": [{"type": "string", "name": "id", "description": "  the id of the request"}], "private": "", "guessedname": "_end", "guessedtype": "function"}, "_returnData": {"private": "", "description": "Returns the data payload for callback functions", "guessedname": "_returnData", "guessedtype": "function"}, "queue": {"description": "Saves the state for the request and begins loading\nthe requested urls", "param": "type {string} the type of node to insert", "params": [{"type": "string", "name": "type", "description": "  the type of node to insert"}, {"type": "string", "name": "url", "description": "  the url to load"}, {"type": "", "name": "opts", "description": " the hash of options for this request"}], "private": "", "guessedname": "_queue", "guessedtype": "function"}, "_scriptNode": {"return": {"type": "HTMLElement", "description": "the generated node"}, "description": "Generates a script node", "private": "", "params": [{"type": "string", "name": "url", "description": "  the url for the script file"}, {"type": "Window", "name": "win", "description": "  optional window to create the node in"}, {"type": "", "name": "attributes", "description": " optional attributes collection to apply to the new node"}], "param": "url {string} the url for the script file", "guessedname": "_scriptNode", "guessedtype": "function"}, "_node": {"return": {"type": "HTMLElement", "description": "the generated node"}, "description": "Generates an HTML element, this is not appended to a document", "private": "", "params": [{"type": "string", "name": "type", "description": "  the type of element"}, {"type": "string", "name": "attr", "description": "  the attributes"}, {"type": "Window", "name": "win", "description": "  optional window to create the element in"}], "param": "type {string} the type of element", "guessedname": "_node", "guessedtype": "function"}, "abort": {"description": "Abort a transaction", "param": "o {string|object} Either the tId or the object returned from\nscript() or css()", "static": "", "guessedname": "abort", "guessedtype": "function", "params": [{"type": "string|object", "name": "o", "description": "  Either the tId or the object returned from\nscript() or css()"}]}, "_next": {"description": "Loads the next item for a given request", "param": "id {string} the id of the request", "params": [{"type": "string", "name": "id", "description": "  the id of the request"}, {"type": "string", "name": "loaded", "description": "  the url that was just loaded, if any"}], "private": "", "guessedname": "_next", "guessedtype": "function"}, "_timeout": {"description": "Timeout detected", "param": "id {string} the id of the request", "params": [{"type": "string", "name": "id", "description": "  the id of the request"}], "private": "", "guessedname": "_timeout", "guessedtype": "function"}, "_track": {"description": "Detects when a node has been loaded.  In the case of\nscript nodes, this does not guarantee that contained\nscript is ready to use.", "param": "type {string} the type of node to track", "params": [{"type": "string", "name": "type", "description": "  the type of node to track"}, {"type": "HTMLElement", "name": "n", "description": "  the node to track"}, {"type": "string", "name": "id", "description": "  the id of the request"}, {"type": "string", "name": "url", "description": "  the url that is being loaded"}, {"type": "Window", "name": "win", "description": "  the targeted window"}, {"type": "", "name": "qlength", "description": " the number of remaining items in the queue,\nincluding this one"}, {"type": "Function", "name": "trackfn", "description": "  function to execute when finished\nthe default is _next"}], "private": "", "guessedname": "_track", "guessedtype": "function"}, "css": {"return": {"type": "tId: string", "description": "an object containing info about the transaction"}, "description": "Fetches and inserts one or more css link nodes into the \nhead of the current document or the document in a specified\nwindow.", "param": "url {string} the url or urls to the css file(s)", "static": "", "guessedname": "css", "guessedtype": "function", "params": [{"type": "string", "name": "url", "description": "  the url or urls to the css file(s)"}, {"type": "", "name": "opts", "description": " Options: \n<dl>\n<dt>onSuccess</dt>\n<dd>\ncallback to execute when the css file(s) are finished loading\nThe callback receives an object back with the following\ndata:\n<dl>win</dl>\n<dd>the window the link nodes(s) were inserted into</dd>\n<dt>data</dt>\n<dd>the data object passed in when the request was made</dd>\n<dt>nodes</dt>\n<dd>An array containing references to the nodes that were\ninserted</dd>\n<dt>purge</dt>\n<dd>A function that, when executed, will remove the nodes\nthat were inserted</dd>\n<dt>\n</dl>\n</dd>\n<dt>context</dt>\n<dd>the execution context for the callbacks</dd>\n<dt>win</dt>\n<dd>a window other than the one the utility occupies</dd>\n<dt>data</dt>\n<dd>\ndata that is supplied to the callbacks when the nodes(s) are\nloaded.\n</dd>\n<dt>insertBefore</dt>\n<dd>node or node id that will become the new node's nextSibling</dd>\n<dt>charset</dt>\n<dd>Node charset, default utf-8 (deprecated, use the attributes config)</dd>\n<dt>attributes</dt>\n<dd>An object literal containing additional attributes to add to the link tags</dd>\n</dl>\n<pre>\nY.Get.css(\"http://yui.yahooapis.com/2.3.1/build/menu/assets/skins/sam/menu.css\");\n</pre>\n<pre>\n&nbsp;&nbsp;Y.Get.css(\n&nbsp;&nbsp;[\"http://yui.yahooapis.com/2.3.1/build/menu/assets/skins/sam/menu.css\",\n&nbsp;&nbsp;&nbsp;\"http://yui.yahooapis.com/2.3.1/build/logger/assets/skins/sam/logger.css\"], &#123;\n&nbsp;&nbsp;&nbsp;&nbsp;insertBefore: 'custom-styles' // nodes will be inserted before the specified node\n&nbsp;&nbsp;&#125;);\n</pre>"}]}}, "static": "", "file": "aui.js", "guessedtype": "function", "shortname": "Get", "properties": {"queues": {"guessedname": "queues", "description": "hash of queues to manage multiple requests", "private": "", "guessedtype": "property"}, "qidx": {"guessedname": "qidx", "type": "int", "description": "queue index used to generate transaction ids", "private": "", "guessedtype": "property"}, "PURGE_THRESH": {"description": "The number of request required before an automatic purge.\nCan be configured via the 'purgethreshold' config\nproperty PURGE_THRESH", "default": "20", "private": "", "static": "", "guessedname": "PURGE_THRESH", "guessedtype": "property", "type": "int"}, "purging": {"guessedname": "purging", "type": "boolean", "description": "interal property used to prevent multiple simultaneous purge \nprocesses", "private": "", "guessedtype": "property"}}, "description": "Fetches and inserts one or more script or link nodes into the document"}, "OverlayContextPanel": {"name": "OverlayContextPanel", "configs": {"anim": {"default": "{ show: false }", "type": "Object", "description": "Enable or disable the animation for hide and show. Used as the\n<a href=\"Anim.html\">Anim</a> configuration attributes.\n<pre><code>anim: {\nshow: {\nduration: .9\n},\nhide: {\nduration: .2\n}\n}\n</code></pre>", "guessedname": "anim", "guessedtype": "property"}, "hideOn": {"default": "click", "type": "String", "description": "See <a href=\"OverlayContext.html#config_hideOn\">hideOn</a>.", "guessedname": "hideOn", "guessedtype": "property"}, "arrow": {"default": "null", "type": "String", "description": "Position where the arrow will be placed. See\n<a href=\"OverlayContextPanel.html#config_showArrow\">showArrow</a>. If it's\nnot set, it will get the value set on the\n<a href=\"OverlayContext.html#config_align\">align</a> point. Here is a\nlist of valid arrows 'bc', 'bl', 'br', 'cc', 'lb', 'lc', 'lt', 'rb',\n'rc', 'rl'.", "guessedname": "arrow", "guessedtype": "property"}, "showOn": {"default": "click", "type": "String", "description": "See <a href=\"OverlayContext.html#config_showOn\">showOn</a>.", "guessedname": "showOn", "guessedtype": "property"}, "stack": {"default": "true", "type": "boolean", "description": "Gives stacking habilities to the OverlayContextPanel.", "guessedname": "stack", "guessedtype": "property"}, "showArrow": {"default": "true", "type": "boolean", "description": "If true the OverlayContextPanel will show an arrow positioned on the\n<a href=\"OverlayContextPanel.html#config_arrow\">arrow</a> point.", "guessedname": "showArrow", "guessedtype": "property"}}, "constructors": [{"params": [{"type": "Object", "name": "config", "description": "  Object literal specifying widget configuration properties."}], "description": "<p><img src=\"assets/images/aui-overlay-context-panel/main.png\"/></p>\nA base class for OverlayContextPanel, providing:\n<ul>\n<li>Widget Lifecycle (initializer, renderUI, bindUI, syncUI, destructor)</li>\n<li>Customizable arrow</li>\n<li>Optional animation when show or hide</li>\n</ul>\nQuick Example:<br/>\n<pre><code>var instance = new A.OverlayContextPanel({\nbodyContent: 'Here s a sample OverlayContextPanel.',\nboundingBox: '#overlay-context-panel',\ntrigger: '#triggerButton',\ncancellableHide: true,\nhideDelay: 200,\nhideOnDocumentClick: false,\nanim: true\n}).render();\n</code></pre>\nCheck the list of <a href=\"OverlayContextPanel.html#configattributes\">Configuration Attributes</a> available for\nOverlayContextPanel."}], "namespace": "", "module": "aui-overlay", "events": {"arrowChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "arrowChange", "description": "Fires when the value for the configuration attribute 'arrow' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "showArrowChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "showArrowChange", "description": "Fires when the value for the configuration attribute 'showArrow' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "showOnChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "showOnChange", "description": "Fires when the value for the configuration attribute 'showOn' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "animChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "animChange", "description": "Fires when the value for the configuration attribute 'anim' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "stackChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "stackChange", "description": "Fires when the value for the configuration attribute 'stack' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "hideOnChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "hideOnChange", "description": "Fires when the value for the configuration attribute 'hideOn' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "guessedname": "OverlayContextPanel", "methods": {"fixPointerColor": {"description": "OverlayContextPanel uses a imageless arrow, which involves some CSS technics.\nThis method is meant to fix the color of the borders of the arrow.", "guessedname": "fixPointerColor", "guessedtype": "function"}, "hide": {"param": "{EventFacade} event", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "description": "Hides the OverlayContextPanel.", "guessedname": "hide", "guessedtype": "function"}, "syncUI": {"protected": "", "description": "Sync the OverlayContextPanel UI. Lifecycle.", "guessedname": "syncUI", "guessedtype": "function"}, "_syncElements": {"protected": "", "description": "Sync the UI of the OverlayContextPanel elements.", "guessedname": "_syncElements", "guessedtype": "function"}, "getAlignPoint": {"return": {"type": "String", "description": ""}, "description": "Normalize the align point value. The align point 'cc' is not a valid\nposition for the arrow and then it's normalized to the 'bc' point.", "guessedname": "getAlignPoint", "guessedtype": "function"}, "_renderElements": {"protected": "", "description": "Render DOM elements for the OverlayContextPanel.", "guessedname": "_renderElements", "guessedtype": "function"}, "_setAnim": {"return": {"type": "Object", "description": ""}, "description": "Setter for the\n<a href=\"OverlayContextPanel.html#config_anim\">anim</a> attribute.", "param": "{Object} value", "protected": "", "params": [{"type": "Object", "name": "value", "description": ""}], "guessedname": "_setAnim", "guessedtype": "function"}, "_beforeShow": {"description": "Fires before show the OverlayContextPanel.", "param": "{EventFacade} event", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "guessedname": "_beforeShow", "guessedtype": "function"}, "_afterShowArrowChange": {"description": "Fires after showArrow attribute changes.", "param": "{EventFacade} event", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "guessedname": "_afterShowArrowChange", "guessedtype": "function"}, "_setStack": {"return": {"type": "boolean", "description": ""}, "description": "Setter for the\n<a href=\"OverlayContextPanel.html#config_stack\">stack</a> attribute.", "param": "{boolean} value", "protected": "", "params": [{"type": "boolean", "name": "value", "description": ""}], "guessedname": "_setStack", "guessedtype": "function"}, "bindUI": {"protected": "", "description": "Bind the events on the OverlayContextPanel UI. Lifecycle.", "guessedname": "bindUI", "guessedtype": "function"}, "align": {"param": "{Node | String | null} node A reference (or selector string) for\nthe Node which with the OverlayContextPanel is to be aligned.", "params": [{"type": "Node | String | null", "name": "node", "description": " A reference (or selector string) for\nthe Node which with the OverlayContextPanel is to be aligned."}, {"type": "Array[2]", "name": "points", "description": " A two element array, specifying the points on\nthe OverlayContextPanel and node/viewport which need to be aligned."}], "description": "Aligns the OverlayContextPanel to the provided node (or viewport) using the\nprovided points. Inherited from\n<a href=\"Overlay.html#method_align\">Overlay</a>.", "guessedname": "align", "guessedtype": "function"}, "renderUI": {"protected": "", "description": "Create the DOM structure for the OverlayContextPanel. Lifecycle.", "guessedname": "renderUI", "guessedtype": "function"}}, "extends": "OverlayContext", "superclass": "OverlayContext", "file": "aui-overlay.js", "guessedtype": "property", "shortname": "OverlayContextPanel", "properties": {"OverlayContextPanel.ATTRS": {"type": "Object", "static": "", "description": "Static property used to define the default attribute\nconfiguration for the OverlayContextPanel.", "guessedname": "ATTRS", "guessedtype": "property"}, "OverlayContextPanel.NAME": {"type": "String", "static": "", "description": "Static property provides a string to identify the class.", "guessedname": "NAME", "guessedtype": "property"}}, "description": "<p><img src=\"assets/images/aui-overlay-context-panel/main.png\"/></p>\nA base class for OverlayContextPanel, providing:\n<ul>\n<li>Widget Lifecycle (initializer, renderUI, bindUI, syncUI, destructor)</li>\n<li>Customizable arrow</li>\n<li>Optional animation when show or hide</li>\n</ul>\nQuick Example:<br/>\n<pre><code>var instance = new A.OverlayContextPanel({\nbodyContent: 'Here s a sample OverlayContextPanel.',\nboundingBox: '#overlay-context-panel',\ntrigger: '#triggerButton',\ncancellableHide: true,\nhideDelay: 200,\nhideOnDocumentClick: false,\nanim: true\n}).render();\n</code></pre>\nCheck the list of <a href=\"OverlayContextPanel.html#configattributes\">Configuration Attributes</a> available for\nOverlayContextPanel."}, "DialogMask": {"name": "DialogMask", "constructors": [{"description": "A base class for DialogMask - Controls the <a\nhref=\"Dialog.html#config_modal\">modal</a> attribute."}], "namespace": "", "module": "aui-dialog", "guessedname": "skinnable", "static": "", "superclass": "OverlayMask", "file": "aui-dialog.js", "guessedtype": "property", "extends": "OverlayMask", "shortname": "DialogMask", "description": "A base class for DialogMask - Controls the <a\nhref=\"Dialog.html#config_modal\">modal</a> attribute."}, "ImageViewerMask": {"name": "ImageViewerMask", "constructors": [{"description": "A base class for ImageViewerMask - Controls the <a\nhref=\"ImageViewer.html#config_modal\">modal</a> attribute."}], "namespace": "", "module": "aui-image-viewer", "guessedname": "ImageViewerMask", "static": "", "superclass": "OverlayMask", "file": "aui-image-viewer.js", "guessedtype": "property", "extends": "OverlayMask", "shortname": "ImageViewerMask", "description": "A base class for ImageViewerMask - Controls the <a\nhref=\"ImageViewer.html#config_modal\">modal</a> attribute."}, "Plugin.DDConstrained": {"name": "Plugin.DDConstrained", "configs": {"tickX": {"type": "Number/false", "description": "The X tick offset the drag node should snap to on each drag move. False for no ticks. Default: false", "guessedname": "tickX", "guessedtype": "property"}, "tickY": {"type": "Number/false", "description": "The Y tick offset the drag node should snap to on each drag move. False for no ticks. Default: false", "guessedname": "tickY", "guessedtype": "property"}, "gutter": {"type": "String", "description": "CSS style string for the gutter of a region (supports negative values): '5 0' (sets top and bottom to 5px, left and right to 0px), '1 2 3 4' (top 1px, right 2px, bottom 3px, left 4px)", "guessedname": "gutter", "guessedtype": "property"}, "tickYArray": {"type": "Array", "description": "An array of page coordinates to use as Y ticks for drag movement.", "guessedname": "tickYArray", "guessedtype": "property"}, "constrain2node": {"deprecated": "", "type": "Object", "description": "Will attempt to constrain the drag node to the boundaries of this node.", "guessedname": "constrain2node", "guessedtype": "property"}, "stickX": {"type": "Boolean", "description": "Stick the drag movement to the X-Axis. Default: false", "guessedname": "stickX", "guessedtype": "property"}, "stickY": {"type": "Boolean", "description": "Stick the drag movement to the Y-Axis", "guessedname": "stickY", "guessedtype": "property"}, "constrain2region": {"deprecated": "", "type": "Object", "description": "An Object Literal containing a valid region (top, right, bottom, left) of page positions to constrain the drag node to.", "guessedname": "constrain2region", "guessedtype": "property"}, "cacheRegion": {"type": "Boolean", "description": "Should the region be cached for performace. Default: true", "guessedname": "cacheRegion", "guessedtype": "property"}, "constrain": {"type": "{String/Object/Node}", "description": "Will attempt to constrain the drag node to the boundaries. Arguments:<br>\n'view': Contrain to Viewport<br>\n'#selector_string': Constrain to this node<br>\n'{Region Object}': An Object Literal containing a valid region (top, right, bottom, left) of page positions", "guessedname": "constrain", "guessedtype": "property"}, "constrain2view": {"deprecated": "", "type": "Object", "description": "Will attempt to constrain the drag node to the boundaries of the viewport region.", "guessedname": "constrain2view", "guessedtype": "property"}, "tickXArray": {"type": "Array", "description": "An array of page coordinates to use as X ticks for drag movement.", "guessedname": "tickXArray", "guessedtype": "property"}}, "constructors": [{"description": "Plugin for the dd-drag module to add the constraining methods to it. It supports constraining to a node or viewport. It supports tick based moves and XY axis constraints."}], "namespace": "Plugin", "module": "dd", "events": {"constrain2viewChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "constrain2viewChange", "description": "Fires when the value for the configuration attribute 'constrain2view' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "tickXChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "tickXChange", "description": "Fires when the value for the configuration attribute 'tickX' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "tickXArrayChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "tickXArrayChange", "description": "Fires when the value for the configuration attribute 'tickXArray' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "gutterChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "gutterChange", "description": "Fires when the value for the configuration attribute 'gutter' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "constrain2nodeChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "constrain2nodeChange", "description": "Fires when the value for the configuration attribute 'constrain2node' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "stickYChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "stickYChange", "description": "Fires when the value for the configuration attribute 'stickY' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "tickYArrayChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "tickYArrayChange", "description": "Fires when the value for the configuration attribute 'tickYArray' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "stickXChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "stickXChange", "description": "Fires when the value for the configuration attribute 'stickX' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "constrainChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "constrainChange", "description": "Fires when the value for the configuration attribute 'constrain' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "tickYChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "tickYChange", "description": "Fires when the value for the configuration attribute 'tickY' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "constrain2regionChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "constrain2regionChange", "description": "Fires when the value for the configuration attribute 'constrain2region' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "cacheRegionChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "cacheRegionChange", "description": "Fires when the value for the configuration attribute 'cacheRegion' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "guessedname": "DRAG_NODE", "methods": {"_checkRegion": {"return": {"type": "Array", "description": "The new XY that is inside the region"}, "description": "Check if xy is inside a given region, if not change to it be inside.", "private": "", "params": [{"type": "Array", "name": "_xy", "description": " The XY to check if it's in the current region, if it isn't inside the region, it will reset the xy array to be inside the region."}], "param": "{Array} _xy The XY to check if it's in the current region, if it isn't inside the region, it will reset the xy array to be inside the region.", "guessedname": "_checkRegion", "guessedtype": "function"}, "_getConstraint": {"description": "Standardizes the 'constraint' attribute", "private": "", "guessedname": "_getConstraint", "guessedtype": "function"}, "_checkTicks": {"return": {"type": "Array", "description": "The calced XY coords"}, "description": "This method delegates the proper helper method for tick calculations", "private": "", "params": [{"type": "Array", "name": "xy", "description": " The XY coords for the Drag"}, {"type": "Object", "name": "r", "description": " The optional region that we are bound to."}], "param": "{Array} xy The XY coords for the Drag", "guessedname": "_checkTicks", "guessedtype": "function"}, "getRegion": {"return": {"type": "Object", "description": ""}, "description": "Get the active region: viewport, node, custom region", "param": "{Boolean} inc Include the node's height and width", "params": [{"type": "Boolean", "name": "inc", "description": " Include the node's height and width"}], "guessedname": "getRegion", "guessedtype": "function"}, "align": {"description": "Modifies the Drag.actXY method from the after drag:align event. This is where the constraining happens.", "guessedname": "align", "guessedtype": "function"}, "resetCache": {"description": "Reset the internal region cache.", "guessedname": "resetCache", "guessedtype": "function"}, "_handleStart": {"description": "Fires on drag:start and clears the _regionCache", "private": "", "guessedname": "_handleStart", "guessedtype": "function"}, "inRegion": {"return": {"type": "Boolean", "description": "True if the XY is inside the region, false otherwise."}, "description": "Checks if the XY passed or the dragNode is inside the active region.", "param": "{Array} xy Optional XY to check, if not supplied this.get('dragNode').getXY() is used.", "params": [{"type": "Array", "name": "xy", "description": " Optional XY to check, if not supplied this.get('dragNode').getXY() is used."}], "guessedname": "inRegion", "guessedtype": "function"}, "_cacheRegion": {"description": "Get's the region and caches it, called from window.resize and when the cache is null", "private": "", "guessedname": "_cacheRegion", "guessedtype": "function"}}, "extends": "Base", "superclass": "Base", "file": "dd.js", "guessedtype": "property", "shortname": "DDConstrained", "properties": {"_regionCache": {"guessedname": "_regionCache", "type": "Object", "description": "Store a cache of the region that we are constraining to", "private": "", "guessedtype": "property"}, "NS": {"description": "The Constrained instance will be placed on the Drag instance under the con namespace.", "default": "con", "readonly": "", "protected": "", "static": "", "guessedname": "NS", "guessedtype": "property", "type": "{String}"}}, "description": "Plugin for the dd-drag module to add the constraining methods to it. It supports constraining to a node or viewport. It supports tick based moves and XY axis constraints."}, "AutoComplete": {"name": "AutoComplete", "configs": {"queryQuestionMark": {"default": "true", "type": "Boolean", "description": "For IO DataSources, AutoComplete will automatically insert a \"?\" between the server URI and \nthe encoded query string. To prevent this behavior, you can\nset this value to false. If you need to customize this even further, you\ncan override the <a href=\"AutoComplete.html#method_generateRequest\">generateRequest</a> method.", "guessedname": "queryQuestionMark", "guessedtype": "property"}, "forceSelection": {"default": "false", "type": "Boolean", "description": "If <a href=\"AutoComplete.html#config_typeAhead\">typeAhead</a> is true, this\nwill clear a selection when the overlay closes unless a user explicitly selects an item.", "guessedname": "forceSelection", "guessedtype": "property"}, "typeAheadDelay": {"default": "0.2", "type": "Number", "description": "If <a href=\"AutoComplete.html#config_typeAhead\">typeAhead</a> is true, number of seconds \nto delay before updating the input. In order to prevent certain race conditions, this value must\nalways be greater than the <a href=\"AutoComplete.html#config_queryDelay\">queryDelay</a>.", "guessedname": "typeAheadDelay", "guessedtype": "property"}, "schemaType": {"default": "array", "type": "String", "description": "A valid type of <a href=\"module_datasource.html\">DataSource</a> schema plugin, such as array, json, xml, etc.", "guessedname": "schemaType", "guessedtype": "property"}, "applyLocalFilter": {"default": "true", "type": "Boolean", "description": "If set to true, the <a href=\"AutoComplete.html#method_filterResults\">filterResults</a> \nmethod will be run on the response from the data source.", "guessedname": "applyLocalFilter", "guessedtype": "property"}, "dataSourceType": {"default": "null", "type": "String", "description": "The type of the data source passed into <a href=\"AutoComplete.html#config_dataSource\">dataSource</a>.\nThis can be used to explicitly declare what kind of <a href=\"DataSource.html\">DataSource</a> object will\nbe created.", "guessedname": "dataSourceType", "guessedtype": "property"}, "queryMatchCase": {"default": "false", "type": "Boolean", "description": "When <a href=\"AutoComplete.html#config_applyLocalFilter\">applyLocalFilter</a> is true,\nsetting this to true will match only results with the same case.", "guessedname": "queryMatchCase", "guessedtype": "property"}, "typeAhead": {"default": "false", "type": "Boolean", "description": "If <a href=\"AutoComplete.html#config_autoHighlight\">autoHighlight</a> is enabled, whether or not the \ninput field should be automatically updated with the first result as the user types, \nautomatically selecting the portion of the text the user has not typed yet.", "guessedname": "typeAhead", "guessedtype": "property"}, "delimChar": {"default": "null", "type": "String", "description": "The character used to indicate the beginning or ending of a new value. Most commonly used\nis a \",\".", "guessedname": "delimChar", "guessedtype": "property"}, "input": {"default": "null", "type": "String | Node", "description": "The input field which will recieve the users input.", "guessedname": "input", "guessedtype": "property"}, "alwaysShowContainer": {"default": "false", "type": "Boolean", "description": "Always show the results container, instead of only showing when the \nuser is requesting them.", "guessedname": "alwaysShowContainer", "guessedtype": "property"}, "schema": {"default": "null", "type": "Object", "description": "A valid configuration object for any of <a href=\"module_datasource.html\">DataSource</a> schema plugins.", "guessedname": "schema", "guessedtype": "property"}, "minQueryLength": {"default": "1", "type": "Number", "description": "The minimum number of characters required to query the data source.", "guessedname": "minQueryLength", "guessedtype": "property"}, "matchKey": {"default": "0", "type": "String | Number", "description": "The key or numeric index in the schema to match the result against.", "guessedname": "matchKey", "guessedtype": "property"}, "queryMatchContains": {"default": "false", "type": "Boolean", "description": "When <a href=\"AutoComplete.html#config_applyLocalFilter\">applyLocalFilter</a> is true,\nsetting this to true will match results which contain the query anywhere in the text,\ninstead of just matching just items that start with the query.", "guessedname": "queryMatchContains", "guessedtype": "property"}, "suppressInputUpdate": {"default": "false", "type": "Boolean", "description": "Whether or not the input field should be updated with selections.", "guessedname": "suppressInputUpdate", "guessedtype": "property"}, "dataSource": {"default": "null", "type": "Object | String | Function | Array", "description": "The data source that results will be read from. This can either be\nan existing <a href=\"DataSource.html\">DataSource</a> object, or it can be a\nvalue that would be passed to <a href=\"DataSource.html\">DataSource</a>.", "guessedname": "dataSource", "guessedtype": "property"}, "uniqueName": {"default": "null", "type": "String", "description": "The unique ID of the input element.", "guessedname": "uniqueName", "guessedtype": "property"}, "autoHighlight": {"default": "true", "type": "Boolean", "description": "Automatically highlight the first item in the list when the results are\nmade visible.", "guessedname": "autoHighlight", "guessedtype": "property"}, "queryInterval": {"default": "0.5", "type": "Number", "description": "When IME usage is detected or interval detection is explicitly enabled,\nAutoComplete will detect the input value at the given interval and send a\nquery if the value has changed.", "guessedname": "queryInterval", "guessedtype": "property"}, "button": {"description": "To use a button", "default": "true", "deprecated": "", "guessedname": "button", "guessedtype": "property", "type": "Boolean"}, "maxResultsDisplayed": {"default": "10", "type": "Number", "description": "The maximum number of results to display.", "guessedname": "maxResultsDisplayed", "guessedtype": "property"}, "queryDelay": {"default": "0.2", "type": "Number", "description": "The amount of time in seconds to delay before submitting the query.", "guessedname": "queryDelay", "guessedtype": "property"}}, "constructors": [{"params": [{"type": "Object", "name": "config", "description": "  Object literal specifying widget configuration properties."}], "description": "<p><img src=\"assets/images/aui-autocomplete/main.png\"/></p>\nA base class for AutoComplete, providing:\n<ul>\n<li>Widget Lifecycle (initializer, renderUI, bindUI, syncUI, destructor)</li>\n<li>Presenting users choices based on their input</li>\n<li>Separating selected items</li>\n<li>Keyboard interaction for selecting items</li>\n</ul>\nQuick Example:<br/>\n<pre><code>var instance = new A.AutoComplete({\ndataSource: [['AL', 'Alabama', 'The Heart of Dixie'],\n['AK', 'Alaska', 'The Land of the Midnight Sun'],\n['AZ', 'Arizona', 'The Grand Canyon State']],\nschema: {\nresultFields: ['key', 'name', 'description']\n},\nmatchKey: 'name',\ndelimChar: ',',\ntypeAhead: true,\ncontentBox: '#myAutoComplete'\n}).render();\n</code></pre>\nCheck the list of <a href=\"AutoComplete.html#configattributes\">Configuration Attributes</a> available for\nAutoComplete."}], "namespace": "", "module": "aui-autocomplete", "events": {"buttonChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "buttonChange", "description": "Fires when the value for the configuration attribute 'button' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "dataReturn": {"params": [{"type": "Event.Facade", "name": "event", "description": " The dataReturn event."}], "description": "Handles the dataReturn event. Fired when data successfully comes back from the data request.", "param": "{Event.Facade} event The dataReturn event."}, "textboxFocus": {"params": [{"type": "Event.Facade", "name": "event", "description": " The textboxFocus event."}], "description": "Handles the textboxFocus event. Fired when user moves focus to the input element.", "param": "{Event.Facade} event The textboxFocus event."}, "containerPopulate": {"params": [{"type": "Event.Facade", "name": "event", "description": " The containerPopulate event."}], "description": "Handles the containerPopulate event. Fired when the container is populated.", "param": "{Event.Facade} event The containerPopulate event."}, "containerCollapse": {"params": [{"type": "Event.Facade", "name": "event", "description": " The containerCollapse event."}], "description": "Handles the containerCollapse event. Fired when the container is hidden.", "param": "{Event.Facade} event The containerCollapse event."}, "selectionEnforce": {"params": [{"type": "Event.Facade", "name": "event", "description": " The selectionEnforce event."}], "description": "Handles the selectionEnforce event. Fired if <a href=\"Autocomplete.html#config_forceSelection\">forceSelection</a>\nis enabled and the users input element has been cleared because it did not match one of the results.", "param": "{Event.Facade} event The selectionEnforce event."}, "queryIntervalChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "queryIntervalChange", "description": "Fires when the value for the configuration attribute 'queryInterval' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "matchKeyChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "matchKeyChange", "description": "Fires when the value for the configuration attribute 'matchKey' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "delimCharChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "delimCharChange", "description": "Fires when the value for the configuration attribute 'delimChar' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "dataError": {"params": [{"type": "Event.Facade", "name": "event", "description": " The dataError event."}], "description": "Handles the dataError event. Fired when there is an error accessing the data.", "param": "{Event.Facade} event The dataError event."}, "forceSelectionChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "forceSelectionChange", "description": "Fires when the value for the configuration attribute 'forceSelection' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "dataSourceChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "dataSourceChange", "description": "Fires when the value for the configuration attribute 'dataSource' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "uniqueNameChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "uniqueNameChange", "description": "Fires when the value for the configuration attribute 'uniqueName' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "textboxChange": {"params": [{"type": "Event.Facade", "name": "event", "description": " The textboxChange event."}], "description": "Handles the textboxChange event. Fired when the value in the input element is changed.", "param": "{Event.Facade} event The textboxChange event."}, "typeAhead": {"params": [{"type": "Event.Facade", "name": "event", "description": " The typeAhead event."}], "description": "Handles the typeAhead event. Fired when the input element has been pre-filled by the type-ahead feature.", "param": "{Event.Facade} event The typeAhead event."}, "typeAheadDelayChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "typeAheadDelayChange", "description": "Fires when the value for the configuration attribute 'typeAheadDelay' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "itemArrowFrom": {"params": [{"type": "Event.Facade", "name": "event", "description": " The itemArrowFrom event."}], "description": "Handles the itemArrowFrom event. Fired when the user navigates via the keyboard away from\na selected item.", "param": "{Event.Facade} event The itemArrowFrom event."}, "maxResultsDisplayedChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "maxResultsDisplayedChange", "description": "Fires when the value for the configuration attribute 'maxResultsDisplayed' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "itemMouseOut": {"params": [{"type": "Event.Facade", "name": "event", "description": " The itemMouseOut event."}], "description": "Handles the itemMouseOut event. Fired when the user mouses away from an item.", "param": "{Event.Facade} event The itemMouseOut event."}, "itemArrowTo": {"params": [{"type": "Event.Facade", "name": "event", "description": " The itemArrowTo event."}], "description": "Handles the itemArrowTo event. Fired when the user navigates via the keyboard to a selected item.", "param": "{Event.Facade} event The itemArrowTo event."}, "textboxBlur": {"params": [{"type": "Event.Facade", "name": "event", "description": " The textboxBlur event."}], "description": "Handles the textboxBlur event. Fired when the user leaves the input element.", "param": "{Event.Facade} event The textboxBlur event."}, "minQueryLengthChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "minQueryLengthChange", "description": "Fires when the value for the configuration attribute 'minQueryLength' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "containerExpand": {"params": [{"type": "Event.Facade", "name": "event", "description": " The containerExpand event."}], "description": "Handles the containerExpand event. Fired when the container is shown.", "param": "{Event.Facade} event The containerExpand event."}, "applyLocalFilterChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "applyLocalFilterChange", "description": "Fires when the value for the configuration attribute 'applyLocalFilter' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "inputChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "inputChange", "description": "Fires when the value for the configuration attribute 'input' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "unmatchedItemSelect": {"params": [{"type": "Event.Facade", "name": "event", "description": " The unmatchedItemSelect event."}], "description": "Handles the unmatchedItemSelect event. Fired when a user selects something that does\nnot match any of the displayed results.", "param": "{Event.Facade} event The unmatchedItemSelect event."}, "schemaTypeChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "schemaTypeChange", "description": "Fires when the value for the configuration attribute 'schemaType' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "itemMouseOver": {"params": [{"type": "Event.Facade", "name": "event", "description": " The itemMouseOver event."}], "description": "Handles the itemMouseOver event. Fired when the user mouses over an item.", "param": "{Event.Facade} event The itemMouseOver event."}, "queryMatchContainsChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "queryMatchContainsChange", "description": "Fires when the value for the configuration attribute 'queryMatchContains' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "suppressInputUpdateChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "suppressInputUpdateChange", "description": "Fires when the value for the configuration attribute 'suppressInputUpdate' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "typeAheadChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "typeAheadChange", "description": "Fires when the value for the configuration attribute 'typeAhead' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "queryMatchCaseChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "queryMatchCaseChange", "description": "Fires when the value for the configuration attribute 'queryMatchCase' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "autoHighlightChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "autoHighlightChange", "description": "Fires when the value for the configuration attribute 'autoHighlight' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "dataSourceTypeChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "dataSourceTypeChange", "description": "Fires when the value for the configuration attribute 'dataSourceType' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "itemSelect": {"params": [{"type": "Event.Facade", "name": "event", "description": " The itemSelect event."}], "description": "Handles the itemSelect event. Fired when an item in the list is selected.", "param": "{Event.Facade} event The itemSelect event."}, "queryQuestionMarkChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "queryQuestionMarkChange", "description": "Fires when the value for the configuration attribute 'queryQuestionMark' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "textboxKey": {"params": [{"type": "Event.Facade", "name": "event", "description": " The textboxKey event."}], "description": "Handles the textboxKey event. Fired when the input element receives key input.", "param": "{Event.Facade} event The textboxKey event."}, "schemaChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "schemaChange", "description": "Fires when the value for the configuration attribute 'schema' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "alwaysShowContainerChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "alwaysShowContainerChange", "description": "Fires when the value for the configuration attribute 'alwaysShowContainer' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "queryDelayChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "queryDelayChange", "description": "Fires when the value for the configuration attribute 'queryDelay' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "dataRequest": {"params": [{"type": "Event.Facade", "name": "event", "description": " The dataRequest event."}], "description": "Handles the dataRequest event. Fired when ever a query is sent to the data source.", "param": "{Event.Facade} event The dataRequest event."}}, "guessedname": "AutoComplete", "methods": {"_onTextboxKeyPress": {"description": "Handles the key press events of the input element.", "param": "{EventFacade} event", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "guessedname": "_onTextboxKeyPress", "guessedtype": "function"}, "_clearInterval": {"private": "", "description": "Clears the query interval", "guessedname": "_clearInterval", "guessedtype": "function"}, "initializer": {"protected": "", "description": "Construction logic executed during AutoComplete instantiation. Lifecycle.", "guessedname": "initializer", "guessedtype": "function"}, "_typeAhead": {"description": "Updates in the input element with the first result as the user types,\nselecting the text the user has not typed yet.", "param": "{Node} elListItem The selected list item", "protected": "", "params": [{"type": "Node", "name": "elListItem", "description": " The selected list item"}, {"type": "String", "name": "query", "description": " The query string"}], "guessedname": "_typeAhead", "guessedtype": "function"}, "_renderListElements": {"protected": "", "description": "Pre-populates the container with the \n<a href=\"Autocomplete.html#config_maxResultsDisplayed\">maxResultsDisplayed</a>\nnumber of list items.", "guessedname": "_renderListElements", "guessedtype": "function"}, "_toggleHighlight": {"description": "Toggles the highlighting of a list item, and removes the highlighting from the previous item", "param": "{Node} elNewListItem The item to be highlighted", "protected": "", "params": [{"type": "Node", "name": "elNewListItem", "description": " The item to be highlighted"}, {"type": "String", "name": "action", "description": " Whether we are moving to or from an item. Valid values are \"to\" or \"from\"."}], "guessedname": "_toggleHighlight", "guessedtype": "function"}, "_onTextboxFocus": {"description": "Handles the input element gaining focus.", "param": "{EventFacade} event", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "guessedname": "_onTextboxFocus", "guessedtype": "function"}, "_isIgnoreKey": {"return": {"type": "String", "description": ""}, "description": "Whether or not the pressed key triggers some functionality or if it should\nbe ignored.", "param": "{keyCode} Number The numeric code of the key pressed", "protected": "", "params": [{"type": "keyCode", "name": "Number", "description": " The numeric code of the key pressed"}], "guessedname": "_isIgnoreKey", "guessedtype": "function"}, "_renderOverlay": {"protected": "", "description": "Handles the creation of the overlay where the result list will be displayed.", "guessedname": "_renderOverlay", "guessedtype": "function"}, "_onContainerClick": {"description": "Handles when a user clicks on the container.", "param": "{EventFacade} event", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "guessedname": "_onContainerClick", "guessedtype": "function"}, "_onInterval": {"protected": "", "description": "Enables the query to be triggered based on detecting text input via intervals instead of via\nkey events.", "guessedname": "_onInterval", "guessedtype": "function"}, "filterResults": {"return": {"type": "Object", "description": "Filtered response object"}, "description": "Executed by the data source as a mechanism to do simple client-side\nfiltering of the results.", "param": "{EventFacade} event", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "guessedname": "filterResults", "guessedtype": "function"}, "_updateValue": {"description": "Updates the input element with the selected query result. If\n<a href=\"Autocomplete.html#config_delimChar\">delimChar</a> has been set,\nthen the value gets appended with the delimiter.", "param": "{Node} elListItem The selected list item", "protected": "", "params": [{"type": "Node", "name": "elListItem", "description": " The selected list item"}], "guessedname": "_updateValue", "guessedtype": "function"}, "_populateList": {"description": "Populates the container with list items of the query results.", "param": "{EventFacade} event", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "guessedname": "_populateList", "guessedtype": "function"}, "_focus": {"protected": "", "description": "Focuses the input element.", "guessedname": "_focus", "guessedtype": "function"}, "doBeforeExpandContainer": {"return": {"type": "Boolean", "description": ""}, "description": "An overridable method that is executed before the result container is shown.\nThe method can return false to prevent the container from being shown.", "param": "{String} query The query that was submitted to the data source", "params": [{"type": "String", "name": "query", "description": " The query that was submitted to the data source"}, {"type": "Object", "name": "allResults", "description": " The parsed results"}], "guessedname": "doBeforeExpandContainer", "guessedtype": "function"}, "_selectItem": {"description": "Selects a list item from the query results.", "param": "{Node} elListItem The list item to select", "protected": "", "params": [{"type": "Node", "name": "elListItem", "description": " The list item to select"}], "guessedname": "_selectItem", "guessedtype": "function"}, "bindUI": {"protected": "", "description": "Bind the events on the AutoComplete UI. Lifecycle.", "guessedname": "bindUI", "guessedtype": "function"}, "_onContainerMouseout": {"description": "Handles when a user mouses out of the container.", "param": "{EventFacade} event", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "guessedname": "_onContainerMouseout", "guessedtype": "function"}, "generateRequest": {"return": {"type": "Object", "description": ""}, "description": "An overridable method that creates an object to be passed to the sendRequest\nmethod of the data source object. Useful to overwrite if you wish to create\na custom request object before it's sent.", "param": "{String} query The string currently being entered", "params": [{"type": "String", "name": "query", "description": " The string currently being entered"}], "guessedname": "generateRequest", "guessedtype": "function"}, "_sendQuery": {"description": "Makes a query request to the data source.", "param": "{String} query The query string", "protected": "", "params": [{"type": "String", "name": "query", "description": " The query string"}], "guessedname": "_sendQuery", "guessedtype": "function"}, "_moveSelection": {"description": "Triggered by the up and down arrow keys, changes the currently selected list element item, and scrolls the\ncontainer if necessary.", "param": "{Number} keyCode The numeric code of the key pressed", "protected": "", "params": [{"type": "Number", "name": "keyCode", "description": " The numeric code of the key pressed"}], "guessedname": "_moveSelection", "guessedtype": "function"}, "_realignContainer": {"description": "Realigns the container to the input element.", "param": "{EventFacade} event", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "guessedname": "_realignContainer", "guessedtype": "function"}, "handleResponse": {"param": "{EventFacade} event", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "description": "Handles the response for the display of the results. This is a callback method\nthat is fired by the sendRequest method so that results are ready to be accessed.", "guessedname": "handleResponse", "guessedtype": "function"}, "_enableIntervalDetection": {"protected": "", "description": "Enables query interval detection for IME support.", "guessedname": "_enableIntervalDetection", "guessedtype": "function"}, "sendQuery": {"param": "{String} query Query string", "params": [{"type": "String", "name": "query", "description": " Query string"}], "description": "Sends a query request to the data source object.", "guessedname": "sendQuery", "guessedtype": "function"}, "_toggleContainer": {"description": "Toggles the display of the results container.", "param": "{Boolean} show Flag to force the showing or hiding of the container", "protected": "", "params": [{"type": "Boolean", "name": "show", "description": " Flag to force the showing or hiding of the container"}], "guessedname": "_toggleContainer", "guessedtype": "function"}, "_extractQuery": {"return": {"type": "String", "description": ""}, "description": "Extracts the right most query from the delimited string in the input.", "param": "{String} query String to parse", "protected": "", "params": [{"type": "String", "name": "query", "description": " String to parse"}], "guessedname": "_extractQuery", "guessedtype": "function"}, "_onContainerScroll": {"description": "Handles the container scroll events.", "param": "{EventFacade} event", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "guessedname": "_onContainerScroll", "guessedtype": "function"}, "_clearSelection": {"protected": "", "description": "When <a href=\"Autocomplete.html#config_forceSelection\">forceSelection</a> is true and\nthe user tries to leave the input element without selecting an item from the results,\nthe user selection is cleared.", "guessedname": "_clearSelection", "guessedtype": "function"}, "doBeforeLoadData": {"return": {"type": "Boolean", "description": ""}, "description": "An overridable method that is executed before the result overlay is loaded with results.", "param": "{EventFacade} event", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "guessedname": "doBeforeLoadData", "guessedtype": "function"}, "_renderInput": {"protected": "", "description": "Handles the rendering of the input element.", "guessedname": "_renderInput", "guessedtype": "function"}, "formatResult": {"return": {"type": "String", "description": ""}, "description": "An overridable method for formatting the result of the query before it's displayed in the overlay.", "param": "{Object} result The result data object", "params": [{"type": "Object", "name": "result", "description": " The result data object"}, {"type": "String", "name": "request", "description": " The current query string"}, {"type": "String", "name": "resultMatch", "description": " The string from the results that matches the query"}], "guessedname": "formatResult", "guessedtype": "function"}, "_textMatchesOption": {"protected": "", "description": "Checks to see if the value typed by the user matches any of the\nquery results.", "guessedname": "_textMatchesOption", "guessedtype": "function"}, "syncUI": {"protected": "", "description": "Sync the AutoComplete UI. Lifecycle.", "guessedname": "syncUI", "guessedtype": "function"}, "_onTextboxKeyDown": {"description": "Handles the keydown events on the input element for functional keys.", "param": "{EventFacade} event", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "guessedname": "_onTextboxKeyDown", "guessedtype": "function"}, "_createDataSource": {"protected": "", "return": {"type": "String", "description": ""}, "description": "Creates the data source object using the passed in <a href=\"Autocomplete.html#config_dataSource\">dataSource</a>,\nand if it is a string, will use the <a href=\"Autocomplete.html#config_dataSourceType\">dataSourceType</a> to\ncreate a new <a href=\"module_datasource.html\">DataSource</a> object.", "guessedname": "_createDataSource", "guessedtype": "function"}, "_onButtonMouseDown": {"description": "Called when the user mouses down on the button element in the combobox.", "param": "{EventFacade} event", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "guessedname": "_onButtonMouseDown", "guessedtype": "function"}, "_onTextboxBlur": {"description": "Handles the input element losing focus.", "param": "{EventFacade} event", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "guessedname": "_onTextboxBlur", "guessedtype": "function"}, "_onTextboxKeyUp": {"description": "Handles the keyup events of the input element.", "param": "{EventFacade} event", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "guessedname": "_onTextboxKeyUp", "guessedtype": "function"}, "_jumpSelection": {"protected": "", "description": "If there is a currently selected item, the right arrow key will select\nthat item and jump to the end of the input element, otherwise the container is closed.", "guessedname": "_jumpSelection", "guessedtype": "function"}, "_onContainerMouseover": {"description": "Handles when a user mouses over the container.", "param": "{EventFacade} event", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "guessedname": "_onContainerMouseover", "guessedtype": "function"}, "renderUI": {"protected": "", "description": "Create the DOM structure for the AutoComplete. Lifecycle.", "guessedname": "renderUI", "guessedtype": "function"}}, "extends": "Component", "superclass": "Component", "file": "aui-autocomplete.js", "guessedtype": "property", "shortname": "AutoComplete", "properties": {"AutoComplete.ATTRS": {"type": "Object", "static": "", "description": "Static property used to define the default attribute\nconfiguration for the AutoComplete.", "guessedname": "ATTRS", "guessedtype": "property"}, "AutoComplete.NAME": {"type": "String", "static": "", "description": "Static property provides a string to identify the class.", "guessedname": "NAME", "guessedtype": "property"}}, "description": "<p><img src=\"assets/images/aui-autocomplete/main.png\"/></p>\nA base class for AutoComplete, providing:\n<ul>\n<li>Widget Lifecycle (initializer, renderUI, bindUI, syncUI, destructor)</li>\n<li>Presenting users choices based on their input</li>\n<li>Separating selected items</li>\n<li>Keyboard interaction for selecting items</li>\n</ul>\nQuick Example:<br/>\n<pre><code>var instance = new A.AutoComplete({\ndataSource: [['AL', 'Alabama', 'The Heart of Dixie'],\n['AK', 'Alaska', 'The Land of the Midnight Sun'],\n['AZ', 'Arizona', 'The Grand Canyon State']],\nschema: {\nresultFields: ['key', 'name', 'description']\n},\nmatchKey: 'name',\ndelimChar: ',',\ntypeAhead: true,\ncontentBox: '#myAutoComplete'\n}).render();\n</code></pre>\nCheck the list of <a href=\"AutoComplete.html#configattributes\">Configuration Attributes</a> available for\nAutoComplete."}, "Test.Mock": {"name": "Test.Mock", "constructors": [{"params": [{"type": "Object", "name": "template", "description": " (Optional) An object whose methods\nshould be stubbed out on the mock object."}], "description": "Creates a new mock object."}], "namespace": "Test", "module": "test", "guessedname": "Mock", "methods": {"verify": {"return": {"type": "void", "description": ""}, "description": "Verifies that all expectations of a mock object have been met and\nthrows an assertion error if not.", "param": "{Object} mock The object to verify..", "static": "", "guessedname": "verify", "guessedtype": "function", "params": [{"type": "Object", "name": "mock", "description": " The object to verify.."}]}, "expect": {"return": {"type": "void", "description": ""}, "description": "Assigns an expectation to a mock object. This is used to create\nmethods and properties on the mock object that are monitored for\ncalls and changes, respectively.", "param": "{Object} mock The object to add the expectation to.", "static": "", "guessedname": "expect", "guessedtype": "function", "params": [{"type": "Object", "name": "mock", "description": " The object to add the expectation to."}, {"type": "Object", "name": "expectation", "description": " An object defining the expectation. For\na method, the keys \"method\" and \"args\" are required with\nan optional \"returns\" key available. For properties, the keys\n\"property\" and \"value\" are required."}]}}, "file": "test.js", "guessedtype": "function", "shortname": "Mock", "description": "Creates a new mock object."}, "JSON": {"name": "JSON", "namespace": "", "module": "json", "methods": {"parse": {"return": {"type": "MIXED", "description": "the native JavaScript representation of the JSON string"}, "description": "Parse a JSON string, returning the native JavaScript representation.", "param": "s {string} JSON string data", "static": "", "params": [{"type": "string", "name": "s", "description": "  JSON string data"}, {"type": "function", "name": "reviver", "description": "  (optional) function(k,v) passed each key value\npair of object literals, allowing pruning or altering values"}], "throws": "SyntaxError"}, "stringify": {"return": {"type": "string", "description": "JSON string representation of the input"}, "description": "<p>Converts an arbitrary value to a JSON string representation.</p>\n<p>Objects with cyclical references will trigger an exception.</p>\n<p>If a whitelist is provided, only matching object keys will be\nincluded.  Alternately, a replacer function may be passed as the\nsecond parameter.  This function is executed on every value in the\ninput, and its return value will be used in place of the original value.\nThis is useful to serialize specialized objects or class instances.</p>\n<p>If a positive integer or non-empty string is passed as the third\nparameter, the output will be formatted with carriage returns and\nindentation for readability.  If a String is passed (such as \"\\t\") it\nwill be used once for each indentation level.  If a number is passed,\nthat number of spaces will be used.</p>", "param": "o {MIXED} any arbitrary value to convert to JSON string", "static": "", "guessedname": "stringify", "guessedtype": "function", "params": [{"type": "MIXED", "name": "o", "description": "  any arbitrary value to convert to JSON string"}, {"type": "Array|Function", "name": "w", "description": "  (optional) whitelist of acceptable object\nkeys to include, or a replacer function to modify the\nraw value before serialization"}, {"type": "Number|String", "name": "ind", "description": "  (optional) indentation character or depth of\nspaces to format the output."}]}, "escapeException": {"return": {"type": "String", "description": "the \\unnnn escapement of the character"}, "description": "Replaces specific unicode characters with their appropriate \\unnnn\nformat. Some browsers ignore certain characters during eval.", "private": "", "params": [{"type": "String", "name": "c", "description": "  Unicode character"}], "param": "c {String} Unicode character", "guessedname": "_escapeException", "guessedtype": "function"}, "dateToString": {"return": {"type": "String", "description": "stringified Date in UTC format YYYY-MM-DDTHH:mm:SSZ"}, "description": "Serializes a Date instance as a UTC date string.  Used internally by\nstringify.  Override this method if you need Dates serialized in a\ndifferent format.", "param": "d {Date} The Date to serialize", "static": "", "guessedname": "dateToString", "guessedtype": "function", "params": [{"type": "Date", "name": "d", "description": "  The Date to serialize"}]}, "_revive": {"return": {"type": "MIXED", "description": "The results of the filtered data"}, "description": "Traverses nested objects, applying a reviver function to each (key,value)\nfrom the scope if the key:value's containing object.  The value returned\nfrom the function will replace the original value in the key:value pair.\nIf the value returned is undefined, the key will be omitted from the\nreturned object.", "private": "", "params": [{"type": "MIXED", "name": "data", "description": "  Any JavaScript data"}, {"type": "Function", "name": "reviver", "description": "  filter or mutation function"}], "param": "data {MIXED} Any JavaScript data", "guessedname": "_revive", "guessedtype": "function"}}, "static": "", "file": "json.js", "shortname": "JSON", "properties": {"_BRACKETS": {"guessedname": "_BRACKETS", "type": "{RegExp}", "description": "Third step in the safety evaluation.  Regex used to remove all open\nsquare brackets following a colon, comma, or at the beginning of the\nstring.", "private": "", "guessedtype": "property"}, "_UNICODE_EXCEPTIONS": {"guessedname": "_UNICODE_EXCEPTIONS", "type": "{RegExp}", "description": "Replace certain Unicode characters that JavaScript may handle incorrectly\nduring eval--either by deleting them or treating them as line\nendings--with escape sequences.\nIMPORTANT NOTE: This regex will be used to modify the input if a match is\nfound.", "private": "", "guessedtype": "property"}, "useNativeParse": {"description": "Leverage native JSON parse if the browser has a native implementation.\nIn general, this is a good idea.  See the Known Issues section in the\nJSON user guide for caveats.  The default value is true for browsers with\nnative JSON support.", "default": "true", "static": "", "guessedname": "useNativeParse", "guessedtype": "property", "type": "Boolean"}, "JSON.useNativeStringify": {"description": "Leverage native JSON stringify if the browser has a native\nimplementation.  In general, this is a good idea.  See the Known Issues\nsection in the JSON user guide for caveats.  The default value is true\nfor browsers with native JSON support.", "default": "true", "static": "", "guessedname": "useNativeStringify", "guessedtype": "property", "type": "Boolean"}, "_UNSAFE": {"guessedname": "_UNSAFE", "type": "{RegExp}", "description": "Final step in the safety evaluation.  Regex used to test the string left\nafter all previous replacements for invalid characters.", "private": "", "guessedtype": "property"}, "_ESCAPES": {"guessedname": "_ESCAPES", "type": "{RegExp}", "description": "First step in the safety evaluation.  Regex used to replace all escape\nsequences (i.e. \"\\\\\", etc) with '@' characters (a non-JSON character).", "private": "", "guessedtype": "property"}, "_VALUES": {"guessedname": "_VALUES", "type": "{RegExp}", "description": "Second step in the safety evaluation.  Regex used to replace all simple\nvalues with ']' characters.", "private": "", "guessedtype": "property"}, "Native": {"guessedname": "_JSON", "type": "{Object}", "description": "Alias to native browser implementation of the JSON object if available.", "private": "", "guessedtype": "property"}}, "description": "<p>The JSON module adds support for serializing JavaScript objects into\nJSON strings and parsing JavaScript objects from strings in JSON format.</p>\n<p>The JSON namespace is added to your YUI instance including static methods\nY.JSON.parse(..) and Y.JSON.stringify(..).</p>\n<p>The functionality and method signatures follow the ECMAScript 5\nspecification.  In browsers with native JSON support, the native\nimplementation is used.</p>\n<p>The <code>json</code> module is a rollup of <code>json-parse</code> and\n<code>json-stringify</code>.</p>\n<p>As their names suggest, <code>json-parse</code> adds support for parsing\nJSON data (Y.JSON.parse) and <code>json-stringify</code> for serializing\nJavaScript data into JSON strings (Y.JSON.stringify).  You may choose to\ninclude either of the submodules individually if you don't need the\ncomplementary functionality, or include the rollup for both.</p>"}, "Cookie": {"name": "Cookie", "namespace": "", "module": "cookie", "guessedname": "Cookie", "methods": {"setSub": {"return": {"type": "String", "description": "The created cookie string."}, "description": "Sets a sub cookie with a given name to a particular value.", "param": "{String} name The name of the cookie to set.", "static": "", "guessedname": "setSub", "guessedtype": "function", "params": [{"type": "String", "name": "name", "description": " The name of the cookie to set."}, {"type": "String", "name": "subName", "description": " The name of the subcookie to set."}, {"type": "Variant", "name": "value", "description": " The value to set."}, {"type": "Object", "name": "options", "description": " (Optional) An object containing one or more\ncookie options: path (a string), domain (a string), expires (a Date object),\nand secure (true/false)."}]}, "_parseCookieHash": {"return": {"type": "Object", "description": "An object containing entries for each cookie value."}, "description": "Parses a cookie hash string into an object.", "private": "", "static": "", "param": "{String} text The cookie hash string to parse (format: n1=v1&n2=v2).", "guessedname": "_parseCookieHash", "guessedtype": "function", "params": [{"type": "String", "name": "text", "description": " The cookie hash string to parse (format: n1=v1&n2=v2)."}]}, "set": {"return": {"type": "String", "description": "The created cookie string."}, "description": "Sets a cookie with a given name and value.", "param": "{String} name The name of the cookie to set.", "static": "", "guessedname": "set", "guessedtype": "function", "params": [{"type": "String", "name": "name", "description": " The name of the cookie to set."}, {"type": "Variant", "name": "value", "description": " The value to set for the cookie."}, {"type": "Object", "name": "options", "description": " (Optional) An object containing one or more\ncookie options: path (a string), domain (a string), expires (a Date object),\nsecure (true/false), and raw (true/false). Setting raw to true indicates\nthat the cookie should not be URI encoded before being set."}]}, "setSubs": {"return": {"type": "String", "description": "The created cookie string."}, "description": "Sets a cookie with a given name to contain a hash of name-value pairs.", "param": "{String} name The name of the cookie to set.", "static": "", "guessedname": "setSubs", "guessedtype": "function", "params": [{"type": "String", "name": "name", "description": " The name of the cookie to set."}, {"type": "Object", "name": "value", "description": " An object containing name-value pairs."}, {"type": "Object", "name": "options", "description": " (Optional) An object containing one or more\ncookie options: path (a string), domain (a string), expires (a Date object),\nand secure (true/false)."}]}, "exists": {"return": {"type": "Boolean", "description": "True if the cookie exists, false if not."}, "description": "Determines if the cookie with the given name exists. This is useful for\nBoolean cookies (those that do not follow the name=value convention).", "param": "{String} name The name of the cookie to check.", "static": "", "guessedname": "exists", "guessedtype": "function", "params": [{"type": "String", "name": "name", "description": " The name of the cookie to check."}]}, "get": {"return": {"type": "Variant", "description": "If no converter is specified, returns a string or null if\nthe cookie doesn't exist. If the converter is specified, returns the value\nreturned from the converter or null if the cookie doesn't exist."}, "description": "Returns the cookie value for the given name.", "param": "{String} name The name of the cookie to retrieve.", "static": "", "guessedname": "get", "guessedtype": "function", "params": [{"type": "String", "name": "name", "description": " The name of the cookie to retrieve."}, {"type": "Function|Object", "name": "options", "description": " (Optional) An object containing one or more\ncookie options: raw (true/false) and converter (a function).\nThe converter function is run on the value before returning it. The\nfunction is not used if the cookie doesn't exist. The function can be\npassed instead of the options object for backwards compatibility. When\nraw is set to true, the cookie value is not URI decoded."}]}, "_parseCookieString": {"return": {"type": "Object", "description": "An object containing entries for each accessible cookie."}, "description": "Parses a cookie string into an object representing all accessible cookies.", "private": "", "static": "", "param": "{String} text The cookie string to parse.", "guessedname": "_parseCookieString", "guessedtype": "function", "params": [{"type": "String", "name": "text", "description": " The cookie string to parse."}, {"type": "Boolean", "name": "shouldDecode", "description": " (Optional) Indicates if the cookie values should be decoded or not. Default is true."}]}, "remove": {"return": {"type": "String", "description": "The created cookie string."}, "description": "Removes a cookie from the machine by setting its expiration date to\nsometime in the past.", "param": "{String} name The name of the cookie to remove.", "static": "", "guessedname": "remove", "guessedtype": "function", "params": [{"type": "String", "name": "name", "description": " The name of the cookie to remove."}, {"type": "Object", "name": "options", "description": " (Optional) An object containing one or more\ncookie options: path (a string), domain (a string), \nand secure (true/false). The expires option will be overwritten\nby the method."}]}, "removeSub": {"return": {"type": "String", "description": "The created cookie string."}, "description": "Removes a sub cookie with a given name.", "param": "{String} name The name of the cookie in which the subcookie exists.", "static": "", "guessedname": "removeSub", "guessedtype": "function", "params": [{"type": "String", "name": "name", "description": " The name of the cookie in which the subcookie exists."}, {"type": "String", "name": "subName", "description": " The name of the subcookie to remove."}, {"type": "Object", "name": "options", "description": " (Optional) An object containing one or more\ncookie options: path (a string), domain (a string), expires (a Date object),\nremoveIfEmpty (true/false), and secure (true/false). This must be the same\nsettings as the original subcookie."}]}, "_createCookieHashString": {"return": {"type": "String", "description": "A string suitable for use as a cookie value."}, "description": "Formats a cookie value for an object containing multiple values.", "private": "", "static": "", "param": "{Object} hash An object of key-value pairs to create a string for.", "guessedname": "_createCookieHashString", "guessedtype": "function", "params": [{"type": "Object", "name": "hash", "description": " An object of key-value pairs to create a string for."}]}, "getSubs": {"return": {"type": "Object", "description": "An object of name-value pairs if the cookie with the given name\nexists, null if it does not."}, "description": "Returns an object containing name-value pairs stored in the cookie with the given name.", "param": "{String} name The name of the cookie to retrieve.", "static": "", "guessedname": "getSubs", "guessedtype": "function", "params": [{"type": "String", "name": "name", "description": " The name of the cookie to retrieve."}]}, "getSub": {"return": {"type": "Variant", "description": "If the cookie doesn't exist, null is returned. If the subcookie\ndoesn't exist, null if also returned. If no converter is specified and the\nsubcookie exists, a string is returned. If a converter is specified and the\nsubcookie exists, the value returned from the converter is returned."}, "description": "Returns the value of a subcookie.", "param": "{String} name The name of the cookie to retrieve.", "static": "", "guessedname": "getSub", "guessedtype": "function", "params": [{"type": "String", "name": "name", "description": " The name of the cookie to retrieve."}, {"type": "String", "name": "subName", "description": " The name of the subcookie to retrieve."}, {"type": "Function", "name": "converter", "description": " (Optional) A function to run on the value before returning\nit. The function is not used if the cookie doesn't exist."}]}, "_createCookieString": {"return": {"type": "String", "description": "The formatted cookie string."}, "description": "Creates a cookie string that can be assigned into document.cookie.", "private": "", "static": "", "param": "{String} name The name of the cookie.", "guessedname": "_createCookieString", "guessedtype": "function", "params": [{"type": "String", "name": "name", "description": " The name of the cookie."}, {"type": "String", "name": "value", "description": " The value of the cookie."}, {"type": "Boolean", "name": "encodeValue", "description": " True to encode the value, false to leave as-is."}, {"type": "Object", "name": "options", "description": " (Optional) Options for the cookie."}]}}, "static": "", "file": "cookie.js", "guessedtype": "property", "shortname": "Cookie", "description": "Cookie utility."}, "DataType.Date": {"name": "DataType.Date", "description": "DataType.Date provides a set of utility functions to operate against Date objects.", "namespace": "", "module": "datatype", "static": "", "file": "datatype-debug.js", "shortname": "DataType.Date", "methods": {"parse": {"return": {"type": "Date", "description": "A Date, or null."}, "description": "Converts data to type Date.", "param": "data {String | Number} Data to convert. Values supported by the Date constructor are supported.", "params": [{"type": "String | Number", "name": "data", "description": "  Data to convert. Values supported by the Date constructor are supported."}], "guessedname": "parse", "guessedtype": "function"}, "xPad": {"description": "Pad a number with leading spaces, zeroes or something else", "param": "x {Number}\tThe number to be padded", "params": [{"type": "Number", "name": "x", "description": " \tThe number to be padded"}, {"type": "String", "name": "pad", "description": "   The character to pad the number with"}, {"type": "Number", "name": "r", "description": " \t(optional) The base of the pad, eg, 10 implies to two digits, 100 implies to 3 digits."}], "private": "", "guessedname": "xPad", "guessedtype": "function"}, "format": {"return": {"type": "String", "description": "Formatted date for display."}, "description": "Takes a native JavaScript Date and formats it as a string for display to user.", "param": "oDate {Date} Date.", "params": [{"type": "Date", "name": "oDate", "description": "  Date."}, {"type": "Object} (Optional) Object literal of configuration values:\n<dl>\n<dt>format {String} (Optional)</dt>\n<dd>\n<p>\nAny strftime string is supported, such as \"%I:%M:%S %p\". strftime has several format specifiers defined by the Open group at \n<a href=\"http://www.opengroup.org/onlinepubs/007908799/xsh/strftime.html\">http://www.opengroup.org/onlinepubs/007908799/xsh/strftime.html</a>\nPHP added a few of its own, defined at <a href=\"http://www.php.net/strftime\">http://www.php.net/strftime</a>\n</p>\n<p>\nThis javascript implementation supports all the PHP specifiers and a few more.  The full list is below.\n</p>\n<p>\nIf not specified, it defaults to the ISO 8601 standard date format: %Y-%m-%d.\nThis may be overridden by the deprecated Y.config.dateFormat property.\n</p>\n<dl>\n<dt>%a</dt> <dd>abbreviated weekday name according to the current locale</dd>\n<dt>%A</dt> <dd>full weekday name according to the current locale</dd>\n<dt>%b</dt> <dd>abbreviated month name according to the current locale</dd>\n<dt>%B</dt> <dd>full month name according to the current locale</dd>\n<dt>%c</dt> <dd>preferred date and time representation for the current locale</dd>\n<dt>%C</dt> <dd>century number (the year divided by 100 and truncated to an integer, range 00 to 99)</dd>\n<dt>%d</dt> <dd>day of the month as a decimal number (range 01 to 31)</dd>\n<dt>%D</dt> <dd>same as %m/%d/%y</dd>\n<dt>%e</dt> <dd>day of the month as a decimal number, a single digit is preceded by a space (range \" 1\" to \"31\")</dd>\n<dt>%F</dt> <dd>same as %Y-%m-%d (ISO 8601 date format)</dd>\n<dt>%g</dt> <dd>like %G, but without the century</dd>\n<dt>%G</dt> <dd>The 4-digit year corresponding to the ISO week number</dd>\n<dt>%h</dt> <dd>same as %b</dd>\n<dt>%H</dt> <dd>hour as a decimal number using a 24-hour clock (range 00 to 23)</dd>\n<dt>%I</dt> <dd>hour as a decimal number using a 12-hour clock (range 01 to 12)</dd>\n<dt>%j</dt> <dd>day of the year as a decimal number (range 001 to 366)</dd>\n<dt>%k</dt> <dd>hour as a decimal number using a 24-hour clock (range 0 to 23); single digits are preceded by a blank. (See also %H.)</dd>\n<dt>%l</dt> <dd>hour as a decimal number using a 12-hour clock (range 1 to 12); single digits are preceded by a blank. (See also %I.) </dd>\n<dt>%m</dt> <dd>month as a decimal number (range 01 to 12)</dd>\n<dt>%M</dt> <dd>minute as a decimal number</dd>\n<dt>%n</dt> <dd>newline character</dd>\n<dt>%p</dt> <dd>either \"AM\" or \"PM\" according to the given time value, or the corresponding strings for the current locale</dd>\n<dt>%P</dt> <dd>like %p, but lower case</dd>\n<dt>%r</dt> <dd>time in a.m. and p.m. notation equal to %I:%M:%S %p</dd>\n<dt>%R</dt> <dd>time in 24 hour notation equal to %H:%M</dd>\n<dt>%s</dt> <dd>number of seconds since the Epoch, ie, since 1970-01-01 00:00:00 UTC</dd>\n<dt>%S</dt> <dd>second as a decimal number</dd>\n<dt>%t</dt> <dd>tab character</dd>\n<dt>%T</dt> <dd>current time, equal to %H:%M:%S</dd>\n<dt>%u</dt> <dd>weekday as a decimal number [1,7], with 1 representing Monday</dd>\n<dt>%U</dt> <dd>week number of the current year as a decimal number, starting with the\nfirst Sunday as the first day of the first week</dd>\n<dt>%V</dt> <dd>The ISO 8601:1988 week number of the current year as a decimal number,\nrange 01 to 53, where week 1 is the first week that has at least 4 days\nin the current year, and with Monday as the first day of the week.</dd>\n<dt>%w</dt> <dd>day of the week as a decimal, Sunday being 0</dd>\n<dt>%W</dt> <dd>week number of the current year as a decimal number, starting with the\nfirst Monday as the first day of the first week</dd>\n<dt>%x</dt> <dd>preferred date representation for the current locale without the time</dd>\n<dt>%X</dt> <dd>preferred time representation for the current locale without the date</dd>\n<dt>%y</dt> <dd>year as a decimal number without a century (range 00 to 99)</dd>\n<dt>%Y</dt> <dd>year as a decimal number including the century</dd>\n<dt>%z</dt> <dd>numerical time zone representation</dd>\n<dt>%Z</dt> <dd>time zone name or abbreviation</dd>\n<dt>%%</dt> <dd>a literal \"%\" character</dd>\n</dl>\n</dd>\n<dt>locale {String", "name": "oConfig", "description": "  (Deprecated, optional)</dt>\n<dd>\n<b>Deprecated - use Y.config.lang instead, which provides access to a much larger set of built-in languages.</b>\nThe locale to use when displaying days of week, months of the year, and other locale specific\nstrings. If not specified, this defaults to \"en\" (though this may be overridden by the deprecated Y.config.locale).\nThe following locales are built in:\n<dl>\n<dt>en</dt>\n<dd>English</dd>\n<dt>en-US</dt>\n<dd>US English</dd>\n<dt>en-GB</dt>\n<dd>British English</dd>\n<dt>en-AU</dt>\n<dd>Australian English (identical to British English)</dd>\n</dl>\nMore locales may be added by subclassing of the deprecated Y.DataType.Date.Locale[\"en\"].\nSee Y.DataType.Date.Locale for more information.\n</dd>\n</dl>"}], "guessedname": "format", "guessedtype": "function"}}}, "OverlayContext": {"name": "OverlayContext", "configs": {"currentNode": {"default": "First item of the\n<a href=\"OverlayContext.html#config_trigger\">trigger</a> NodeList.", "type": "Node", "description": "OverlayContext allow multiple elements to be the\n<a href=\"OverlayContext.html#config_trigger\">trigger</a>, the\ncurrentNode stores the current active one.", "guessedname": "currentNode", "guessedtype": "property"}, "hideOn": {"default": "mouseout", "type": "String", "description": "The event which is responsible to hide the OverlayContext.", "guessedname": "hideOn", "guessedtype": "property"}, "align": {"default": "{ node: null, points: [ TL, BL ] }", "type": "Object", "description": "Inherited from <a href=\"Overlay.html#config_align\">Overlay</a>.", "guessedname": "align", "guessedtype": "property"}, "hideOnDocumentClick": {"default": "true", "type": "boolean", "description": "If true the instance is registered on the\n<a href=\"OverlayContextManager.html\">OverlayContextManager</a> static\nclass and will be hide when the user click on document.", "guessedname": "hideOnDocumentClick", "guessedtype": "property"}, "cancellableHide": {"default": "true", "type": "boolean", "description": "Cancel auto hide delay if the user interact with the Overlay\n(focus, click, mouseover)", "guessedname": "cancellableHide", "guessedtype": "property"}, "showDelay": {"default": "0", "type": "Number", "description": "Number of milliseconds after the show method is invoked to show the\nOverlayContext.", "guessedname": "showDelay", "guessedtype": "property"}, "visible": {"default": "false", "type": "boolean", "description": "If true the OverlayContext is visible by default after the render phase.\nInherited from <a href=\"Overlay.html\">Overlay</a>.", "guessedname": "visible", "guessedtype": "property"}, "trigger": {"default": "null", "type": "{Node | NodeList | String}", "description": "Node, NodeList or Selector which will be used as trigger elements\nto show or hide the OverlayContext.", "guessedname": "trigger", "guessedtype": "property"}, "showOn": {"default": "mouseover", "type": "String", "description": "The event which is responsible to show the OverlayContext.", "guessedname": "showOn", "guessedtype": "property"}, "hideDelay": {"default": "0", "type": "Number", "description": "Number of milliseconds after the hide method is invoked to hide the\nOverlayContext.", "guessedname": "hideDelay", "guessedtype": "property"}}, "constructors": [{"params": [{"type": "Object", "name": "config", "description": "  Object literal specifying widget configuration properties."}], "description": "<p><img src=\"assets/images/aui-overlay-context/main.png\"/></p>\nA base class for OverlayContext, providing:\n<ul>\n<li>Widget Lifecycle (initializer, renderUI, bindUI, syncUI, destructor)</li>\n<li>Able to display an <a href=\"Overlay.html\">Overlay</a> at a specified corner of an element <a href=\"OverlayContext.html#config_trigger\">trigger</a></li>\n</ul>\nQuick Example:<br/>\n<pre><code>var instance = new A.OverlayContext({\nboundingBox: '#OverlayBoundingBox',\nhideOn: 'mouseleave',\nshowOn: 'mouseenter',\ntrigger: '.menu-trigger'\n}).render();\n</code></pre>\nCheck the list of <a href=\"OverlayContext.html#configattributes\">Configuration Attributes</a> available for\nOverlayContext."}], "namespace": "", "module": "aui-overlay", "events": {"cancellableHideChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "cancellableHideChange", "description": "Fires when the value for the configuration attribute 'cancellableHide' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "currentNodeChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "currentNodeChange", "description": "Fires when the value for the configuration attribute 'currentNode' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "hideOnDocumentClickChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "hideOnDocumentClickChange", "description": "Fires when the value for the configuration attribute 'hideOnDocumentClick' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "showDelayChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "showDelayChange", "description": "Fires when the value for the configuration attribute 'showDelay' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "alignChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "alignChange", "description": "Fires when the value for the configuration attribute 'align' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "visibleChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "visibleChange", "description": "Fires when the value for the configuration attribute 'visible' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "showOnChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "showOnChange", "description": "Fires when the value for the configuration attribute 'showOn' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "hideDelayChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "hideDelayChange", "description": "Fires when the value for the configuration attribute 'hideDelay' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "triggerChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "triggerChange", "description": "Fires when the value for the configuration attribute 'trigger' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "hideOnChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "hideOnChange", "description": "Fires when the value for the configuration attribute 'hideOn' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "guessedname": "OverlayContext", "methods": {"_afterTriggerChange": {"description": "Fires after the <a href=\"OverlayContext.html#config_trigger\">trigger</a>\nattribute change.", "param": "{EventFacade} event", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "guessedname": "_afterTriggerChange", "guessedtype": "function"}, "_stopTriggerEventPropagation": {"description": "Helper method to invoke event.stopPropagation().", "param": "{EventFacade} event", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "guessedname": "_stopTriggerEventPropagation", "guessedtype": "function"}, "hide": {"description": "Hides the OverlayContext.", "guessedname": "hide", "guessedtype": "function"}, "_beforeShowOnChange": {"description": "Fires before the <a href=\"OverlayContext.html#config_showOn\">showOn</a>\nattribute change.", "param": "{EventFacade} event", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "guessedname": "_beforeShowOnChange", "guessedtype": "function"}, "_setShowOn": {"return": {"type": "String", "description": ""}, "description": "Setter for the <a href=\"OverlayContext.html#config_showOn\">showOn</a>\nattribute.", "param": "{String} eventType Event type", "protected": "", "params": [{"type": "String", "name": "eventType", "description": " Event type"}], "guessedname": "_setShowOn", "guessedtype": "function"}, "_toggle": {"description": "Handles the logic for the\n<a href=\"OverlayContext.html#method_toggle\">toggle</a>.", "param": "{EventFacade} event", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "guessedname": "_toggle", "guessedtype": "function"}, "_beforeTriggerChange": {"description": "Fires before the <a href=\"OverlayContext.html#config_trigger\">trigger</a>\nattribute change.", "param": "{EventFacade} event", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "guessedname": "_beforeTriggerChange", "guessedtype": "function"}, "_cancelAutoHide": {"description": "Cancel hide event if the user does some interaction with the\nOverlayContext (focus, click or mouseover).", "param": "{EventFacade} event", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "guessedname": "_cancelAutoHide", "guessedtype": "function"}, "_invokeHideTaskOnInteraction": {"description": "Invoke the hide event when the OverlayContext looses the focus.", "param": "{EventFacade} event", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "guessedname": "_invokeHideTaskOnInteraction", "guessedtype": "function"}, "_afterHideOnChange": {"description": "Fires after the <a href=\"OverlayContext.html#config_hideOn\">hideOn</a>\nattribute change.", "param": "{EventFacade} event", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "guessedname": "_afterHideOnChange", "guessedtype": "function"}, "updateCurrentNode": {"param": "{EventFacade} event", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "description": "Update the\n<a href=\"OverlayContext.html#config_currentNode\">currentNode</a> with the\n<a href=\"OverlayContext.html#config_align\">align</a> node or the\nevent.currentTarget and in last case with the first item of the\n<a href=\"OverlayContext.html#config_trigger\">trigger</a>.", "guessedname": "updateCurrentNode", "guessedtype": "function"}, "toggle": {"param": "{EventFacade} event", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "description": "Toggles visibility of the OverlayContext.", "guessedname": "toggle", "guessedtype": "function"}, "_afterShowOnChange": {"description": "Fires after the <a href=\"OverlayContext.html#config_showOn\">showOn</a>\nattribute change.", "param": "{EventFacade} event", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "guessedname": "_afterShowOnChange", "guessedtype": "function"}, "_setHideOn": {"return": {"type": "String", "description": ""}, "description": "Setter for the <a href=\"OverlayContext.html#config_hideOn\">hideOn</a>\nattribute.", "param": "{boolean} value", "protected": "", "params": [{"type": "String", "name": "eventType", "description": " Event type"}], "guessedname": "_setHideOn", "guessedtype": "function"}, "bindUI": {"protected": "", "description": "Bind the events on the OverlayContext UI. Lifecycle.", "guessedname": "bindUI", "guessedtype": "function"}, "_beforeHideOnChange": {"description": "Fires before the <a href=\"OverlayContext.html#config_hideOn\">hideOn</a>\nattribute change.", "param": "{EventFacade} event", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "guessedname": "_beforeHideOnChange", "guessedtype": "function"}, "refreshAlign": {"description": "Refreshes the alignment of the OverlayContext with the\n<a href=\"OverlayContext.html#config_currentNode\">currentNode</a>. See\nalso <a href=\"OverlayContext.html#config_align\">align</a>.", "guessedname": "refreshAlign", "guessedtype": "function"}, "clearIntervals": {"description": "Clear the intervals to show or hide the OverlayContext. See\n<a href=\"OverlayContext.html#config_hideDelay\">hideDelay</a> and\n<a href=\"OverlayContext.html#config_showDelay\">showDelay</a>.", "guessedname": "clearIntervals", "guessedtype": "function"}, "_onVisibleChangeOverlayContext": {"description": "Fires when the <a href=\"OverlayContext.html#config_visible\">visible</a>\nattribute changes.", "param": "{EventFacade} event", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "guessedname": "_onVisibleChangeOverlayContext", "guessedtype": "function"}}, "extends": "OverlayBase", "superclass": "OverlayBase", "file": "aui-overlay.js", "guessedtype": "property", "shortname": "OverlayContext", "properties": {"OverlayContext.ATTRS": {"type": "Object", "static": "", "description": "Static property used to define the default attribute\nconfiguration for the OverlayContext.", "guessedname": "ATTRS", "guessedtype": "property"}, "OverlayContext.NAME": {"type": "String", "static": "", "description": "Static property provides a string to identify the class.", "guessedname": "NAME", "guessedtype": "property"}}, "description": "<p><img src=\"assets/images/aui-overlay-context/main.png\"/></p>\nA base class for OverlayContext, providing:\n<ul>\n<li>Widget Lifecycle (initializer, renderUI, bindUI, syncUI, destructor)</li>\n<li>Able to display an <a href=\"Overlay.html\">Overlay</a> at a specified corner of an element <a href=\"OverlayContext.html#config_trigger\">trigger</a></li>\n</ul>\nQuick Example:<br/>\n<pre><code>var instance = new A.OverlayContext({\nboundingBox: '#OverlayBoundingBox',\nhideOn: 'mouseleave',\nshowOn: 'mouseenter',\ntrigger: '.menu-trigger'\n}).render();\n</code></pre>\nCheck the list of <a href=\"OverlayContext.html#configattributes\">Configuration Attributes</a> available for\nOverlayContext."}, "DataSchema.Array": {"name": "DataSchema.Array", "namespace": "", "module": "dataschema", "guessedname": "LANG", "methods": {"apply": {"return": {"type": "Object", "description": "Schema-parsed data."}, "description": "Applies a given schema to given Array data.", "param": "schema {Object} Schema to apply.", "static": "", "guessedname": "apply", "guessedtype": "function", "params": [{"type": "Object", "name": "schema", "description": "  Schema to apply."}, {"type": "Object", "name": "data", "description": "  Array data."}]}, "_parseResults": {"return": {"type": "Object", "description": "Parsed data object."}, "description": "Schema-parsed list of results from full data", "param": "fields {Array} Schema to parse against.", "protected": "", "static": "", "guessedname": "_parseResults", "guessedtype": "function", "params": [{"type": "Array", "name": "fields", "description": "  Schema to parse against."}, {"type": "Array", "name": "array_in", "description": "  Array to parse."}, {"type": "Object", "name": "data_out", "description": "  In-progress parsed data to update."}]}}, "static": "", "superclass": "DataSchema.Base", "file": "dataschema.js", "guessedtype": "property", "extends": "DataSchema.Base", "shortname": "DataSchema.Array", "description": "Array subclass for the DataSchema Utility."}, "WidgetPositionConstrain": {"name": "WidgetPositionConstrain", "namespace": "", "module": "widget-position-constrain", "events": {"preventOverlapChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "preventOverlapChange", "description": "Fires when the value for the configuration attribute 'preventOverlap' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "constrainChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "constrainChange", "description": "Fires when the value for the configuration attribute 'constrain' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "configs": {"preventOverlap": {"type": "boolean", "description": "If set to true, and WidgetPositionAlign is also added to the Widget, \nconstrained positioning will attempt to prevent the widget's bounding box from overlapping \nthe element to which it has been aligned, by flipping the orientation of the alignment\nfor corner based alignments", "guessedname": "preventOverlap", "guessedtype": "property"}, "constrain": {"default": "null", "type": "boolean | Node", "description": "The node to constrain the widget's bounding box to, when setting xy. Can also be\nset to true, to constrain to the viewport.", "guessedname": "constrain", "guessedtype": "property"}}, "methods": {"_bindUIPosConstrained": {"protected": "", "description": "Binds event listeners responsible for updating the UI state in response to \nWidget constrained positioning related state changes.\n<p>\nThis method is invoked after bindUI is invoked for the Widget class\nusing YUI's aop infrastructure.\n</p>", "guessedname": "_bindUIPosConstrained", "guessedtype": "function"}, "_constrainOnXYChange": {"description": "The on change listener for the \"xy\" attribute. Modifies the event facade's\nnewVal property with the constrained XY value.", "param": "{EventFacade} e The event facade for the attribute change", "protected": "", "params": [{"type": "EventFacade", "name": "e", "description": " The event facade for the attribute change"}], "guessedname": "_constrainOnXYChange", "guessedtype": "function"}, "_afterConstrainChange": {"description": "After change listener for the \"constrain\" attribute, responsible\nfor updating the UI, in response to attribute changes.", "param": "{EventFacade} e The event facade", "protected": "", "params": [{"type": "EventFacade", "name": "e", "description": " The event facade"}], "guessedname": "_afterConstrainChange", "guessedtype": "function"}, "enable or disable constraints listeners": {"description": "Updates the UI if enabling constraints, and sets up the xyChange event listeners\nto constrain whenever the widget is moved. Disabling constraints removes the listeners.", "param": "{boolean} enable Enable or disable constraints", "params": [{"type": "boolean", "name": "enable", "description": " Enable or disable constraints"}], "private": "", "guessedname": "_enableConstraints", "guessedtype": "function"}, "_getRegion": {"description": "Utility method to normalize region retrieval from a node instance, \nor the viewport, if no node is provided.", "param": "{Node} node Optional.", "params": [{"type": "Node", "name": "node", "description": " Optional."}], "private": "", "guessedname": "_getRegion", "guessedtype": "function"}, "_setConstrain": {"description": "The setter implementation for the \"constrain\" attribute.", "param": "{Node | boolean} val The attribute value", "protected": "", "params": [{"type": "Node | boolean", "name": "val", "description": " The attribute value"}], "guessedname": "_setConstrain", "guessedtype": "function"}, "constrain": {"param": "{Array} xy Optional. The xy values to constrain", "params": [{"type": "Array", "name": "xy", "description": " Optional. The xy values to constrain"}, {"type": "Node | boolean", "name": "node", "description": " Optional. The node to constrain to, or true for the viewport"}], "description": "Constrains the widget's bounding box to a node (or the viewport). If xy or node are not \npassed in, the current position and the value of \"constrain\" will be used respectively.\nThe widget's position will be changed to the constrained position.", "guessedname": "constrain", "guessedtype": "function"}, "_constrain": {"return": {"type": "Number", "description": "The constrained value"}, "description": "The method which performs the actual constrain calculations for a given axis (\"x\" or \"y\") based\non the regions provided.", "param": "{Number} val The value to constrain", "protected": "", "params": [{"type": "Number", "name": "val", "description": " The value to constrain"}, {"type": "String", "name": "axis", "description": " The axis to use for constrainment"}, {"type": "Region", "name": "nodeRegion", "description": " The region of the node to constrain"}, {"type": "Region", "name": "constrainingRegion", "description": " The region of the node (or viewport) to constrain to"}], "guessedname": "_constrain", "guessedtype": "function"}, "getConstrainedXY": {"return": {"type": "Array", "description": "The constrained xy values"}, "description": "Calculates the constrained positions for the XY positions provided, using\nthe provided node argument is passed in. If no node value is passed in, the value of \nthe \"constrain\" attribute is used.", "param": "{Array} xy The xy values to constrain", "params": [{"type": "Array", "name": "xy", "description": " The xy values to constrain"}, {"type": "Node | boolean", "name": "node", "description": " Optional. The node to constrain to, or true for the viewport"}], "guessedname": "getConstrainedXY", "guessedtype": "function"}, "_preventOverlap": {"return": {"type": "Number", "description": "The constrained value"}, "description": "The method which performs the preventOverlap calculations for a given axis (\"x\" or \"y\") based\non the value and regions provided.", "param": "{Number} val The value being constrain", "protected": "", "params": [{"type": "Number", "name": "val", "description": " The value being constrain"}, {"type": "String", "name": "axis", "description": " The axis to being constrained"}, {"type": "Region", "name": "nodeRegion", "description": " The region of the node being constrained"}, {"type": "Region", "name": "constrainingRegion", "description": " The region of the node (or viewport) we need to constrain to"}], "guessedname": "_preventOverlap", "guessedtype": "function"}}, "param": "{Object} User configuration object", "file": "widget-position-constrain.js", "shortname": "WidgetPositionConstrain", "properties": {"WidgetPositionConstrain._PREVENT_OVERLAP": {"description": "The set of positions for which to prevent\noverlap.", "protected": "", "static": "", "guessedname": "PREVENT_OVERLAP_MAP", "guessedtype": "property", "type": "Object"}, "WidgetPositionConstrain.ATTRS": {"type": "Object", "static": "", "description": "Static property used to define the default attribute \nconfiguration introduced by WidgetPositionConstrain.", "guessedname": "ATTRS", "guessedtype": "property"}}, "description": "A widget extension, which can be used to add constrained xy positioning support to the base Widget class,\nthrough the <a href=\"Base.html#method_build\">Base.build</a> method. This extension requires that \nthe WidgetPosition extension be added to the Widget (before WidgetPositionConstrain, if part of the same \nextension list passed to Base.build)."}, "Lang": {"name": "Lang", "namespace": "", "module": "yui", "guessedname": "Lang", "methods": {"isArray": {"return": {"type": "boolean", "description": "true if o is an array"}, "description": "Determines whether or not the provided item is an array.\nReturns false for array-like collections such as the\nfunction arguments collection or HTMLElement collection\nwill return false.  You can use @see Array.test if you \nwant to", "param": "o The object to test", "static": "", "guessedname": "isArray", "guessedtype": "function", "params": [{"type": "", "name": "o", "description": " The object to test"}]}, "trim": {"return": {"type": "string", "description": "the trimmed string"}, "description": "Returns a string without any leading or trailing whitespace.  If \nthe input is not a string, the input will be returned untouched.", "param": "s {string} the string to trim", "static": "", "guessedname": "trim", "guessedtype": "function", "params": [{"type": "string", "name": "s", "description": "  the string to trim"}]}, "isDate": {"return": {"type": "boolean", "description": "true if o is a date"}, "description": "Determines whether or not the supplied item is a date instance", "param": "o The object to test", "static": "", "guessedname": "isDate", "guessedtype": "function", "params": [{"type": "", "name": "o", "description": " The object to test"}]}, "isString": {"return": {"type": "boolean", "description": "true if o is a string"}, "description": "Determines whether or not the provided item is a string", "param": "o The object to test", "static": "", "guessedname": "isString", "guessedtype": "function", "params": [{"type": "", "name": "o", "description": " The object to test"}]}, "isBoolean": {"return": {"type": "boolean", "description": "true if o is a boolean"}, "description": "Determines whether or not the provided item is a boolean", "param": "o The object to test", "static": "", "guessedname": "isBoolean", "guessedtype": "function", "params": [{"type": "", "name": "o", "description": " The object to test"}]}, "isNull": {"return": {"type": "boolean", "description": "true if o is null"}, "description": "Determines whether or not the provided item is null", "param": "o The object to test", "static": "", "guessedname": "isNull", "guessedtype": "function", "params": [{"type": "", "name": "o", "description": " The object to test"}]}, "isValue": {"return": {"type": "boolean", "description": "true if it is not null/undefined/NaN || false"}, "description": "A convenience method for detecting a legitimate non-null value.\nReturns false for null/undefined/NaN, true for other values, \nincluding 0/false/''", "param": "o The item to test", "static": "", "guessedname": "isValue", "guessedtype": "function", "params": [{"type": "", "name": "o", "description": " The item to test"}]}, "isFunction": {"return": {"type": "boolean", "description": "true if o is a function"}, "description": "Determines whether or not the provided item is a function\nNote: Internet Explorer thinks certain functions are objects:\nvar obj = document.createElement(\"object\");\nY.Lang.isFunction(obj.getAttribute) // reports false in IE\nvar input = document.createElement(\"input\"); // append to body\nY.Lang.isFunction(input.focus) // reports false in IE\nYou will have to implement additional tests if these functions\nmatter to you.", "param": "o The object to test", "static": "", "guessedname": "isFunction", "guessedtype": "function", "params": [{"type": "", "name": "o", "description": " The object to test"}]}, "isNumber": {"return": {"type": "boolean", "description": "true if o is a number"}, "description": "Determines whether or not the provided item is a legal number", "param": "o The object to test", "static": "", "guessedname": "isNumber", "guessedtype": "function", "params": [{"type": "", "name": "o", "description": " The object to test"}]}, "type": {"return": {"type": "string", "description": "the detected type"}, "description": "Returns a string representing the type of the item passed in.\nKnown issues:\ntypeof HTMLElementCollection returns function in Safari, but\nY.type() reports object, which could be a good thing --\nbut it actually caused the logic in Y.Lang.isObject to fail.", "param": "o the item to test", "params": [{"type": "", "name": "o", "description": " the item to test"}], "guessedname": "type", "guessedtype": "function"}, "isObject": {"return": {"type": "boolean", "description": "true if o is an object"}, "description": "Determines whether or not the provided item is of type object\nor function", "param": "o The object to test", "static": "", "guessedname": "isObject", "guessedtype": "function", "params": [{"type": "", "name": "o", "description": " The object to test"}, {"type": "boolean", "name": "failfn", "description": "  fail if the input is a function"}]}, "isUndefined": {"return": {"type": "boolean", "description": "true if o is undefined"}, "description": "Determines whether or not the provided item is undefined", "param": "o The object to test", "static": "", "guessedname": "isUndefined", "guessedtype": "function", "params": [{"type": "", "name": "o", "description": " The object to test"}]}}, "static": "", "file": "aui.js", "guessedtype": "property", "shortname": "Lang", "description": "Provides the language utilites and extensions used by the library"}, "DD.Drag": {"name": "DD.Drag", "configs": {"node": {"type": "Node", "description": "Y.Node instance to use as the element to initiate a drag operation", "guessedname": "node", "guessedtype": "property"}, "activeHandle": {"type": "Node", "description": "This config option is set by Drag to inform you of which handle fired the drag event (in the case that there are several handles): default false.", "guessedname": "activeHandle", "guessedtype": "property"}, "dragNode": {"type": "Node", "description": "Y.Node instance to use as the draggable element, defaults to node", "guessedname": "dragNode", "guessedtype": "property"}, "move": {"type": "Boolean", "description": "If this is false, the drag element will not move with the cursor: default true. Can be used to \"resize\" the element.", "guessedname": "move", "guessedtype": "property"}, "target": {"type": "Boolean", "description": "This attribute only works if the dd-drop module has been loaded. It will make this node a drop target as well as draggable.", "guessedname": "target", "guessedtype": "property"}, "startCentered": {"type": "Boolean", "description": "Center the dragNode to the mouse position on drag:start: default false", "guessedname": "startCentered", "guessedtype": "property"}, "offsetNode": {"type": "Boolean", "description": "Offset the drag element by the difference in cursor position: default true", "guessedname": "offsetNode", "guessedtype": "property"}, "handles": {"type": "Array", "description": "Array of valid handles to add. Adding something here will set all handles, even if previously added with addHandle", "guessedname": "handles", "guessedtype": "property"}, "clickPixelThresh": {"type": "Number", "description": "The number of pixels to move to start a drag operation, default is 3.", "guessedname": "clickPixelThresh", "guessedtype": "property"}, "bubbles": {"deprecated": "", "type": "Object", "description": "Controls the default bubble parent for this Drag instance. Default: Y.DD.DDM. Set to false to disable bubbling. Use bubbleTargets in config", "guessedname": "bubbles", "guessedtype": "property"}, "groups": {"type": "Array", "description": "Array of groups to add this drag into.", "guessedname": "groups", "guessedtype": "property"}, "lock": {"type": "Boolean", "description": "Set to lock this drag element so that it can't be dragged: default false.", "guessedname": "lock", "guessedtype": "property"}, "dragMode": {"type": "String", "description": "This attribute only works if the dd-drop module is active. It will set the dragMode (point, intersect, strict) of this Drag instance.", "guessedname": "dragMode", "guessedtype": "property"}, "useShim": {"type": "Boolean", "description": "Use the protective shim on all drag operations: default true. Only works with dd-ddm, not dd-ddm-base.", "guessedname": "useShim", "guessedtype": "property"}, "dragging": {"type": "Boolean", "description": "This attribute is not meant to be used by the implementor, it is meant to be used as an Event tracker so you can listen for it to change.", "guessedname": "dragging", "guessedtype": "property"}, "data": {"type": "Mixed", "description": "A payload holder to store arbitrary data about this drag object, can be used to store any value.", "guessedname": "data", "guessedtype": "property"}, "primaryButtonOnly": {"type": "Boolean", "description": "By default a drag operation will only begin if the mousedown occurred with the primary mouse button. Setting this to false will allow for all mousedown events to trigger a drag.", "guessedname": "primaryButtonOnly", "guessedtype": "property"}, "clickTimeThresh": {"type": "Number", "description": "The number of milliseconds a mousedown has to pass to start a drag operation, default is 1000.", "guessedname": "clickTimeThresh", "guessedtype": "property"}}, "constructors": [{"description": "Provides the ability to drag a Node."}], "namespace": "DD", "module": "dd", "properties": {"_groups": {"guessedname": "_groups", "type": "{Array}", "description": "Storage Array for the groups this drag belongs to.", "private": "", "guessedtype": "property"}, "_handles": {"guessedname": "_handles", "type": "{Object}", "description": "A private hash of the valid drag handles", "private": "", "guessedtype": "property"}, "_invalids": {"guessedname": "_invalids", "type": "{Object}", "description": "A private hash of the invalid selector strings", "private": "", "guessedtype": "property"}, "_clickTimeout": {"guessedname": "_clickTimeout", "type": "{Boolean}", "description": "Holder for the setTimeout call", "private": "", "guessedtype": "property"}, "_ev_md": {"guessedname": "_ev_md", "type": "{Event.Facade}", "description": "A private reference to the mousedown DOM event", "private": "", "guessedtype": "property"}, "target": {"type": "{Object}", "description": "This will be a reference to the Drop instance associated with this drag if the target: true config attribute is set..", "guessedname": "target", "guessedtype": "property"}, "_bubbleTargets": {"private": "", "description": "The default bubbleTarget for this object. Default: Y.DD.DDM", "guessedname": "_bubbleTargets", "guessedtype": "property"}, "_startTime": {"guessedname": "_startTime", "type": "Date", "description": "The getTime of the mousedown event. Not used, just here in case someone wants/needs to use it.", "private": "", "guessedtype": "property"}, "_endTime": {"guessedname": "_endTime", "type": "Date", "description": "The getTime of the mouseup event. Not used, just here in case someone wants/needs to use it.", "private": "", "guessedtype": "property"}, "region": {"type": "Object", "description": "A region object associated with this drag, used for checking regions while dragging.", "guessedname": "region", "guessedtype": "property"}, "mouseXY": {"type": "{Array}", "description": "The XY coords of the mousemove", "guessedname": "mouseXY", "guessedtype": "property"}, "_dragThreshMet": {"guessedname": "_dragThreshMet", "type": "{Boolean}", "description": "Private flag to see if the drag threshhold was met", "private": "", "guessedtype": "property"}, "actXY": {"type": "{Array}", "description": "The xy that the node will be set to. Changing this will alter the position as it's dragged.", "guessedname": "actXY", "guessedtype": "property"}, "startXY": {"type": "{Array}", "description": "The initial mouse position", "guessedname": "startXY", "guessedtype": "property"}, "nodeXY": {"type": "{Array}", "description": "The initial element position", "guessedname": "nodeXY", "guessedtype": "property"}, "deltaXY": {"type": "{Array}", "description": "The offset of the mouse position to the element's position", "guessedname": "deltaXY", "guessedtype": "property"}, "_invalidsDefault": {"guessedname": "_invalidsDefault", "type": "{Object}", "description": "A private hash of the default invalid selector strings: {'textarea': true, 'input': true, 'a': true, 'button': true, 'select': true}", "private": "", "guessedtype": "property"}, "lastXY": {"type": "{Array}", "description": "The position of the element as it's moving (for offset calculations)", "guessedname": "lastXY", "guessedtype": "property"}, "_fromTimeout": {"guessedname": "_fromTimeout", "type": "{Boolean}", "description": "Flag to determine if the drag operation came from a timeout", "private": "", "guessedtype": "property"}, "_ieSelectBack": {"private": "", "description": "We will hold a copy of the current \"onselectstart\" method on this property, and reset it after we are done using it.", "guessedname": "_ieSelectBack", "guessedtype": "property"}, "realXY": {"type": "{Array}", "description": "The real xy position of the node.", "guessedname": "realXY", "guessedtype": "property"}}, "guessedname": "DDM", "methods": {"addToGroup": {"return": {"type": "Self", "description": ""}, "description": "Add this Drag instance to a group, this should be used for on-the-fly group additions.", "chainable": "", "param": "{String} g The group to add this Drag Instance to.", "params": [{"type": "String", "name": "g", "description": " The group to add this Drag Instance to."}], "guessedname": "addToGroup", "guessedtype": "function"}, "_setStartPosition": {"description": "Sets the current position of the Element and calculates the offset", "param": "{Array} xy The XY coords to set the position to.", "params": [{"type": "Array", "name": "xy", "description": " The XY coords to set the position to."}], "private": "", "guessedname": "_setStartPosition", "guessedtype": "function"}, "_fixDragStart": {"description": "The function we use as the ondragstart handler when we start a drag in Internet Explorer. This keeps IE from blowing up on images as drag handles.", "private": "", "guessedname": "_fixDragStart", "guessedtype": "function"}, "_defDragFn": {"description": "Default function for drag:drag. Fired from _moveNode.", "param": "{Event.Facade} ev The drag:drag event", "params": [{"type": "Event.Facade", "name": "ev", "description": " The drag:drag event"}], "private": "", "guessedname": "_defDragFn", "guessedtype": "function"}, "stopDrag": {"chainable": "", "return": {"type": "Self", "description": ""}, "description": "Method will forcefully stop a drag operation. For example calling this from inside an ESC keypress handler will stop this drag.", "guessedname": "stopDrag", "guessedtype": "function"}, "_move": {"description": "Fired from DragDropMgr (DDM) on mousemove.", "param": "{Event.Facade} ev The mousemove DOM event", "params": [{"type": "Event.Facade", "name": "ev", "description": " The mousemove DOM event"}], "private": "", "guessedname": "_move", "guessedtype": "function"}, "validClick": {"return": {"type": "Boolean", "description": ""}, "description": "Method first checks to see if we have handles, if so it validates the click against the handle. Then if it finds a valid handle, it checks it against the invalid handles list. Returns true if a good handle was used, false otherwise.", "param": "{Event.Facade}", "params": [], "guessedname": "validClick", "guessedtype": "function"}, "removeInvalid": {"return": {"type": "Self", "description": ""}, "description": "Remove an invalid handle added by addInvalid", "chainable": "", "param": "{String} str The invalid handle to remove from the internal list.", "params": [{"type": "String", "name": "str", "description": " The invalid handle to remove from the internal list."}], "guessedname": "removeInvalid", "guessedtype": "function"}, "addHandle": {"return": {"type": "Self", "description": ""}, "description": "Add a handle to a drag element. Drag only initiates when a mousedown happens on this element.", "chainable": "", "param": "{String} str The selector to test for a valid handle. Must be a child of the element.", "params": [{"type": "String", "name": "str", "description": " The selector to test for a valid handle. Must be a child of the element."}], "guessedname": "addHandle", "guessedtype": "function"}, "initializer": {"description": "Internal init handler", "private": "", "guessedname": "initializer", "guessedtype": "function"}, "removeHandle": {"return": {"type": "Self", "description": ""}, "description": "Remove a Selector added by addHandle", "chainable": "", "param": "{String} str The selector for the handle to be removed.", "params": [{"type": "String", "name": "str", "description": " The selector for the handle to be removed."}], "guessedname": "removeHandle", "guessedtype": "function"}, "_handleMouseDownEvent": {"description": "Handler for the mousedown DOM event", "param": "{Event.Facade}", "params": [], "private": "", "guessedname": "_handleMouseDownEvent", "guessedtype": "function"}, "end": {"chainable": "", "return": {"type": "Self", "description": ""}, "description": "Ends the drag operation", "guessedname": "end", "guessedtype": "function"}, "_moveNode": {"description": "This method performs the actual element move.", "private": "", "guessedname": "_moveNode", "guessedtype": "function"}, "destructor": {"description": "Lifecycle destructor, unreg the drag from the DDM and remove listeners", "private": "", "guessedname": "destructor", "guessedtype": "function"}, "start": {"chainable": "", "return": {"type": "Self", "description": ""}, "description": "Starts the drag operation", "guessedname": "start", "guessedtype": "function"}, "_ieSelectFix": {"description": "The function we use as the onselectstart handler when we start a drag in Internet Explorer", "private": "", "guessedname": "_ieSelectFix", "guessedtype": "function"}, "_defAlignFn": {"description": "Calculates the offsets and set's the XY that the element will move to.", "param": "{Event.Facade} e The drag:align event.", "params": [{"type": "Event.Facade", "name": "e", "description": " The drag:align event."}], "private": "", "guessedname": "_defAlignFn", "guessedtype": "function"}, "_createEvents": {"description": "This method creates all the events for this Event Target and publishes them so we get Event Bubbling.", "private": "", "guessedname": "_createEvents", "guessedtype": "function"}, "_timeoutCheck": {"description": "The method passed to setTimeout to determine if the clickTimeThreshold was met.", "private": "", "guessedname": "_timeoutCheck", "guessedtype": "function"}, "removeFromGroup": {"return": {"type": "Self", "description": ""}, "description": "Remove this Drag instance from a group, this should be used for on-the-fly group removals.", "chainable": "", "param": "{String} g The group to remove this Drag Instance from.", "params": [{"type": "String", "name": "g", "description": " The group to remove this Drag Instance from."}], "guessedname": "removeFromGroup", "guessedtype": "function"}, "_fixIEMouseUp": {"description": "This method copies the _ieSelectFix property back to the onselectstart listner on the document.", "private": "", "guessedname": "_fixIEMouseUp", "guessedtype": "function"}, "_alignNode": {"description": "This method performs the alignment before the element move.", "param": "{Array} eXY The XY to move the element to, usually comes from the mousemove DOM event.", "params": [{"type": "Array", "name": "eXY", "description": " The XY to move the element to, usually comes from the mousemove DOM event."}], "private": "", "guessedname": "_alignNode", "guessedtype": "function"}, "_prevEndFn": {"description": "Handler for preventing the drag:end event. It will reset the node back to it's start position", "private": "", "guessedname": "_prevEndFn", "guessedtype": "function"}, "_prep": {"description": "Attach event listners and add classname", "private": "", "guessedname": "_prep", "guessedtype": "function"}, "addInvalid": {"return": {"type": "Self", "description": ""}, "description": "Add a selector string to test the handle against. If the test passes the drag operation will not continue.", "chainable": "", "param": "{String} str The selector to test against to determine if this is an invalid drag handle.", "params": [{"type": "String", "name": "str", "description": " The selector to test against to determine if this is an invalid drag handle."}], "guessedname": "addInvalid", "guessedtype": "function"}, "_defMouseDownFn": {"description": "Handler for the mousedown DOM event", "param": "{Event.Facade}", "params": [], "private": "", "guessedname": "_defMouseDownFn", "guessedtype": "function"}, "_handleMouseUp": {"description": "Handler for the mouseup DOM event", "param": "{Event.Facade}", "params": [], "private": "", "guessedname": "_handleMouseUp", "guessedtype": "function"}, "_align": {"description": "Calculates the offsets and set's the XY that the element will move to.", "param": "{Array} xy The xy coords to align with.", "params": [{"type": "Array", "name": "xy", "description": " The xy coords to align with."}], "private": "", "guessedname": "_align", "guessedtype": "function"}, "_handleTarget": {"return": {"type": "Boolean/Object", "description": ""}, "description": "Attribute handler for the target config attribute.", "private": "", "params": [], "param": "{Boolean/Object}", "guessedname": "_handleTarget", "guessedtype": "function"}, "_unprep": {"description": "Detach event listeners and remove classname", "private": "", "guessedname": "_unprep", "guessedtype": "function"}, "_fixIEMouseDown": {"description": "This method copies the onselectstart listner on the document to the _ieSelectFix property", "private": "", "guessedname": "_fixIEMouseDown", "guessedtype": "function"}}, "extends": "Base", "superclass": "Base", "file": "dd.js", "guessedtype": "property", "shortname": "Drag", "events": {"clickPixelThreshChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "clickPixelThreshChange", "description": "Fires when the value for the configuration attribute 'clickPixelThresh' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "groupsChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "groupsChange", "description": "Fires when the value for the configuration attribute 'groups' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "drag:afterMouseDown": {"description": "Fires after the mousedown event has been cleared.", "param": "{Event.Facade} event An Event Facade object with the following specific property added:\n<dl><dt>ev</dt><dd>The original mousedown event.</dd></dl>", "params": [{"type": "Event.Facade", "name": "event", "description": " An Event Facade object with the following specific property added:\n<dl><dt>ev</dt><dd>The original mousedown event.</dd></dl>"}], "guessedname": "EV_AFTER_MOUSE_DOWN", "guessedtype": "property", "bubbles": "DDM", "type": "{Event.Custom}"}, "bubblesChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "bubblesChange", "description": "Fires when the value for the configuration attribute 'bubbles' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "offsetNodeChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "offsetNodeChange", "description": "Fires when the value for the configuration attribute 'offsetNode' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "draggingChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "draggingChange", "description": "Fires when the value for the configuration attribute 'dragging' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "handlesChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "handlesChange", "description": "Fires when the value for the configuration attribute 'handles' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "dataChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "dataChange", "description": "Fires when the value for the configuration attribute 'data' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "drag:removeInvalid": {"description": "Fires after an invalid selector is removed.", "param": "{Event.Facade} event An Event Facade object with the following specific property added:\n<dl><dt>handle</dt><dd>The handle that was removed.</dd></dl>", "params": [{"type": "Event.Facade", "name": "event", "description": " An Event Facade object with the following specific property added:\n<dl><dt>handle</dt><dd>The handle that was removed.</dd></dl>"}], "guessedname": "EV_REMOVE_INVALID", "guessedtype": "property", "bubbles": "DDM", "type": "{Event.Custom}"}, "dragModeChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "dragModeChange", "description": "Fires when the value for the configuration attribute 'dragMode' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "primaryButtonOnlyChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "primaryButtonOnlyChange", "description": "Fires when the value for the configuration attribute 'primaryButtonOnly' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "drag:mouseDown": {"description": "Handles the mousedown DOM event, checks to see if you have a valid handle then starts the drag timers.", "param": "{Event.Facade} event An Event Facade object with the following specific property added:\n<dl><dt>ev</dt><dd>The original mousedown event.</dd></dl>", "params": [{"type": "Event.Facade", "name": "event", "description": " An Event Facade object with the following specific property added:\n<dl><dt>ev</dt><dd>The original mousedown event.</dd></dl>"}], "guessedname": "EV_MOUSE_DOWN", "guessedtype": "property", "preventable": "_defMouseDownFn", "bubbles": "DDM", "type": "{Event.Custom}"}, "drag:align": {"description": "Fires when this node is aligned.", "param": "{Event.Facade} event An Event Facade object with the following specific property added:\n<dl>\n<dt>pageX</dt><dd>The current node position X.</dd>\n<dt>pageY</dt><dd>The current node position Y.</dd>\n</dl>", "params": [{"type": "Event.Facade", "name": "event", "description": " An Event Facade object with the following specific property added:\n<dl>\n<dt>pageX</dt><dd>The current node position X.</dd>\n<dt>pageY</dt><dd>The current node position Y.</dd>\n</dl>"}], "guessedname": "EV_ALIGN", "guessedtype": "property", "preventable": "_defAlignFn", "bubbles": "DDM", "type": "{Event.Custom}"}, "drag:addHandle": {"description": "Fires after a handle is added.", "param": "{Event.Facade} event An Event Facade object with the following specific property added:\n<dl><dt>handle</dt><dd>The handle that was added.</dd></dl>", "params": [{"type": "Event.Facade", "name": "event", "description": " An Event Facade object with the following specific property added:\n<dl><dt>handle</dt><dd>The handle that was added.</dd></dl>"}], "guessedname": "EV_ADD_HANDLE", "guessedtype": "property", "bubbles": "DDM", "type": "{Event.Custom}"}, "drag:removeHandle": {"description": "Fires after a handle is removed.", "param": "{Event.Facade} event An Event Facade object with the following specific property added:\n<dl><dt>handle</dt><dd>The handle that was removed.</dd></dl>", "params": [{"type": "Event.Facade", "name": "event", "description": " An Event Facade object with the following specific property added:\n<dl><dt>handle</dt><dd>The handle that was removed.</dd></dl>"}], "guessedname": "EV_REMOVE_HANDLE", "guessedtype": "property", "bubbles": "DDM", "type": "{Event.Custom}"}, "activeHandleChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "activeHandleChange", "description": "Fires when the value for the configuration attribute 'activeHandle' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "drag:start": {"description": "Fires at the start of a drag operation.", "param": "{Event.Facade} event An Event Facade object with the following specific property added:\n<dl>\n<dt>pageX</dt><dd>The original node position X.</dd>\n<dt>pageY</dt><dd>The original node position Y.</dd>\n<dt>startTime</dt><dd>The startTime of the event. getTime on the current Date object.</dd>\n</dl>", "params": [{"type": "Event.Facade", "name": "event", "description": " An Event Facade object with the following specific property added:\n<dl>\n<dt>pageX</dt><dd>The original node position X.</dd>\n<dt>pageY</dt><dd>The original node position Y.</dd>\n<dt>startTime</dt><dd>The startTime of the event. getTime on the current Date object.</dd>\n</dl>"}], "guessedname": "EV_START", "guessedtype": "property", "bubbles": "DDM", "type": "{Event.Custom}"}, "useShimChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "useShimChange", "description": "Fires when the value for the configuration attribute 'useShim' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "clickTimeThreshChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "clickTimeThreshChange", "description": "Fires when the value for the configuration attribute 'clickTimeThresh' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "lockChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "lockChange", "description": "Fires when the value for the configuration attribute 'lock' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "targetChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "targetChange", "description": "Fires when the value for the configuration attribute 'target' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "drag:enter": {"type": "{Event.Custom}", "bubbles": "DDM", "params": [{"type": "Event.Facade", "name": "event", "description": " An Event Facade object with the following specific property added:\n<dl>\n<dt>drop</dt><dd>The drop object at the time of the event.</dd>\n<dt>drag</dt><dd>The drag object at the time of the event.</dd>\n</dl>"}], "description": "Fires when this node enters a Drop Target. (Fired from dd-drop)", "param": "{Event.Facade} event An Event Facade object with the following specific property added:\n<dl>\n<dt>drop</dt><dd>The drop object at the time of the event.</dd>\n<dt>drag</dt><dd>The drag object at the time of the event.</dd>\n</dl>"}, "drag:addInvalid": {"description": "Fires after an invalid selector is added.", "param": "{Event.Facade} event An Event Facade object with the following specific property added:\n<dl><dt>handle</dt><dd>The handle that was added.</dd></dl>", "params": [{"type": "Event.Facade", "name": "event", "description": " An Event Facade object with the following specific property added:\n<dl><dt>handle</dt><dd>The handle that was added.</dd></dl>"}], "guessedname": "EV_ADD_INVALID", "guessedtype": "property", "bubbles": "DDM", "type": "{Event.Custom}"}, "drag:drag": {"description": "Fires every mousemove during a drag operation.", "param": "{Event.Facade} event An Event Facade object with the following specific property added:\n<dl>\n<dt>pageX</dt><dd>The current node position X.</dd>\n<dt>pageY</dt><dd>The current node position Y.</dd>\n<dt>scroll</dt><dd>Should a scroll action occur.</dd>\n<dt>info</dt><dd>Object hash containing calculated XY arrays: start, xy, delta, offset</dd>\n</dl>", "params": [{"type": "Event.Facade", "name": "event", "description": " An Event Facade object with the following specific property added:\n<dl>\n<dt>pageX</dt><dd>The current node position X.</dd>\n<dt>pageY</dt><dd>The current node position Y.</dd>\n<dt>scroll</dt><dd>Should a scroll action occur.</dd>\n<dt>info</dt><dd>Object hash containing calculated XY arrays: start, xy, delta, offset</dd>\n</dl>"}], "guessedname": "EV_DRAG", "guessedtype": "property", "bubbles": "DDM", "type": "{Event.Custom}"}, "drag:end": {"description": "Fires at the end of a drag operation.", "param": "{Event.Facade} event An Event Facade object with the following specific property added:\n<dl>\n<dt>pageX</dt><dd>The current node position X.</dd>\n<dt>pageY</dt><dd>The current node position Y.</dd>\n<dt>startTime</dt><dd>The startTime of the event, from the start event.</dd>\n<dt>endTime</dt><dd>The endTime of the event. getTime on the current Date object.</dd>\n</dl>", "params": [{"type": "Event.Facade", "name": "event", "description": " An Event Facade object with the following specific property added:\n<dl>\n<dt>pageX</dt><dd>The current node position X.</dd>\n<dt>pageY</dt><dd>The current node position Y.</dd>\n<dt>startTime</dt><dd>The startTime of the event, from the start event.</dd>\n<dt>endTime</dt><dd>The endTime of the event. getTime on the current Date object.</dd>\n</dl>"}], "guessedname": "EV_END", "guessedtype": "property", "bubbles": "DDM", "type": "{Event.Custom}"}, "nodeChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "nodeChange", "description": "Fires when the value for the configuration attribute 'node' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "dragNodeChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "dragNodeChange", "description": "Fires when the value for the configuration attribute 'dragNode' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "drag:drophit": {"type": "{Event.Custom}", "bubbles": "DDM", "params": [{"type": "Event.Facade", "name": "event", "description": " An Event Facade object with the following specific property added:\n<dl>\n<dt>drop</dt><dd>The best guess on what was dropped on.</dd>\n<dt>drag</dt><dd>The drag object at the time of the event.</dd>\n<dt>others</dt><dd>An array of all the other drop targets that was dropped on.</dd>\n</dl>"}], "description": "Fires when this node is dropped on a valid Drop Target. (Fired from dd-ddm-drop)", "param": "{Event.Facade} event An Event Facade object with the following specific property added:\n<dl>\n<dt>drop</dt><dd>The best guess on what was dropped on.</dd>\n<dt>drag</dt><dd>The drag object at the time of the event.</dd>\n<dt>others</dt><dd>An array of all the other drop targets that was dropped on.</dd>\n</dl>"}, "drag:dropmiss": {"description": "Fires when this node is dropped on an invalid Drop Target. (Fired from dd-ddm-drop)", "param": "{Event.Facade} event An Event Facade object with the following specific property added:\n<dl>\n<dt>pageX</dt><dd>The current node position X.</dd>\n<dt>pageY</dt><dd>The current node position Y.</dd>\n</dl>", "params": [{"type": "Event.Facade", "name": "event", "description": " An Event Facade object with the following specific property added:\n<dl>\n<dt>pageX</dt><dd>The current node position X.</dd>\n<dt>pageY</dt><dd>The current node position Y.</dd>\n</dl>"}], "guessedname": "Drag", "guessedtype": "function", "bubbles": "DDM", "type": "{Event.Custom}"}, "drag:over": {"type": "{Event.Custom}", "bubbles": "DDM", "params": [{"type": "Event.Facade", "name": "event", "description": " An Event Facade object with the following specific property added:\n<dl>\n<dt>drop</dt><dd>The drop object at the time of the event.</dd>\n<dt>drag</dt><dd>The drag object at the time of the event.</dd>\n</dl>"}], "description": "Fires when this node is over a Drop Target. (Fired from dd-drop)", "param": "{Event.Facade} event An Event Facade object with the following specific property added:\n<dl>\n<dt>drop</dt><dd>The drop object at the time of the event.</dd>\n<dt>drag</dt><dd>The drag object at the time of the event.</dd>\n</dl>"}, "drag:exit": {"type": "{Event.Custom}", "bubbles": "DDM", "params": [{"type": "Event.Facade", "name": "event", "description": " An Event Facade object with the following specific property added:\n<dl>\n<dt>drop</dt><dd>The drop object at the time of the event.</dd>\n</dl>"}], "description": "Fires when this node exits a Drop Target. (Fired from dd-drop)", "param": "{Event.Facade} event An Event Facade object with the following specific property added:\n<dl>\n<dt>drop</dt><dd>The drop object at the time of the event.</dd>\n</dl>"}, "moveChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "moveChange", "description": "Fires when the value for the configuration attribute 'move' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "startCenteredChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "startCenteredChange", "description": "Fires when the value for the configuration attribute 'startCentered' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "description": "Provides the ability to drag a Node."}, "TreeNode": {"name": "TreeNode", "configs": {"prevSibling": {"default": "null", "type": "TreeNode", "description": "Previous sibling of the current TreeNode.", "guessedname": "prevSibling", "guessedtype": "property"}, "ownerTree": {"default": "null", "type": "TreeView", "description": "TreeView which contains the current TreeNode.", "guessedname": "ownerTree", "guessedtype": "property"}, "leaf": {"default": "true", "type": "boolean", "description": "Whether the TreeNode could have children or not (i.e. if any\nchildren is present the TreeNode is a leaf).", "guessedname": "leaf", "guessedtype": "property"}, "hitAreaEl": {"default": "Generated DOM element.", "type": "Node | String", "description": "Hitarea element.", "guessedname": "hitAreaEl", "guessedtype": "property"}, "alwaysShowHitArea": {"default": "true", "type": "boolean", "description": "Always show the hitarea icon.", "guessedname": "alwaysShowHitArea", "guessedtype": "property"}, "expanded": {"default": "false", "type": "boolean", "description": "Whether the TreeNode is expanded by default.", "guessedname": "expanded", "guessedtype": "property"}, "nextSibling": {"default": "null", "type": "TreeNode", "description": "Next sibling of the current TreeNode.", "guessedname": "nextSibling", "guessedtype": "property"}, "parentNode": {"default": "null", "type": "TreeNode", "description": "Parent node of the current TreeNode.", "guessedname": "parentNode", "guessedtype": "property"}, "label": {"default": "''", "type": "String", "description": "Label of the TreeNode.", "guessedname": "label", "guessedtype": "property"}, "draggable": {"default": "true", "type": "boolean", "description": "If true the TreeNode is draggable.", "guessedname": "draggable", "guessedtype": "property"}, "iconEl": {"type": "Node | String", "description": "Icon element.", "guessedname": "iconEl", "guessedtype": "property"}, "labelEl": {"default": "Generated DOM element.", "type": "Node | String", "description": "Label element to house the <code>label</code> attribute.", "guessedname": "labelEl", "guessedtype": "property"}, "id": {"default": "null", "type": "String", "description": "Id of the TreeNode.", "guessedname": "id", "guessedtype": "property"}}, "constructors": [{"params": [{"type": "Object", "name": "config", "description": "  Object literal specifying widget configuration properties."}], "description": "A base class for TreeNode, providing:\n<ul>\n<li>Widget Lifecycle (initializer, renderUI, bindUI, syncUI, destructor)</li>\n<li>The node for the TreeView component</li>\n</ul>\nQuick Example:<br/>\n<pre><code>var instance = new A.TreeNode({\nboundingBox: ''\n}).render();\n</code></pre>\nCheck the list of <a href=\"TreeNode.html#configattributes\">Configuration Attributes</a> available for\nTreeNode."}], "namespace": "", "module": "aui-tree", "events": {"iconElChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "iconElChange", "description": "Fires when the value for the configuration attribute 'iconEl' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "hitAreaElChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "hitAreaElChange", "description": "Fires when the value for the configuration attribute 'hitAreaEl' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "prevSiblingChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "prevSiblingChange", "description": "Fires when the value for the configuration attribute 'prevSibling' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "labelElChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "labelElChange", "description": "Fires when the value for the configuration attribute 'labelEl' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "ownerTreeChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "ownerTreeChange", "description": "Fires when the value for the configuration attribute 'ownerTree' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "leafChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "leafChange", "description": "Fires when the value for the configuration attribute 'leaf' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "parentNodeChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "parentNodeChange", "description": "Fires when the value for the configuration attribute 'parentNode' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "labelChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "labelChange", "description": "Fires when the value for the configuration attribute 'label' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "nextSiblingChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "nextSiblingChange", "description": "Fires when the value for the configuration attribute 'nextSibling' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "draggableChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "draggableChange", "description": "Fires when the value for the configuration attribute 'draggable' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "alwaysShowHitAreaChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "alwaysShowHitAreaChange", "description": "Fires when the value for the configuration attribute 'alwaysShowHitArea' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "expandedChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "expandedChange", "description": "Fires when the value for the configuration attribute 'expanded' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "idChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "idChange", "description": "Fires when the value for the configuration attribute 'id' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "guessedname": "TreeNode", "methods": {"_syncTreeNodeBBId": {"description": "Set the <code>boundingBox</code> id.", "param": "{String} id", "protected": "", "params": [{"type": "String", "name": "id", "description": ""}], "guessedname": "_syncTreeNodeBBId", "guessedtype": "function"}, "_afterSetChildren": {"description": "Fires after set children.", "param": "{EventFacade} event", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "guessedname": "_afterSetChildren", "guessedtype": "function"}, "contains": {"return": {"type": "boolean", "description": ""}, "description": "Check if the current TreeNode contains the passed <code>node</code>.", "param": "{TreeNode} node", "params": [{"type": "TreeNode", "name": "node", "description": ""}], "guessedname": "contains", "guessedtype": "function"}, "_createNodeContainer": {"protected": "", "return": {"type": "Node", "description": ""}, "description": "Render the node container.", "guessedname": "_createNodeContainer", "guessedtype": "function"}, "syncUI": {"protected": "", "description": "Sync the TreeNode UI. Lifecycle.", "guessedname": "syncUI", "guessedtype": "function"}, "_syncHitArea": {"description": "Sync the hitarea UI.", "param": "{Array} children", "protected": "", "params": [{"type": "Array", "name": "children", "description": ""}], "guessedname": "_syncHitArea", "guessedtype": "function"}, "_expand": {"description": "Expand the current TreeNode.", "guessedname": "_expand", "guessedtype": "function"}, "_collapse": {"protected": "", "description": "Collapse the current TreeNode.", "guessedname": "_collapse", "guessedtype": "function"}, "isLeaf": {"return": {"type": "boolean", "description": ""}, "description": "Whether the current TreeNode is a leaf or not.", "guessedname": "isLeaf", "guessedtype": "function"}, "initializer": {"protected": "", "description": "Construction logic executed during TreeNode instantiation. Lifecycle.", "guessedname": "initializer", "guessedtype": "function"}, "_renderUI": {"protected": "", "description": "Create the DOM structure for the TreeNode. Lifecycle. Overloading\nprivate _renderUI, don't call this._renderBox method avoid render node on\nthe body.", "guessedname": "_renderUI", "guessedtype": "function"}, "isSelected": {"return": {"type": "boolean", "description": ""}, "description": "Whether the current TreeNode is selected or not.", "guessedname": "isSelected", "guessedtype": "function"}, "toggle": {"description": "Toggle the current TreeNode, <code>collapsed</code> or <code>expanded</code>.", "guessedname": "toggle", "guessedtype": "function"}, "getDepth": {"return": {"type": "Number", "description": ""}, "description": "Get the depth of the current TreeNode.", "guessedname": "getDepth", "guessedtype": "function"}, "_renderContentBox": {"protected": "", "return": {"type": "Node", "description": ""}, "description": "Render the <code>contentBox</code> node.", "guessedname": "_renderContentBox", "guessedtype": "function"}, "expand": {"description": "Expand the current TreeNode.", "guessedname": "expand", "guessedtype": "function"}, "bindUI": {"protected": "", "description": "Bind the events on the TreeNode UI. Lifecycle.", "guessedname": "bindUI", "guessedtype": "function"}, "_renderBoundingBox": {"protected": "", "return": {"type": "Node", "description": ""}, "description": "Render the <code>boundingBox</code> node.", "guessedname": "_renderBoundingBox", "guessedtype": "function"}, "renderUI": {"protected": "", "description": "Create the DOM structure for the TreeNode. Lifecycle.", "guessedname": "renderUI", "guessedtype": "function"}, "collapse": {"description": "Collapse the current TreeNode.", "guessedname": "collapse", "guessedtype": "function"}}, "extends": "TreeData", "superclass": "TreeData", "file": "aui-tree.js", "guessedtype": "property", "shortname": "TreeNode", "properties": {"TreeNode.ATTRS": {"type": "Object", "static": "", "description": "Static property used to define the default attribute\nconfiguration for the TreeNode.", "guessedname": "ATTRS", "guessedtype": "property"}, "BOUNDING_TEMPLATE": {"protected": "", "type": "String", "description": "Replaced BOUNDING_TEMPLATE with NODE_BOUNDING_TEMPLATE.", "guessedname": "BOUNDING_TEMPLATE", "guessedtype": "property"}, "TreeNode.NAME": {"type": "String", "static": "", "description": "Static property provides a string to identify the class.", "guessedname": "NAME", "guessedtype": "property"}, "A.TreeNode.nodeTypes": {"type": "Object", "description": "TreeNode types hash map.\n<pre><code>A.TreeNode.nodeTypes = {\ntask: A.TreeNodeTask,\ncheck: A.TreeNodeCheck,\nnode: A.TreeNode,\nio: A.TreeNodeIO\n};</code></pre>", "guessedname": "nodeTypes", "guessedtype": "property"}, "CONTENT_TEMPLATE": {"protected": "", "type": "String", "description": "Replaced CONTENT_TEMPLATE with NODE_CONTENT_TEMPLATE.", "guessedname": "CONTENT_TEMPLATE", "guessedtype": "property"}}, "description": "A base class for TreeNode, providing:\n<ul>\n<li>Widget Lifecycle (initializer, renderUI, bindUI, syncUI, destructor)</li>\n<li>The node for the TreeView component</li>\n</ul>\nQuick Example:<br/>\n<pre><code>var instance = new A.TreeNode({\nboundingBox: ''\n}).render();\n</code></pre>\nCheck the list of <a href=\"TreeNode.html#configattributes\">Configuration Attributes</a> available for\nTreeNode."}, "DataSchema.JSON": {"name": "DataSchema.JSON", "namespace": "", "module": "dataschema", "guessedname": "LANG", "methods": {"DataSchema.JSON.getPath": {"return": {"type": "String[]", "description": "Walkable path to data value."}, "description": "Utility function converts JSON locator strings into walkable paths", "param": "locator {String} JSON value locator.", "static": "", "guessedname": "getPath", "guessedtype": "function", "params": [{"type": "String", "name": "locator", "description": "  JSON value locator."}]}, "DataSchema.JSON.getLocationValue": {"return": {"type": "Object", "description": "Data value at location."}, "description": "Utility function to walk a path and return the value located there.", "param": "path {String[]} Locator path.", "static": "", "guessedname": "getLocationValue", "guessedtype": "function", "params": [{"type": "String[]", "name": "path", "description": "  Locator path."}, {"type": "String", "name": "data", "description": "  Data to traverse."}]}, "_parseMeta": {"return": {"type": "Object", "description": "Schema-parsed meta data."}, "description": "Parses results data according to schema", "param": "metaFields {Object} Metafields definitions.", "protected": "", "static": "", "guessedname": "_parseMeta", "guessedtype": "function", "params": [{"type": "Object", "name": "metaFields", "description": "  Metafields definitions."}, {"type": "Object", "name": "json_in", "description": "  JSON to parse."}, {"type": "Object", "name": "data_out", "description": "  In-progress parsed data to update."}]}, "_getFieldValues": {"return": {"type": "Object", "description": "Parsed data object."}, "description": "Get field data values out of list of full results", "param": "fields {Array} Fields to find.", "protected": "", "static": "", "guessedname": "_getFieldValues", "guessedtype": "function", "params": [{"type": "Array", "name": "fields", "description": "  Fields to find."}, {"type": "Array", "name": "array_in", "description": "  Results to parse."}, {"type": "Object", "name": "data_out", "description": "  In-progress parsed data to update."}]}, "_parseResults": {"return": {"type": "Object", "description": "Parsed data object."}, "description": "Schema-parsed list of results from full data", "param": "schema {Object} Schema to parse against.", "protected": "", "static": "", "guessedname": "_parseResults", "guessedtype": "function", "params": [{"type": "Object", "name": "schema", "description": "  Schema to parse against."}, {"type": "Object", "name": "json_in", "description": "  JSON to parse."}, {"type": "Object", "name": "data_out", "description": "  In-progress parsed data to update."}]}, "apply": {"return": {"type": "Object", "description": "Schema-parsed data."}, "description": "Applies a given schema to given JSON data.", "param": "schema {Object} Schema to apply.", "static": "", "guessedname": "apply", "guessedtype": "function", "params": [{"type": "Object", "name": "schema", "description": "  Schema to apply."}, {"type": "Object", "name": "data", "description": "  JSON data."}]}}, "static": "", "superclass": "DataSchema.Base", "file": "dataschema.js", "guessedtype": "property", "extends": "DataSchema.Base", "shortname": "DataSchema.JSON", "description": "JSON subclass for the DataSchema Utility."}, "Assert.ComparisonFailure": {"name": "Assert.ComparisonFailure", "constructors": [{"params": [{"type": "String", "name": "message", "description": " The message to display when the error occurs."}, {"type": "Object", "name": "expected", "description": " The expected value."}, {"type": "Object", "name": "actual", "description": " The actual value that caused the assertion to fail."}], "description": "ComparisonFailure is subclass of Error that is thrown whenever\na comparison between two values fails. It provides mechanisms to retrieve\nboth the expected and actual value."}], "namespace": "Assert", "module": "test", "guessedname": "ComparisonFailure", "methods": {"toString": {"return": {"type": "String", "description": "A string describing the error."}, "description": "Returns a fully formatted error for an assertion failure. This message\nprovides information about the expected and actual values.", "guessedname": "getMessage", "guessedtype": "function"}}, "extends": "Assert.Error", "superclass": "Assert.Error", "file": "test.js", "guessedtype": "function", "shortname": "ComparisonFailure", "properties": {"expected": {"type": "Object", "description": "The expected value.", "guessedname": "expected", "guessedtype": "property"}, "actual": {"type": "Object", "description": "The actual value.", "guessedname": "actual", "guessedtype": "property"}, "name": {"type": "String", "description": "The name of the error that occurred.", "guessedname": "name", "guessedtype": "property"}}, "description": "ComparisonFailure is subclass of Error that is thrown whenever\na comparison between two values fails. It provides mechanisms to retrieve\nboth the expected and actual value."}, "Dialog": {"name": "Dialog", "configs": {"draggable": {"default": "true", "type": "boolean", "description": "Boolean specifying if the Panel should be draggable.", "guessedname": "draggable", "guessedtype": "property"}, "dragInstance": {"default": "null", "type": "A.DD.Drag", "description": "Stores the Drag instance for the <code>A.DD.Drag</code> used by\nthis Dialog.", "guessedname": "dragInstance", "guessedtype": "property"}, "resizable": {"default": "true", "type": "boolean", "description": "Boolean specifying if the Panel should be resizable.", "guessedname": "resizable", "guessedtype": "property"}, "destroyOnClose": {"default": "false", "type": "boolean", "description": "Invoke the <a href=\"Dialog.html#method_destroy\">destroy</a>\nmethod when the dialog is closed (i.e., remove the Dialog\n<code>boundingBox</code> from the body, purge events etc).", "guessedname": "destroyOnClose", "guessedtype": "property"}, "resizableInstance": {"default": "null", "type": "Resize", "description": "Stores the Drag instance for the\n<a href=\"Resize.html\">Resize</a> used by this Dialog.", "guessedname": "resizableInstance", "guessedtype": "property"}, "buttons": {"default": "[]", "type": "Array", "description": "<p>Array of object literals, each containing a set of properties\ndefining a button to be appended into the Dialog's footer. Each\nbutton object in the buttons array can have two properties:</p>\n<dl>\n<dt>text:</dt>\n<dd>\nThe text that will display on the face of the button. The text can include\nHTML, as long as it is compliant with HTML Button specifications.\n</dd>\n<dt>handler:</dt>\n<dd>\nA reference to a function that should fire when the button is clicked.\n(In this case scope of this function is always its Dialog instance.)\n</dd>\n</dl>", "guessedname": "buttons", "guessedtype": "property"}, "modal": {"default": "false", "type": "boolean", "description": "True if the Panel should be displayed in a modal fashion,\nautomatically creating a transparent mask over the document that\nwill not be removed until the Dialog is dismissed. Uses\n<a href=\"OverlayMask.html\">OverlayMask</a>.", "guessedname": "modal", "guessedtype": "property"}, "bodyContent": {"default": "HTMLTextNode", "type": "Node | String", "description": "See <a href=\"WidgetStdMod.html#config_bodyContent\">WidgetStdMod bodyContent</a>.", "guessedname": "bodyContent", "guessedtype": "property"}, "close": {"default": "true", "type": "boolean", "description": "If <code>true</code> the close icon will be displayed on the\nDialog header.", "guessedname": "close", "guessedtype": "property"}, "constrain2view": {"type": "Object", "description": "Will attempt to constrain the dialog to the boundaries of the\nviewport region.", "guessedname": "constrain2view", "guessedtype": "property"}, "stack": {"default": "true", "type": "boolean", "description": "If <code>true</code> give stacking habilities to the Dialog.", "guessedname": "stack", "guessedtype": "property"}}, "constructors": [{"params": [{"type": "Object", "name": "config", "description": "  Object literal specifying widget configuration properties."}], "description": "<p><img src=\"assets/images/aui-dialog/main.png\"/></p>\nA base class for Dialog, providing:\n<ul>\n<li>Widget Lifecycle (initializer, renderUI, bindUI, syncUI, destructor)</li>\n<li>Emulate the behavior of an dialog window using a floating, draggable HTML element</li>\n<li>Interface for easily gathering information from the user without leaving the underlying page context</li>\n<li>Using the <a href=\"IOPlugin.html\">IOPlugin</a>, supports the submission of form data either through an XMLHttpRequest, through a normal form submission, or through a fully script-based response</li>\n</ul>\nQuick Example:<br/>\n<pre><code>var instance = new A.Dialog({\nbodyContent: 'Dialog body',\ncentered: true,\nconstrain2view: true,\ndestroyOnClose: true,\ndraggable: true,\nheight: 250,\nresizable: false,\nstack: true,\ntitle: 'Dialog title',\nwidth: 500\n}).render();\n</code></pre>\nCheck the list of <a href=\"Dialog.html#configattributes\">Configuration Attributes</a> available for\nDialog."}], "namespace": "", "module": "aui-dialog", "events": {"constrain2viewChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "constrain2viewChange", "description": "Fires when the value for the configuration attribute 'constrain2view' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "buttonsChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "buttonsChange", "description": "Fires when the value for the configuration attribute 'buttons' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "destroyOnCloseChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "destroyOnCloseChange", "description": "Fires when the value for the configuration attribute 'destroyOnClose' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "modalChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "modalChange", "description": "Fires when the value for the configuration attribute 'modal' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "resizableChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "resizableChange", "description": "Fires when the value for the configuration attribute 'resizable' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "bodyContentChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "bodyContentChange", "description": "Fires when the value for the configuration attribute 'bodyContent' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "dragInstanceChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "dragInstanceChange", "description": "Fires when the value for the configuration attribute 'dragInstance' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "closeChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "closeChange", "description": "Fires when the value for the configuration attribute 'close' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "draggableChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "draggableChange", "description": "Fires when the value for the configuration attribute 'draggable' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "stackChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "stackChange", "description": "Fires when the value for the configuration attribute 'stack' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "resizableInstanceChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "resizableInstanceChange", "description": "Fires when the value for the configuration attribute 'resizableInstance' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "guessedname": "Dialog", "methods": {"": {"description": "Fires after the value of the\n<a href=\"Dialog.html#config_constrain2view\">constrain2view</a> attribute change.", "param": "{EventFacade} event", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "guessedname": "_afterConstrain2viewChange", "guessedtype": "function"}, "_setResizable": {"return": {"type": "boolean", "description": ""}, "description": "Setter for the <a href=\"Dialog.html#config_resizable\">resizable</a>\nattribute.", "param": "{boolean} value", "protected": "", "params": [{"type": "boolean", "name": "value", "description": ""}], "guessedname": "_setResizable", "guessedtype": "function"}, "_afterRenderer": {"description": "Fires after the render phase. Invoke\n<a href=\"Dialog.html#method__initButtons\">_initButtons</a>.", "param": "{EventFacade} event", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "guessedname": "_afterRenderer", "guessedtype": "function"}, "_afterSetVisible": {"description": "Fires after the value of the\n<a href=\"Overlay.html#config_visible\">visible</a> attribute change.", "param": "{EventFacade} event", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "guessedname": "_afterSetVisible", "guessedtype": "function"}, "_setDraggable": {"return": {"type": "Object", "description": ""}, "description": "Setter for the <a href=\"Dialog.html#config_draggable\">draggable</a>\nattributte. Initialize the A.DD.Drag on the Dialog.", "param": "{Object} value Object to be passed to the A.DD.Drag constructor.", "protected": "", "params": [{"type": "Object", "name": "value", "description": " Object to be passed to the A.DD.Drag constructor."}], "guessedname": "_setDraggable", "guessedtype": "function"}, "_initButtons": {"protected": "", "description": "Render the buttons on the footer of the Dialog.", "guessedname": "_initButtons", "guessedtype": "function"}, "_setModal": {"return": {"type": "boolean", "description": ""}, "description": "Setter for the <a href=\"Dialog.html#config_modal\">modal</a> attribute.", "param": "{boolean} value", "protected": "", "params": [{"type": "boolean", "name": "value", "description": ""}], "guessedname": "_setModal", "guessedtype": "function"}, "destructor": {"protected": "", "description": "Descructor lifecycle implementation for the Dialog class.\nPurges events attached to the node (and all child nodes).", "guessedname": "destructor", "guessedtype": "function"}, "_bindLazyComponents": {"private": "", "description": "Bind a <code>mouseenter</code> listener to the <code>boundingBox</code>\nto invoke the\n<a href=\"Dialog.html#config__initLazyComponents\">_initLazyComponents</a>.\nPerformance reasons.", "guessedname": "_bindLazyComponents", "guessedtype": "function"}, "_setStack": {"return": {"type": "boolean", "description": ""}, "description": "Setter for the <a href=\"Dialog.html#config_stack\">stack</a>\nattribute.", "param": "{boolean} value", "protected": "", "params": [{"type": "boolean", "name": "value", "description": ""}], "guessedname": "_setStack", "guessedtype": "function"}, "bindUI": {"protected": "", "description": "Bind the events on the Dialog UI. Lifecycle.", "guessedname": "bindUI", "guessedtype": "function"}, "_setConstrain2view": {"return": {"type": "Object", "description": ""}, "description": "Setter for the <a href=\"Dialog.html#config_constrain2view\">constrain2view</a>\nattributte. Plugs or unplugs the DDConstrained plugin on the drag instance.", "param": "{Object} value Object to be passed to the A.DD.Drag constructor.", "protected": "", "params": [{"type": "Object", "name": "value", "description": " Object to be passed to the A.DD.Drag constructor."}], "guessedname": "_setConstrain2view", "guessedtype": "function"}, "close": {"description": "Fires the close event to close the Dialog.", "guessedname": "close", "guessedtype": "function"}, "initializer": {"protected": "", "description": "Construction logic executed during Dialog instantiation. Lifecycle.", "guessedname": "initializer", "guessedtype": "function"}, "_initLazyComponents": {"private": "", "description": "Forces <code>lazyAdd:true</code> attributtes invoke the setter methods.", "guessedname": "_initLazyComponents", "guessedtype": "function"}, "_handleEvent": {"description": "Handles the close event logic.", "param": "{EventFacade} event close event facade", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": " close event facade"}], "guessedname": "_close", "guessedtype": "function"}}, "extends": "Panel", "superclass": "Panel", "file": "aui-dialog.js", "guessedtype": "function", "shortname": "Dialog", "properties": {"Dialog.NAME": {"type": "String", "static": "", "description": "Static property provides a string to identify the class.", "guessedname": "NAME", "guessedtype": "property"}, "Dialog.ATTRS": {"type": "Object", "static": "", "description": "Static property used to define the default attribute\nconfiguration for the Dialog.", "guessedname": "ATTRS", "guessedtype": "property"}}, "description": "<p><img src=\"assets/images/aui-dialog/main.png\"/></p>\nA base class for Dialog, providing:\n<ul>\n<li>Widget Lifecycle (initializer, renderUI, bindUI, syncUI, destructor)</li>\n<li>Emulate the behavior of an dialog window using a floating, draggable HTML element</li>\n<li>Interface for easily gathering information from the user without leaving the underlying page context</li>\n<li>Using the <a href=\"IOPlugin.html\">IOPlugin</a>, supports the submission of form data either through an XMLHttpRequest, through a normal form submission, or through a fully script-based response</li>\n</ul>\nQuick Example:<br/>\n<pre><code>var instance = new A.Dialog({\nbodyContent: 'Dialog body',\ncentered: true,\nconstrain2view: true,\ndestroyOnClose: true,\ndraggable: true,\nheight: 250,\nresizable: false,\nstack: true,\ntitle: 'Dialog title',\nwidth: 500\n}).render();\n</code></pre>\nCheck the list of <a href=\"Dialog.html#configattributes\">Configuration Attributes</a> available for\nDialog."}, "Easing": {"name": "Easing", "namespace": "", "module": "anim", "guessedname": "Easing", "methods": {"easeIn": {"return": {"type": "Number", "description": "The computed value for the current animation frame"}, "description": "Begins slowly and accelerates towards end. (quadratic)", "param": "{Number} t Time value used to compute current value", "params": [{"type": "Number", "name": "t", "description": " Time value used to compute current value"}, {"type": "Number", "name": "b", "description": " Starting value"}, {"type": "Number", "name": "c", "description": " Delta between start and end values"}, {"type": "Number", "name": "d", "description": " Total length of animation"}], "guessedname": "easeIn", "guessedtype": "function"}, "easeInStrong": {"return": {"type": "Number", "description": "The computed value for the current animation frame"}, "description": "Begins slowly and accelerates towards end. (quartic)", "param": "{Number} t Time value used to compute current value", "params": [{"type": "Number", "name": "t", "description": " Time value used to compute current value"}, {"type": "Number", "name": "b", "description": " Starting value"}, {"type": "Number", "name": "c", "description": " Delta between start and end values"}, {"type": "Number", "name": "d", "description": " Total length of animation"}], "guessedname": "easeInStrong", "guessedtype": "function"}, "bounceBoth": {"return": {"type": "Number", "description": "The computed value for the current animation frame"}, "description": "Bounces off start and end.", "param": "{Number} t Time value used to compute current value", "params": [{"type": "Number", "name": "t", "description": " Time value used to compute current value"}, {"type": "Number", "name": "b", "description": " Starting value"}, {"type": "Number", "name": "c", "description": " Delta between start and end values"}, {"type": "Number", "name": "d", "description": " Total length of animation"}], "guessedname": "bounceBoth", "guessedtype": "function"}, "backOut": {"return": {"type": "Number", "description": "The computed value for the current animation frame"}, "description": "Overshoots end, then reverses and comes back to end.", "param": "{Number} t Time value used to compute current value", "params": [{"type": "Number", "name": "t", "description": " Time value used to compute current value"}, {"type": "Number", "name": "b", "description": " Starting value"}, {"type": "Number", "name": "c", "description": " Delta between start and end values"}, {"type": "Number", "name": "d", "description": " Total length of animation"}, {"type": "Number", "name": "s", "description": " Overshoot (optional)"}], "guessedname": "backOut", "guessedtype": "function"}, "elasticBoth": {"return": {"type": "Number", "description": "The computed value for the current animation frame"}, "description": "Snap both elastic effect.", "param": "{Number} t Time value used to compute current value", "params": [{"type": "Number", "name": "t", "description": " Time value used to compute current value"}, {"type": "Number", "name": "b", "description": " Starting value"}, {"type": "Number", "name": "c", "description": " Delta between start and end values"}, {"type": "Number", "name": "d", "description": " Total length of animation"}, {"type": "Number", "name": "a", "description": " Amplitude (optional)"}, {"type": "Number", "name": "p", "description": " Period (optional)"}], "guessedname": "elasticBoth", "guessedtype": "function"}, "elasticOut": {"return": {"type": "Number", "description": "The computed value for the current animation frame"}, "description": "Snap out elastic effect.", "param": "{Number} t Time value used to compute current value", "params": [{"type": "Number", "name": "t", "description": " Time value used to compute current value"}, {"type": "Number", "name": "b", "description": " Starting value"}, {"type": "Number", "name": "c", "description": " Delta between start and end values"}, {"type": "Number", "name": "d", "description": " Total length of animation"}, {"type": "Number", "name": "a", "description": " Amplitude (optional)"}, {"type": "Number", "name": "p", "description": " Period (optional)"}], "guessedname": "elasticOut", "guessedtype": "function"}, "bounceOut": {"return": {"type": "Number", "description": "The computed value for the current animation frame"}, "description": "Bounces off end.", "param": "{Number} t Time value used to compute current value", "params": [{"type": "Number", "name": "t", "description": " Time value used to compute current value"}, {"type": "Number", "name": "b", "description": " Starting value"}, {"type": "Number", "name": "c", "description": " Delta between start and end values"}, {"type": "Number", "name": "d", "description": " Total length of animation"}], "guessedname": "bounceOut", "guessedtype": "function"}, "backBoth": {"return": {"type": "Number", "description": "The computed value for the current animation frame"}, "description": "Backtracks slightly, then reverses direction, overshoots end, \nthen reverses and comes back to end.", "param": "{Number} t Time value used to compute current value", "params": [{"type": "Number", "name": "t", "description": " Time value used to compute current value"}, {"type": "Number", "name": "b", "description": " Starting value"}, {"type": "Number", "name": "c", "description": " Delta between start and end values"}, {"type": "Number", "name": "d", "description": " Total length of animation"}, {"type": "Number", "name": "s", "description": " Overshoot (optional)"}], "guessedname": "backBoth", "guessedtype": "function"}, "easeBoth": {"return": {"type": "Number", "description": "The computed value for the current animation frame"}, "description": "Begins slowly and decelerates towards end. (quadratic)", "param": "{Number} t Time value used to compute current value", "params": [{"type": "Number", "name": "t", "description": " Time value used to compute current value"}, {"type": "Number", "name": "b", "description": " Starting value"}, {"type": "Number", "name": "c", "description": " Delta between start and end values"}, {"type": "Number", "name": "d", "description": " Total length of animation"}], "guessedname": "easeBoth", "guessedtype": "function"}, "bounceIn": {"return": {"type": "Number", "description": "The computed value for the current animation frame"}, "description": "Bounce off of start.", "param": "{Number} t Time value used to compute current value", "params": [{"type": "Number", "name": "t", "description": " Time value used to compute current value"}, {"type": "Number", "name": "b", "description": " Starting value"}, {"type": "Number", "name": "c", "description": " Delta between start and end values"}, {"type": "Number", "name": "d", "description": " Total length of animation"}], "guessedname": "bounceIn", "guessedtype": "function"}, "easeOutStrong": {"return": {"type": "Number", "description": "The computed value for the current animation frame"}, "description": "Begins quickly and decelerates towards end.  (quartic)", "param": "{Number} t Time value used to compute current value", "params": [{"type": "Number", "name": "t", "description": " Time value used to compute current value"}, {"type": "Number", "name": "b", "description": " Starting value"}, {"type": "Number", "name": "c", "description": " Delta between start and end values"}, {"type": "Number", "name": "d", "description": " Total length of animation"}], "guessedname": "easeOutStrong", "guessedtype": "function"}, "easeNone": {"return": {"type": "Number", "description": "The computed value for the current animation frame"}, "description": "Uniform speed between points.", "param": "{Number} t Time value used to compute current value", "params": [{"type": "Number", "name": "t", "description": " Time value used to compute current value"}, {"type": "Number", "name": "b", "description": " Starting value"}, {"type": "Number", "name": "c", "description": " Delta between start and end values"}, {"type": "Number", "name": "d", "description": " Total length of animation"}], "guessedname": "easeNone", "guessedtype": "function"}, "elasticIn": {"return": {"type": "Number", "description": "The computed value for the current animation frame"}, "description": "Snap in elastic effect.", "param": "{Number} t Time value used to compute current value", "params": [{"type": "Number", "name": "t", "description": " Time value used to compute current value"}, {"type": "Number", "name": "b", "description": " Starting value"}, {"type": "Number", "name": "c", "description": " Delta between start and end values"}, {"type": "Number", "name": "d", "description": " Total length of animation"}, {"type": "Number", "name": "a", "description": " Amplitude (optional)"}, {"type": "Number", "name": "p", "description": " Period (optional)"}], "guessedname": "elasticIn", "guessedtype": "function"}, "easeBothStrong": {"return": {"type": "Number", "description": "The computed value for the current animation frame"}, "description": "Begins slowly and decelerates towards end. (quartic)", "param": "{Number} t Time value used to compute current value", "params": [{"type": "Number", "name": "t", "description": " Time value used to compute current value"}, {"type": "Number", "name": "b", "description": " Starting value"}, {"type": "Number", "name": "c", "description": " Delta between start and end values"}, {"type": "Number", "name": "d", "description": " Total length of animation"}], "guessedname": "easeBothStrong", "guessedtype": "function"}, "easeOut": {"return": {"type": "Number", "description": "The computed value for the current animation frame"}, "description": "Begins quickly and decelerates towards end.  (quadratic)", "param": "{Number} t Time value used to compute current value", "params": [{"type": "Number", "name": "t", "description": " Time value used to compute current value"}, {"type": "Number", "name": "b", "description": " Starting value"}, {"type": "Number", "name": "c", "description": " Delta between start and end values"}, {"type": "Number", "name": "d", "description": " Total length of animation"}], "guessedname": "easeOut", "guessedtype": "function"}, "backIn": {"return": {"type": "Number", "description": "The computed value for the current animation frame"}, "description": "Backtracks slightly, then reverses direction and moves to end.", "param": "{Number} t Time value used to compute current value", "params": [{"type": "Number", "name": "t", "description": " Time value used to compute current value"}, {"type": "Number", "name": "b", "description": " Starting value"}, {"type": "Number", "name": "c", "description": " Delta between start and end values"}, {"type": "Number", "name": "d", "description": " Total length of animation"}, {"type": "Number", "name": "s", "description": " Overshoot (optional)"}], "guessedname": "backIn", "guessedtype": "function"}}, "file": "anim.js", "guessedtype": "property", "shortname": "Easing", "description": "The easing module provides methods for customizing\nhow an animation behaves during each run."}, "Plugin.Drag": {"name": "Plugin.Drag", "constructors": [{"description": "Simple Drag plugin that can be attached to a Node via the plug method."}], "namespace": "Plugin", "module": "dd", "guessedname": "Drag", "extends": "DD.Drag", "superclass": "DD.Drag", "file": "dd.js", "guessedtype": "function", "shortname": "Drag", "properties": {"NS": {"type": "{String}", "description": "The Drag instance will be placed on the Node instance under the dd namespace. It can be accessed via Node.dd;", "guessedname": "NS", "guessedtype": "property"}, "NAME": {"type": "{String}", "description": "dd-plugin", "guessedname": "NAME", "guessedtype": "property"}}, "description": "Simple Drag plugin that can be attached to a Node via the plug method."}, "History": {"name": "History", "constructors": [{"description": "This class represents an instance of the browser history utility."}], "namespace": "", "module": "history", "methods": {"getBookmarkedState": {"return": {"type": "string", "description": "The bookmarked state of the specified module."}, "description": "Returns the state of a module according to the URL fragment\nidentifier. This method is useful to initialize your modules\nif your application was bookmarked from a particular state.", "param": "{string} moduleId Non-empty string representing your module.", "params": [{"type": "string", "name": "moduleId", "description": " Non-empty string representing your module."}], "guessedname": "getBookmarkedState", "guessedtype": "function", "public": ""}, "_updateIFrame": {"return": {"type": "boolean", "description": "true if successful. false otherwise."}, "description": "Update the IFrame with our new state.", "private": ""}, "_handleFQStateChange": {"param": "{string} fqstate fully qualified state", "params": [{"type": "string", "name": "fqstate", "description": " fully qualified state"}], "description": "Sets the new currentState attribute of all modules depending on the new fully\nqualified state. Also notifies the modules which current state has changed.", "private": ""}, "getCurrentState": {"return": {"type": "string", "description": "The current state of the specified module."}, "description": "Returns the current state of the specified module.", "param": "{string} moduleId Non-empty string representing your module.", "params": [{"type": "string", "name": "moduleId", "description": " Non-empty string representing your module."}], "guessedname": "getCurrentState", "guessedtype": "function", "public": ""}, "navigate": {"return": {"type": "boolean", "description": "Indicates whether the new state was successfully added to the history."}, "description": "Stores a new entry in the browser history by changing the state of a registered module.", "param": "{string} module Non-empty string representing your module.", "params": [{"type": "string", "name": "module", "description": " Non-empty string representing your module."}, {"type": "string", "name": "state", "description": " String representing the new state of the specified module."}], "guessedname": "navigate", "guessedtype": "function", "public": ""}, "_initialize": {"description": "Finish up the initialization of the browser utility library.", "private": ""}, "register": {"return": {"type": "History.Module", "description": "The newly registered module"}, "description": "Registers a new module.", "param": "{string} moduleId Non-empty string uniquely identifying the\nmodule you wish to register.", "params": [{"type": "string", "name": "moduleId", "description": " Non-empty string uniquely identifying the\nmodule you wish to register."}, {"type": "string", "name": "initialState", "description": " The initial state of the specified\nmodule corresponding to its earliest history entry."}], "guessedname": "register", "guessedtype": "function"}, "_checkIframeLoaded": {"description": "Periodically checks whether our internal IFrame is ready to be used", "private": ""}, "initialize": {"description": "Initializes the Browser History Manager. Call this method\nfrom a script block located right after the opening body tag.", "param": "{string|HTML Element} stateField <input type=\"hidden\"> used\nto store application states. Must be in the static markup.", "params": [{"type": "string|HTML Element", "name": "stateField", "description": " <input type=\"hidden\"> used\nto store application states. Must be in the static markup."}, {"type": "string|HTML Element", "name": "historyIFrame", "description": " IFrame used to store\nthe history (only required for IE6/7)"}], "guessedname": "initialize", "guessedtype": "function", "public": ""}, "_storeStates": {"description": "Stores the initial state and current state for all registered modules\nin the (hidden) form field specified during initialization.", "private": ""}, "getQueryStringParameter": {"return": {"type": "string", "description": "The value of the specified parameter, or null."}, "description": "Returns the value of the specified query string parameter.\nThis method is not used internally by the Browser History Manager.\nHowever, it is provided here as a helper since many applications\nusing the Browser History Manager will want to read the value of\nurl parameters to initialize themselves.", "deprecated": "Use Y.QueryString.parse() in the querystring module.\nThis will be removed in 3.2.0.", "param": "{string} paramName Name of the parameter we want to look up.", "params": [{"type": "string", "name": "paramName", "description": " Name of the parameter we want to look up."}, {"type": "string", "name": "queryString", "description": " Optional URL to look at. If not specified,\nthis method uses the URL in the address bar."}], "guessedname": "getQueryStringParameter", "guessedtype": "function", "public": ""}, "_getHash": {"return": {"type": "string", "description": "The hash portion of the document's location"}, "description": "Returns the portion of the hash after the '#' symbol.", "private": ""}, "multiNavigate": {"return": {"type": "boolean", "description": "Indicates whether the new state was successfully added to the history."}, "description": "Stores a new entry in the browser history by changing the state\nof several registered modules in one atomic operation.", "param": "{object} states Associative array of module-state pairs to set simultaneously.", "params": [{"type": "object", "name": "states", "description": " Associative array of module-state pairs to set simultaneously."}], "guessedname": "multiNavigate", "guessedtype": "function", "public": ""}}, "file": "history.js", "shortname": "History", "events": {"history:moduleStateChange": {"type": "Event.Custom", "description": "Fires when the state of a history module object has changed", "guessedname": "EV_HISTORY_MODULE_STATE_CHANGE", "guessedtype": "property"}, "history:ready": {"type": "Event.Custom", "description": "Fires when the browser history utility is ready", "guessedname": "EV_HISTORY_READY", "guessedtype": "property"}, "history:globalStateChange": {"type": "Event.Custom", "description": "Fires when the global state of the page has changed (that is,\nwhen the state of at least one browser history module has changed)", "guessedname": "EV_HISTORY_GLOBAL_STATE_CHANGE", "guessedtype": "property"}}, "description": "This class represents an instance of the browser history utility."}, "Plugin.Host": {"name": "Plugin.Host", "namespace": "", "module": "pluginhost", "guessedname": "L", "methods": {"plug": {"return": {"type": "Base", "description": "A reference to the host object"}, "description": "Adds a plugin to the host object. This will instantiate the \nplugin and attach it to the configured namespace on the host object.", "chainable": "", "param": "p {Function | Object |Array} Accepts the plugin class, or an \nobject with a \"fn\" property specifying the plugin class and \na \"cfg\" property specifying the configuration for the Plugin.\n<p>\nAdditionally an Array can also be passed in, with the above function or \nobject values, allowing the user to add multiple plugins in a single call.\n</p>", "params": [{"type": "Function | Object |Array", "name": "p", "description": "  Accepts the plugin class, or an \nobject with a \"fn\" property specifying the plugin class and \na \"cfg\" property specifying the configuration for the Plugin.\n<p>\nAdditionally an Array can also be passed in, with the above function or \nobject values, allowing the user to add multiple plugins in a single call.\n</p>"}, {"type": "", "name": "config", "description": " (Optional) If the first argument is the plugin class, the second argument\ncan be the configuration for the plugin."}], "guessedname": "plug", "guessedtype": "function"}, "hasPlugin": {"return": {"type": "boolean", "description": "returns true, if the plugin has been plugged into this host, false otherwise."}, "description": "Determines if a plugin has plugged into this host.", "param": "{String} ns The plugin's namespace", "params": [{"type": "String", "name": "ns", "description": " The plugin's namespace"}], "guessedname": "hasPlugin", "guessedtype": "function"}, "_destroyPlugins": {"private": "", "description": "Unplugs and destroys all plugins on the host", "guessedname": "_destroyPlugins", "guessedtype": "function"}, "unplug": {"return": {"type": "Base", "description": "A reference to the host object"}, "description": "Removes a plugin from the host object. This will destroy the \nplugin instance and delete the namepsace from the host object.", "chainable": "", "param": "{String | Function} plugin The namespace of the plugin, or the plugin class with the static NS namespace property defined. If not provided,\nall registered plugins are unplugged.", "params": [{"type": "String | Function", "name": "plugin", "description": " The namespace of the plugin, or the plugin class with the static NS namespace property defined. If not provided,\nall registered plugins are unplugged."}], "guessedname": "unplug", "guessedtype": "function"}, "_unplug": {"description": "Unplugs and destroys a plugin already instantiated with the host.", "param": "{String | Function} plugin The namespace for the plugin, or a plugin class with the static NS property defined.", "params": [{"type": "String | Function", "name": "plugin", "description": " The namespace for the plugin, or a plugin class with the static NS property defined."}], "private": "", "guessedname": "_unplug", "guessedtype": "function"}, "Plugin.Host.unplug": {"description": "Unregisters any class level plugins which have been registered by the host class, or any\nother class in the hierarchy.", "param": "{Function} hostClass The host class from which to unregister the plugins", "static": "", "guessedname": "unplug", "guessedtype": "function", "params": [{"type": "Function", "name": "hostClass", "description": " The host class from which to unregister the plugins"}, {"type": "Function | Array", "name": "plugin", "description": " The plugin class, or an array of plugin classes"}]}, "Plugin.Host.plug": {"description": "Registers plugins to be instantiated at the class level (plugins \nwhich should be plugged into every instance of the class by default).", "param": "{Function} hostClass The host class on which to register the plugins", "static": "", "guessedname": "plug", "guessedtype": "function", "params": [{"type": "Function", "name": "hostClass", "description": " The host class on which to register the plugins"}, {"type": "Function | Array", "name": "plugin", "description": " Either the plugin class, an array of plugin classes or an array of objects (with fn and cfg properties defined)"}, {"type": "Object", "name": "config", "description": " (Optional) If plugin is the plugin class, the configuration for the plugin"}]}, "_plug": {"description": "Private method used to instantiate and attach plugins to the host", "param": "{Function} PluginClass The plugin class to instantiate", "params": [{"type": "Function", "name": "PluginClass", "description": " The plugin class to instantiate"}, {"type": "Object", "name": "config", "description": " The configuration object for the plugin"}], "private": "", "guessedname": "_plug", "guessedtype": "function"}, "_initPlugins": {"description": "Initializes static plugins registered on the host (using the\nBase.plug static method) and any plugins passed to the \ninstance through the \"plugins\" configuration property.", "param": "{Config} config The configuration object with property name/value pairs.", "params": [{"type": "Config", "name": "config", "description": " The configuration object with property name/value pairs."}], "private": "", "guessedname": "_initPlugins", "guessedtype": "function"}}, "file": "pluginhost.js", "guessedtype": "property", "shortname": "Plugin.Host", "description": "<p>\nAn augmentable class, which provides the augmented class with the ability to host plugins.\nIt adds <a href=\"#method_plug\">plug</a> and <a href=\"#method_unplug\">unplug</a> methods to the augmented class, which can \nbe used to add or remove plugins from instances of the class.\n</p>\n<p>Plugins can also be added through the constructor configuration object passed to the host class' constructor using\nthe \"plugins\" property. Supported values for the \"plugins\" property are those defined by the <a href=\"#method_plug\">plug</a> method. \nFor example the following code would add the AnimPlugin and IOPlugin to Overlay (the plugin host):\n<xmp>\nvar o = new Overlay({plugins: [ AnimPlugin, {fn:IOPlugin, cfg:{section:\"header\"}}]});\n</xmp>\n</p>\n<p>\nPlug.Host's protected <a href=\"#method_initPlugins\">_initPlugins</a> and <a href=\"#method_destroyPlugins\">_destroyPlugins</a> \nmethods should be invoked by the host class at the appropriate point in the host's lifecyle.  \n</p>"}, "Plugin.DDNodeScroll": {"properties": {"NS": {"description": "The NodeScroll instance will be placed on the Drag instance under the nodescroll namespace.", "default": "nodescroll", "readonly": "", "protected": "", "static": "", "guessedname": "NAME", "guessedtype": "property", "type": "{String}"}}, "name": "Plugin.DDNodeScroll", "constructors": [{"description": "Extends the Scroll class to make a parent node scroll while dragging."}], "namespace": "Plugin", "module": "dd", "events": {"nodeChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "nodeChange", "description": "Fires when the value for the configuration attribute 'node' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "guessedname": "NS", "extends": "DD.Scroll", "superclass": "DD.Scroll", "file": "dd.js", "guessedtype": "function", "shortname": "DDNodeScroll", "configs": {"node": {"type": "Node", "description": "The node we want to scroll. Used to set the internal parentScroll attribute.", "guessedname": "node", "guessedtype": "property"}}, "description": "Extends the Scroll class to make a parent node scroll while dragging."}, "ImageGallery": {"name": "ImageGallery", "configs": {"paginator": {"default": "<a href=\"Paginator.html\">Paginator</a> configuration Object.", "type": "Object", "description": "<a href=\"Paginator.html\">Paginator</a> configuration Object. The\n<code>Paginator</code> handles the thumbnails control.", "guessedname": "paginator", "guessedtype": "property"}, "paused": {"default": "false", "type": "boolean", "description": "If <code>true</code> the slide show is paused.", "guessedname": "paused", "guessedtype": "property"}, "pausedLabel": {"default": "''", "type": "String", "description": "Label to display when the slide show is paused.", "guessedname": "pausedLabel", "guessedtype": "property"}, "showPlayer": {"default": "true", "type": "boolean", "description": "Show the player controls (i.e., pause and show buttons).", "guessedname": "showPlayer", "guessedtype": "property"}, "useOriginalImage": {"default": "false", "type": "boolean", "description": "If <code>true</code> will use the original image as thumbnails.", "guessedname": "useOriginalImage", "guessedtype": "property"}, "playing": {"default": "false", "type": "boolean", "description": "If <code>true</code> the slide show is playing.", "guessedname": "playing", "guessedtype": "property"}, "delay": {"default": "7000", "type": "Number", "description": "Delay in milliseconds to change to the next image.", "guessedname": "delay", "guessedtype": "property"}, "playingLabel": {"default": "'(Playing)'", "type": "String", "description": "Label to display when the slide show is playing.", "guessedname": "playingLabel", "guessedtype": "property"}, "repeat": {"default": "true", "type": "boolean", "description": "Restart the navigation when reach the last element.", "guessedname": "repeat", "guessedtype": "property"}, "paginatorInstance": {"default": "null", "type": "Paginator", "description": "Stores the <a href=\"Paginator.html\">Paginator</a> instance.", "guessedname": "paginatorInstance", "guessedtype": "property"}, "paginatorEl": {"description": "Element which contains the <a href=\"Paginator.html\">Paginator</a>\nwith the thumbnails.", "default": "Generated HTML div.", "readonly": "", "guessedname": "paginatorEl", "guessedtype": "property", "type": "Node"}, "toolbar": {"default": "Generated Toolbar with a play, and pause buttons.", "type": "Toolbar constructor.", "description": "<a href=\"Toolbar.html\">Toolbar</a> with a play, and pause buttons.", "guessedname": "toolbar", "guessedtype": "property"}, "autoPlay": {"default": "false", "type": "boolean", "description": "If <code>true</code> the slide show will be played when the\nImageGallery is displayed.", "guessedname": "autoPlay", "guessedtype": "property"}}, "constructors": [{"params": [{"type": "Object", "name": "config", "description": "  Object literal specifying widget configuration properties."}], "description": "<p><img src=\"assets/images/aui-image-viewer-gallery/main.png\"/></p>\nA base class for ImageGallery, providing:\n<ul>\n<li>Widget Lifecycle (initializer, renderUI, bindUI, syncUI, destructor)</li>\n<li>Displays an image in a Overlay</li>\n<li>Displays list of thumbnails of the images as a control</li>\n<li>Slide show functionalities (i.e., play, pause etc)</li>\n<li>Keyboard navigation support</li>\n</ul>\nQuick Example:<br/>\n<pre><code>var instance = new A.ImageGallery({\nlinks: '#gallery1 a',\ncaption: 'Liferay Champion Soccer',\ncaptionFromTitle: true,\npreloadNeighborImages: true,\npreloadAllImages: true,\nshowInfo: true\n}).render();\n</code></pre>\nCheck the list of <a href=\"ImageGallery.html#configattributes\">Configuration Attributes</a> available for\nImageGallery."}], "namespace": "", "module": "aui-image-viewer", "events": {"autoPlayChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "autoPlayChange", "description": "Fires when the value for the configuration attribute 'autoPlay' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "playingChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "playingChange", "description": "Fires when the value for the configuration attribute 'playing' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "repeatChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "repeatChange", "description": "Fires when the value for the configuration attribute 'repeat' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "paginatorChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "paginatorChange", "description": "Fires when the value for the configuration attribute 'paginator' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "pausedChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "pausedChange", "description": "Fires when the value for the configuration attribute 'paused' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "pausedLabelChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "pausedLabelChange", "description": "Fires when the value for the configuration attribute 'pausedLabel' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "delayChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "delayChange", "description": "Fires when the value for the configuration attribute 'delay' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "paginatorElChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "paginatorElChange", "description": "Fires when the value for the configuration attribute 'paginatorEl' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "paginatorInstanceChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "paginatorInstanceChange", "description": "Fires when the value for the configuration attribute 'paginatorInstance' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "toolbarChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "toolbarChange", "description": "Fires when the value for the configuration attribute 'toolbar' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "useOriginalImageChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "useOriginalImageChange", "description": "Fires when the value for the configuration attribute 'useOriginalImage' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "showPlayerChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "showPlayerChange", "description": "Fires when the value for the configuration attribute 'showPlayer' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "playingLabelChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "playingLabelChange", "description": "Fires when the value for the configuration attribute 'playingLabel' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "guessedname": "ImageGallery", "methods": {"_getInfoTemplate": {"return": {"type": "String", "description": "Parsed string."}, "description": "Get the <a href=\"ImageViewer.html#config_info\">info</a> template.", "param": "{String} v template", "protected": "", "params": [{"type": "String", "name": "v", "description": " template"}], "guessedname": "_getInfoTemplate", "guessedtype": "function"}, "show": {"description": "<p>Show the ImageGallery.</p>\n<p><strong>NOTE:</strong>Overloads the <a\nhref=\"ImageViewer.html\">ImageViewer</a> show method to not loadImage, the\nchangeRequest now is responsible to do that if we invoke the superclass\nshow method its loading the image, and the changeRequest loads again,\navoiding double request.</p>", "guessedname": "show", "guessedtype": "function"}, "_cancelTimer": {"protected": "", "description": "Cancel the timer between slides.", "guessedname": "_cancelTimer", "guessedtype": "function"}, "pause": {"description": "Pause the slide show.", "guessedname": "pause", "guessedtype": "function"}, "_renderPaginator": {"protected": "", "description": "Render the <a href=\"Paginator.html\">Paginator</a> with the thumbnails.", "guessedname": "_renderPaginator", "guessedtype": "function"}, "_bindToolbarUI": {"protected": "", "description": "Bind the Toolbar UI for the play and pause buttons.", "guessedname": "_bindToolbarUI", "guessedtype": "function"}, "_changeRequest": {"description": "Change the UI when click on a thumbnail.", "param": "{EventFacade} event", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "guessedname": "_changeRequest", "guessedtype": "function"}, "destroy": {"protected": "", "description": "Descructor lifecycle implementation for the ImageGallery class.\nPurges events attached to the node (and all child nodes).", "guessedname": "destroy", "guessedtype": "function"}, "_renderPlayer": {"protected": "", "description": "Render the player controls.", "guessedname": "_renderPlayer", "guessedtype": "function"}, "_startTimer": {"protected": "", "description": "Start the timer between slides.", "guessedname": "_startTimer", "guessedtype": "function"}, "_syncSelectedThumbUI": {"protected": "", "description": "Sync the selected thumb UI.", "guessedname": "_syncSelectedThumbUI", "guessedtype": "function"}, "play": {"description": "Play the slide show.", "guessedname": "play", "guessedtype": "function"}, "_syncControlsUI": {"protected": "", "description": "Sync the controls UI.", "guessedname": "_syncControlsUI", "guessedtype": "function"}, "_syncSlideShow": {"protected": "", "description": "Sync the slide show UI.", "guessedname": "_syncSlideShow", "guessedtype": "function"}, "_setThumbContent": {"description": "See <a href=\"Paginator.html#method_pageLinkContent\">pageLinkContent</a>.", "param": "{Node} pageEl", "protected": "", "params": [{"type": "Node", "name": "pageEl", "description": ""}, {"type": "Number", "name": "pageNumber", "description": ""}], "guessedname": "_setThumbContent", "guessedtype": "function"}, "_afterVisibleChange": {"description": "Fires after the value of the\n<a href=\"ImageViewer.html#config_visible\">visible</a> attribute change.", "param": "{EventFacade} event", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "guessedname": "_afterVisibleChange", "guessedtype": "function"}, "_onPausedChange": {"description": "Fires before the value of the\n<a href=\"ImageGallery.html#config_paused\">paused</a> attribute change.", "param": "{EventFacade} event", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "guessedname": "_onPausedChange", "guessedtype": "function"}, "bindUI": {"protected": "", "description": "Bind the events on the ImageGallery UI. Lifecycle.", "guessedname": "bindUI", "guessedtype": "function"}, "hidePaginator": {"description": "Hide the <a href=\"Paginator.html\">Paginator</a> with the thumbnails\nlist.", "guessedname": "hidePaginator", "guessedtype": "function"}, "_onPlayingChange": {"description": "Fires before the value of the\n<a href=\"ImageGallery.html#config_playing\">playing</a> attribute change.", "param": "{EventFacade} event", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "guessedname": "_onPlayingChange", "guessedtype": "function"}, "showPaginator": {"description": "Show the <a href=\"Paginator.html\">Paginator</a> with the thumbnails\nlist.", "guessedname": "showPaginator", "guessedtype": "function"}, "renderUI": {"protected": "", "description": "Create the DOM structure for the ImageGallery. Lifecycle.", "guessedname": "renderUI", "guessedtype": "function"}}, "extends": "ImageViewer", "superclass": "ImageViewer", "file": "aui-image-viewer.js", "guessedtype": "property", "shortname": "ImageGallery", "properties": {"_timer": {"protected": "", "type": "Number", "description": "Stores the <code>A.later</code> reference.", "guessedname": "_timer", "guessedtype": "property"}, "ImageGallery.ATTRS": {"type": "Object", "static": "", "description": "Static property used to define the default attribute\nconfiguration for the ImageGallery.", "guessedname": "ATTRS", "guessedtype": "property"}, "toolbar": {"protected": "", "type": "Toolbar", "description": "Toolbar instance reference.", "guessedname": "toolbar", "guessedtype": "property"}, "ImageGallery.NAME": {"type": "String", "static": "", "description": "Static property provides a string to identify the class.", "guessedname": "NAME", "guessedtype": "property"}}, "description": "<p><img src=\"assets/images/aui-image-viewer-gallery/main.png\"/></p>\nA base class for ImageGallery, providing:\n<ul>\n<li>Widget Lifecycle (initializer, renderUI, bindUI, syncUI, destructor)</li>\n<li>Displays an image in a Overlay</li>\n<li>Displays list of thumbnails of the images as a control</li>\n<li>Slide show functionalities (i.e., play, pause etc)</li>\n<li>Keyboard navigation support</li>\n</ul>\nQuick Example:<br/>\n<pre><code>var instance = new A.ImageGallery({\nlinks: '#gallery1 a',\ncaption: 'Liferay Champion Soccer',\ncaptionFromTitle: true,\npreloadNeighborImages: true,\npreloadAllImages: true,\nshowInfo: true\n}).render();\n</code></pre>\nCheck the list of <a href=\"ImageGallery.html#configattributes\">Configuration Attributes</a> available for\nImageGallery."}, "CalendarManager": {"name": "CalendarManager", "constructors": [{"params": [{"type": "Object", "name": "config", "description": "  Object literal specifying widget configuration properties."}], "description": "A base class for CalendarManager:"}], "namespace": "", "module": "aui-calendar", "events": {"zIndexBaseChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "zIndexBaseChange", "description": "Fires when the value for the configuration attribute 'zIndexBase' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "guessedname": "CalendarManager", "static": "", "superclass": "OverlayManager", "file": "aui-calendar.js", "guessedtype": "property", "extends": "OverlayManager", "shortname": "CalendarManager", "configs": {"zIndexBase": {"default": "1000", "type": "Number", "description": "ZIndex default value passed to the\n<a href=\"OverlayManager.html#config_zIndexBase\">zIndexBase</a> of\n<a href=\"OverlayManager.html\">OverlayManager</a>.", "guessedname": "zIndexBase", "guessedtype": "property"}}, "description": "A base class for CalendarManager:"}, "Intl": {"name": "Intl", "namespace": "", "module": "yui", "guessedname": "SPLIT_REGEX", "methods": {"setLang": {"return": {"type": "", "description": "boolean true if successful, false if not."}, "description": "Sets the active language for the given module.\nReturns false on failure, which would happen if the language had not been registered through the <a href=\"#method_add\">add()</a> method.", "param": "{String} module The module name.", "params": [{"type": "String", "name": "module", "description": " The module name."}, {"type": "String", "name": "lang", "description": " The BCP 47 language tag."}], "guessedname": "setLang", "guessedtype": "function"}, "get": {"return": {"type": "", "description": "String | Object A copy of the module's localized resources, or a single value if key is provided."}, "description": "Gets the module's localized resources for the currently active language (as provided by the <a href=\"#method_getLang\">getLang</a> method).\n<p>\nOptionally, the localized resources for alternate languages which have been added to Intl (see the <a href=\"#method_add\">add</a> method) can \nbe retrieved by providing the BCP 47 language tag as the lang parameter.   \n</p>", "param": "{String} module The module name.", "params": [{"type": "String", "name": "module", "description": " The module name."}, {"type": "String", "name": "key", "description": " Optional. A single resource key. If not provided, returns a copy (shallow clone) of all resources."}, {"type": "String", "name": "lang", "description": " Optional. The BCP 47 language tag. If not provided, the module's currently active language is used."}], "guessedname": "get", "guessedtype": "function"}, "getLang": {"return": {"type": "String", "description": "The BCP 47 language tag."}, "description": "Get the currently active language for the given module.", "param": "{String} module The module name.", "params": [{"type": "String", "name": "module", "description": " The module name."}], "guessedname": "getLang", "guessedtype": "function"}, "getAvailableLangs": {"return": {"type": "Array", "description": "The array of languages available."}, "description": "Gets the list of languages for which localized resources are available for a given module, based on the module\nmeta-data (part of loader). If loader is not on the page, returns an empty array.", "param": "{String} module The name of the module", "params": [{"type": "String", "name": "module", "description": " The name of the module"}], "guessedname": "getAvailableLangs", "guessedtype": "function"}, "add": {"param": "{String} module The module name.", "params": [{"type": "String", "name": "module", "description": " The module name."}, {"type": "String", "name": "lang", "description": " The BCP 47 language tag."}, {"type": "Object", "name": "strings", "description": " The hash of localized values, keyed by the string name."}], "description": "Register a hash of localized resources for the given module and language", "guessedname": "add", "guessedtype": "function"}, "lookupBestLang": {"return": {"type": "String", "description": "The available language that best matches the\npreferred language list, or \"\"."}, "description": "Returns the language among those available that\nbest matches the preferred language list, using the Lookup\nalgorithm of BCP 47.\nIf none of the available languages meets the user's preferences,\nthen \"\" is returned.\nExtended language ranges are not supported.", "since": "3.1.0", "param": "{String[] | String} preferredLanguages The list of preferred languages\nin descending preference order, represented as BCP 47 language\ntags. A string array or a comma-separated list.", "params": [{"type": "String[] | String", "name": "preferredLanguages", "description": " The list of preferred languages\nin descending preference order, represented as BCP 47 language\ntags. A string array or a comma-separated list."}, {"type": "String[]", "name": "availableLanguages", "description": " The list of languages\nthat the application supports, represented as BCP 47 language\ntags."}], "guessedname": "lookupBestLang", "guessedtype": "function"}, "_mod": {"return": {"type": "Object", "description": "The hash of localized resources for the module, keyed by BCP language tag"}, "description": "Private method to retrieve the language hash for a given module.", "private": "", "params": [{"type": "String", "name": "module", "description": " The name of the module"}], "param": "{String} module The name of the module", "guessedname": "_mod", "guessedtype": "function"}}, "uses": ["EventTarget"], "file": "aui.js", "guessedtype": "property", "static": "", "shortname": "Intl", "events": {"intl:langChange": {"param": "{EventFacade} e The event facade\n<p>The event facade contains:</p>\n<dl>\n<dt>module</dt><dd>The name of the module for which the language changed</dd>\n<dt>newVal</dt><dd>The new language tag</dd>\n<dt>prevVal</dt><dd>The current language tag</dd>\n</dl>", "params": [{"type": "EventFacade", "name": "e", "description": " The event facade\n<p>The event facade contains:</p>\n<dl>\n<dt>module</dt><dd>The name of the module for which the language changed</dd>\n<dt>newVal</dt><dd>The new language tag</dd>\n<dt>prevVal</dt><dd>The current language tag</dd>\n</dl>"}], "description": "Notification event to indicate when the lang for a module has changed. There is no default behavior associated with this event,\nso the on and after moments are equivalent.", "guessedname": "emitFacade", "guessedtype": "property"}}, "description": "The Intl utility provides a central location for managing sets of localized resources (strings and formatting patterns)."}, "CharCounter": {"name": "CharCounter", "configs": {"input": {"default": "null", "type": "{Node | String}", "description": "Node or Selector for the input field. Required.", "guessedname": "input", "guessedtype": "property"}, "counter": {"default": "null", "type": "{Node | String}", "description": "Node or Selector to display the information of the counter.", "guessedname": "counter", "guessedtype": "property"}, "maxLength": {"default": "Infinity", "type": "Number", "description": "Max number of characters the <a\nhref=\"CharCounter.html#config_input\">input</a> can have.", "guessedname": "maxLength", "guessedtype": "property"}}, "constructors": [{"params": [{"type": "Object", "name": "config", "description": "  Object literal specifying widget configuration properties."}], "description": "<p><img src=\"assets/images/aui-char-counter/main.png\"/></p>\nA base class for CharCounter, providing:\n<ul>\n<li>Limit the number of characters allowed in an input box</li>\n<li>Display the number of characters left</li>\n</ul>\nQuick Example:<br/>\n<pre><code>var instance = new A.CharCounter({\ninput: '#elementId',\ncounter: '#counterDisplayId',\nmaxLength: 10\n});\n</code></pre>\nCheck the list of <a href=\"CharCounter.html#configattributes\">Configuration Attributes</a> available for\nCharCounter."}], "namespace": "", "module": "aui-char-counter", "events": {"counterChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "counterChange", "description": "Fires when the value for the configuration attribute 'counter' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "maxLengthChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "maxLengthChange", "description": "Fires when the value for the configuration attribute 'maxLength' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "inputChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "inputChange", "description": "Fires when the value for the configuration attribute 'input' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "guessedname": "CharCounter", "methods": {"syncUI": {"protected": "", "description": "Sync the CharCounter UI. Lifecycle.", "guessedname": "syncUI", "guessedtype": "function"}, "_onInputChange": {"description": "Fired on input value change.", "param": "{EventFacade} event", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "guessedname": "_onInputChange", "guessedtype": "function"}, "checkLength": {"description": "Check the current value of the <a\nhref=\"CharCounter.html#config_input\">input</a>, truncate the data if\nneeded, and re-sync the UI. Fired from <a\nhref=\"CharCounter.html#method__onInputChange\">_onInputChange</a>.", "guessedname": "checkLength", "guessedtype": "function"}, "initializer": {"protected": "", "description": "Construction logic executed during CharCounter instantiation. Lifecycle.", "guessedname": "initializer", "guessedtype": "function"}, "_setMaxLength": {"return": {"type": "Number", "description": ""}, "description": "Setter for <a href=\"CharCounter.html#config_maxLength\">maxLength</a>.", "param": "{Number} v Value of the new <a\nhref=\"CharCounter.html#config_maxLenght\">maxLenght</a>.", "protected": "", "params": [{"type": "Number", "name": "v", "description": " Value of the new <a\nhref=\"CharCounter.html#config_maxLenght\">maxLenght</a>."}], "guessedname": "_setMaxLength", "guessedtype": "function"}, "bindUI": {"protected": "", "description": "Bind the events on the CharCounter UI. Lifecycle.", "guessedname": "bindUI", "guessedtype": "function"}, "destroy": {"protected": "", "description": "Descructor lifecycle implementation for the CharCounter class.\nPurges events attached to the node (and all child nodes).", "guessedname": "destroy", "guessedtype": "function"}}, "uses": ["AUI~input~handle"], "superclass": "Base", "file": "aui-char-counter.js", "guessedtype": "property", "extends": "Base", "shortname": "CharCounter", "properties": {"handler": {"protected": "", "type": "EventHandle", "description": "Event handler for the input <a\nhref=\"module_aui-event.html\">aui-event</a> event.", "guessedname": "handler", "guessedtype": "property"}, "CharCounter.NAME": {"type": "String", "static": "", "description": "Static property provides a string to identify the class.", "guessedname": "NAME", "guessedtype": "property"}, "CharCounter.ATTRS": {"type": "Object", "static": "", "description": "Static property used to define the default attribute\nconfiguration for the CharCounter.", "guessedname": "ATTRS", "guessedtype": "property"}}, "description": "<p><img src=\"assets/images/aui-char-counter/main.png\"/></p>\nA base class for CharCounter, providing:\n<ul>\n<li>Limit the number of characters allowed in an input box</li>\n<li>Display the number of characters left</li>\n</ul>\nQuick Example:<br/>\n<pre><code>var instance = new A.CharCounter({\ninput: '#elementId',\ncounter: '#counterDisplayId',\nmaxLength: 10\n});\n</code></pre>\nCheck the list of <a href=\"CharCounter.html#configattributes\">Configuration Attributes</a> available for\nCharCounter."}, "DatePickerSelect": {"name": "DatePickerSelect", "configs": {"populateYear": {"default": "true", "type": "boolean", "description": "If true the select element for the year will be automatic\npopulated.", "guessedname": "populateYear", "guessedtype": "property"}, "yearNode": {"default": "Generated div element.", "type": "String | Node", "description": "DOM Node to display the year of the DatePickerSelect. If not\nspecified try to query using HTML_PARSER an element inside\ncontentBox which matches <code>aui-datepicker-year</code>.", "guessedname": "yearNode", "guessedtype": "property"}, "setValue": {"default": "false", "type": "boolean", "description": "Inherited from\n<a href=\"Calendar.html#config_setValue\">Calendar</a>.", "guessedname": "setValue", "guessedtype": "property"}, "monthNode": {"default": "Generated div element.", "type": "String | Node", "description": "DOM Node to display the month of the DatePickerSelect. If not\nspecified try to query using HTML_PARSER an element inside\ncontentBox which matches <code>aui-datepicker-year</code>.", "guessedname": "monthNode", "guessedtype": "property"}, "baseName": {"default": "datepicker", "type": "String", "description": "A basename to identify the select elements from this\nDatePickerSelect.", "guessedname": "baseName", "guessedtype": "property"}, "yearRange": {"default": "[ year - 10, year + 10 ]", "type": "Array", "description": "Year range to be displayed on the year select element. By default\nit displays from -10 to +10 years from the current year.", "guessedname": "yearRange", "guessedtype": "property"}, "dayNodeName": {"default": "day", "type": "String", "description": "Name attribute used on the\n<a href=\"DatePickerSelect.html#config_dayNode\">dayNode</a>.", "guessedname": "dayNodeName", "guessedtype": "property"}, "selectWrapperNode": {"default": "Generated div element.", "type": "String", "description": "DOM Node to display the selects of the DatePickerSelect. If not\nspecified try to query using HTML_PARSER an element inside\ncontentBox which matches <code>aui-datepicker-select-wrapper</code>.", "guessedname": "selectWrapperNode", "guessedtype": "property"}, "visible": {"default": "false", "type": "boolean", "description": "If true the Calendar is visible by default after the render phase.\nInherited from\n<a href=\"OverlayContext.html#config_trigger\">OverlayContext</a>.", "guessedname": "visible", "guessedtype": "property"}, "yearNodeName": {"default": "year", "type": "String", "description": "Name attribute used on the\n<a href=\"DatePickerSelect.html#config_yearNode\">yearNode</a>.", "guessedname": "yearNodeName", "guessedtype": "property"}, "trigger": {"default": "Generated HTLM div element", "type": "{Node | String}", "description": "Trigger element to open the calendar. Inherited from\n<a href=\"OverlayContext.html#config_trigger\">OverlayContext</a>.", "guessedname": "trigger", "guessedtype": "property"}, "dayNode": {"default": "Generated div element.", "type": "String | Node", "description": "DOM Node to display the day of the DatePickerSelect. If not\nspecified try to query using HTML_PARSER an element inside\ncontentBox which matches <code>aui-datepicker-year</code>.", "guessedname": "dayNode", "guessedtype": "property"}, "monthNodeName": {"default": "month", "type": "String", "description": "Name attribute used on the\n<a href=\"DatePickerSelect.html#config_monthNode\">monthNode</a>.", "guessedname": "monthNodeName", "guessedtype": "property"}, "populateMonth": {"default": "true", "type": "boolean", "description": "If true the select element for the month will be automatic\npopulated.", "guessedname": "populateMonth", "guessedtype": "property"}, "appendOrder": {"default": "[ 'm', 'd', 'y' ]", "type": "Array", "description": "The order the selects elements are appended to the\n<a href=\"DatePickerSelect.html#config_srcNode\">srcNode</a>.", "guessedname": "appendOrder", "guessedtype": "property"}, "buttonNode": {"default": "Generated div element.", "type": "String", "description": "DOM Node to display the button of the DatePickerSelect. If not\nspecified try to query using HTML_PARSER an element inside\ncontentBox which matches <code>aui-buttonitem</code>.", "guessedname": "buttonNode", "guessedtype": "property"}, "populateDay": {"default": "true", "type": "boolean", "description": "If true the select element for the days will be automatic\npopulated.", "guessedname": "populateDay", "guessedtype": "property"}}, "constructors": [{"params": [{"type": "Object", "name": "config", "description": "  Object literal specifying widget configuration properties."}], "description": "<p><img src=\"assets/images/aui-calendar-datepicker-select/main.png\"/></p>\nA base class for DatePickerSelect, providing:\n<ul>\n<li>Widget Lifecycle (initializer, renderUI, bindUI, syncUI, destructor)</li>\n<li>Select a date from Calendar to select elements</li>\n</ul>\nQuick Example:<br/>\n<pre><code>var instance = new A.DatePickerSelect({\nsrcNode: '#srcNodeId',\n// locale: 'pt-br',\ndateFormat: '%m/%d/%y',\nyearRange: [ 1970, 2009 ]\n}).render();\n</code></pre>\nCheck the list of <a href=\"DatePickerSelect.html#configattributes\">Configuration Attributes</a> available for\nDatePickerSelect."}], "namespace": "", "module": "aui-calendar", "events": {"populateDayChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "populateDayChange", "description": "Fires when the value for the configuration attribute 'populateDay' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "yearRangeChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "yearRangeChange", "description": "Fires when the value for the configuration attribute 'yearRange' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "populateYearChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "populateYearChange", "description": "Fires when the value for the configuration attribute 'populateYear' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "yearNodeNameChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "yearNodeNameChange", "description": "Fires when the value for the configuration attribute 'yearNodeName' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "buttonNodeChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "buttonNodeChange", "description": "Fires when the value for the configuration attribute 'buttonNode' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "selectWrapperNodeChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "selectWrapperNodeChange", "description": "Fires when the value for the configuration attribute 'selectWrapperNode' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "dayNodeChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "dayNodeChange", "description": "Fires when the value for the configuration attribute 'dayNode' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "setValueChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "setValueChange", "description": "Fires when the value for the configuration attribute 'setValue' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "dayNodeNameChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "dayNodeNameChange", "description": "Fires when the value for the configuration attribute 'dayNodeName' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "visibleChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "visibleChange", "description": "Fires when the value for the configuration attribute 'visible' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "populateMonthChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "populateMonthChange", "description": "Fires when the value for the configuration attribute 'populateMonth' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "monthNodeNameChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "monthNodeNameChange", "description": "Fires when the value for the configuration attribute 'monthNodeName' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "yearNodeChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "yearNodeChange", "description": "Fires when the value for the configuration attribute 'yearNode' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "triggerChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "triggerChange", "description": "Fires when the value for the configuration attribute 'trigger' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "baseNameChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "baseNameChange", "description": "Fires when the value for the configuration attribute 'baseName' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "appendOrderChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "appendOrderChange", "description": "Fires when the value for the configuration attribute 'appendOrder' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "monthNodeChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "monthNodeChange", "description": "Fires when the value for the configuration attribute 'monthNode' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "guessedname": "DatePickerSelect", "methods": {"_populateMonths": {"protected": "", "description": "Populate the month select element with the correct data.", "guessedname": "_populateMonths", "guessedtype": "function"}, "syncUI": {"protected": "", "description": "Sync the DatePickerSelect UI. Lifecycle.", "guessedname": "syncUI", "guessedtype": "function"}, "_selectCurrentMonth": {"protected": "", "description": "Select the current month on the respective input field.", "guessedname": "_selectCurrentMonth", "guessedtype": "function"}, "_populateDays": {"protected": "", "description": "Populate the day select element with the correct data.", "guessedname": "_populateDays", "guessedtype": "function"}, "_populateYears": {"protected": "", "description": "Populate the year select element with the correct data.", "guessedname": "_populateYears", "guessedtype": "function"}, "_pupulateSelects": {"protected": "", "description": "Populate each select element with the correct data for the day, month\nand year.", "guessedname": "_pupulateSelects", "guessedtype": "function"}, "_renderElements": {"protected": "", "description": "Render DOM elements for the DatePickerSelect.", "guessedname": "_renderElements", "guessedtype": "function"}, "_afterSetCurrentMonth": {"description": "Fired after\n<a href=\"DatePickerSelect.html#config_currentMonth\">currentMonth</a> is set.", "param": "{EventFacade} event", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "guessedname": "_afterSetCurrentMonth", "guessedtype": "function"}, "_renderTriggerButton": {"protected": "", "description": "Render DOM element for the trigger button of the DatePickerSelect.", "guessedname": "_renderTriggerButton", "guessedtype": "function"}, "_selectCurrentYear": {"protected": "", "description": "Select the current year on the respective input field.", "guessedname": "_selectCurrentYear", "guessedtype": "function"}, "_afterDisabledChangeDatePicker": {"description": "Fired after\n<a href=\"DatePickerSelect.html#config_disabled\">disabled</a> is set.", "param": "{EventFacade} event", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "guessedname": "_afterDisabledChangeDatePicker", "guessedtype": "function"}, "_selectCurrentValues": {"protected": "", "description": "Select the current values for the day, month and year to the respective\ninput field.", "guessedname": "_selectCurrentValues", "guessedtype": "function"}, "_populateSelect": {"return": {"type": "String", "description": ""}, "description": "Populate a select element with the data passed on the params.", "param": "{HTMLSelectElement} select Select to be populated", "protected": "", "params": [{"type": "HTMLSelectElement", "name": "select", "description": " Select to be populated"}, {"type": "Number", "name": "fromIndex", "description": " Index to start"}, {"type": "Number", "name": "toIndex", "description": " Index to end"}, {"type": "Object", "name": "values", "description": " Object with labels to be used as content of each\noption. Optional."}], "guessedname": "_populateSelect", "guessedtype": "function"}, "_selectCurrentDay": {"protected": "", "description": "Select the current day on the respective input field.", "guessedname": "_selectCurrentDay", "guessedtype": "function"}, "_bindSelectEvents": {"protected": "", "description": "Bind events on each select element (change, keypress, etc).", "guessedname": "_bindSelectEvents", "guessedtype": "function"}, "bindUI": {"protected": "", "description": "Bind the events on the DatePickerSelect UI. Lifecycle.", "guessedname": "bindUI", "guessedtype": "function"}, "_getAppendOrder": {"protected": "", "return": {"type": "Array", "description": ""}, "description": "Gets an Array with the field elements in the correct order defined\non <a href=\"DatePickerSelect.html#config_appendOrder\">appendOrder</a>.", "guessedname": "_getAppendOrder", "guessedtype": "function"}, "renderUI": {"protected": "", "description": "Create the DOM structure for the DatePickerSelect. Lifecycle.", "guessedname": "renderUI", "guessedtype": "function"}, "_onSelectChange": {"description": "Fired on any select change.", "param": "{EventFacade} event", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "guessedname": "_onSelectChange", "guessedtype": "function"}}, "extends": "Calendar", "superclass": "Calendar", "file": "aui-calendar.js", "guessedtype": "property", "shortname": "DatePickerSelect", "properties": {"DatePickerSelect.NAME": {"type": "String", "static": "", "description": "Static property provides a string to identify the class.", "guessedname": "NAME", "guessedtype": "property"}, "DatePickerSelect.ATTRS": {"type": "Object", "static": "", "description": "Static property used to define the default attribute\nconfiguration for the DatePickerSelect.", "guessedname": "ATTRS", "guessedtype": "property"}, "DatePickerSelect.HTML_PARSER": {"type": "Object", "static": "", "description": "Object hash, defining how attribute values are to be parsed from\nmarkup contained in the widget's content box.", "guessedname": "HTML_PARSER", "guessedtype": "property"}}, "description": "<p><img src=\"assets/images/aui-calendar-datepicker-select/main.png\"/></p>\nA base class for DatePickerSelect, providing:\n<ul>\n<li>Widget Lifecycle (initializer, renderUI, bindUI, syncUI, destructor)</li>\n<li>Select a date from Calendar to select elements</li>\n</ul>\nQuick Example:<br/>\n<pre><code>var instance = new A.DatePickerSelect({\nsrcNode: '#srcNodeId',\n// locale: 'pt-br',\ndateFormat: '%m/%d/%y',\nyearRange: [ 1970, 2009 ]\n}).render();\n</code></pre>\nCheck the list of <a href=\"DatePickerSelect.html#configattributes\">Configuration Attributes</a> available for\nDatePickerSelect."}, "StyleSheet": {"name": "StyleSheet", "constructors": [{"params": [{"type": "String|HTMLElement|Node", "name": "seed", "description": "  a style or link node, its id, or a\nname or guid of a StyleSheet, or a string of css text"}, {"type": "String", "name": "name", "description": "  (optional) name to register instance for future static\naccess"}], "description": "Create an instance of StyleSheet to encapsulate a css stylesheet.\nThe constructor can be called using function or constructor syntax.\n<pre><code>var sheet = Y.StyleSheet(..);</pre></code>\nor\n<pre><code>var sheet = new Y.StyleSheet(..);</pre></code>\nThe first parameter passed can be any of the following things:\n<ul>\n<li>The desired string name to register a new empty sheet</li>\n<li>The string name of an existing StyleSheet instance</li>\n<li>The unique guid generated for an existing StyleSheet instance</li>\n<li>The id of an existing <code>&lt;link&gt;</code> or <code>&lt;style&gt;</code> node</li>\n<li>The node reference for an existing <code>&lt;link&gt;</code> or <code>&lt;style&gt;</code> node</li>\n<li>The Y.Node instance wrapping an existing <code>&lt;link&gt;</code> or <code>&lt;style&gt;</code> node</li>\n<li>A chunk of css text to create a new stylesheet from</li>\n</ul>\n<p>If a string is passed, StyleSheet will first look in its static name\nregistry for an existing sheet, then in the DOM for an element with that id.\nIf neither are found and the string contains the { character, it will be\nused as a the initial cssText for a new StyleSheet.  Otherwise, a new empty\nStyleSheet is created, assigned the string value as a name, and registered\nstatically by that name.</p>\n<p>The optional second parameter is a string name to register the sheet as.\nThis param is largely useful when providing a node id/ref or chunk of css\ntext to create a populated instance.</p>"}], "namespace": "", "module": "stylesheet", "methods": {"enable": {"chainable": "", "return": {"type": "StyleSheet", "description": ""}, "description": "Enable all the rules in the sheet", "guessedname": "enable", "guessedtype": "function"}, "StyleSheet.isValidSelector": {"return": {"type": "Boolean", "description": ""}, "description": "<p>Determines if a selector string is safe to use.  Used internally\nin set to prevent IE from locking up when attempting to add a rule for a\n&quot;bad selector&quot;.</p>\n<p>Bad selectors are considered to be any string containing unescaped\n`~!@$%^&()+=|{}[];'\"?< or space. Also forbidden are . or # followed by\nanything other than an alphanumeric.  Additionally -abc or .-abc or\n#_abc or '# ' all fail.  There are likely more failure cases, so\nplease file a bug if you encounter one.</p>", "param": "sel {String} the selector string", "static": "", "guessedname": "isValidSelector", "guessedtype": "function", "params": [{"type": "String", "name": "sel", "description": "  the selector string"}]}, "getCssText": {"return": {"type": "String", "description": ""}, "description": "Get the current cssText for a rule or the entire sheet.  If the\nselector param is supplied, only the cssText for that rule will be\nreturned, if found.  If the selector string targets multiple\nselectors separated by commas, the cssText of the first rule only\nwill be returned.  If no selector string, the stylesheet's full\ncssText will be returned.", "param": "sel {String} Selector string", "params": [{"type": "String", "name": "sel", "description": "  Selector string"}], "guessedname": "getCssText", "guessedtype": "function"}, "isEnabled": {"return": {"type": "Boolean", "description": ""}, "description": "Returns false if the StyleSheet is disabled.  Otherwise true.", "guessedname": "isEnabled", "guessedtype": "function"}, "disable": {"chainable": "", "return": {"type": "StyleSheet", "description": ""}, "description": "Disable all the rules in the sheet.  Rules may be changed while the\nStyleSheet is disabled.", "guessedname": "disable", "guessedtype": "function"}, "set": {"return": {"type": "StyleSheet", "description": ""}, "description": "<p>Set style properties for a provided selector string.\nIf the selector includes commas, it will be split into individual\nselectors and applied accordingly.  If the selector string does not\nhave a corresponding rule in the sheet, it will be added.</p>\n<p>The object properties in the second parameter must be the JavaScript\nnames of style properties.  E.g. fontSize rather than font-size.</p>\n<p>The float style property will be set by any of &quot;float&quot;,\n&quot;styleFloat&quot;, or &quot;cssFloat&quot;.</p>", "chainable": "", "param": "sel {String} the selector string to apply the changes to", "params": [{"type": "String", "name": "sel", "description": "  the selector string to apply the changes to"}, {"type": "Object", "name": "css", "description": "  Object literal of style properties and new values"}], "guessedname": "set", "guessedtype": "function"}, "getId": {"return": {"type": "Number", "description": "the static id"}, "description": "Get the unique stamp for this StyleSheet instance", "guessedname": "getId", "guessedtype": "function"}, "StyleSheet.register": {"return": {"type": "Boolean", "description": "false if no name or sheet is not a StyleSheet\ninstance. true otherwise."}, "description": "Registers a StyleSheet instance in the static registry by the given name", "param": "name {String} the name to assign the StyleSheet in the registry", "static": "", "guessedname": "register", "guessedtype": "function", "params": [{"type": "String", "name": "name", "description": "  the name to assign the StyleSheet in the registry"}, {"type": "StyleSheet", "name": "sheet", "description": "  The StyleSheet instance"}]}, "unset": {"return": {"type": "StyleSheet", "description": ""}, "description": "<p>Unset style properties for a provided selector string, removing\ntheir effect from the style cascade.</p>\n<p>If the selector includes commas, it will be split into individual\nselectors and applied accordingly.  If there are no properties\nremaining in the rule after unsetting, the rule is removed.</p>\n<p>The style property or properties in the second parameter must be the\nJavaScript style property names. E.g. fontSize rather than font-size.</p>\n<p>The float style property will be unset by any of &quot;float&quot;,\n&quot;styleFloat&quot;, or &quot;cssFloat&quot;.</p>", "chainable": "", "param": "sel {String} the selector string to apply the changes to", "params": [{"type": "String", "name": "sel", "description": "  the selector string to apply the changes to"}, {"type": "String|Array", "name": "css", "description": "  style property name or Array of names"}], "guessedname": "unset", "guessedtype": "function"}, "StyleSheet.toCssText": {"return": {"type": "String", "description": "the resulting cssText string"}, "description": "<p>Converts an object literal of style properties and values into a string\nof css text.  This can then be assigned to el.style.cssText.</p>\n<p>The optional second parameter is a cssText string representing the\nstarting state of the style prior to alterations.  This is most often\nextracted from the eventual target's current el.style.cssText.</p>", "param": "css {Object} object literal of style properties and values", "static": "", "guessedname": "toCssText", "guessedtype": "property", "params": [{"type": "Object", "name": "css", "description": "  object literal of style properties and values"}, {"type": "String", "name": "cssText", "description": "  (optional) starting cssText value"}]}}, "file": "stylesheet.js", "shortname": "StyleSheet", "description": "Create an instance of StyleSheet to encapsulate a css stylesheet.\nThe constructor can be called using function or constructor syntax.\n<pre><code>var sheet = Y.StyleSheet(..);</pre></code>\nor\n<pre><code>var sheet = new Y.StyleSheet(..);</pre></code>\nThe first parameter passed can be any of the following things:\n<ul>\n<li>The desired string name to register a new empty sheet</li>\n<li>The string name of an existing StyleSheet instance</li>\n<li>The unique guid generated for an existing StyleSheet instance</li>\n<li>The id of an existing <code>&lt;link&gt;</code> or <code>&lt;style&gt;</code> node</li>\n<li>The node reference for an existing <code>&lt;link&gt;</code> or <code>&lt;style&gt;</code> node</li>\n<li>The Y.Node instance wrapping an existing <code>&lt;link&gt;</code> or <code>&lt;style&gt;</code> node</li>\n<li>A chunk of css text to create a new stylesheet from</li>\n</ul>\n<p>If a string is passed, StyleSheet will first look in its static name\nregistry for an existing sheet, then in the DOM for an element with that id.\nIf neither are found and the string contains the { character, it will be\nused as a the initial cssText for a new StyleSheet.  Otherwise, a new empty\nStyleSheet is created, assigned the string value as a name, and registered\nstatically by that name.</p>\n<p>The optional second parameter is a string name to register the sheet as.\nThis param is largely useful when providing a node id/ref or chunk of css\ntext to create a populated instance.</p>"}, "Plugin.WidgetAnim": {"name": "Plugin.WidgetAnim", "namespace": "Plugin", "module": "widget-anim", "events": {"animHideChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "animHideChange", "description": "Fires when the value for the configuration attribute 'animHide' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "animShowChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "animShowChange", "description": "Fires when the value for the configuration attribute 'animShow' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "durationChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "durationChange", "description": "Fires when the value for the configuration attribute 'duration' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "configs": {"duration": {"default": "0.2 (seconds", "type": "Number", "description": "Default duration in seconds. Used as the default duration for the default animation implementations", "guessedname": "duration", "guessedtype": "property"}, "animShow": {"default": "WidgetAnim.ANIMATIONS.fadeIn", "type": "Anim", "description": "Default animation instance used for showing the widget (opacity fade-in)", "guessedname": "animShow", "guessedtype": "property"}, "animHide": {"default": "WidgetAnim.ANIMATIONS.fadeOut", "type": "Anim", "description": "Default animation instance used for hiding the widget (opacity fade-out)", "guessedname": "animHide", "guessedtype": "property"}}, "methods": {"_uiSetVisible": {"description": "The original Widget _uiSetVisible implementation. This currently needs to be replicated,\nso it can be invoked before or after the animation starts or stops, since the original\nmethods is not available to the AOP implementation.", "param": "{boolean} val true, if making the widget visible. false, if hiding it.", "params": [{"type": "boolean", "name": "val", "description": " true, if making the widget visible. false, if hiding it."}], "private": "", "guessedname": "_uiSetVisible", "guessedtype": "function"}, "_uiAnimSetVisible": {"description": "The injected method used to override the host widget's _uiSetVisible implementation with\nan animated version of the same.\n<p>This method replaces the default _uiSetVisible handler\nWidget provides, by injecting itself before _uiSetVisible,\nand preventing the default behavior. </p>", "param": "{boolean} val true, if making the widget visible. false, if hiding it.", "protected": "", "params": [{"type": "boolean", "name": "val", "description": " true, if making the widget visible. false, if hiding it."}], "guessedname": "_uiAnimSetVisible", "guessedtype": "function"}, "_bindAnimHide": {"private": "", "description": "Binds a listener to invoke the original visibility handling when the animHide animation is complete", "guessedname": "_bindAnimHide", "guessedtype": "function"}, "initializer": {"param": "{Object} config The user configuration for the plugin", "params": [{"type": "Object", "name": "config", "description": " The user configuration for the plugin"}], "description": "The initializer lifecycle implementation. Modifies the host widget's \nvisibililty implementation to add animation.", "guessedname": "initializer", "guessedtype": "function"}, "destructor": {"description": "The initializer destructor implementation. Responsible for destroying the configured\nanimation instances.", "guessedname": "destructor", "guessedtype": "function"}, "_bindAnimShow": {"private": "", "description": "Binds a listener to invoke the original visibility handling when the animShow animation is started", "guessedname": "_bindAnimShow", "guessedtype": "function"}}, "extends": "Plugin.Base", "superclass": "Plugin.Base", "file": "widget-anim.js", "shortname": "WidgetAnim", "properties": {"WidgetAnim.ATTRS": {"type": "Object", "static": "", "description": "Static property used to define the default attribute \nconfiguration for the plugin.", "guessedname": "ATTRS", "guessedtype": "property"}, "WidgetAnim.ANIMATIONS": {"description": "Pre-Packaged Animation implementations, which can be used for animShow and animHide attribute \nvalues.", "default": "\"pluginWidgetAnim\"", "static": "", "guessedname": "ANIMATIONS", "guessedtype": "property", "type": "Object"}, "WidgetAnim.NAME": {"description": "The NAME of the WidgetAnim class. Used to prefix events generated\nby the plugin class.", "default": "\"pluginWidgetAnim\"", "static": "", "guessedname": "NAME", "guessedtype": "property", "type": "String"}, "WidgetAnim.NS": {"description": "The namespace for the plugin. This will be the property on the widget, which will \nreference the plugin instance, when it's plugged in.", "default": "\"anim\"", "static": "", "guessedname": "NS", "guessedtype": "property", "type": "String"}}, "description": "A plugin class which can be used to animate widget visibility changes."}, "YUI~oop": {"name": "YUI~oop", "namespace": "", "module": "oop", "methods": {"augment": {"return": {"type": "object", "description": "the augmented object"}, "description": "Applies prototype properties from the supplier to the receiver.\nThe receiver can be a constructor or an instance.", "param": "{Function} r  the object to receive the augmentation", "params": [{"type": "Function", "name": "r", "description": "  the object to receive the augmentation"}, {"type": "Function", "name": "s", "description": "  the object that supplies the properties to augment"}, {"type": "boolean", "name": "ov", "description": "  if true, properties already on the receiver\nwill be overwritten if found on the supplier."}, {"type": "string[]", "name": "wl", "description": "  a whitelist.  If supplied, only properties in \nthis list will be applied to the receiver."}, {"type": "Array | Any", "name": "args", "description": "  arg or arguments to apply to the supplier\nconstructor when initializing."}], "guessedname": "augment", "guessedtype": "function", "todo": "constructor optional?"}, "extend": {"return": {"type": "YUI", "description": "the YUI instance"}, "description": "Utility to set up the prototype, constructor and superclass properties to\nsupport an inheritance strategy that can chain constructors and methods.\nStatic members will not be inherited.", "param": "{Function} r   the object to modify", "params": [{"type": "Function", "name": "r", "description": "   the object to modify"}, {"type": "Function", "name": "s", "description": " the object to inherit"}, {"type": "Object", "name": "px", "description": " prototype properties to add/override"}, {"type": "Object", "name": "sx", "description": " static properties to add/override"}], "guessedname": "extend", "guessedtype": "function"}, "bind": {"return": {"type": "function", "description": "the wrapped function"}, "description": "Returns a function that will execute the supplied function in the\nsupplied object's context, optionally adding any additional\nsupplied parameters to the beginning of the arguments collection the \nsupplied to the function.", "param": "f {Function|String} the function to bind, or a function name\nto execute on the context object", "params": [{"type": "Function|String", "name": "f", "description": "  the function to bind, or a function name\nto execute on the context object"}, {"type": "", "name": "c", "description": " the execution context"}, {"type": "", "name": "args*", "description": " 0..n arguments to include before the arguments the \nfunction is executed with."}], "guessedname": "bind", "guessedtype": "function"}, "clone": {"return": {"type": "Array|Object", "description": "the cloned object"}, "description": "Deep obj/array copy.  Function clones are actually\nwrappers around the original function.\nArray-like objects are treated as arrays.\nPrimitives are returned untouched.  Optionally, a\nfunction can be provided to handle other data types,\nfilter keys, validate values, etc.", "param": "o what to clone", "params": [{"type": "", "name": "o", "description": " what to clone"}, {"type": "boolean", "name": "safe", "description": "  if true, objects will not have prototype\nitems from the source.  If false, they will.  In this case, the\noriginal is initially protected, but the clone is not completely immune\nfrom changes to the source object prototype.  Also, cloned prototype\nitems that are deleted from the clone will result in the value\nof the source prototype being exposed.  If operating on a non-safe\nclone, items should be nulled out rather than deleted."}, {"type": "", "name": "f", "description": " optional function to apply to each item in a collection;\nit will be executed prior to applying the value to\nthe new object.  Return false to prevent the copy."}, {"type": "", "name": "c", "description": " optional execution context for f"}, {"type": "", "name": "owner", "description": " Owner object passed when clone is iterating an\nobject.  Used to set up context for cloned functions."}], "guessedname": "clone", "guessedtype": "function"}, "rbind": {"return": {"type": "function", "description": "the wrapped function"}, "description": "Returns a function that will execute the supplied function in the\nsupplied object's context, optionally adding any additional\nsupplied parameters to the end of the arguments the function\nis executed with.", "param": "f {Function|String} the function to bind, or a function name\nto execute on the context object", "params": [{"type": "Function|String", "name": "f", "description": "  the function to bind, or a function name\nto execute on the context object"}, {"type": "", "name": "c", "description": " the execution context"}, {"type": "", "name": "args*", "description": " 0..n arguments to append to the end of arguments collection\nsupplied to the function"}], "guessedname": "rbind", "guessedtype": "function"}, "each": {"return": {"type": "YUI", "description": "the YUI instance"}, "description": "Executes the supplied function for each item in\na collection.  Supports arrays, objects, and\nY.NodeLists", "param": "o the object to iterate", "params": [{"type": "", "name": "o", "description": " the object to iterate"}, {"type": "", "name": "f", "description": " the function to execute.  This function\nreceives the value, key, and object as parameters"}, {"type": "", "name": "proto", "description": " if true, prototype properties are\niterated on objects"}], "guessedname": "each", "guessedtype": "function"}, "aggregate": {"return": {"type": "object", "description": "the extended object"}, "description": "Applies object properties from the supplier to the receiver.  If\nthe target has the property, and the property is an object, the target\nobject will be augmented with the supplier's value.  If the property\nis an array, the suppliers value will be appended to the target.", "param": "{Function} r  the object to receive the augmentation", "params": [{"type": "Function", "name": "r", "description": "  the object to receive the augmentation"}, {"type": "Function", "name": "s", "description": "  the object that supplies the properties to augment"}, {"type": "boolean", "name": "ov", "description": "  if true, properties already on the receiver\nwill be overwritten if found on the supplier."}, {"type": "string[]", "name": "wl", "description": "  a whitelist.  If supplied, only properties in \nthis list will be applied to the receiver."}], "guessedname": "aggregate", "guessedtype": "function"}}, "file": "oop.js", "shortname": "YUI~oop", "description": "The following methods are added to the YUI instance"}, "DataType.Boolean": {"name": "DataType.Boolean", "namespace": "", "module": "aui-datatype", "guessedname": "DB", "methods": {"parse": {"return": {"type": "boolean", "description": "Parsed value"}, "description": "Parses any <code>falsey</code> value to <code>false</code> and\n<code>non-falsey</code> to <code>true</code>.", "param": "{*} data falsey or non-falsey values (i.e., falsey values: null, false, undefined, NaN; non-falsey values: 1, true, 'abc').", "params": [{"type": "*", "name": "data", "description": " falsey or non-falsey values (i.e., falsey values: null, false, undefined, NaN; non-falsey values: 1, true, 'abc')."}], "guessedname": "parse", "guessedtype": "function"}}, "static": "", "file": "aui-datatype.js", "guessedtype": "property", "shortname": "DataType.Boolean", "description": "DataType.Boolean provides a set of utility to parse <code>falsey</code>\nvalue to <code>false</code> and <code>non-falsey</code> to\n<code>true</code>."}, "DataSource.Function": {"name": "DataSource.Function", "configs": {"source": {"default": "null", "type": "MIXED", "description": "Pointer to live data.", "guessedname": "source", "guessedtype": "property"}}, "constructors": [{"description": "Function subclass for the DataSource Utility."}], "namespace": "", "module": "datasource", "events": {"sourceChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "sourceChange", "description": "Fires when the value for the configuration attribute 'source' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "guessedname": "LANG", "methods": {"_defRequestFn": {"description": "Passes query string to IO. Fires <code>response</code> event when\nresponse is received asynchronously.", "param": "e {Event.Facade} Event Facade with the following properties:\n<dl>\n<dt>tId (Number)</dt> <dd>Unique transaction ID.</dd>\n<dt>request (Object)</dt> <dd>The request.</dd>\n<dt>callback (Object)</dt> <dd>The callback object with the following properties:\n<dl>\n<dt>success (Function)</dt> <dd>Success handler.</dd>\n<dt>failure (Function)</dt> <dd>Failure handler.</dd>\n</dl>\n</dd>\n<dt>cfg (Object)</dt> <dd>Configuration object.</dd>\n</dl>", "protected": "", "params": [{"type": "Event.Facade", "name": "e", "description": "  Event Facade with the following properties:\n<dl>\n<dt>tId (Number)</dt> <dd>Unique transaction ID.</dd>\n<dt>request (Object)</dt> <dd>The request.</dd>\n<dt>callback (Object)</dt> <dd>The callback object with the following properties:\n<dl>\n<dt>success (Function)</dt> <dd>Success handler.</dd>\n<dt>failure (Function)</dt> <dd>Failure handler.</dd>\n</dl>\n</dd>\n<dt>cfg (Object)</dt> <dd>Configuration object.</dd>\n</dl>"}], "guessedname": "_defRequestFn", "guessedtype": "function"}}, "extends": "DataSource.Local", "superclass": "DataSource.Local", "file": "datasource.js", "guessedtype": "property", "shortname": "DataSource.Function", "properties": {"NAME": {"description": "Class name.", "value": "\"dataSourceFunction\"", "static": "", "guessedname": "NAME", "guessedtype": "property", "type": "String", "final": ""}}, "description": "Function subclass for the DataSource Utility."}, "Assert.Error": {"name": "Assert.Error", "constructors": [{"params": [{"type": "String", "name": "message", "description": " The message to display when the error occurs."}], "description": "Error is thrown whenever an assertion fails. It provides methods\nto more easily get at error information and also provides a base class\nfrom which more specific assertion errors can be derived."}], "namespace": "Assert", "module": "test", "guessedname": "Error", "methods": {"valueOf": {"return": {"type": "String", "description": "A primitive value version of the error."}, "description": "Returns a primitive value version of the error. Same as toString().", "guessedname": "valueOf", "guessedtype": "function"}, "getMessage": {"return": {"type": "String", "description": "A string describing the error."}, "description": "Returns a fully formatted error for an assertion failure. This should\nbe overridden by all subclasses to provide specific information.", "guessedname": "getMessage", "guessedtype": "function"}, "toString": {"return": {"type": "String", "description": "A string representation of the error."}, "description": "Returns a string representation of the error.", "guessedname": "toString", "guessedtype": "function"}}, "file": "test.js", "guessedtype": "function", "shortname": "Error", "properties": {"name": {"type": "String", "description": "The name of the error that occurred.", "guessedname": "name", "guessedtype": "property"}}, "description": "Error is thrown whenever an assertion fails. It provides methods\nto more easily get at error information and also provides a base class\nfrom which more specific assertion errors can be derived."}, "YAHOO.widget.SWF": {"name": "YAHOO.widget.SWF", "constructors": [{"params": [{"type": "String|HTMLElement", "name": "id", "description": " The id of the element, or the element itself that the SWF will be inserted into.  \nThe width and height of the SWF will be set to the width and height of this container element."}, {"type": "String", "name": "swfURL", "description": " The URL of the SWF to be embedded into the page."}, {"type": "Object", "name": "p_oAttributes", "description": " (optional) Configuration parameters for the Flash application and values for Flashvars\nto be passed to the SWF."}], "description": "Creates the SWF instance and keeps the configuration data"}], "namespace": "YAHOO.widget", "module": "swf", "methods": {"eventHandler": {"description": "Handles an event coming from within the SWF and delegate it\nto a specific instance of SWF.", "param": "swfid {String} the id of the SWF dispatching the event", "params": [{"type": "String", "name": "swfid", "description": "  the id of the SWF dispatching the event"}, {"type": "Object", "name": "event", "description": "  the event being transmitted."}], "private": "", "guessedname": "eventHandler", "guessedtype": "function"}, "callSWF": {"param": "func {String} the name of the function to call", "params": [{"type": "String", "name": "func", "description": "  the name of the function to call"}, {"type": "Object", "name": "args", "description": "  the set of arguments to pass to the function."}], "description": "Calls a specific function exposed by the SWF's\nExternalInterface.", "guessedname": "callSWF", "guessedtype": "function"}, "toString": {"return": {"type": "String", "description": "Unique name of the SWF instance."}, "description": "Public accessor to the unique name of the SWF instance.", "guessedname": "toString", "guessedtype": "function"}, "_eventHandler": {"description": "Propagates a specific event from Flash to JS.", "param": "event {Object} The event to be propagated from Flash.", "params": [{"type": "Object", "name": "event", "description": "  The event to be propagated from Flash."}], "private": "", "guessedname": "_eventHandler", "guessedtype": "function"}}, "file": "swf.js", "augments": "Y.Event.Target", "shortname": "SWF", "properties": {"_instances": {"guessedname": "_instances", "type": "Object", "description": "The static collection of all instances of the SWFs on the page.", "private": "", "guessedtype": "property"}}, "description": "Creates the SWF instance and keeps the configuration data"}, "ArrayList~filter": {"name": "ArrayList~filter", "namespace": "", "module": "collection", "methods": {"filter": {"return": {"type": " ArrayList ", "description": "New instance based on who passed the validator"}, "description": "<p>Create a new ArrayList (or augmenting class instance) from a subset\nof items as determined by the boolean function passed as the\nargument.  The original ArrayList is unchanged.</p>\n<p>The validator signature is <code>validator( item )</code>.</p>", "param": "validator { Function } Boolean function to determine in or out", "params": [{"type": " Function ", "name": "validator", "description": "  Boolean function to determine in or out"}], "guessedname": "filter", "guessedtype": "function"}}, "file": "collection.js", "shortname": "ArrayList~filter", "description": "Adds filter method to ArrayList prototype"}, "WidgetParent": {"name": "WidgetParent", "namespace": "", "module": "widget-parent", "properties": {"_childrenContainer": {"description": "<p>By default WidgetParent will render it's children to the parent's content box.</p>\n<p>If the children need to be rendered somewhere else, the _childrenContainer property\ncan be set to the Node which the children should be rendered to. This property should be\nset before the _renderChildren method is invoked, ideally in your renderUI method, \nas soon as you create the element to be rendered to.</p>", "value": "The content box", "protected": "", "guessedname": "renderTo", "guessedtype": "property", "type": "Node"}}, "configs": {"selection": {"readonly": "", "type": "{Y.ArrayList|Widget}", "description": "Returns the currently selected child Widget.  If the \n<code>mulitple</code> attribte is set to <code>true</code> will \nreturn an Y.ArrayList instance containing the currently selected \nchildren.  If no children are selected, will return null.", "guessedname": "selection", "guessedtype": "property"}, "activeDescendant": {"readonly": "", "type": "Widget", "description": "Returns the Widget's currently focused descendant Widget.", "guessedname": "activeDescendant", "guessedtype": "property"}, "multiple": {"description": "Boolean indicating if multiple children can be selected at \nonce.  Whether or not multiple selection is enabled is always delegated\nto the value of the <code>multiple</code> attribute of the root widget\nin the object hierarchy.", "writeonce": "", "default": "false", "guessedname": "multiple", "guessedtype": "property", "type": "Boolean"}, "defaultChildType": {"type": "{String|Object}", "description": "String representing the default type of the children \nmanaged by this Widget.  Can also supply default type as a constructor\nreference.", "guessedname": "defaultChildType", "guessedtype": "property"}}, "methods": {"selectAll": {"description": "Selects all children.", "guessedname": "selectAll", "guessedtype": "function"}, "selectChild": {"param": "{Number} i the index of the child to be selected", "params": [{"type": "Number", "name": "i", "description": " the index of the child to be selected"}], "description": "Selects the child at the given index (zero-based).", "guessedname": "selectChild", "guessedtype": "function"}, "_updateActiveDescendant": {"description": "Attribute change listener for the <code>focused</code> \nattribute of child Widgets, responsible for setting the value of the \nparent's <code>activeDescendant</code> attribute.", "param": "{EventFacade} event The event facade for the attribute change.", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": " The event facade for the attribute change."}], "guessedname": "_updateActiveDescendant", "guessedtype": "function"}, "_bindUIParent": {"protected": "", "description": "Sets up DOM and CustomEvent listeners for the parent widget.\n<p>\nThis method in invoked after bindUI is invoked for the Widget class\nusing YUI's aop infrastructure.\n</p>", "guessedname": "_bindUIParent", "guessedtype": "function"}, "_add": {"return": {"type": "Widget|Array", "description": "Successfully added Widget or Array containing the \nsuccessfully added Widget instance(s). If no children where added, will \nwill return undefined."}, "description": "Adds a Widget as a child.  If the specified Widget already\nhas a parent it will be removed from its current parent before\nbeing added as a child.", "param": "child {Widget|Object} The Widget instance, or configuration \nobject for the Widget to be added as a child.", "protected": "", "params": [{"type": "Widget|Object", "name": "child", "description": "  The Widget instance, or configuration \nobject for the Widget to be added as a child."}, {"type": "Array", "name": "child", "description": "  Array of Widget instances, or configuration \nobjects for the Widgets to be added as a children."}, {"type": "Number", "name": "index", "description": "  (Optional.)  Number representing the position at \nwhich the child should be inserted."}], "guessedname": "_add", "guessedtype": "function"}, "_updateSelection": {"description": "Attribute change listener for the <code>selected</code> \nattribute of child Widgets, responsible for setting the value of the \nparent's <code>selection</code> attribute.", "param": "{EventFacade} event The event facade for the attribute change.", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": " The event facade for the attribute change."}], "guessedname": "_updateSelection", "guessedtype": "function"}, "_afterParentSelectedChange": {"description": "Attribute change listener for the <code>selected</code> \nattribute, responsible for syncing the selected state of all children to \nmatch that of their parent Widget.", "param": "{EventFacade} event The event facade for the attribute change.", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": " The event facade for the attribute change."}], "guessedname": "_afterParentSelectedChange", "guessedtype": "function"}, "_defRemoveChildFn": {"description": "Default removeChild handler", "param": "event {EventFacade} The Event object", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": "  The Event object"}, {"type": "Widget", "name": "child", "description": "  The Widget instance to be removed."}, {"type": "Number", "name": "index", "description": "  Number representing the index of the Widget to \nbe removed."}], "guessedname": "_defRemoveChildFn", "guessedtype": "function"}, "_afterDestroyChild": {"description": "Destroy event listener for each child Widget, responsible for removing \nthe destroyed child Widget from the parent's internal array of children\n(_items property).", "param": "{EventFacade} event The event facade for the attribute change.", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": " The event facade for the attribute change."}], "guessedname": "_afterDestroyChild", "guessedtype": "function"}, "add": {"return": {"type": "Y.ArrayList", "description": "Y.ArrayList containing the successfully added \nWidget instance(s).  If no children where added, will return an empty \nY.ArrayList instance."}, "description": "Adds a Widget as a child.  If the specified Widget already\nhas a parent it will be removed from its current parent before\nbeing added as a child.", "param": "child {Widget|Object} The Widget instance, or configuration \nobject for the Widget to be added as a child.", "params": [{"type": "Widget|Object", "name": "child", "description": "  The Widget instance, or configuration \nobject for the Widget to be added as a child."}, {"type": "Array", "name": "child", "description": "  Array of Widget instances, or configuration \nobjects for the Widgets to be added as a children."}, {"type": "Number", "name": "index", "description": "  (Optional.)  Number representing the position at \nwhich the child should be inserted."}], "guessedname": "add", "guessedtype": "function"}, "_afterActiveDescendantChange": {"description": "Attribute change listener for the <code>activeDescendant</code> \nattribute, responsible for setting the value of the \nparent's <code>activeDescendant</code> attribute.", "param": "{EventFacade} event The event facade for the attribute change.", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": " The event facade for the attribute change."}], "guessedname": "_afterActiveDescendantChange", "guessedtype": "function"}, "_createChild": {"description": "Creates an instance of a child Widget using the specified configuration.\nBy default Widget instances will be created of the type specified \nby the <code>defaultChildType</code> attribute.  Types can be explicitly\ndefined via the <code>type</code> property of the configuration object\nliteral.", "param": "config {Object} Object literal representing the configuration \nused to create an instance of a Widget.", "protected": "", "params": [{"type": "Object", "name": "config", "description": "  Object literal representing the configuration \nused to create an instance of a Widget."}], "guessedname": "_createChild", "guessedtype": "function"}, "_uiAddChild": {"description": "Updates the UI in response to a child being added.", "param": "child {Widget} The child Widget instance to render.", "protected": "", "params": [{"type": "Widget", "name": "child", "description": "  The child Widget instance to render."}, {"type": "Object", "name": "parentNode", "description": "  The Node under which the \nchild Widget is to be rendered."}], "guessedname": "_uiAddChild", "guessedtype": "function"}, "_setSelection": {"return": {"type": "Widget|Array", "description": "Widget or Array of Widget instances."}, "description": "Default setter for <code>selection</code> attribute changes.", "param": "child {Widget|Array} Widget or Array of Widget instances.", "protected": "", "params": [{"type": "Widget|Array", "name": "child", "description": "  Widget or Array of Widget instances."}], "guessedname": "_setSelection", "guessedtype": "function"}, "_destroyChildren": {"protected": "", "description": "Destroys all child Widgets for the parent.\n<p>\nThis method is invoked before the destructor is invoked for the Widget \nclass using YUI's aop infrastructure.\n</p>", "guessedname": "_destroyChildren", "guessedtype": "function"}, "deselectAll": {"description": "Deselects all children.", "guessedname": "deselectAll", "guessedtype": "function"}, "_afterSelectionChange": {"description": "Attribute change listener for the <code>selection</code> \nattribute, responsible for setting the value of the \nparent's <code>selected</code> attribute.", "param": "{EventFacade} event The event facade for the attribute change.", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": " The event facade for the attribute change."}], "guessedname": "_afterSelectionChange", "guessedtype": "function"}, "_renderChildren": {"protected": "", "description": "Renders all child Widgets for the parent.\n<p>\nThis method in invoked after renderUI is invoked for the Widget class\nusing YUI's aop infrastructure.\n</p>", "guessedname": "_renderChildren", "guessedtype": "function"}, "_uiRemoveChild": {"description": "Updates the UI in response to a child being removed.", "param": "child {Widget} The child Widget instance to render.", "protected": "", "params": [{"type": "Widget", "name": "child", "description": "  The child Widget instance to render."}], "guessedname": "_uiRemoveChild", "guessedtype": "function"}, "remove": {"return": {"type": "Widget", "description": "Widget instance that was successfully removed, otherwise\nundefined."}, "description": "Removes the Widget from its parent.  Optionally, can remove\na child by specifying its index.", "param": "index {Number} (Optional.)  Number representing the index of the \nchild to be removed.", "params": [{"type": "Number", "name": "index", "description": "  (Optional.)  Number representing the index of the \nchild to be removed."}], "guessedname": "remove", "guessedtype": "function"}, "removeAll": {"return": {"type": "Y.ArrayList", "description": "Y.ArrayList instance containing Widgets that were \nsuccessfully removed.  If no children where removed, will return an empty \nY.ArrayList instance."}, "description": "Removes all of the children from the Widget.", "guessedname": "removeAll", "guessedtype": "function"}, "_defAddChildFn": {"description": "Default addChild handler", "param": "event {EventFacade} The Event object", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": "  The Event object"}, {"type": "Widget", "name": "child", "description": "  The Widget instance, or configuration \nobject for the Widget to be added as a child."}, {"type": "Number", "name": "index", "description": "  Number representing the position at \nwhich the child will be inserted."}], "guessedname": "_defAddChildFn", "guessedtype": "function"}}, "param": "{Object} config User configuration object.", "file": "widget-parent.js", "shortname": "WidgetParent", "events": {"defaultChildTypeChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "defaultChildTypeChange", "description": "Fires when the value for the configuration attribute 'defaultChildType' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "multipleChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "multipleChange", "description": "Fires when the value for the configuration attribute 'multiple' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "addChild": {"preventable": "_defAddChildFn", "params": [{"type": "EventFacade", "name": "e", "description": " The Event Facade"}], "description": "Fires when a Widget is add as a child.  The event object will have a \n'child' property that returns a reference to the child Widget, as well \nas an 'index' property that returns a reference to the index specified \nwhen the add() method was called.\n<p>\nSubscribers to the \"on\" moment of this event, will be notified \nbefore a child is added.\n</p>\n<p>\nSubscribers to the \"after\" moment of this event, will be notified\nafter a child is added.\n</p>", "param": "{EventFacade} e The Event Facade"}, "activeDescendantChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "activeDescendantChange", "description": "Fires when the value for the configuration attribute 'activeDescendant' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "selectionChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "selectionChange", "description": "Fires when the value for the configuration attribute 'selection' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "removeChild": {"preventable": "_defRemoveChildFn", "params": [{"type": "EventFacade", "name": "e", "description": " The Event Facade"}], "description": "Fires when a child Widget is removed.  The event object will have a \n'child' property that returns a reference to the child Widget, as well \nas an 'index' property that returns a reference child's ordinal position.\n<p>\nSubscribers to the \"on\" moment of this event, will be notified \nbefore a child is removed.\n</p>\n<p>\nSubscribers to the \"after\" moment of this event, will be notified\nafter a child is removed.\n</p>", "param": "{EventFacade} e The Event Facade"}}, "description": "Widget extension providing functionality enabling a Widget to be a \nparent of another Widget."}, "SliderBase": {"name": "SliderBase", "configs": {"length": {"default": "150px", "type": "{String | Number} e.g. \"200px\", \"6em\", or 200 (defaults to px)", "description": "The length of the rail (exclusive of the end caps if positioned by\nCSS).  This corresponds to the movable range of the thumb.", "guessedname": "length", "guessedtype": "property"}, "thumbUrl": {"default": "thumb-x.png or thumb-y.png in the sam skin directory of the\ncurrent build path for Slider", "type": "{String}", "description": "Path to the thumb image.  This will be used as both the thumb and\nshadow as a sprite.  Defaults at render() to thumb-x.png or\nthumb-y.png in the skin directory of the current skin.", "guessedname": "thumbUrl", "guessedtype": "property"}, "axis": {"description": "Axis upon which the Slider's thumb moves.  &quot;x&quot; for\nhorizontal, &quot;y&quot; for vertical.", "writeonce": "", "default": "&quot;x&quot;", "guessedname": "axis", "guessedtype": "property", "type": "{String}"}}, "constructors": [{"params": [{"type": "Object", "name": "config", "description": "  Configuration object"}], "description": "Create a slider to represent an input control capable of representing a\nseries of intermediate states based on the position of the slider's thumb.\nThese states are typically aligned to a value algorithm whereby the thumb\nposition corresponds to a given value. Sliders may be oriented vertically or\nhorizontally, based on the <code>axis</code> configuration."}], "namespace": "", "module": "slider", "events": {"lengthChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "lengthChange", "description": "Fires when the value for the configuration attribute 'length' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "axisChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "axisChange", "description": "Fires when the value for the configuration attribute 'axis' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "thumbUrlChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "thumbUrlChange", "description": "Fires when the value for the configuration attribute 'thumbUrl' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "thumbMove": {"params": [{"type": "Event", "name": "event", "description": "  The event object for the thumbMove with the\nfollowing extra properties:\n<dl>\n<dt>offset</dt>\n<dd>Pixel offset from top/left of the slider to the new\nthumb position</dd>\n<dt>ddEvent</dt>\n<dd><code>drag:drag</code> event from the thumb</dd>\n</dl>"}], "description": "Signals that the thumb has moved.  Payload includes the thumb's\npixel offset from the top/left edge of the rail, and if triggered by\ndragging the thumb, the <code>drag:drag</code> event.", "param": "event {Event} The event object for the thumbMove with the\nfollowing extra properties:\n<dl>\n<dt>offset</dt>\n<dd>Pixel offset from top/left of the slider to the new\nthumb position</dd>\n<dt>ddEvent</dt>\n<dd><code>drag:drag</code> event from the thumb</dd>\n</dl>"}, "slideStart": {"param": "event {Event} The event object for the slideEnd with the\nfollowing extra properties:\n<dl>\n<dt>ddEvent</dt>\n<dd><code>drag:end</code> event from the thumb</dd>\n</dl>", "params": [{"type": "Event", "name": "event", "description": "  The event object for the slideStart with the\nfollowing extra properties:\n<dl>\n<dt>ddEvent</dt>\n<dd><code>drag:start</code> event from the thumb</dd>\n</dl>"}], "description": "Signals the beginning of a thumb drag operation.  Payload includes\nthe thumb's drag:start event.", "guessedname": "ddEvent", "guessedtype": "property"}}, "methods": {"_afterLengthChange": {"description": "Handles changes to the <code>length</code> attribute.  By default, it\ntriggers an update to the UI.", "param": "e {Event} The lengthChange event object", "protected": "", "params": [{"type": "Event", "name": "e", "description": "  The lengthChange event object"}], "guessedname": "_afterLengthChange", "guessedtype": "function"}, "renderRail": {"return": {"type": "Node", "description": "the rail node subtree"}, "description": "Creates the Slider rail DOM subtree for insertion into the Slider's\n<code>contentBox</code>.  Override this method if you want to provide\nthe rail element (presumably from existing markup).", "guessedname": "renderRail", "guessedtype": "function"}, "_setLength": {"return": {"type": "String", "description": "the sanitized value"}, "description": "Ensures the stored length value is a string with a quantity and unit.\nUnit will be defaulted to &quot;px&quot; if not included.  Rejects\nvalues less than or equal to 0 and those that don't at least start with\na number.", "param": "v {String} proposed value for the length attribute", "protected": "", "params": [{"type": "String", "name": "v", "description": "  proposed value for the length attribute"}], "guessedname": "_setLength", "guessedtype": "function"}, "syncUI": {"description": "Synchronizes the DOM state with the attribute settings.", "guessedname": "syncUI", "guessedtype": "function"}, "_bindValueLogic": {"protected": "", "description": "Stub implementation.  Override this (presumably in a class extension) to\ninitialize any value logic that depends on the presence of the Drag\ninstance.", "guessedname": "_bindValueLogic", "guessedtype": "function"}, "_onDragEnd": {"description": "Dispatches the <code>slideEnd</code> event.", "param": "e {Event} the <code>drag:end</code> event from the thumb", "protected": "", "params": [{"type": "Event", "name": "e", "description": "  the <code>drag:end</code> event from the thumb"}], "guessedname": "_afterDragEnd", "guessedtype": "function"}, "_setAxis": {"return": {"type": "String", "description": "lowercased first character of the input string"}, "description": "Validates the axis is &quot;x&quot; or &quot;y&quot; (case insensitive).\nConverts to lower case for storage.", "param": "v {String} proposed value for the axis attribute", "protected": "", "params": [{"type": "String", "name": "v", "description": "  proposed value for the axis attribute"}], "guessedname": "_setAxis", "guessedtype": "function"}, "_onDragStart": {"description": "Dispatches the <code>slideStart</code> event.", "param": "e {Event} the <code>drag:start</code> event from the thumb", "protected": "", "params": [{"type": "Event", "name": "e", "description": "  the <code>drag:start</code> event from the thumb"}], "guessedname": "_onDragStart", "guessedtype": "function"}, "renderThumb": {"return": {"type": "Node", "description": "the thumb node subtree"}, "description": "Creates the Slider thumb DOM subtree for insertion into the Slider's\nrail.  Override this method if you want to provide the thumb element\n(presumably from existing markup).", "guessedname": "renderThumb", "guessedtype": "function"}, "_initThumbUrl": {"protected": "", "description": "<p>Defaults the thumbURL attribute according to the current skin, or\n&quot;sam&quot; if none can be determined.  Horizontal Sliders will have\ntheir <code>thumbUrl</code> attribute set to</p>\n<p><code>&quot;/<em>configured</em>/<em>yu</em>i/<em>builddi</em>r/slider/assets/skins/sam/thumb-x.png&quot;</code></p>\n<p>And vertical thumbs will get</p>\n<p><code>&quot;/<em>configured</em>/<em>yui</em>/<em>builddir</em>/slider/assets/skins/sam/thumb-y.png&quot;</code></p>", "guessedname": "_initThumbUrl", "guessedtype": "function"}, "_uiSetRailLength": {"description": "Sets the rail length according to the <code>length</code> attribute.", "param": "length {String} the length to apply to the rail style", "protected": "", "params": [{"type": "String", "name": "length", "description": "  the length to apply to the rail style"}], "guessedname": "_uiSetRailLength", "guessedtype": "function"}, "_uiMoveThumb": {"description": "Moves the thumb to pixel offset position along the rail.", "param": "offset {Number} the pixel offset to set as left or top style", "protected": "", "params": [{"type": "Number", "name": "offset", "description": "  the pixel offset to set as left or top style"}], "guessedname": "_uiMoveThumb", "guessedtype": "function"}, "_bindThumbDD": {"protected": "", "description": "Makes the thumb draggable and constrains it to the rail.", "guessedname": "_bindThumbDD", "guessedtype": "function"}, "_afterDisabledChange": {"description": "Locks or unlocks the thumb.", "param": "e {Event} The disabledChange event object", "protected": "", "params": [{"type": "Event", "name": "e", "description": "  The disabledChange event object"}], "guessedname": "_afterDisabledChange", "guessedtype": "function"}, "bindUI": {"protected": "", "description": "Creates the Y.DD.Drag instance used to handle the thumb movement and\nbinds Slider interaction to the configured value model.", "guessedname": "bindUI", "guessedtype": "function"}, "initializer": {"protected": "", "description": "Construction logic executed during Slider instantiation.", "guessedname": "initializer", "guessedtype": "function"}, "_syncThumbPosition": {"protected": "", "description": "Stub implementation.  Override this (presumably in a class extension) to\nensure the thumb is in the correct position according to the value\nalogorithm.\ninstance.", "guessedname": "_syncThumbPosition", "guessedtype": "function"}, "renderUI": {"protected": "", "description": "Create the DOM structure for the Slider.", "guessedname": "renderUI", "guessedtype": "function"}, "_afterDrag": {"description": "Dispatches the <code>thumbMove</code> event.", "param": "e {Event} the <code>drag:drag</code> event from the thumb", "protected": "", "params": [{"type": "Event", "name": "e", "description": "  the <code>drag:drag</code> event from the thumb"}], "guessedname": "_afterDrag", "guessedtype": "function"}}, "extends": "Widget", "superclass": "Widget", "file": "slider.js", "shortname": "SliderBase", "properties": {"CONTENT_TEMPLATE": {"default": "&lt;span>&lt;/span>", "type": "{String}", "description": "Content box template that will contain the Slider's rail and thumb.", "guessedname": "CONTENT_TEMPLATE", "guessedtype": "property"}, "thumb": {"type": "{Node}", "description": "The Node instance of the Slider's thumb element.  Do not write to\nthis property.", "guessedname": "thumb", "guessedtype": "property"}, "SliderBase.NAME": {"description": "The identity of the widget.", "default": "'sliderBase'", "readonly": "", "protected": "", "static": "", "guessedname": "NAME", "guessedtype": "property", "type": "String"}, "_key": {"protected": "", "type": "{Object}", "description": "Cached fast access map for DOM properties and attributes that\npertain to accessing dimensional or positioning information\naccording to the Slider's axis (e.g. &quot;height&quot; vs.\n&quot;width&quot;).  Extension classes should add to this collection\nfor axis related strings if necessary.", "guessedname": "_key", "guessedtype": "property"}, "rail": {"type": "{Node}", "description": "The Node instance of the Slider's rail element.  Do not write to\nthis property.", "guessedname": "rail", "guessedtype": "property"}, "_dd": {"protected": "", "type": "{DD.Drag}", "description": "The DD.Drag instance linked to the thumb node.", "guessedname": "_dd", "guessedtype": "property"}, "BOUNDING_TEMPLATE": {"default": "&lt;span>&lt;/span>", "type": "{String}", "description": "Bounding box template that will contain the Slider's DOM subtree.  &lt;span&gt;s are used to support inline-block styling.", "guessedname": "BOUNDING_TEMPLATE", "guessedtype": "property"}, "SliderBase.ATTRS": {"description": "Static property used to define the default attribute configuration of\nthe Widget.", "protected": "", "static": "", "guessedname": "ATTRS", "guessedtype": "property", "type": "{Object}"}, "RAIL_TEMPLATE": {"default": "&lt;span class=\"{railClass}\">&lt;span class=\"{railMinCapClass}\">&lt;/span>&lt;span class=\"{railMaxCapClass}\">&lt;/span>&lt;/span>", "type": "{String}", "description": "Rail template that will contain the end caps and the thumb.\n{placeholder}s are used for template substitution at render time.", "guessedname": "RAIL_TEMPLATE", "guessedtype": "property"}, "THUMB_TEMPLATE": {"default": "&lt;span class=\"{thumbClass}\" tabindex=\"-1\">&lt;img src=\"{thumbShadowUrl}\" alt=\"Slider thumb shadow\" class=\"{thumbShadowClass}\">&lt;img src=\"{thumbImageUrl}\" alt=\"Slider thumb\" class=\"{thumbImageClass}\">&lt;/span>", "type": "{String}", "description": "Thumb template that will contain the thumb image and shadow. &lt;img>\ntags are used instead of background images to avoid a flicker bug in IE.\n{placeholder}s are used for template substitution at render time.", "guessedname": "THUMB_TEMPLATE", "guessedtype": "property"}, "axis": {"protected": "", "type": "{String}", "description": "The configured axis, stored for fast lookup since it's a writeOnce\nattribute.  This is for use by extension classes.  For\nimplementation code, use <code>get( &quot;axis&quot; )</code> for\nauthoritative source.  Never write to this property.", "guessedname": "axis", "guessedtype": "property"}}, "description": "Create a slider to represent an input control capable of representing a\nseries of intermediate states based on the position of the slider's thumb.\nThese states are typically aligned to a value algorithm whereby the thumb\nposition corresponds to a given value. Sliders may be oriented vertically or\nhorizontally, based on the <code>axis</code> configuration."}, "Overlay": {"name": "Overlay", "constructors": [{"params": [{"type": "Object", "name": "object", "description": " The user configuration for the instance."}], "description": "A basic Overlay Widget, which can be positioned based on Page XY co-ordinates and is stackable (z-index support).\nIt also provides alignment and centering support and uses a standard module format for it's content, with header,\nbody and footer section support."}], "namespace": "", "module": "overlay", "guessedname": "Overlay", "uses": ["WidgetStdMod", "WidgetPosition", "WidgetStack", "WidgetPositionAlign", "WidgetPositionConstrain"], "superclass": "Widget", "file": "overlay.js", "guessedtype": "property", "extends": "Widget", "shortname": "Overlay", "description": "A basic Overlay Widget, which can be positioned based on Page XY co-ordinates and is stackable (z-index support).\nIt also provides alignment and centering support and uses a standard module format for it's content, with header,\nbody and footer section support."}, "A.HTML5": {"name": "A.HTML5", "namespace": "", "module": "aui-node", "guessedname": "HTML5", "methods": {"IECreateFix": {"return": {"type": "Node | DocumentFragment", "description": ""}, "description": "Receives a <code>frag</code> and a HTML content. This method\nshivs the HTML5 nodes appended to a Node or fragment which is not\non the document yet.", "param": "{Node | DocumentFragment} frag Fragment to be fixed.", "params": [{"type": "Node | DocumentFragment", "name": "frag", "description": " Fragment to be fixed."}, {"type": "String", "name": "content", "description": " HTML to be set (using innerHTML) on the <code>frag</code>."}], "guessedname": "IECreateFix", "guessedtype": "function"}, "_doBeforeCreate": {"return": {"type": "DocumentFragment", "description": ""}, "description": "AOP listener to the A.DOM._create method. This method\nintercepts all the calls to the A.DOM._create and append the\ngenerated fragment to <a\nhref=\"A.HTML5.html#property_A.HTML._fragHTML5Shived\">A.HTML._fragHTML5Shived</a>,\nthis fixes the IE bug for painting the HTML5 nodes on the HTML\nfragment.", "param": "{String} html HTML content", "protected": "", "params": [{"type": "String", "name": "html", "description": " HTML content"}, {"type": "String", "name": "doc", "description": ""}, {"type": "String", "name": "tag", "description": ""}], "guessedname": "_doBeforeCreate", "guessedtype": "function"}}, "file": "aui-node.js", "guessedtype": "property", "shortname": "A.HTML5", "properties": {"A.HTML._fragHTML5Shived": {"protected": "", "type": "DocumentFragment (shived)", "description": "A global DocumentFragment already HTML5 shived, for performance\nreasons. (i.e., all nodes and its HTML5 children appended to this\nfragment iherits the styles on IE).", "guessedname": "_fragHTML5Shived", "guessedtype": "property"}}, "description": "<p>An object that encapsulates util methods for HTML5 shiving.</p>\n<h2>What is a \"shiv\"?</h1>\n<p>To the world, a shiv is a slang term for a sharp object used as a\nknife-like weapon. To Internet Explorer, a shiv is a script that, when\nexecuted, forces the browser to recognize HTML5 elements.</p>"}, "A.Node": {"name": "A.Node", "constructors": [{"description": "Augment the <a href=\"Node.html\">YUI3 Node</a> with more util methods.\nCheck the list of <a href=\"Node.html#methods\">Methods</a> available for\nAUI Node."}], "namespace": "", "module": "aui-node", "methods": {"_getText": {"description": "Extract text content from the passed nodes.", "param": "{Native NodeList} childNodes", "params": [{"type": "Native NodeList", "name": "childNodes", "description": ""}], "private": "", "guessedname": "_getText", "guessedtype": "function"}, "show": {"description": "<p>Show the node removing a css class used to hide it. Use the same\nclassName added using the <a href=\"A.Node.html#method_hide\">hide</a>\nmethod. If <code>cssClass</code> is not passed as argument, the\nclassName 'aui-helper-hidden' will be used by default.</p>\n<p><string>NOTE:</string> This method assume that your node were hidden\nbecause of the 'aui-helper-hidden' css class were being used. This won't\nmanipulate the inline <code>style.display</code> property.</p>", "chainable": "", "param": "{string} cssClass Class name to hide the element. Optional.", "params": [{"type": "string", "name": "cssClass", "description": " Class name to hide the element. Optional."}], "guessedname": "show", "guessedtype": "function"}, "text": {"param": "{String} text A string of text to set as the content of the node instance.", "params": [{"type": "String", "name": "text", "description": " A string of text to set as the content of the node instance."}], "description": "<p>Get or Set the combined text contents of the node instance,\nincluding it's descendants. If the <code>text</code>\nis passed it's set the content of the element, otherwise it works as a\ngetter for the current content.</p>\nExample:\n<pre><code>var node = A.one('#nodeId');\nnode.text('Setting new text content');\n// Alert the value of the current content\nalert( node.text() );\n</code></pre>", "guessedname": "text", "guessedtype": "function"}, "getDOM": {"return": {"type": "HTMLNode", "description": "The DOM node bound to the Node instance."}, "description": "Retrieves the DOM node bound to a Node instance. See\n<a href=\"Node.html#method_getDOMNode\">getDOMNode</a>.", "guessedname": "getDOM", "guessedtype": "function"}, "resetId": {"description": "Generate an unique identifier and reset the id attribute of the node\ninstance using the new value. Invokes the\n<a href=\"A.Node.html#method_guid\">guid</a>.", "chainable": "", "param": "{String} prefix Optional prefix for the guid.", "params": [{"type": "String", "name": "prefix", "description": " Optional prefix for the guid."}], "guessedname": "resetId", "guessedtype": "function"}, "toggle": {"description": "<p>Displays or hide the node instance.</p>\n<p><string>NOTE:</string> This method assume that your node were hidden\nbecause of the 'aui-helper-hidden' css class were being used. This won't\nmanipulate the inline <code>style.display</code> property.</p>", "chainable": "", "param": "{String} cssClass Class name to hide or show the element. Optional.", "params": [{"type": "String", "name": "cssClass", "description": " Class name to hide or show the element. Optional."}], "guessedname": "toggle", "guessedtype": "function"}, "outerHTML": {"return": {"type": "string", "description": "The outerHTML of the given element."}, "description": "Gets the outerHTML of a node, which islike innerHTML, except that it\nactually contains the HTML of the node itself.", "guessedname": "outerHTML", "guessedtype": "function"}, "attr": {"return": {"type": "String", "description": ""}, "description": "<p>Get or Set the value of an attribute for the first element in the\nset of matched elements. If only the <code>name</code> is passed it\nworks as a getter.</p>\nExample:\n<pre><code>var node = A.one('#nodeId');\nnode.attr('title', 'Setting a new title attribute');\n// Alert the value of the title attribute: 'Setting a new title attribute'\nalert( node.attr('title') );\n</code></pre>", "param": "{String} name The name of the attribute", "params": [{"type": "String", "name": "name", "description": " The name of the attribute"}, {"type": "String", "name": "value", "description": " The value of the attribute to be set. Optional."}], "guessedname": "attr", "guessedtype": "function"}, "guid": {"return": {"type": "String", "description": "The current id of the node"}, "description": "Set the id of the Node instance if the object does not have one. The\ngenerated id is based on a guid created by the\n<a href=\"YUI.html#method_stamp\">stamp</a> method.", "param": "{string} prefix optional guid prefix", "params": [{"type": "string", "name": "prefix", "description": " optional guid prefix"}], "guessedname": "guid", "guessedtype": "function"}, "ancestors": {"return": {"type": "NodeList", "description": ""}, "description": "<p>Returns the current ancestors of the node element. If a selector is\nspecified, the ancestors are filtered to match the selector.</p>\nExample:\n<pre><code>\nA.one('#nodeId').ancestors('div');\n</code></pre>", "param": "{String} selector A selector to filter the ancestor elements against.", "params": [{"type": "String", "name": "selector", "description": " A selector to filter the ancestor elements against."}], "guessedname": "ancestors", "guessedtype": "function"}, "hide": {"description": "<p>Hide the node adding a css class on it. If <code>cssClass</code> is not\npassed as argument, the className 'aui-helper-hidden' will be used by\ndefault.</p>\n<p><string>NOTE:</string> This method assume that your node were visible\nbecause the absence of 'aui-helper-hidden' css class. This won't\nmanipulate the inline <code>style.display</code> property.</p>", "chainable": "", "param": "{string} cssClass Class name to hide the element. Optional.", "params": [{"type": "string", "name": "cssClass", "description": " Class name to hide the element. Optional."}], "guessedname": "hide", "guessedtype": "function"}, "val": {"param": "{string} value Value to be set. Optional.", "params": [{"type": "string", "name": "value", "description": " Value to be set. Optional."}], "description": "<p>Get or Set the value attribute of the node instance. If the\n<code>value</code> is passed it's set the value of the element,\notherwise it works as a getter for the current value.</p>\nExample:\n<pre><code>var input = A.one('#inputId');\ninput.val('Setting new input value');\n// Alert the value of the input\nalert( input.val() );\n</code></pre>", "guessedname": "val", "guessedtype": "function"}, "unselectable": {"chainable": "", "description": "Disables text selection for this element (normalized across browsers).", "guessedname": "unselectable", "guessedtype": "function"}, "placeAfter": {"description": "<p>Inserts a <code>newNode</code> after the node instance (i.e., as the next\nsibling). If the reference node has no parent, then does nothing.</p>\nExample:\n<pre><code>var titleNode = A.one('#titleNode');\nvar descriptionNode = A.one('#descriptionNode');\n// the description is usually shown after the title\ntitleNode.placeAfter(descriptionNode);\n</code></pre>", "chainable": "", "param": "{Node} newNode Node to insert.", "params": [{"type": "Node", "name": "newNode", "description": " Node to insert."}], "guessedname": "placeAfter", "guessedtype": "function"}, "html": {"param": "{string} value A string of html to set as the content of the node instance.", "params": [{"type": "string", "name": "value", "description": " A string of html to set as the content of the node instance."}], "description": "<p>Get or Set the HTML contents of the node. If the <code>value</code>\nis passed it's set the content of the element, otherwise it works as a\ngetter for the current content.</p>\nExample:\n<pre><code>var node = A.one('#nodeId');\nnode.html('Setting new HTML');\n// Alert the value of the current content\nalert( node.html() );\n</code></pre>", "guessedname": "html", "guessedtype": "function"}, "empty": {"chainable": "", "description": "<p>This method removes not only child (and other descendant) elements,\nbut also any text within the set of matched elements. This is because,\naccording to the DOM specification, any string of text within an element\nis considered a child node of that element.</p>\nExample:\n<pre><code>var node = A.one('#nodeId');\nnode.empty();\n</code></pre>", "guessedname": "empty", "guessedtype": "function"}, "selectText": {"param": "{Number} start The index to start the selection range from", "params": [{"type": "Number", "name": "start", "description": " The index to start the selection range from"}, {"type": "Number", "name": "end", "description": " The index to end the selection range at"}], "description": "Selects a substring of text inside of the input element.", "guessedname": "selectText", "guessedtype": "function"}, "_hoverOverHandler": {"description": "The event handler for the \"over\" function that is fired for events attached via the hover method.", "param": "{EventFacade} event", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "private": "", "guessedname": "_hoverOverHandler", "guessedtype": "function"}, "hover": {"return": {"type": "Node", "description": "The current Node instance"}, "description": "Create a hover interaction.", "param": "{string} overFn", "params": [{"type": "string", "name": "overFn", "description": ""}, {"type": "string", "name": "outFn", "description": ""}], "guessedname": "hover", "guessedtype": "function"}, "clone": {"return": {"type": "Node", "description": ""}, "description": "Normalizes the behavior of cloning a node, which by default should not clone\nthe events that are attached to it.\nExample:\n<pre><code>var node = A.one('#nodeId');\nnode.clone().appendTo('body');\n</code></pre>", "guessedname": "clone", "guessedtype": "function"}, "selectable": {"chainable": "", "description": "Enables text selection for this element (normalized across browsers).", "guessedname": "selectable", "guessedtype": "function"}, "swallowEvent": {"description": "<p>Stops the specified event(s) from bubbling and optionally prevents the\ndefault action.</p>\nExample:\n<pre><code>var anchor = A.one('a#anchorId');\nanchor.swallowEvent('click');\n</code></pre>", "chainable": "", "param": "{String/Array} eventName an event or array of events to stop from bubbling", "params": [{"type": "String/Array", "name": "eventName", "description": " an event or array of events to stop from bubbling"}, {"type": "Boolean", "name": "preventDefault", "description": " (optional) true to prevent the default action too"}], "guessedname": "swallowEvent", "guessedtype": "function"}, "radioClass": {"description": "Add one or more CSS classes to an element and remove the class(es)\nfrom the siblings of the element.", "chainable": "", "param": "{String} cssClass", "params": [{"type": "String", "name": "cssClass", "description": ""}], "guessedname": "radioClass", "guessedtype": "function"}, "placeBefore": {"description": "<p>Inserts a <code>newNode</code> before the node instance (i.e., as the previous\nsibling). If the reference node has no parent, then does nothing.</p>\nExample:\n<pre><code>var descriptionNode = A.one('#descriptionNode');\nvar titleNode = A.one('#titleNode');\n// the title is usually shown before the description\ndescriptionNode.placeBefore(titleNode);\n</code></pre>", "chainable": "", "param": "{Node} newNode Node to insert.", "params": [{"type": "Node", "name": "newNode", "description": " Node to insert."}], "guessedname": "placeBefore", "guessedtype": "function"}, "prependTo": {"description": "<p>Inserts the node instance to the begining of the <code>selector</code>\nnode (i.e., insert before the <code>firstChild</code> of the\n<code>selector</code>).</p>\nExample:\n<pre><code>var node = A.one('#nodeId');\nnode.prependTo('body');\n</code></pre>", "chainable": "", "param": "{Node | String} selector A selector, element, HTML string, Node", "params": [{"type": "Node | String", "name": "selector", "description": " A selector, element, HTML string, Node"}], "guessedname": "prependTo", "guessedtype": "function"}, "center": {"description": "<p>Centralize the current Node instance with the passed\n<code>centerWith</code> Node, if not specified, the body will be\nused.</p>\nExample:\n<pre><code>var node = A.one('#nodeId');\n// Center the <code>node</code> with the <code>#container</code>.\nnode.center('#container');\n</code></pre>", "chainable": "", "param": "{Node | String} centerWith Node to center with", "params": [{"type": "Node | String", "name": "centerWith", "description": " Node to center with"}], "guessedname": "center", "guessedtype": "function"}, "appendTo": {"return": {"type": "String", "description": ""}, "description": "<p>Insert the node instance to the end of the <code>selector</code>\nelement.</p>\nExample:\n<pre><code>var node = A.one('#nodeId');\n// using another Node instance\nvar body = A.one('body');\nnode.appendTo(body);\n// using a CSS selector\nnode.appendTo('#container');\n</code></pre>", "chainable": "", "param": "{Node | String} selector A selector, element, HTML string, Node", "params": [{"type": "Node | String", "name": "selector", "description": " A selector, element, HTML string, Node"}], "guessedname": "appendTo", "guessedtype": "function"}, "_hoverOutHandler": {"description": "The event handler for the \"out\" function that is fired for events attached via the hover method.", "param": "{EventFacade} event", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "private": "", "guessedname": "_hoverOutHandler", "guessedtype": "function"}, "_place": {"description": "Place a node or html string at a specific location", "param": "{Node|String} newNode", "params": [{"type": "Node|String", "name": "newNode", "description": ""}, {"type": "Node", "name": "refNode", "description": ""}], "private": "", "guessedname": "_place", "guessedtype": "function"}}, "uses": ["Node"], "file": "aui-node.js", "shortname": "A.Node", "description": "Augment the <a href=\"Node.html\">YUI3 Node</a> with more util methods.\nCheck the list of <a href=\"Node.html#methods\">Methods</a> available for\nAUI Node."}, "Tooltip": {"name": "Tooltip", "configs": {"anim": {"default": "{ show: false }", "type": "Object", "description": "See <a href=\"OverlayContextPanel.html#config_anim\">OverlayContextPanel anim</a>.", "guessedname": "anim", "guessedtype": "property"}, "hideOn": {"default": "mouseout", "type": "String", "description": "See <a href=\"OverlayContext.html#config_showOn\">OverlayContext showOn</a>.", "guessedname": "hideOn", "guessedtype": "property"}, "title": {"default": "false", "type": "boolean", "description": "Use the content of the <code>title</code> attribute as the Tooltip\ncontent.", "guessedname": "title", "guessedtype": "property"}, "align": {"default": "{ node: null, points: [ BL, TR ] }", "type": "Object", "description": "See <a href=\"Overlay.html#config_align\">OverlayContextPanel align</a>.", "guessedname": "align", "guessedtype": "property"}, "showOn": {"default": "mouseover", "type": "String", "description": "See <a href=\"OverlayContext.html#config_showOn\">OverlayContext showOn</a>.", "guessedname": "showOn", "guessedtype": "property"}, "hideDelay": {"default": "500", "type": "Number", "description": "See <a href=\"OverlayContext.html#config_hideDelay\">OverlayContext hideDelay</a>.", "guessedname": "hideDelay", "guessedtype": "property"}}, "constructors": [{"params": [{"type": "Object", "name": "config", "description": "  Object literal specifying widget configuration properties."}], "description": "<p><img src=\"assets/images/aui-tooltip/main.png\"/></p>\nA base class for Tooltip, providing:\n<ul>\n<li>Widget Lifecycle (initializer, renderUI, bindUI, syncUI, destructor)</li>\n<li>Additional information when hovering over a target element</li>\n</ul>\nQuick Example:<br/>\n<pre><code>var instance = new A.Tooltip({\ntrigger: '#element',\nalign: { points: [ 'lc', 'rc' ] },\nbodyContent: 'Simple tooltip'\n}).render();\n</code></pre>\nCheck the list of <a href=\"Tooltip.html#configattributes\">Configuration Attributes</a> available for\nTooltip."}], "namespace": "", "module": "aui-tooltip", "events": {"alignChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "alignChange", "description": "Fires when the value for the configuration attribute 'align' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "showOnChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "showOnChange", "description": "Fires when the value for the configuration attribute 'showOn' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "animChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "animChange", "description": "Fires when the value for the configuration attribute 'anim' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "hideDelayChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "hideDelayChange", "description": "Fires when the value for the configuration attribute 'hideDelay' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "titleChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "titleChange", "description": "Fires when the value for the configuration attribute 'title' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "hideOnChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "hideOnChange", "description": "Fires when the value for the configuration attribute 'hideOn' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "guessedname": "Tooltip", "methods": {"bindUI": {"protected": "", "description": "Bind the events on the Tooltip UI. Lifecycle.", "guessedname": "bindUI", "guessedtype": "function"}, "_afterBodyChange": {"description": "Fires after the attribute <code>bodyContent</code> change.", "param": "{EventFacade} e", "protected": "", "params": [{"type": "EventFacade", "name": "e", "description": ""}], "guessedname": "_afterBodyChange", "guessedtype": "function"}, "_loadBodyContentFromTitle": {"description": "Use the <code>title</code> content of the <code>currentNode</code> as\nthe content of the Tooltip.", "param": "{Node} currentNode Current node being used by the Tooltip", "protected": "", "params": [{"type": "Node", "name": "currentNode", "description": " Current node being used by the Tooltip"}], "guessedname": "_loadBodyContentFromTitle", "guessedtype": "function"}, "show": {"description": "Over-ride the <code>show</code> to invoke the\n<a href=\"Tooltip.html#method__loadBodyContentFromTitle\">_loadBodyContentFromTitle</a>.\nSee <a href=\"OverlayContext.html#config_show\">OverlayContext show</a>.", "guessedname": "show", "guessedtype": "function"}}, "extends": "OverlayContextPanel", "superclass": "OverlayContextPanel", "file": "aui-tooltip.js", "guessedtype": "property", "shortname": "Tooltip", "properties": {"Tooltip.NAME": {"type": "String", "static": "", "description": "Static property provides a string to identify the class.", "guessedname": "NAME", "guessedtype": "property"}, "Tooltip.ATTRS": {"type": "Object", "static": "", "description": "Static property used to define the default attribute\nconfiguration for the Tooltip.", "guessedname": "ATTRS", "guessedtype": "property"}}, "description": "<p><img src=\"assets/images/aui-tooltip/main.png\"/></p>\nA base class for Tooltip, providing:\n<ul>\n<li>Widget Lifecycle (initializer, renderUI, bindUI, syncUI, destructor)</li>\n<li>Additional information when hovering over a target element</li>\n</ul>\nQuick Example:<br/>\n<pre><code>var instance = new A.Tooltip({\ntrigger: '#element',\nalign: { points: [ 'lc', 'rc' ] },\nbodyContent: 'Simple tooltip'\n}).render();\n</code></pre>\nCheck the list of <a href=\"Tooltip.html#configattributes\">Configuration Attributes</a> available for\nTooltip."}, "Subscriber": {"name": "Subscriber", "constructors": [{"params": [{"type": "Function", "name": "fn", "description": "       The wrapped function to execute"}, {"type": "Object", "name": "context", "description": "  The value of the keyword 'this' in the listener"}, {"type": "Array", "name": "args*", "description": "       0..n additional arguments to supply the listener"}], "description": "Stores the subscriber information to be used when the event fires."}], "namespace": "", "module": "event-custom", "guessedname": "Subscriber", "methods": {"contains": {"return": {"type": "boolean", "description": "true if the supplied arguments match this \nsubscriber's signature."}, "description": "Returns true if the fn and obj match this objects properties.\nUsed by the unsubscribe method to match the right subscriber.", "param": "{Function} fn the function to execute", "params": [{"type": "Function", "name": "fn", "description": " the function to execute"}, {"type": "Object", "name": "context", "description": " optional 'this' keyword for the listener"}], "guessedname": "contains", "guessedtype": "function"}, "notify": {"param": "args {Array} Arguments array for the subscriber", "params": [{"type": "Array", "name": "args", "description": "  Arguments array for the subscriber"}, {"type": "CustomEvent", "name": "ce", "description": "  The custom event that sent the notification"}], "description": "Executes the subscriber.", "guessedname": "notify", "guessedtype": "function"}}, "file": "event-custom.js", "guessedtype": "function", "shortname": "Subscriber", "properties": {"args": {"type": "Array", "description": "Additional arguments to propagate to the subscriber", "guessedname": "args", "guessedtype": "property"}, "id": {"type": "String", "description": "Unique subscriber id", "guessedname": "id", "guessedtype": "property"}, "context": {"type": "Object", "description": "Optional 'this' keyword for the listener", "guessedname": "context", "guessedtype": "property"}, "events": {"type": "{EventTarget}", "description": "Custom events for a given fire transaction."}, "fn": {"type": "Function", "description": "The callback that will be execute when the event fires\nThis is wrapped by Y.rbind if obj was supplied.", "guessedname": "fn", "guessedtype": "property"}, "once": {"description": "This listener only reacts to the event once"}}, "description": "Stores the subscriber information to be used when the event fires."}, "YUI~substitute": {"name": "YUI~substitute", "namespace": "", "module": "substitute", "methods": {"substitute": {"return": {"type": "string", "description": "the substituted string"}, "description": "Does variable substitution on a string. It scans through the string \nlooking for expressions enclosed in { } braces. If an expression \nis found, it is used a key on the object.  If there is a space in\nthe key, the first word is used for the key and the rest is provided\nto an optional function to be used to programatically determine the\nvalue (the extra information might be used for this decision). If \nthe value for the key in the object, or what is returned from the\nfunction has a string value, number value, or object value, it is \nsubstituted for the bracket expression and it repeats.  If this\nvalue is an object, it uses the Object's toString() if this has\nbeen overridden, otherwise it does a shallow dump of the key/value\npairs if Y.dump is available (if dump isn't available, toString()\nis used).\nThis method is included in the 'substitute' module.  It is not included\nin the YUI module.", "param": "s {string} The string that will be modified.", "params": [{"type": "string", "name": "s", "description": "  The string that will be modified."}, {"type": "", "name": "o", "description": " An object containing the replacement values"}, {"type": "function", "name": "f", "description": "  An optional function that can be used to\nprocess each match.  It receives the key,\nvalue, and any extra metadata included with\nthe key inside of the braces."}], "guessedname": "substitute", "guessedtype": "function"}}, "file": "substitute.js", "shortname": "YUI~substitute", "description": "The following methods are added to the YUI instance"}, "io": {"name": "io", "namespace": "", "module": "io", "properties": {"_headers": {"description": "Object of default HTTP headers to be initialized and sent\nfor all transactions.", "private": "", "static": "", "guessedname": "_headers", "guessedtype": "property", "type": "object"}, "_qState": {"description": "Property to determine whether the queue is set to\n1 (active) or 0 (inactive).  When inactive, transactions\nwill be stored in the queue until the queue is set to active.", "private": "", "static": "", "guessedname": "_qState", "guessedtype": "property", "type": "int"}, "_e": {"static": "", "type": "Object", "description": "Reference to \"io:complete\" event handler.", "private": ""}, "_transport": {"description": "Map of io transports.", "private": "", "static": "", "guessedname": "_transport", "guessedtype": "property", "type": "object"}, "_timeout": {"description": "Object that stores timeout values for any transaction with\na defined \"timeout\" configuration property.", "private": "", "static": "", "guessedname": "_timeout", "guessedtype": "property", "type": "object"}, "transactionId": {"description": "A transaction counter that increments for each transaction.", "private": "", "static": "", "guessedname": "transactionId", "guessedtype": "property", "type": "int"}, "_fn": {"description": "Object that stores callback handlers for cross-domain requests\nwhen using Flash as the transport.", "private": "", "static": "", "guessedname": "_fn", "guessedtype": "property", "type": "object"}, "_rS": {"description": "Map of transaction readyState values used when\nXDomainRequest is the XDR transport.", "private": "", "static": "", "guessedname": "_rS", "guessedtype": "property", "type": "object"}, "_yQ": {"description": "Array of transactions queued for processing", "private": "", "static": "", "guessedname": "_q", "guessedtype": "property", "type": "Object"}}, "methods": {"_concat": {"return": {"type": "", "description": "int"}, "description": "Method that concatenates string data for HTTP GET transactions.", "param": "{string} s - URI or root data.", "static": "", "private": "", "params": [{"type": "string", "name": "s", "description": " - URI or root data."}, {"type": "string", "name": "d", "description": " - data to be concatenated onto URI."}]}, "_stop": {"static": "", "return": {"type": "", "description": "void"}, "description": "Method for setting queue processing to inactive.\nTransaction requests to YUI.io.queue() will be stored in the queue, but\nnot processed until the queue is reset to \"active\".", "private": ""}, "_ioEnd": {"return": {"type": "", "description": "void"}, "description": "Fires event \"io:end\" and creates, fires a\ntransaction-specific \"end\" event, if config.on.end is\ndefined.", "param": "{object} o - transaction object.", "static": "", "private": "", "params": [{"type": "object", "name": "o", "description": " - transaction object."}, {"type": "object", "name": "c", "description": " - configuration object for the transaction."}]}, "_handle": {"return": {"type": "void", "description": ""}, "description": "Bound to the iframe's Load event and processes\nthe response data.", "param": "{o} o The transaction object", "static": "", "private": "", "params": [{"type": "o", "name": "o", "description": " The transaction object"}, {"type": "object", "name": "c", "description": " Configuration object for the transaction."}]}, "header": {"return": {"type": "", "description": "int"}, "description": "Method that stores default client headers for all transactions.\nIf a label is passed with no value argument, the header will be deleted.\nThis is the interface for _setHeader().", "param": "{string} l - HTTP header", "static": "", "guessedname": "header", "guessedtype": "property", "params": [{"type": "string", "name": "l", "description": " - HTTP header"}, {"type": "string", "name": "v", "description": " - HTTP header value"}], "public": ""}, "_startTimeout": {"return": {"type": "", "description": "void"}, "description": "Starts timeout count if the configuration object\nhas a defined timeout property.", "param": "{object} o - Transaction object generated by _create().", "static": "", "private": "", "params": [{"type": "object", "name": "o", "description": " - Transaction object generated by _create()."}, {"type": "object", "name": "t", "description": " - Timeout in milliseconds."}]}, "_ioFailure": {"return": {"type": "", "description": "void"}, "description": "Fires event \"io:failure\" and creates, fires a\ntransaction-specific \"failure\" event, if config.on.failure is\ndefined.", "param": "{object} o - transaction object.", "static": "", "private": "", "params": [{"type": "object", "name": "o", "description": " - transaction object."}, {"type": "object", "name": "c", "description": " - configuration object for the transaction."}]}, "io": {"return": {"type": "", "description": "object"}, "description": "Method for requesting a transaction. This\nis the interface for _io().", "param": "{string} uri - qualified path to transaction resource.", "static": "", "guessedname": "io", "guessedtype": "property", "params": [{"type": "string", "name": "uri", "description": " - qualified path to transaction resource."}, {"type": "object", "name": "c", "description": " - configuration object for the transaction."}], "public": ""}, "_isInProgress.": {"static": "", "param": "{object} o - Transaction object generated by _create() in io-base.", "params": [{"type": "object", "name": "o", "description": " - Transaction object generated by _create() in io-base."}], "description": "Method for determining if an XDR transaction has completed\nand all data are received.", "private": ""}, "_size": {"static": "", "return": {"type": "", "description": "int"}, "description": "Method to query the current size of the queue.", "private": ""}, "appendData": {"return": {"type": "array", "description": "e Array of created fields."}, "description": "Parses the POST data object and creates hidden form elements\nfor each key-value, and appends them to the HTML form object.", "param": "{object} f HTML form object.", "static": "", "private": "", "params": [{"type": "object", "name": "f", "description": " HTML form object."}, {"type": "string", "name": "s", "description": " The key-value POST data."}]}, "_ioSuccess": {"return": {"type": "", "description": "void"}, "description": "Fires event \"io:success\" and creates, fires a\ntransaction-specific \"success\" event, if config.on.success is\ndefined.", "param": "{object} o - transaction object.", "static": "", "private": "", "params": [{"type": "object", "name": "o", "description": " - transaction object."}, {"type": "object", "name": "c", "description": " - configuration object for the transaction."}]}, "size": {"return": {"type": "", "description": "number"}, "description": "Method to query the current size of the queue, or to\nset a maximum queue size.  This is the interface for _size().", "param": "{number} i - Specified maximum size of queue.", "static": "", "guessedname": "size", "guessedtype": "property", "params": [{"type": "number", "name": "i", "description": " - Specified maximum size of queue."}], "public": ""}, "_remove": {"static": "", "return": {"type": "", "description": "void"}, "description": "Method for removing a specific, pending transaction from\nthe queue.", "private": ""}, "_readyState": {"return": {"type": "", "description": "void"}, "description": "Event handler bound to onreadystatechange.", "param": "{object} o - Transaction object generated by _create().", "static": "", "private": "", "params": [{"type": "object", "name": "o", "description": " - Transaction object generated by _create()."}, {"type": "object", "name": "c", "description": " - Configuration object passed to YUI.io()."}]}, "start": {"return": {"type": "", "description": "void"}, "description": "Method for setting the queue to active. If there are\ntransactions pending in the queue, they will be processed from the\nqueue in FIFO order. This is the interface for _start().", "static": "", "guessedname": "start", "guessedtype": "property", "public": ""}, "_clearTimeout": {"return": {"type": "", "description": "void"}, "description": "Clears the timeout interval started by _startTimeout().", "param": "{number} id - Transaction id.", "static": "", "private": "", "params": [{"type": "number", "name": "id", "description": " - Transaction id."}]}, "transport": {"return": {"type": "", "description": "void"}, "description": "Method to initialize the desired transport.", "param": "{object} o - object of transport configurations.", "static": "", "guessedname": "transport", "guessedtype": "function", "params": [{"type": "object", "name": "o", "description": " - object of transport configurations."}], "public": ""}, "_serialize": {"return": {"type": "", "description": "string"}, "description": "Method to enumerate through an HTML form's elements collection\nand return a string comprised of key-value pairs.", "private": "", "static": "", "param": "{object} c - YUI form node or HTML form id.", "guessedname": "_serialize", "guessedtype": "function", "params": [{"type": "object", "name": "c", "description": " - YUI form node or HTML form id."}, {"type": "string", "name": "s", "description": " - Transaction data defined in the configuration."}]}, "_create": {"return": {"type": "", "description": "object"}, "description": "Method that creates a unique transaction object for each\nrequest.", "param": "{number} c - configuration object subset to determine if\nthe transaction is an XDR or file upload,\nrequiring an alternate transport.", "static": "", "private": "", "params": [{"type": "number", "name": "c", "description": " - configuration object subset to determine if\nthe transaction is an XDR or file upload,\nrequiring an alternate transport."}, {"type": "number", "name": "i", "description": " - transaction id"}]}, "_upload": {"return": {"type": "void", "description": ""}, "description": "Uploads HTML form data, inclusive of files/attachments,\nusing the iframe created in _create to facilitate the transaction.", "private": "", "static": "", "param": "{o} o The transaction object", "guessedname": "_upload", "guessedtype": "function", "params": [{"type": "o", "name": "o", "description": " The transaction object"}, {"type": "object", "name": "uri", "description": " Qualified path to transaction resource."}, {"type": "object", "name": "c", "description": " Configuration object for the transaction."}]}, "_resend": {"return": {"type": "", "description": "void"}, "description": "Resends an XDR transaction, using the Flash tranport,\nif the native transport fails.", "param": "{object} o - Transaction object generated by _create().", "static": "", "private": "", "params": [{"type": "object", "name": "o", "description": " - Transaction object generated by _create()."}, {"type": "string", "name": "uri", "description": " - qualified path to transaction resource."}, {"type": "object", "name": "c", "description": " - configuration object for the transaction."}]}, "xdrResponse": {"return": {"type": "", "description": "object"}, "description": "Response controller for cross-domain requests when using the\nFlash transport or IE8's XDomainRequest object.", "private": "", "static": "", "param": "{object} o - Transaction object generated by _create() in io-base.", "guessedname": "xdrResponse", "guessedtype": "function", "params": [{"type": "object", "name": "o", "description": " - Transaction object generated by _create() in io-base."}, {"type": "object", "name": "c", "description": " - configuration object for the transaction."}, {"type": "string", "name": "e", "description": " - Event name"}]}, "xdrReady": {"return": {"type": "", "description": "void"}, "description": "Fires event \"io:xdrReady\"", "private": "", "static": "", "param": "{number} id - transaction id", "guessedname": "xdrReady", "guessedtype": "function", "params": [{"type": "number", "name": "id", "description": " - transaction id"}, {"type": "object", "name": "c", "description": " - configuration object for the transaction."}]}, "stop": {"return": {"type": "", "description": "void"}, "description": "Method for setting queue processing to inactive.\nTransaction requests to YUI.io.queue() will be stored in the queue, but\nnot processed until the queue is restarted. This is the\ninterface for _stop().", "static": "", "guessedname": "stop", "guessedtype": "property", "public": ""}, "_destroy": {"return": {"type": "void", "description": ""}, "description": "", "param": "{o} o The transaction object", "static": "", "private": "", "params": [{"type": "o", "name": "o", "description": " The transaction object"}, {"type": "object", "name": "uri", "description": " Qualified path to transaction resource."}, {"type": "object", "name": "c", "description": " Configuration object for the transaction."}]}, "_shift": {"static": "", "return": {"type": "", "description": "void"}, "description": "Method Process the first transaction from the\nqueue in FIFO order.", "private": ""}, "_setHeader": {"return": {"type": "", "description": "int"}, "description": "Method that stores default client headers for all transactions.\nIf a label is passed with no value argument, the header will be deleted.", "param": "{string} l - HTTP header", "static": "", "private": "", "params": [{"type": "string", "name": "l", "description": " - HTTP header"}, {"type": "string", "name": "v", "description": " - HTTP header value"}]}, "_swf": {"return": {"type": "", "description": "void"}, "description": "Method that creates the Flash transport swf.", "param": "{string} uri - location of io.swf.", "static": "", "private": "", "params": [{"type": "string", "name": "uri", "description": " - location of io.swf."}, {"type": "string", "name": "yid", "description": " - YUI instance id."}]}, "_ioComplete": {"return": {"type": "", "description": "void"}, "description": "Fires event \"io:complete\" and creates, fires a\ntransaction-specific \"complete\" event, if config.on.complete is\ndefined.", "param": "{object} o - transaction object.", "static": "", "private": "", "params": [{"type": "object", "name": "o", "description": " - transaction object."}, {"type": "object", "name": "c", "description": " - configuration object for the transaction."}]}, "_data": {"return": {"type": "", "description": "object"}, "description": "Creates a response object for XDR transactions, for success\nand failure cases.", "param": "{object} o - Transaction object generated by _create() in io-base.", "static": "", "private": "", "params": [{"type": "object", "name": "o", "description": " - Transaction object generated by _create() in io-base."}, {"type": "boolean", "name": "f", "description": " - True if Flash was used as the transport."}, {"type": "boolean", "name": "t", "description": " - DataType value, as defined in the configuration."}]}, "promote": {"return": {"type": "", "description": "void"}, "description": "Method for promoting a transaction to the top of the queue.\nThis is the interface for _unshift().", "param": "{Object} o - Reference to queued transaction.", "static": "", "guessedname": "promote", "guessedtype": "property", "params": [{"type": "Object", "name": "o", "description": " - Reference to queued transaction."}], "public": ""}, "_setAttrs": {"return": {"type": "void", "description": ""}, "description": "Sets the appropriate attributes and values to the HTML\nform, in preparation of a file upload transaction.", "param": "{object} f HTML form object.", "static": "", "private": "", "params": [{"type": "object", "name": "f", "description": " HTML form object."}, {"type": "object", "name": "id", "description": " The Transaction ID."}, {"type": "object", "name": "uri", "description": " Qualified path to transaction resource."}]}, "_setHeaders": {"return": {"type": "", "description": "void"}, "description": "Method that sets all HTTP headers to be sent in a transaction.", "param": "{object} o - XHR instance for the specific transaction.", "static": "", "private": "", "params": [{"type": "object", "name": "o", "description": " - XHR instance for the specific transaction."}, {"type": "object", "name": "h", "description": " - HTTP headers for the specific transaction, as defined\nin the configuration object passed to YUI.io()."}]}, "_xhr": {"static": "", "return": {"type": "", "description": "object"}, "description": "Method that creates the XMLHttpRequest transport", "private": ""}, "_queue": {"static": "", "return": {"type": "", "description": "Object"}, "description": "Method for requesting a transaction, and queueing the\nrequest before it is sent to the resource.", "private": ""}, "f": {"return": {"type": "void", "description": ""}, "description": "Removes the custom fields created to pass additional POST\ndata, along with the HTML form fields.", "param": "{object} f HTML form object.", "static": "", "private": "", "params": [{"type": "object", "name": "f", "description": " HTML form object."}, {"type": "object", "name": "o", "description": " HTML form fields created from configuration.data."}]}, "_evt": {"return": {"type": "", "description": "void"}, "description": "Sets event handlers for XDomainRequest transactions.", "param": "{object} o - Transaction object generated by _create() in io-base.", "static": "", "private": "", "params": [{"type": "object", "name": "o", "description": " - Transaction object generated by _create() in io-base."}, {"type": "object", "name": "c", "description": " - configuration object for the transaction."}]}, "_abort": {"static": "", "param": "{object} o - Transaction object generated by _create() in io-base.", "params": [{"type": "object", "name": "o", "description": " - Transaction object generated by _create() in io-base."}, {"type": "object", "name": "c", "description": " - configuration object for the transaction."}], "description": "Method for intiating an XDR transaction abort.", "private": ""}, "remove": {"return": {"type": "", "description": "void"}, "description": "Method for removing a specific, pending transaction from\nthe queue. This is the interface for _remove().", "param": "{Object} o - Reference to queued transaction.", "static": "", "guessedname": "remove", "guessedtype": "property", "params": [{"type": "Object", "name": "o", "description": " - Reference to queued transaction."}], "public": ""}, "_io": {"return": {"type": "", "description": "object"}, "description": "Method for requesting a transaction. _io() is implemented as\nyui.io().  Each transaction may include a configuration object.  Its\nproperties are:\nmethod: HTTP method verb (e.g., GET or POST). If this property is not\nnot defined, the default value will be GET.\ndata: This is the name-value string that will be sent as the transaction\ndata.  If the request is HTTP GET, the data become part of\nquerystring. If HTTP POST, the data are sent in the message body.\nxdr: Defines the transport to be used for cross-domain requests.  By\nsetting this property, the transaction will use the specified\ntransport instead of XMLHttpRequest.\nThe properties are:\n{\nuse: Specify the transport to be used: 'flash' and 'native'\ndataType: Set the value to 'XML' if that is the expected\nresponse content type.\n}\nform: This is a defined object used to process HTML form as data.  The\nproperties are:\n{\nid: Node object or id of HTML form.\nuseDisabled: Boolean value to allow disabled HTML form field\nvalues to be sent as part of the data.\n}\non: This is a defined object used to create and handle specific\nevents during a transaction lifecycle.  These events will fire in\naddition to the global io events. The events are:\nstart - This event is fired when a request is sent to a resource.\ncomplete - This event fires when the transaction is complete.\nsuccess - This event fires when the response status resolves to\nHTTP 2xx.\nfailure - This event fires when the response status resolves to\nHTTP 4xx, 5xx; and, for all transaction exceptions,\nincluding aborted transactions and transaction timeouts.\nend -  This even is fired at the conclusion of the transaction\nlifecycle, after a success or failure resolution.\nThe properties are:\n{\nstart: function(id, arguments){},\ncomplete: function(id, responseobject, arguments){},\nsuccess: function(id, responseobject, arguments){},\nfailure: function(id, responseobject, arguments){},\nend: function(id, arguments){}\n}\nEach property can reference a function or be written as an\ninline function.\nsync: To enable synchronous transactions, set the configuration property\n\"sync\" to true; the default behavior is false.  Synchronous\ntransactions are limited to same-domain requests only.\ncontext: Object reference for all defined transaction event handlers\nwhen it is implemented as a method of a base object. Defining\n\"context\" will set the reference of \"this,\" used in the\nevent handlers, to the context value.  In the case where\ndifferent event handlers all have different contexts,\nuse Y.bind() to set the execution context, bypassing this\nconfiguration.\nheaders: This is a defined object of client headers, as many as.\ndesired for the transaction.  The object pattern is:\n{ 'header': 'value' }.\ntimeout: This value, defined as milliseconds, is a time threshold for the\ntransaction. When this threshold is reached, and the transaction's\nComplete event has not yet fired, the transaction will be aborted.\narguments: Object, array, string, or number passed to all registered\nevent handlers.  This value is available as the second\nargument in the \"start\" and \"abort\" event handlers; and, it is\nthe third argument in the \"complete\", \"success\", and \"failure\"\nevent handlers.", "param": "{string} uri - qualified path to transaction resource.", "static": "", "private": "", "params": [{"type": "string", "name": "uri", "description": " - qualified path to transaction resource."}, {"type": "object", "name": "c", "description": " - configuration object for the transaction."}, {"type": "number", "name": "i", "description": " - transaction id, if already set."}]}, "_ioStart": {"return": {"type": "", "description": "void"}, "description": "Fires event \"io:start\" and creates, fires a\ntransaction-specific start event, if config.on.start is\ndefined.", "param": "{number} id - transaction id", "static": "", "private": "", "params": [{"type": "number", "name": "id", "description": " - transaction id"}, {"type": "object", "name": "c", "description": " - configuration object for the transaction."}]}, "_resetAttrs": {"return": {"type": "void", "description": ""}, "description": "Sets the appropriate attributes and values to the HTML\nform, in preparation of a file upload transaction.", "param": "{object} f HTML form object.", "static": "", "private": "", "params": [{"type": "object", "name": "f", "description": " HTML form object."}, {"type": "object", "name": "a", "description": " Object of original attributes."}]}, "_unshift": {"static": "", "return": {"type": "", "description": "void"}, "description": "Method for promoting a transaction to the top of the queue.", "private": ""}, "_handleResponse": {"return": {"type": "", "description": "void"}, "description": "Method that determines if a transaction response qualifies\nas success or failure, based on the response HTTP status code, and\nfires the appropriate success or failure events.", "param": "{object} o - Transaction object generated by _create().", "static": "", "private": "", "params": [{"type": "object", "name": "o", "description": " - Transaction object generated by _create()."}, {"type": "object", "name": "c", "description": " - Configuration object passed to io()."}]}, "_ioCancel": {"return": {"type": "", "description": "void"}, "description": "Terminates a transaction due to an explicit abort or\ntimeout.", "param": "{object} o - Transaction object generated by _create().", "static": "", "private": "", "params": [{"type": "object", "name": "o", "description": " - Transaction object generated by _create()."}, {"type": "string", "name": "s", "description": " - Identifies timed out or aborted transaction."}]}, "_id": {"static": "", "return": {"type": "", "description": "int"}, "description": "Method that increments _transactionId for each transaction.", "private": ""}, "_tE": {"return": {"type": "", "description": "void"}, "description": "Method for creating and subscribing transaction events.", "param": "{string} e - event to be published", "static": "", "private": "", "params": [{"type": "string", "name": "e", "description": " - event to be published"}, {"type": "object", "name": "c", "description": " - configuration data subset for event subscription."}]}, "xdr": {"description": "Method for accessing the transport's interface for making a\ncross-domain transaction.", "private": "", "static": "", "param": "{string} uri - qualified path to transaction resource.", "guessedname": "xdr", "guessedtype": "function", "params": [{"type": "string", "name": "uri", "description": " - qualified path to transaction resource."}, {"type": "object", "name": "o", "description": " - Transaction object generated by _create() in io-base."}, {"type": "object", "name": "c", "description": " - configuration object for the transaction."}]}}, "file": "io.js", "shortname": "io", "events": {"io:end": {"type": "Event Custom", "description": "This event signifies the end of the transaction lifecycle.  The\ntransaction transport is destroyed.", "guessedname": "E_END", "guessedtype": "property"}, "io:start": {"type": "Event Custom", "description": "This event is fired by YUI.io when a transaction is initiated.", "guessedname": "E_START", "guessedtype": "property"}, "io:complete": {"type": "Event Custom", "description": "This event is fired by YUI.io when a transaction is complete.\nResponse status and data are accessible, if available.", "guessedname": "E_COMPLETE", "guessedtype": "property"}, "io:failure": {"type": "Event Custom", "description": "This event is fired by YUI.io when a transaction is complete, and\nthe HTTP status resolves to HTTP4xx, 5xx and above.", "guessedname": "E_FAILURE", "guessedtype": "property"}, "io:success": {"type": "Event Custom", "description": "This event is fired by YUI.io when a transaction is complete, and\nthe HTTP status resolves to HTTP2xx.", "guessedname": "E_SUCCESS", "guessedtype": "property"}, "io:xdrReady": {"type": "Event Custom", "description": "This event is fired by YUI.io when the specified transport is\nready for use.", "guessedname": "E_XDR_READY", "guessedtype": "property"}}, "description": "The io class is a utility that brokers HTTP requests through a simplified\ninterface.  Specifically, it allows JavaScript to make HTTP requests to\na resource without a page reload.  The underlying transport for making\nsame-domain requests is the XMLHttpRequest object.  YUI.io can also use\nFlash, if specified as a transport, for cross-domain requests."}, "History.Module": {"name": "History.Module", "constructors": [{"params": [{"type": "String", "name": "id", "description": "  the module identifier"}, {"type": "String", "name": "initialState", "description": "  the module's initial state"}], "description": "This class represents a browser history module."}], "namespace": "", "module": "history", "guessedname": "Module", "file": "history.js", "guessedtype": "function", "shortname": "History.Module", "properties": {"upcomingState": {"description": "The module's upcoming state. There can be a slight delay between the\ntime a state is changed, and the time a state change is detected.\nThis property allows us to not fire the module state changed event\nmultiple times, making client code simpler.", "private": "", "guessedname": "upcomingState", "guessedtype": "property", "type": "String", "final": ""}, "id": {"final": "", "type": "String", "description": "The module identifier", "guessedname": "id", "guessedtype": "property"}, "currentState": {"final": "", "type": "String", "description": "The module's current state", "guessedname": "currentState", "guessedtype": "property"}, "initialState": {"final": "", "type": "String", "description": "The module's initial state", "guessedname": "initialState", "guessedtype": "property"}}, "description": "This class represents a browser history module."}, "Assert.UnexpectedError": {"name": "Assert.UnexpectedError", "constructors": [{"params": [{"type": "Error", "name": "cause", "description": " The unexpected error that caused this error to be \nthrown."}], "description": "UnexpectedError is subclass of Error that is thrown whenever\nan error occurs within the course of a test and the test was not expected\nto throw an error."}], "namespace": "Assert", "module": "test", "guessedname": "UnexpectedError", "extends": "Assert.Error", "superclass": "Assert.Error", "file": "test.js", "guessedtype": "function", "shortname": "UnexpectedError", "properties": {"cause": {"type": "Error", "description": "The unexpected error that occurred.", "guessedname": "cause", "guessedtype": "property"}, "name": {"type": "String", "description": "The name of the error that occurred.", "guessedname": "name", "guessedtype": "property"}, "stack": {"type": "String", "description": "Stack information for the error (if provided).", "guessedname": "stack", "guessedtype": "property"}}, "description": "UnexpectedError is subclass of Error that is thrown whenever\nan error occurs within the course of a test and the test was not expected\nto throw an error."}, "Do": {"name": "Do", "namespace": "", "module": "event-custom", "guessedname": "BEFORE", "methods": {"_inject": {"return": {"type": "string", "description": "handle for the subscription"}, "description": "Execute the supplied method after the specified function", "private": "", "static": "", "param": "when {string} before or after", "guessedname": "_inject", "guessedtype": "function", "params": [{"type": "string", "name": "when", "description": "  before or after"}, {"type": "Function", "name": "fn", "description": "  the function to execute"}, {"type": "", "name": "obj", "description": " the object hosting the method to displace"}, {"type": "string", "name": "sFn", "description": "  the name of the method to displace"}, {"type": "", "name": "c", "description": " The execution context for fn"}]}, "detach": {"param": "handle {string} the subscription handle", "params": [{"type": "string", "name": "handle", "description": "  the subscription handle"}], "description": "Detach a before or after subscription", "guessedname": "detach", "guessedtype": "function"}, "after": {"return": {"type": "string", "description": "handle for the subscription"}, "description": "Execute the supplied method after the specified function", "param": "fn {Function} the function to execute", "static": "", "guessedname": "after", "guessedtype": "function", "params": [{"type": "Function", "name": "fn", "description": "  the function to execute"}, {"type": "", "name": "obj", "description": " the object hosting the method to displace"}, {"type": "string", "name": "sFn", "description": "  the name of the method to displace"}, {"type": "", "name": "c", "description": " The execution context for fn"}, {"type": "mixed", "name": "arg*", "description": "  0..n additional arguments to supply to the subscriber"}]}, "before": {"return": {"type": "string", "description": "handle for the subscription"}, "description": "Execute the supplied method before the specified function", "param": "fn {Function} the function to execute", "static": "", "guessedname": "before", "guessedtype": "function", "params": [{"type": "Function", "name": "fn", "description": "  the function to execute"}, {"type": "", "name": "obj", "description": " the object hosting the method to displace"}, {"type": "string", "name": "sFn", "description": "  the name of the method to displace"}, {"type": "", "name": "c", "description": " The execution context for fn"}, {"type": "mixed", "name": "arg*", "description": "  0..n additional arguments to supply to the subscriber\nwhen the event fires."}]}}, "static": "", "file": "event-custom.js", "guessedtype": "property", "shortname": "Do", "properties": {"objs": {"static": "", "description": "Cache of objects touched by the utility", "guessedname": "objs", "guessedtype": "property"}}, "description": "Allows for the insertion of methods that are executed before or after\na specified method"}, "Anim": {"name": "Anim", "for": "Anim", "configs": {"node": {"type": "Node", "description": "The object to be animated.", "guessedname": "node", "guessedtype": "property"}, "paused": {"description": "Whether or not the animation is currently paused.", "default": "false", "readonly": "", "guessedname": "paused", "guessedtype": "property", "type": "Boolean"}, "direction": {"default": "\"normal\"", "type": "String", "description": "How iterations of the animation should behave. \nPossible values are \"normal\" and \"alternate\".\nNormal will repeat the animation, alternate will reverse on every other pass.", "guessedname": "direction", "guessedtype": "property"}, "from": {"type": "Object\nsupports any unit, provided it matches the \"to\" (or default)\nunit (e.g. \"{width: 10em', color: 'rgb(0, 0 0)', borderColor: '#ccc'}\".\nIf using the default ('px' for length-based units), the unit may be omitted  (\n(e.g. \"{width: 100}, borderColor: 'ccc'}\", which defaults to pixels \nand hex, respectively).", "description": "The starting values for the animated properties. \nFields may be strings, numbers, or functions.\nIf a function is used, the return value becomes the from value.\nIf no from value is specified, the DEFAULT_GETTER will be used.", "guessedname": "from", "guessedtype": "property"}, "iterations": {"default": "1", "type": "Int", "description": "The number of times the animation should run", "guessedname": "iterations", "guessedtype": "property"}, "iterationCount": {"description": "The number of iterations that have occurred.\nResets when an animation ends (reaches iteration count or stop() called).", "default": "0", "readonly": "", "guessedname": "iterationCount", "guessedtype": "property", "type": "Int"}, "elapsedTime": {"description": "Current time the animation has been running.", "default": "0", "readonly": "", "guessedname": "elapsedTime", "guessedtype": "property", "type": "Int"}, "to": {"type": "Object\nsupports any unit, provided it matches the \"from\" (or default)\nunit (e.g. \"{width: '50%', color: 'red', borderColor: '#ccc'}\".\nIf using the default ('px' for length-based units), the unit may be omitted (\n(e.g. \"{width: 100}, borderColor: 'ccc'}\", which defaults to pixels \nand hex, respectively).", "description": "The ending values for the animated properties. \nFields may be strings, numbers, or functions.", "guessedname": "to", "guessedtype": "property"}, "running": {"description": "Whether or not the animation is currently running.", "default": "false", "readonly": "", "guessedname": "running", "guessedtype": "property", "type": "Boolean"}, "startTime": {"description": "Date stamp for the first frame of the animation.", "default": "0", "readonly": "", "guessedname": "startTime", "guessedtype": "property", "type": "Int"}, "duration": {"type": "NUM", "description": "The length of the animation.  Defaults to \"1\" (second).", "guessedname": "duration", "guessedtype": "property"}, "easing": {"type": "Function", "description": "The method that will provide values to the attribute(s) during the animation. \nDefaults to \"Easing.easeNone\".", "guessedname": "easing", "guessedtype": "property"}, "reverse": {"default": "false", "type": "Boolean", "description": "If true, animation begins from last frame", "guessedname": "reverse", "guessedtype": "property"}}, "constructors": [{"description": "A class for constructing animation instances."}], "namespace": "", "module": "anim", "properties": {"behaviors": {"static": "", "description": "Bucket for custom getters and setters", "guessedname": "behaviors", "guessedtype": "property"}, "DEFAULT_UNIT": {"static": "", "description": "The default unit to use with properties that pass the RE_DEFAULT_UNIT test.", "guessedname": "DEFAULT_UNIT", "guessedtype": "property"}, "RE_DEFAULT_UNIT": {"static": "", "description": "Regex of properties that should use the default unit.", "guessedname": "RE_DEFAULT_UNIT", "guessedtype": "property"}, "DEFAULT_GETTER": {"static": "", "description": "The default getter to use when getting object properties.", "guessedname": "DEFAULT_GETTER", "guessedtype": "function"}, "intervalTime": {"default": "20", "static": "", "description": "Time in milliseconds passed to setInterval for frame processing", "guessedname": "_intervalTime", "guessedtype": "property"}, "DEFAULT_SETTER": {"static": "", "description": "The default setter to use when setting object properties.", "guessedname": "DEFAULT_SETTER", "guessedtype": "function"}}, "guessedname": "RUNNING", "methods": {"_runFrame": {"guessedname": "_runFrame", "static": "", "description": "Called per Interval to handle each animation frame.", "private": "", "guessedtype": "function"}, "stop": {"chainable": "", "static": "", "description": "Stops all animation instances.", "guessedname": "stop", "guessedtype": "function"}, "getBezier": {"return": {"type": "Array", "description": "An array containing int x and y member data"}, "description": "Get the current position of the animated element based on t.\nEach point is an array of \"x\" and \"y\" values (0 = x, 1 = y)\nAt least 2 points are required (start and end).\nFirst point is start. Last point is end.\nAdditional control points are optional.", "param": "{Array} points An array containing Bezier points", "static": "", "guessedname": "getBezier", "guessedtype": "function", "params": [{"type": "Array", "name": "points", "description": " An array containing Bezier points"}, {"type": "Number", "name": "t", "description": " A number between 0 and 1 which is the basis for determining current position"}]}, "pause": {"chainable": "", "static": "", "description": "Pauses all animation instances.", "guessedname": "pause", "guessedtype": "function"}, "run": {"chainable": "", "static": "", "description": "Runs all animation instances.", "guessedname": "run", "guessedtype": "function"}}, "extends": "Base", "superclass": "Base", "file": "anim.js", "guessedtype": "property", "shortname": "Anim", "events": {"iterationCountChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "iterationCountChange", "description": "Fires when the value for the configuration attribute 'iterationCount' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "reverseChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "reverseChange", "description": "Fires when the value for the configuration attribute 'reverse' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "end": {"description": "fires after the animation completes.", "param": "{Event} ev The end event.", "params": [{"type": "Event", "name": "ev", "description": " The end event."}], "guessedname": "END", "guessedtype": "property", "type": "Event.Custom"}, "durationChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "durationChange", "description": "Fires when the value for the configuration attribute 'duration' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "resume": {"type": "Event.Custom", "params": [{"type": "Event", "name": "ev", "description": " The pause event."}], "description": "fires when an animation is resumed (run from pause).", "param": "{Event} ev The pause event."}, "iteration": {"type": "Event.Custom", "params": [{"type": "Event", "name": "ev", "description": " The iteration event."}], "description": "fires when an animation begins an iteration.", "param": "{Event} ev The iteration event."}, "toChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "toChange", "description": "Fires when the value for the configuration attribute 'to' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "iterationsChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "iterationsChange", "description": "Fires when the value for the configuration attribute 'iterations' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "nodeChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "nodeChange", "description": "Fires when the value for the configuration attribute 'node' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "tween": {"description": "fires every frame of the animation.", "param": "{Event} ev The tween event.", "params": [{"type": "Event", "name": "ev", "description": " The tween event."}], "guessedname": "TWEEN", "guessedtype": "property", "type": "Event.Custom"}, "start": {"description": "fires when an animation begins.", "param": "{Event} ev The start event.", "params": [{"type": "Event", "name": "ev", "description": " The start event."}], "guessedname": "START", "guessedtype": "property", "type": "Event.Custom"}, "fromChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "fromChange", "description": "Fires when the value for the configuration attribute 'from' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "pause": {"type": "Event.Custom", "params": [{"type": "Event", "name": "ev", "description": " The pause event."}], "description": "fires when an animation is paused.", "param": "{Event} ev The pause event."}, "runningChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "runningChange", "description": "Fires when the value for the configuration attribute 'running' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "pausedChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "pausedChange", "description": "Fires when the value for the configuration attribute 'paused' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "startTimeChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "startTimeChange", "description": "Fires when the value for the configuration attribute 'startTime' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "directionChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "directionChange", "description": "Fires when the value for the configuration attribute 'direction' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "elapsedTimeChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "elapsedTimeChange", "description": "Fires when the value for the configuration attribute 'elapsedTime' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "easingChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "easingChange", "description": "Fires when the value for the configuration attribute 'easing' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "description": "A class for constructing animation instances."}, "Plugin.DDProxy": {"name": "Plugin.DDProxy", "configs": {"positionProxy": {"type": "Boolean", "description": "Make the Proxy node appear in the same place as the original node. Default: true", "guessedname": "positionProxy", "guessedtype": "property"}, "hideOnEnd": {"type": "Boolean", "description": "Hide the drag node at the end of the drag. Default: true", "guessedname": "hideOnEnd", "guessedtype": "property"}, "resizeFrame": {"type": "Boolean", "description": "Make the Proxy node assume the size of the original node. Default: true", "guessedname": "resizeFrame", "guessedtype": "property"}, "borderStyle": {"type": "Boolean", "description": "The default border style for the border of the proxy. Default: 1px solid #808080", "guessedname": "borderStyle", "guessedtype": "property"}, "moveOnEnd": {"type": "Boolean", "description": "Move the original node at the end of the drag. Default: true", "guessedname": "moveOnEnd", "guessedtype": "property"}}, "constructors": [{"description": "Plugin for dd-drag for creating a proxy drag node, instead of dragging the original node."}], "namespace": "Plugin", "module": "dd", "events": {"moveOnEndChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "moveOnEndChange", "description": "Fires when the value for the configuration attribute 'moveOnEnd' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "hideOnEndChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "hideOnEndChange", "description": "Fires when the value for the configuration attribute 'hideOnEnd' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "positionProxyChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "positionProxyChange", "description": "Fires when the value for the configuration attribute 'positionProxy' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "borderStyleChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "borderStyleChange", "description": "Fires when the value for the configuration attribute 'borderStyle' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "resizeFrameChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "resizeFrameChange", "description": "Fires when the value for the configuration attribute 'resizeFrame' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "guessedname": "DDM", "methods": {"_init": {"description": "Handler for the proxy config attribute", "private": "", "guessedname": "_init", "guessedtype": "function"}}, "extends": "Base", "superclass": "Base", "file": "dd.js", "guessedtype": "property", "shortname": "DDProxy", "properties": {"NS": {"description": "The Proxy instance will be placed on the Drag instance under the proxy namespace.", "default": "con", "readonly": "", "protected": "", "static": "", "guessedname": "NS", "guessedtype": "property", "type": "{String}"}, "_hands": {"private": "", "description": "Holds the event handles for setting the proxy", "guessedname": "_hands", "guessedtype": "property"}}, "description": "Plugin for dd-drag for creating a proxy drag node, instead of dragging the original node."}, "DD.DDM": {"properties": {"_noShim": {"guessedname": "_noShim", "type": "{Boolean}", "description": "This flag turns off the use of the mouseover/mouseout shim. It should not be used unless you know what you are doing.", "private": "", "guessedtype": "property"}, "_pg": {"guessedname": "_pg", "type": "{Node}", "description": "The shim placed over the screen to track the mousemove event.", "private": "", "guessedtype": "property"}, "useHash": {"type": "{Boolean}", "description": "Should we only check targets that are in the viewport on drags (for performance), default: true", "guessedname": "useHash", "guessedtype": "property"}, "INTERSECT": {"guessedname": "INTERSECT", "type": "Number", "description": "In intersect mode, a Drop is targeted by \"part\" of the drag node being over the Target", "private": "", "guessedtype": "property"}, "activeDrag": {"type": "{Drag}", "description": "A reference to the currently active draggable object.", "guessedname": "activeDrag", "guessedtype": "property"}, "POINT": {"guessedname": "POINT", "type": "Number", "description": "In point mode, a Drop is targeted by the cursor being over the Target", "private": "", "guessedtype": "property"}, "_debugShim": {"guessedname": "_debugShim", "type": "{Boolean}", "description": "Set this to true to set the shims opacity to .5 for debugging it, default: false.", "private": "", "guessedtype": "property"}, "_active": {"type": "{Boolean}", "description": "flag set when we activate our first drag, so DDM can start listening for events.", "guessedname": "_active", "guessedtype": "property"}, "_delegates": {"guessedname": "_delegates", "type": "Array", "description": "Holder for all Y.DD.Delegate instances", "private": "", "guessedtype": "property"}, "validDrops": {"type": "{Array}", "description": "An array of the valid Drop Targets for this interaction."}, "STRICT": {"guessedname": "STRICT", "type": "Number", "description": "In strict mode, a Drop is targeted by the \"entire\" drag node being over the Target", "private": "", "guessedtype": "property"}, "mode": {"guessedname": "mode", "type": "Number", "description": "The mode that the drag operations will run in 0 for Point, 1 for Intersect, 2 for Strict", "private": "", "guessedtype": "property"}, "CSS_PREFIX": {"type": "{String}", "description": "The PREFIX to attach to all DD CSS class names", "guessedname": "CSS_PREFIX", "guessedtype": "property"}, "_activeShims": {"guessedname": "_activeShims", "type": "{Array}", "description": "Placeholder for all active shims on the page", "private": "", "guessedtype": "property"}, "otherDrops": {"type": "{Object}", "description": "An object literal of Other Drop Targets that we encountered during this interaction (in the case of overlapping Drop Targets)", "guessedname": "otherDrops", "guessedtype": "property"}, "targets": {"type": "{Array}", "description": "All of the Targets", "guessedname": "targets", "guessedtype": "property"}, "_drags": {"guessedname": "_drags", "type": "{Array}", "description": "Holder for all registered drag elements.", "private": "", "guessedtype": "property"}, "activeDrop": {"type": "{Object}", "description": "A reference to the active Drop Target", "guessedname": "activeDrop", "guessedtype": "property"}}, "name": "DD.DDM", "description": "Provides the base Drag Drop Manger required for making a Node draggable.", "constructors": [{"description": "Provides the base Drag Drop Manger required for making a Node draggable."}], "namespace": "DD", "module": "dd", "events": {"clickPixelThreshChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "clickPixelThreshChange", "description": "Fires when the value for the configuration attribute 'clickPixelThresh' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "dragCursorChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "dragCursorChange", "description": "Fires when the value for the configuration attribute 'dragCursor' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "ddm:start": {"type": "{Event.Custom}", "description": "Fires from the DDM before all drag events fire."}, "dragModeChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "dragModeChange", "description": "Fires when the value for the configuration attribute 'dragMode' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "ddm:end": {"type": "{Event.Custom}", "description": "Fires from the DDM after the DDM finishes, before the drag end events.", "guessedname": "requires", "guessedtype": "property"}, "clickTimeThreshChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "clickTimeThreshChange", "description": "Fires when the value for the configuration attribute 'clickTimeThresh' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "throttleTimeChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "throttleTimeChange", "description": "Fires when the value for the configuration attribute 'throttleTime' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "guessedname": "DDMBase", "extends": "Base", "superclass": "Base", "file": "dd.js", "guessedtype": "function", "shortname": "DDM", "configs": {"dragMode": {"type": "String", "description": "This attribute only works if the dd-drop module is active. It will set the dragMode (point, intersect, strict) of all future Drag instances.", "guessedname": "dragMode", "guessedtype": "property"}, "dragCursor": {"type": "String", "description": "The cursor to apply when dragging, if shimmed the shim will get the cursor.", "guessedname": "dragCursor", "guessedtype": "property"}, "throttleTime": {"type": "Number", "description": "The number of milliseconds to throttle the mousemove event. Default: 150", "guessedname": "throttleTime", "guessedtype": "property"}, "clickPixelThresh": {"type": "Number", "description": "The number of pixels to move to start a drag operation, default is 3.", "guessedname": "clickPixelThresh", "guessedtype": "property"}, "clickTimeThresh": {"type": "Number", "description": "The number of milliseconds a mousedown has to pass to start a drag operation, default is 1000.", "guessedname": "clickTimeThresh", "guessedtype": "property"}}, "methods": {"_calcTickArray": {"return": {"type": "", "description": "The tick position"}, "description": "This method is used with the tickXArray and tickYArray config options", "private": "", "params": [{"type": "Number", "name": "pos", "description": " The current X or Y position"}, {"type": "Number", "name": "ticks", "description": " The array containing our custom tick positions."}, {"type": "Number", "name": "off1", "description": " The min offset that we can't pass (region)"}, {"type": "Number", "name": "off2", "description": " The max offset that we can't pass (region)"}], "param": "{Number} pos The current X or Y position", "guessedname": "_calcTickArray", "guessedtype": "function"}, "cssSizestoObject": {"return": {"type": "Object", "description": "The gutter Object Literal."}, "description": "//TODO Private, rename??...", "private": "", "params": [{"type": "String", "name": "gutter", "description": " CSS style string for gutter: '5 0' (sets top and bottom to 5px, left and right to 0px), '1 2 3 4' (top 1px, right 2px, bottom 3px, left 4px)"}], "param": "{String} gutter CSS style string for gutter: '5 0' (sets top and bottom to 5px, left and right to 0px), '1 2 3 4' (top 1px, right 2px, bottom 3px, left 4px)", "guessedname": "cssSizestoObject", "guessedtype": "function"}, "_createPG": {"description": "Creates the shim and adds it's listeners to it.", "private": "", "guessedname": "_createPG", "guessedtype": "function"}, "_unregTarget": {"description": "Remove the passed in Target from the targets collection", "param": "{Object} drop The Target to remove from the targets collection", "params": [{"type": "Object", "name": "drop", "description": " The Target to remove from the targets collection"}], "private": "", "guessedname": "_unregTarget", "guessedtype": "function"}, "_deactivateTargets": {"description": "This method fires the drop:hit, drag:drophit, drag:dropmiss methods and deactivates the shims..", "private": "", "guessedname": "_deactivateTargets", "guessedtype": "function"}, "regDelegate": {"description": "Register a Delegate with the DDM", "guessedname": "regDelegate", "guessedtype": "function"}, "stopDrag": {"chainable": "", "return": {"type": "Self", "description": ""}, "description": "Method will forcefully stop a drag operation. For example calling this from inside an ESC keypress handler will stop this drag.", "guessedname": "stopDrag", "guessedtype": "function"}, "getDrop": {"return": {"type": "Object", "description": ""}, "description": "Get a valid Drop instance back from a Node or a selector string, false otherwise", "param": "{String/Object} node The Node instance or Selector string to check for a valid Drop Object", "params": [{"type": "String/Object", "name": "node", "description": " The Node instance or Selector string to check for a valid Drop Object"}], "guessedname": "getDrop", "guessedtype": "function"}, "_start": {"description": "Internal method used by Drag to signal the start of a drag operation", "private": "", "guessedname": "_start", "guessedtype": "function"}, "_dropMove": {"description": "This method is called when the move method is called on the Drag Object.", "private": "", "guessedname": "_dropMove", "guessedtype": "function"}, "_unregDrag": {"description": "Remove this drag object from the DDM._drags array.", "param": "{Drag} d The drag object.", "params": [{"type": "Drag", "name": "d", "description": " The drag object."}], "private": "", "guessedname": "_unregDrag", "guessedtype": "function"}, "clearCache": {"description": "Clears the cache data used for this interaction.", "guessedname": "clearCache", "guessedtype": "function"}, "_hasActiveShim": {"guessedname": "_hasActiveShim", "return": {"type": "Boolean", "description": ""}, "description": "This method checks the _activeShims Object to see if there is a shim active.", "private": "", "guessedtype": "function"}, "_startDrag": {"description": "Factory method to be overwritten by other DDM's", "param": "{Number} x The x position of the drag element", "params": [{"type": "Number", "name": "x", "description": " The x position of the drag element"}, {"type": "Number", "name": "y", "description": " The y position of the drag element"}, {"type": "Number", "name": "w", "description": " The width of the drag element"}, {"type": "Number", "name": "h", "description": " The height of the drag element"}], "private": "", "guessedname": "_startDrag", "guessedtype": "function"}, "_createFrame": {"guessedname": "_createFrame", "description": "Create the proxy element if it doesn't already exist and set the DD.DDM._proxy value", "private": "", "guessedtype": "function"}, "_addActiveShim": {"description": "Adds a Drop Target to the list of active shims", "param": "{Object} d The Drop instance to add to the list.", "params": [{"type": "Object", "name": "d", "description": " The Drop instance to add to the list."}], "private": "", "guessedname": "_addActiveShim", "guessedtype": "function"}, "_end": {"description": "Internal method used by Drag to signal the end of a drag operation", "private": "", "guessedname": "_end", "guessedtype": "function"}, "getBestMatch": {"return": {"type": "Object or Array", "description": ""}, "description": "This method will gather the area for all potential targets and see which has the hightest covered area and return it.", "param": "{Array} drops An Array of drops to scan for the best match.", "params": [{"type": "Array", "name": "drops", "description": " An Array of drops to scan for the best match."}, {"type": "Boolean", "name": "all", "description": " If present, it returns an Array. First item is best match, second is an Array of the other items in the original Array."}], "guessedname": "getBestMatch", "guessedtype": "function"}, "_removeActiveShim": {"description": "Removes a Drop Target to the list of active shims", "param": "{Object} d The Drop instance to remove from the list.", "params": [{"type": "Object", "name": "d", "description": " The Drop instance to remove from the list."}], "private": "", "guessedname": "_removeActiveShim", "guessedtype": "function"}, "swapPosition": {"return": {"type": "Node", "description": ""}, "description": "Swap the position of 2 nodes based on their CSS positioning.", "param": "{Node} n1 The first node to swap", "params": [{"type": "Node", "name": "n1", "description": " The first node to swap"}, {"type": "Node", "name": "n2", "description": " The first node to swap"}], "guessedname": "swapPosition", "guessedtype": "function"}, "getDrag": {"return": {"type": "Object", "description": ""}, "description": "Get a valid Drag instance back from a Node or a selector string, false otherwise", "param": "{String/Object} node The Node instance or Selector string to check for a valid Drag Object", "params": [{"type": "String/Object", "name": "node", "description": " The Node instance or Selector string to check for a valid Drag Object"}], "guessedname": "getDrag", "guessedtype": "function"}, "_move": {"description": "Internal listener for the mousemove DOM event to pass to the Drag's move method.", "param": "{Event.Facade} ev The Dom mousemove Event", "params": [{"type": "Event.Facade", "name": "ev", "description": " The Dom mousemove Event"}], "private": "", "guessedname": "_move", "guessedtype": "function"}, "_activateTargets": {"description": "Clear the cache and activate the shims of all the targets", "private": "", "guessedname": "_activateTargets", "guessedtype": "function"}, "_addValid": {"return": {"type": "Self", "description": ""}, "description": "Add a Drop Target to the list of Valid Targets. This list get's regenerated on each new drag operation.", "chainable": "", "private": "", "params": [{"type": "Object", "name": "drop", "description": ""}], "param": "{Object} drop", "guessedname": "_addValid", "guessedtype": "function"}, "syncActiveShims": {"param": "{Boolean} force Resize/sync all Targets.", "params": [{"type": "Boolean", "name": "force", "description": " Resize/sync all Targets."}], "description": "This method will sync the position of the shims on the Drop Targets that are currently active.", "guessedname": "syncActiveShims", "guessedtype": "function"}, "_removeValid": {"return": {"type": "Self", "description": ""}, "description": "Removes a Drop Target from the list of Valid Targets. This list get's regenerated on each new drag operation.", "chainable": "", "private": "", "params": [{"type": "Object", "name": "drop", "description": ""}], "param": "{Object} drop", "guessedname": "_removeValid", "guessedtype": "function"}, "swapNode": {"return": {"type": "Node", "description": ""}, "description": "Swap the position of 2 nodes based on their DOM location.", "param": "{Node} n1 The first node to swap", "params": [{"type": "Node", "name": "n1", "description": " The first node to swap"}, {"type": "Node", "name": "n2", "description": " The first node to swap"}], "guessedname": "swapNode", "guessedtype": "function"}, "_regTarget": {"description": "Add the passed in Target to the targets collection", "param": "{Object} t The Target to add to the targets collection", "params": [{"type": "Object", "name": "t", "description": " The Target to add to the targets collection"}], "private": "", "guessedname": "_regTarget", "guessedtype": "function"}, "_endDrag": {"description": "Factory method to be overwritten by other DDM's", "private": "", "guessedname": "_endDrag", "guessedtype": "function"}, "_setupListeners": {"description": "Add the document listeners.", "private": "", "guessedname": "_setupListeners", "guessedtype": "function"}, "_pg_deactivate": {"description": "Deactivates the shim", "private": "", "guessedname": "_pg_deactivate", "guessedtype": "function"}, "getDelegate": {"returns": "Y.DD.Delegate", "description": "Get a delegate instance from a container node", "guessedname": "getDelegate", "guessedtype": "function"}, "_pg_activate": {"description": "Activates the shim", "private": "", "guessedname": "_pg_activate", "guessedtype": "function"}, "_lookup": {"guessedname": "_lookup", "return": {"type": "Array", "description": "The valid Drop Targets that are in the viewport."}, "description": "Filters the list of Drops down to those in the viewport.", "private": "", "guessedtype": "function"}, "_calcTicks": {"return": {"type": "Number", "description": "The new position based on the tick calculation"}, "description": "Helper method to calculate the tick offsets for a given position", "private": "", "params": [{"type": "Number", "name": "pos", "description": " The current X or Y position"}, {"type": "Number", "name": "start", "description": " The start X or Y position"}, {"type": "Number", "name": "tick", "description": " The X or Y tick increment"}, {"type": "Number", "name": "off1", "description": " The min offset that we can't pass (region)"}, {"type": "Number", "name": "off2", "description": " The max offset that we can't pass (region)"}], "param": "{Number} pos The current X or Y position", "guessedname": "_calcTicks", "guessedtype": "function"}, "_setFrame": {"guessedname": "_setFrame", "description": "If resizeProxy is set to true (default) it will resize the proxy element to match the size of the Drag Element.\nIf positionProxy is set to true (default) it will position the proxy element in the same location as the Drag Element.", "private": "", "guessedtype": "function"}, "isOverTarget": {"return": {"type": "Boolean", "description": ""}, "description": "Check to see if the Drag element is over the target, method varies on current mode", "param": "{Object} drop The drop to check against", "params": [{"type": "Object", "name": "drop", "description": " The drop to check against"}], "guessedname": "isOverTarget", "guessedtype": "function"}, "_regDrag": {"description": "Adds a reference to the drag object to the DDM._drags array, called in the constructor of Drag.", "param": "{Drag} d The Drag object", "params": [{"type": "Drag", "name": "d", "description": " The Drag object"}], "private": "", "guessedname": "_regDrag", "guessedtype": "function"}, "_pg_size": {"description": "Sizes the shim on: activatation, window:scroll, window:resize", "private": "", "guessedname": "_pg_size", "guessedtype": "function"}, "_handleTargetOver": {"description": "This method execs _handleTargetOver on all valid Drop Targets", "private": "", "guessedname": "_handleTargetOver", "guessedtype": "function"}, "_setDragMode": {"return": {"type": "", "description": "Number The Mode to be set"}, "description": "Handler for dragMode attribute setter.", "private": "", "params": [{"type": "", "name": "String/Number", "description": " The Number value or the String for the DragMode to default all future drag instances to."}], "param": "String/Number The Number value or the String for the DragMode to default all future drag instances to.", "guessedname": "_setDragMode", "guessedtype": "function"}, "getNode": {"return": {"type": "Node", "description": ""}, "description": "Return a node instance from the given node, selector string or Y.Base extended object.", "param": "{Node/Object/String} n The node to resolve.", "params": [{"type": "Node/Object/String", "name": "n", "description": " The node to resolve."}], "guessedname": "getNode", "guessedtype": "function"}}}, "DelayedTask": {"name": "DelayedTask", "constructors": [{"params": [{"type": "Object", "name": "config", "description": "  Object literal specifying widget configuration properties."}, {"type": "function", "name": "fn", "description": " Callback"}, {"type": "Object", "name": "scope", "description": " Context object. Optional."}, {"type": "", "name": "args", "description": " 0..n additional arguments that should be provided to the listener."}], "description": "A base class for DelayedTask, providing:\n<ul>\n<li>Executes the supplied function in the context of the supplied object 'when' milliseconds later</li>\n</ul>\nQuick Example:<br/>\n<pre><code>var delayed = new A.DelayedTask({\nfunction() {\n// This callback will be executed when the <code>DelayedTask</code> be invoked\n},\nscope\n});\n// executes after 1000ms the callback\ndelayed.delay(1000);\n</code></pre>\nCheck the list of <a href=\"DelayedTask.html#configattributes\">Configuration Attributes</a> available for\nDelayedTask."}], "namespace": "", "module": "aui-delayed-task", "guessedname": "DelayedTask", "methods": {"delay": {"param": "{Number} delay Delay in milliseconds.", "params": [{"type": "Number", "name": "delay", "description": " Delay in milliseconds."}, {"type": "function", "name": "newFn", "description": " Callback."}, {"type": "Object", "name": "newScope", "description": " Context object. Optional."}, {"type": "", "name": "newArgs", "description": " 0..n additional arguments that should be provided to the listener."}], "description": "<p>This function is responsible to execute the user callback, passed in\nthe <code>constructor</code> after <code>delay</code> milliseconds.</p>\nExample:\n<pre><code>// executes after 1000ms the callback\ndelayed.delay(1000);</code></pre>", "guessedname": "delay", "guessedtype": "function"}, "cancel": {"description": "Cancel the delayed task in case it's running (i.e., clearInterval from\nthe current running <a href=\"DelayedTask.html#property__id\">_id</a>).", "guessedname": "cancel", "guessedtype": "function"}, "_getTime": {"protected": "", "return": {"type": "Number", "description": "Current timestamp"}, "description": "Get the current timestamp (i.e., now).", "guessedname": "_getTime", "guessedtype": "function"}}, "file": "aui-delayed-task.js", "guessedtype": "function", "shortname": "DelayedTask", "properties": {"_delay": {"description": "Stores the passed <code>delay</code> attribute.", "default": "0", "protected": "", "guessedname": "_delay", "guessedtype": "property", "type": "Number"}, "_scope": {"description": "Stores the passed <code>scope</code> attribute.", "default": "instance", "protected": "", "guessedname": "_scope", "guessedtype": "property", "type": "Object"}, "_args": {"protected": "", "type": "Object", "description": "Stores the passed <code>args</code> attribute.", "guessedname": "_args", "guessedtype": "property"}, "_time": {"description": "Stores the current timestamp given from\n<a href=\"DelayedTask.html#method__getTime\">_getTime</a>.", "default": "0", "protected": "", "guessedname": "_time", "guessedtype": "property", "type": "Number"}, "_id": {"description": "Stores the timer <code>id</code> given from the <code>setInterval</code>.", "default": "null", "protected": "", "guessedname": "_id", "guessedtype": "property", "type": "Number"}, "_fn": {"protected": "", "type": "function", "description": "Stores the passed <code>fn</code> attribute.", "guessedname": "_fn", "guessedtype": "property"}}, "description": "A base class for DelayedTask, providing:\n<ul>\n<li>Executes the supplied function in the context of the supplied object 'when' milliseconds later</li>\n</ul>\nQuick Example:<br/>\n<pre><code>var delayed = new A.DelayedTask({\nfunction() {\n// This callback will be executed when the <code>DelayedTask</code> be invoked\n},\nscope\n});\n// executes after 1000ms the callback\ndelayed.delay(1000);\n</code></pre>\nCheck the list of <a href=\"DelayedTask.html#configattributes\">Configuration Attributes</a> available for\nDelayedTask."}, "Pollable": {"name": "Pollable", "namespace": "", "module": "datasource", "methods": {"setInterval": {"return": {"type": "Number", "description": "Interval ID."}, "description": "Sets up a polling mechanism to send requests at set intervals and\nforward responses to given callback.", "param": "msec {Number} Length of interval in milliseconds.", "params": [{"type": "Number", "name": "msec", "description": "  Length of interval in milliseconds."}, {"type": "Object", "name": "request", "description": "  An object literal with the following properties:\n<dl>\n<dt><code>request</code></dt>\n<dd>The request to send to the live data source, if any.</dd>\n<dt><code>callback</code></dt>\n<dd>An object literal with the following properties:\n<dl>\n<dt><code>success</code></dt>\n<dd>The function to call when the data is ready.</dd>\n<dt><code>failure</code></dt>\n<dd>The function to call upon a response failure condition.</dd>\n<dt><code>argument</code></dt>\n<dd>Arbitrary data payload that will be passed back to the success and failure handlers.</dd>\n</dl>\n</dd>\n<dt><code>cfg</code></dt>\n<dd>Configuration object, if any.</dd>\n</dl>"}], "guessedname": "setInterval", "guessedtype": "function"}, "clearInterval": {"param": "id {Number} Interval ID.", "params": [{"type": "Number", "name": "id", "description": "  Interval ID."}], "description": "Disables polling mechanism associated with the given interval ID.", "guessedname": "clearInterval", "guessedtype": "function"}, "clearAllIntervals": {"description": "Clears all intervals.", "guessedname": "clearAllIntervals", "guessedtype": "function"}}, "extends": "DataSource.Local", "superclass": "DataSource.Local", "file": "datasource.js", "shortname": "Pollable", "properties": {"_intervals": {"private": "", "description": "Hash of polling interval IDs that have been enabled,\nstored here to be able to clear all intervals.", "guessedname": "_intervals", "guessedtype": "property"}}, "description": "Adds polling to the DataSource Utility."}, "Component": {"name": "Component", "configs": {"hideClass": {"default": "'aui-helper-hidden'", "type": "String", "description": "css class added to hide the <code>boundingBox</code> when\n<a href=\"Component.html#config_visible\">visible</a> is set to\n<code>false</code>.", "guessedname": "hideClass", "guessedtype": "property"}, "cssClass": {"default": "null", "type": "String", "description": "CSS class to be automatically added to the <code>boundingBox</code>.", "guessedname": "cssClass", "guessedtype": "property"}, "render": {"default": "false", "type": "boolean", "description": "If <code>true</code> the render phase will be autimatically invoked\npreventing the <code>.render()</code> manual call.", "guessedname": "render", "guessedtype": "property"}}, "constructors": [{"params": [{"type": "Object", "name": "config", "description": "  Object literal specifying widget configuration properties."}], "description": "A base class for Component, providing:\n<ul>\n<li>Widget Lifecycle (initializer, renderUI, bindUI, syncUI, destructor)</li>\n<li></li>\n</ul>\nCheck the list of <a href=\"Component.html#configattributes\">Configuration Attributes</a> available for\nComponent."}], "namespace": "", "module": "aui-component", "events": {"renderChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "renderChange", "description": "Fires when the value for the configuration attribute 'render' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "cssClassChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "cssClassChange", "description": "Fires when the value for the configuration attribute 'cssClass' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "hideClassChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "hideClassChange", "description": "Fires when the value for the configuration attribute 'hideClass' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "guessedname": "Component", "methods": {"_setComponentClassNames": {"protected": "", "description": "Set the class names on the Component <code>contentBox</code>.", "guessedname": "_setComponentClassNames", "guessedtype": "function"}, "_afterComponentVisibleChange": {"description": "Fires after the value of the\n<a href=\"Component.html#config_visible\">visible</a> attribute change.", "param": "{EventFacade} event", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "guessedname": "_afterComponentVisibleChange", "guessedtype": "function"}, "clone": {"return": {"type": "Widget", "description": "Cloned instance."}, "description": "Clone the current Component.", "param": "{Object} config", "params": [{"type": "Object", "name": "config", "description": ""}], "guessedname": "clone", "guessedtype": "function"}, "initializer": {"protected": "", "description": "Construction logic executed during Component instantiation. Lifecycle.", "guessedname": "initializer", "guessedtype": "function"}, "_afterCssClassChange": {"description": "Fires after the value of the\n<a href=\"Component.html#config_cssClass\">cssClass</a> attribute change.", "param": "{EventFacade} event", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "guessedname": "_afterCssClassChange", "guessedtype": "function"}, "toggle": {"description": "Toggle the visibility of the Panel toggling the value of the\n<a href=\"Widget.html#config_visible\">visible</a> attribute.", "guessedname": "toggle", "guessedtype": "function"}, "_uiSetCssClass": {"description": "Applies the CSS classes to the <code>boundingBox</code> and\n<code>contentBox</code>.", "param": "{String} newVal", "protected": "", "params": [{"type": "String", "name": "newVal", "description": ""}, {"type": "String", "name": "prevVal", "description": ""}], "guessedname": "_uiSetCssClass", "guessedtype": "function"}}, "extends": "Widget", "superclass": "Widget", "file": "aui-component.js", "guessedtype": "function", "shortname": "Component", "properties": {"Component.ATTRS": {"type": "Object", "static": "", "description": "Static property used to define the default attribute\nconfiguration for the Component.", "guessedname": "ATTRS", "guessedtype": "property"}, "Component.NAME": {"type": "String", "static": "", "description": "Static property provides a string to identify the class.", "guessedname": "NAME", "guessedtype": "property"}}, "description": "A base class for Component, providing:\n<ul>\n<li>Widget Lifecycle (initializer, renderUI, bindUI, syncUI, destructor)</li>\n<li></li>\n</ul>\nCheck the list of <a href=\"Component.html#configattributes\">Configuration Attributes</a> available for\nComponent."}, "Console": {"name": "Console", "configs": {"height": {"default": "\"300px\"", "type": "{String | Number}", "description": "String with units, or number, representing the height of the Console,\ninclusive of header and footer. If a number is provided, the default\nunit, defined by Widget's DEF_UNIT, property is used.", "guessedname": "height", "guessedtype": "property"}, "consoleLimit": {"default": "300", "type": "Number", "description": "Maximum number of Console entries allowed in the Console body at one\ntime.  This is used to keep acquired messages from exploding the\nDOM tree and impacting page performance.", "guessedname": "consoleLimit", "guessedtype": "property"}, "width": {"default": "\"300px\"", "type": "{String | Number}", "description": "String with units, or number, representing the width of the Console.\nIf a number is provided, the default unit, defined by Widget's\nDEF_UNIT, property is used.", "guessedname": "width", "guessedtype": "property"}, "logLevel": {"default": "Y.config.logLevel or Console.LOG_LEVEL_INFO", "type": "String", "description": "Minimum entry log level to render into the Console.  The initial\nlogLevel value for all Console instances defaults from the\nY.config.logLevel YUI configuration, or Console.LOG_LEVEL_INFO if\nthat configuration is not set.\nPossible values are &quot;info&quot;, &quot;warn&quot;,\n&quot;error&quot; (case insensitive), or their corresponding statics\nConsole.LOG_LEVEL_INFO and so on.", "guessedname": "logLevel", "guessedtype": "property"}, "printLimit": {"default": "50", "type": "Number", "description": "Maximum number of entries printed in each iteration of the print\nloop. This is used to prevent excessive logging locking the page UI.", "guessedname": "printLimit", "guessedtype": "property"}, "collapsed": {"default": "false", "type": "Boolean", "description": "Controls the collapsed state of the Console", "guessedname": "collapsed", "guessedtype": "property"}, "useBrowserConsole": {"default": "false", "type": "{Boolean}", "description": "Pass through to the YUI instance useBrowserConsole configuration.\nBy default this is set to false, which will disable logging to the\nbrowser console when a Console instance is created.  If the\nlogSource is not a YUI instance, this has no effect.", "guessedname": "useBrowserConsole", "guessedtype": "property"}, "logSource": {"default": "Y", "type": "EventTarget", "description": "Object that will emit the log events.  By default the YUI instance.\nTo have a single Console capture events from all YUI instances, set\nthis to the Y.Global object.", "guessedname": "logSource", "guessedtype": "property"}, "printTimeout": {"default": "100", "type": "Number", "description": "Millisecond timeout between iterations of the print loop, moving\nentries from the buffer to the UI.", "guessedname": "printTimeout", "guessedtype": "property"}, "defaultSource": {"default": "\"global\"", "type": "String", "description": "If a source is not specified in the Y.log(..) statement, this\nsource will be used.", "guessedname": "defaultSource", "guessedtype": "property"}, "paused": {"default": "false", "type": "boolean", "description": "Boolean to pause the outputting of new messages to the console.\nWhen paused, messages will accumulate in the buffer.", "guessedname": "paused", "guessedtype": "property"}, "newestOnTop": {"default": "true", "type": "Boolean", "description": "New entries should display at the top of the Console or the bottom?", "guessedname": "newestOnTop", "guessedtype": "property"}, "logEvent": {"default": "\"yui:log\"", "type": "String", "description": "Name of the custom event that will communicate log messages.", "guessedname": "logEvent", "guessedtype": "property"}, "style": {"default": "'separate'", "type": "{String}", "description": "Allows the Console to flow in the document.  Available values are\n'inline', 'block', and 'separate' (the default).", "guessedname": "style", "guessedtype": "property"}, "startTime": {"default": "The moment the console module is <code>use</code>d", "type": "Date", "description": "The baseline time for this Console instance, used to measure elapsed\ntime from the moment the console module is <code>use</code>d to the\nmoment each new entry is logged (not rendered).\nThis value is reset by the instance method myConsole.reset().", "guessedname": "startTime", "guessedtype": "property"}, "entryTemplate": {"default": "Console.ENTRY_TEMPLATE", "type": "String", "description": "Markup template used to create the DOM structure for Console entries.", "guessedname": "entryTemplate", "guessedtype": "property"}, "scrollIntoView": {"default": "true", "type": "Boolean", "description": "When new entries are added to the Console UI, should they be\nscrolled into view?", "guessedname": "scrollIntoView", "guessedtype": "property"}, "lastTime": {"default": "The moment the console module is <code>use</code>d", "type": "Date", "description": "The precise time the last entry was logged.  Used to measure elapsed\ntime between log messages.", "guessedname": "lastTime", "guessedtype": "property"}, "defaultCategory": {"default": "\"info\"", "type": "String", "description": "If a category is not specified in the Y.log(..) statement, this\ncategory will be used. Categories &quot;info&quot;,\n&quot;warn&quot;, and &quot;error&quot; are also called log level.", "guessedname": "defaultCategory", "guessedtype": "property"}, "strings": {"type": "Object", "description": "Collection of strings used to label elements in the Console UI.\nDefault collection contains the following name:value pairs:\n<ul>\n<li>title : &quot;Log Console&quot;</li>\n<li>pause : &quot;Pause&quot;</li>\n<li>clear : &quot;Clear&quot;</li>\n<li>collapse : &quot;Collapse&quot;</li>\n<li>expand : &quot;Expand&quot;</li>\n</ul>", "guessedname": "strings", "guessedtype": "property"}}, "constructors": [{"params": [{"type": "Object", "name": "conf", "description": "  Configuration object (see Configuration attributes)"}], "description": "Console creates a visualization for messages logged through calls to a YUI\ninstance's <code>Y.log( message, category, source )</code> method.  The\ndebug versions of YUI modules will include logging statements to offer some\ninsight into the steps executed during that module's operation.  Including\nlog statements in your code will cause those messages to also appear in the\nConsole.  Use Console to aid in developing your page or application.\nEntry categories &quot;info&quot;, &quot;warn&quot;, and &quot;error&quot;\nare also referred to as the log level, and entries are filtered against the\nconfigured logLevel."}], "namespace": "", "module": "console", "events": {"scrollIntoViewChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "scrollIntoViewChange", "description": "Fires when the value for the configuration attribute 'scrollIntoView' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "heightChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "heightChange", "description": "Fires when the value for the configuration attribute 'height' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "lastTimeChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "lastTimeChange", "description": "Fires when the value for the configuration attribute 'lastTime' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "consoleLimitChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "consoleLimitChange", "description": "Fires when the value for the configuration attribute 'consoleLimit' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "newestOnTopChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "newestOnTopChange", "description": "Fires when the value for the configuration attribute 'newestOnTop' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "stringsChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "stringsChange", "description": "Fires when the value for the configuration attribute 'strings' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "logSourceChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "logSourceChange", "description": "Fires when the value for the configuration attribute 'logSource' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "logLevelChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "logLevelChange", "description": "Fires when the value for the configuration attribute 'logLevel' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "startTimeChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "startTimeChange", "description": "Fires when the value for the configuration attribute 'startTime' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "defaultSourceChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "defaultSourceChange", "description": "Fires when the value for the configuration attribute 'defaultSource' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "entryTemplateChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "entryTemplateChange", "description": "Fires when the value for the configuration attribute 'entryTemplate' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "logEventChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "logEventChange", "description": "Fires when the value for the configuration attribute 'logEvent' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "printLimitChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "printLimitChange", "description": "Fires when the value for the configuration attribute 'printLimit' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "defaultCategoryChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "defaultCategoryChange", "description": "Fires when the value for the configuration attribute 'defaultCategory' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "pausedChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "pausedChange", "description": "Fires when the value for the configuration attribute 'paused' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "printTimeoutChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "printTimeoutChange", "description": "Fires when the value for the configuration attribute 'printTimeout' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "useBrowserConsoleChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "useBrowserConsoleChange", "description": "Fires when the value for the configuration attribute 'useBrowserConsole' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "collapsedChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "collapsedChange", "description": "Fires when the value for the configuration attribute 'collapsed' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "reset": {"preventable": "_defResetFn", "params": [{"type": "Event.Facade", "name": "event", "description": "  Event Facade object"}], "description": "Triggers the reset behavior via the default logic in _defResetFn.", "guessedname": "defaultFn", "guessedtype": "property"}, "styleChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "styleChange", "description": "Fires when the value for the configuration attribute 'style' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "entry": {"preventable": "_defEntryFn", "params": [{"type": "Event.Facade", "name": "event", "description": "  An Event Facade object with the following attribute specific properties added:\n<dl>\n<dt>message</dt>\n<dd>The message data normalized into an object literal (see _normalizeMessage)</dd>\n</dl>"}], "description": "Transfers a received message to the print loop buffer.  Default\nbehavior defined in _defEntryFn.", "guessedname": "defaultFn", "guessedtype": "property"}, "widthChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "widthChange", "description": "Fires when the value for the configuration attribute 'width' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "guessedname": "getCN", "methods": {"_normalizeMessage": {"return": {"type": "", "description": "Object the message object"}, "description": "Create a log entry message from the inputs including the following keys:\n<ul>\n<li>time - this moment</li>\n<li>message - leg message</li>\n<li>category - logLevel or custom category for the message</li>\n<li>source - when provided, the widget or util calling Y.log</li>\n<li>sourceAndDetail - same as source but can include instance info</li>\n<li>localTime - readable version of time</li>\n<li>elapsedTime - ms since last entry</li>\n<li>totalTime - ms since Console was instantiated or reset</li>\n</ul>", "protected": "", "params": [{"type": "Event", "name": "e", "description": "  custom event containing the log message"}], "guessedname": "_normalizeMessage", "guessedtype": "function"}, "_uiUpdateCollapsed": {"protected": "", "params": [{"type": "Boolean", "name": "v", "description": "  true for collapsed, false for expanded"}], "description": "Updates the UI to reflect the new Collapsed state", "guessedname": "_uiUpdateCollapsed", "guessedtype": "function"}, "_afterStringsChange": {"protected": "", "params": [{"type": "Event", "name": "e", "description": "  Custom event for the attribute change"}], "description": "Updates the UI if changes are made to any of the strings in the strings\nattribute.", "guessedname": "_afterStringsChange", "guessedtype": "function"}, "_setUseBrowserConsole": {"return": {"type": "Boolean", "description": "true|false if logSource is a YUI instance"}, "description": "Setter method for useBrowserConsole attributes.  Only functional if the\nlogSource attribute points to a YUI instance.  Passes the value down to\nthe YUI instance.  NOTE: multiple Console instances cannot maintain\nindependent useBrowserConsole values, since it is just a pass through to\nthe YUI instance configuration.", "protected": "", "params": [{"type": "Boolean", "name": "v", "description": "  false to disable browser console printing (default)"}], "guessedname": "_setUseBrowserConsole", "guessedtype": "function"}, "initializer": {"protected": "", "description": "Constructor code.  Set up the buffer and entry template, publish\ninternal events, and subscribe to the configured logEvent.", "guessedname": "initializer", "guessedtype": "function"}, "_cancelPrintLoop": {"protected": "", "description": "Clears the timeout for printing buffered messages.", "guessedname": "_cancelPrintLoop", "guessedtype": "function"}, "_trimOldEntries": {"protected": "", "description": "Removes the oldest message entries from the UI to maintain the limit\nspecified in the consoleLimit configuration.", "guessedname": "_trimOldEntries", "guessedtype": "function"}, "_getUseBrowserConsole": {"protected": "", "return": {"type": "Boolean", "description": "or null if logSource is not a YUI instance"}, "description": "Getter method for useBrowserConsole attribute.  Just a pass through to\nthe YUI instance configuration setting.", "guessedname": "_getUseBrowserConsole", "guessedtype": "function"}, "_defResetFn": {"protected": "", "description": "Clears the console, resets the startTime attribute, enables and\nunpauses the widget.", "guessedname": "_defResetFn", "guessedtype": "function"}, "_encodeHTML": {"return": {"type": "", "description": "String the encoded string"}, "description": "Returns the input string with ampersands (&amp;), &lt, and &gt; encoded\nas HTML entities.", "protected": "", "params": [{"type": "String", "name": "s", "description": "  the raw string"}], "guessedname": "_encodeHTML", "guessedtype": "function"}, "_uiSetHeight": {"protected": "", "params": [{"type": "String|Number", "name": "v", "description": "  the new height"}], "description": "Set the height of the Console container.  Set the body height to the difference between the configured height and the calculated heights of the header and footer.\nOverrides Widget.prototype._uiSetHeight.", "guessedname": "_uiSetHeight", "guessedtype": "function"}, "_onCollapseClick": {"protected": "", "params": [{"type": "Event", "name": "e", "description": "  DOM event facade for the click event"}], "description": "Event handler for clicking on the Collapse/Expand button. Sets the\n&quot;collapsed&quot; attribute accordingly.", "guessedname": "_onCollapseClick", "guessedtype": "function"}, "log": {"chainable": "", "params": [{"type": "MIXED", "name": "arg*", "description": "  (all arguments passed through to <code>Y.log</code>)"}], "description": "Wrapper for <code>Y.log</code>.", "guessedname": "log", "guessedtype": "function"}, "_initBody": {"protected": "", "description": "Create the DOM structure for the console body&#8212;where messages are\nrendered.", "guessedname": "_initBody", "guessedtype": "function"}, "_onLogEvent": {"protected": "", "params": [{"type": "String", "name": "msg", "description": "  the log message"}, {"type": "String", "name": "cat", "description": "  OPTIONAL the category or logLevel of the message"}, {"type": "String", "name": "src", "description": "  OPTIONAL the source of the message (e.g. widget name)"}], "description": "Responds to log events by normalizing qualifying messages and passing\nthem along through the entry event for buffering etc.", "guessedname": "_onLogEvent", "guessedtype": "function"}, "_afterPausedChange": {"protected": "", "params": [{"type": "Event", "name": "e", "description": "  Custom event for the attribute change"}], "description": "Updates the UI and schedules or cancels the print loop.", "guessedname": "_afterPausedChange", "guessedtype": "function"}, "_validateStyle": {"return": {"type": "Boolean", "description": "pass/fail"}, "description": "Validates input value for style attribute.  Accepts only values 'inline',\n'block', and 'separate'.", "protected": "", "params": [{"type": "String", "name": "style", "description": "  the proposed value"}], "guessedname": "_validateStyle", "guessedtype": "function"}, "destructor": {"protected": "", "description": "Tears down the instance, flushing event subscriptions and purging the UI.", "guessedname": "destructor", "guessedtype": "function"}, "_initHead": {"protected": "", "description": "Create the DOM structure for the header elements.", "guessedname": "_initHead", "guessedtype": "function"}, "_afterConsoleLimitChange": {"protected": "", "params": [{"type": "Event", "name": "e", "description": "  Custom event for the attribute change"}], "description": "Calls this._trimOldEntries() in response to changes in the configured\nconsoleLimit attribute.", "guessedname": "_afterConsoleLimitChange", "guessedtype": "function"}, "_uiSizeCB": {"protected": "", "description": "Over-ride default content box sizing to do nothing, since we're sizing\nthe body section to fill out height ourselves.", "guessedname": "_uiSizeCB", "guessedtype": "function"}, "bindUI": {"protected": "", "description": "Set up event listeners to wire up the UI to the internal state.", "guessedname": "bindUI", "guessedtype": "function"}, "_defEntryFn": {"protected": "", "params": [{"type": "Event", "name": "e", "description": "  The Custom event carrying the message in its payload"}], "description": "Buffers incoming message objects and schedules the printing.", "guessedname": "_defEntryFn", "guessedtype": "function"}, "_validateLogSource": {"return": {"type": "Boolean", "description": "true if the input is an object with an <code>on</code>\nmethod"}, "description": "Validator for logSource attribute.", "protected": "", "params": [{"type": "Object", "name": "v", "description": "  the desired logSource"}], "guessedname": "_validateLogSource", "guessedtype": "function"}, "_htmlEscapeMessage": {"return": {"type": "", "description": "Object the message object with proper escapement"}, "description": "Performs HTML escaping on strings in the message object.", "protected": "", "params": [{"type": "Object", "name": "m", "description": "  the normalized message object"}], "guessedname": "_htmlEscapeMessage", "guessedtype": "function"}, "collapse": {"chainable": "", "description": "Collapses the body and footer.", "guessedname": "collapse", "guessedtype": "function"}, "_onPauseClick": {"protected": "", "params": [{"type": "Event", "name": "e", "description": "  DOM event facade for the click event"}], "description": "Event handler for clicking on the Pause checkbox to update the paused\nattribute.", "guessedname": "_onPauseClick", "guessedtype": "function"}, "_afterVisibleChange": {"protected": "", "params": [{"type": "Event", "name": "e", "description": "  the visibleChange event"}], "description": "Makes adjustments to the UI if needed when the Console is hidden or shown", "guessedname": "_afterVisibleChange", "guessedtype": "function"}, "scrollToLatest": {"chainable": "", "description": "Scrolls to the most recent entry", "guessedname": "scrollToLatest", "guessedtype": "function"}, "_onClearClick": {"protected": "", "params": [{"type": "Event", "name": "e", "description": "  DOM event facade for the click event"}], "description": "Event handler for clicking on the Clear button.  Pass-through to\n<code>this.clearConsole()</code>.", "guessedname": "_onClearClick", "guessedtype": "function"}, "_schedulePrint": {"protected": "", "description": "Sets an interval for buffered messages to be output to the console.", "guessedname": "_schedulePrint", "guessedtype": "function"}, "_uiUpdateFromHideShow": {"protected": "", "params": [{"type": "Boolean", "name": "v", "description": "  true for visible, false for hidden"}], "description": "Recalculates dimensions and updates appropriately when shown", "guessedname": "_uiUpdateFromHideShow", "guessedtype": "function"}, "_createEntryHTML": {"return": {"type": "", "description": "String"}, "description": "Translates message meta into the markup for a console entry.", "protected": "", "params": [{"type": "Object", "name": "m", "description": "  object literal containing normalized message metadata"}], "guessedname": "_createEntryHTML", "guessedtype": "function"}, "expand": {"chainable": "", "description": "Expands the body and footer if collapsed.", "guessedname": "expand", "guessedtype": "function"}, "_uiUpdatePaused": {"protected": "", "params": [{"type": "Boolean", "name": "on", "description": "  the new checked state"}], "description": "Checks or unchecks the paused checkbox", "guessedname": "_uiUpdatePaused", "guessedtype": "function"}, "reset": {"chainable": "", "description": "Clears the console and resets internal timers.", "guessedname": "reset", "guessedtype": "function"}, "syncUI": {"description": "Sync the UI state to the current attribute state.", "guessedname": "syncUI", "guessedtype": "function"}, "_afterCollapsedChange": {"protected": "", "params": [{"type": "Event", "name": "e", "description": "  Custom event for the attribute change"}], "description": "Updates the className of the contentBox, which should trigger CSS to\nhide or show the body and footer sections depending on the new value.", "guessedname": "_afterCollapsedChange", "guessedtype": "function"}, "_initFoot": {"protected": "", "description": "Create the DOM structure for the footer elements.", "guessedname": "_initFoot", "guessedtype": "function"}, "printBuffer": {"chainable": "", "params": [{"type": "Number", "name": "limit", "description": "  (optional) max number of buffered entries to write"}], "description": "Outputs buffered messages to the console UI.  This is typically called\nfrom a scheduled interval until the buffer is empty (referred to as the\nprint loop).  The number of buffered messages output to the Console is\nlimited to the number provided as an argument.  If no limit is passed,\nall buffered messages are rendered.", "guessedname": "printBuffer", "guessedtype": "function"}, "_setLogLevel": {"return": {"type": "", "description": "String One of Console.LOG_LEVEL_INFO, _WARN, or _ERROR"}, "description": "Setter method for logLevel attribute.  Acceptable values are\n&quot;error&quot, &quot;warn&quot, and &quot;info&quot (case\ninsensitive).  Other values are treated as &quot;info&quot;.", "protected": "", "params": [{"type": "String", "name": "v", "description": "  the desired log level"}], "guessedname": "_setLogLevel", "guessedtype": "function"}, "clearConsole": {"chainable": "", "description": "Clear the console of messages and flush the buffer of pending messages.", "guessedname": "clearConsole", "guessedtype": "function"}, "_isInLogLevel": {"protected": "", "description": "Determine if incoming log messages are within the configured logLevel\nto be buffered for printing.", "guessedname": "_isInLogLevel", "guessedtype": "function"}, "renderUI": {"protected": "", "description": "Generate the Console UI.", "guessedname": "renderUI", "guessedtype": "function"}}, "extends": "Widget", "superclass": "Widget", "file": "console-debug.js", "guessedtype": "property", "shortname": "Console", "properties": {"_printLoop": {"description": "Holds the object API returned from <code>Y.later</code> for the print\nloop interval.", "default": "null", "protected": "", "guessedname": "_printLoop", "guessedtype": "property", "type": "Object"}, "Console.LOG_LEVEL_INFO": {"type": "String", "static": "", "description": "Static identifier for logLevel configuration setting to allow all\nincoming messages to generate Console entries.", "guessedname": "LOG_LEVEL_INFO", "guessedtype": "property"}, "Console.BODY_TEMPLATE": {"type": "String", "static": "", "description": "Markup template used to generate the DOM structure for the Console body\n(where the messages are inserted) when it is rendered.  The template\nincludes only the {placeholder} &quot;console_bd_class&quot;, which is\nconstributed by Console.CHROME_CLASSES.", "guessedname": "BODY_TEMPLATE", "guessedtype": "property"}, "Console.HEADER_TEMPLATE": {"type": "String", "static": "", "description": "Markup template used to generate the DOM structure for the header\nsection of the Console when it is rendered.  The template includes\nthese {placeholder}s:\n<ul>\n<li>console_button_class - contributed by Console.CHROME_CLASSES</li>\n<li>console_collapse_class - contributed by Console.CHROME_CLASSES</li>\n<li>console_hd_class - contributed by Console.CHROME_CLASSES</li>\n<li>console_title_class - contributed by Console.CHROME_CLASSES</li>\n<li>str_collapse - pulled from attribute strings.collapse</li>\n<li>str_title - pulled from attribute strings.title</li>\n</ul>", "guessedname": "HEADER_TEMPLATE", "guessedtype": "property"}, "buffer": {"description": "Array of normalized message objects awaiting printing.", "default": "null", "protected": "", "guessedname": "buffer", "guessedtype": "property", "type": "Array"}, "Console.ENTRY_TEMPLATE": {"type": "String", "static": "", "description": "Default markup template used to create the DOM structure for Console\nentries. The markup contains {placeholder}s for content and classes\nthat are replaced via Y.substitute.  The default template contains\nthe {placeholder}s identified in Console.ENTRY_CLASSES as well as the\nfollowing placeholders that will be populated by the log entry data:\n<ul>\n<li>cat_class</li>\n<li>src_class</li>\n<li>totalTime</li>\n<li>elapsedTime</li>\n<li>localTime</li>\n<li>sourceAndDetail</li>\n<li>message</li>\n</ul>", "guessedname": "ENTRY_TEMPLATE", "guessedtype": "property"}, "_body": {"description": "Reference to the Node instance that will house the console messages.", "default": "null", "protected": "", "guessedname": "_body", "guessedtype": "property", "type": "Node"}, "_head": {"description": "Reference to the Node instance containing the header contents.", "default": "null", "protected": "", "guessedname": "_head", "guessedtype": "property", "type": "Node"}, "Console.LOG_LEVEL_WARN": {"type": "String", "static": "", "description": "Static identifier for logLevel configuration setting to allow only\nincoming messages of logLevel &quot;warn&quot; or &quot;error&quot;\nto generate Console entries.", "guessedname": "LOG_LEVEL_WARN", "guessedtype": "property"}, "_foot": {"description": "Reference to the Node instance containing the footer contents.", "default": "null", "protected": "", "guessedname": "_foot", "guessedtype": "property", "type": "Node"}, "Console.ENTRY_CLASSES": {"type": "Object", "static": "", "description": "Map (object) of classNames used to populate the placeholders in the\nConsole.ENTRY_TEMPLATE markup when rendering a new Console entry.\n<p>By default, the keys contained in the object are:</p>\n<ul>\n<li>entry_class</li>\n<li>entry_meta_class</li>\n<li>entry_cat_class</li>\n<li>entry_src_class</li>\n<li>entry_time_class</li>\n<li>entry_content_class</li>\n</ul>", "guessedname": "ENTRY_CLASSES", "guessedtype": "property"}, "Console.FOOTER_TEMPLATE": {"type": "String", "static": "", "description": "Markup template used to generate the DOM structure for the footer\nsection of the Console when it is rendered.  The template includes\nmany of the {placeholder}s from Console.CHROME_CLASSES as well as:\n<ul>\n<li>id_guid - generated unique id, relates the label and checkbox</li>\n<li>str_pause - pulled from attribute strings.pause</li>\n<li>str_clear - pulled from attribute strings.clear</li>\n</ul>", "guessedname": "FOOTER_TEMPLATE", "guessedtype": "property"}, "Console.ATTRS": {"type": "Object", "static": "", "description": "Static property used to define the default attribute configuration of\nthe Widget.", "guessedname": "ATTRS", "guessedtype": "property"}, "Console.CHROME_CLASSES": {"type": "Object", "static": "", "description": "Map (object) of classNames used to populate the placeholders in the\nConsole.HEADER_TEMPLATE, Console.BODY_TEMPLATE, and\nConsole.FOOTER_TEMPLATE markup when rendering the Console UI.\n<p>By default, the keys contained in the object are:</p>\n<ul>\n<li>console_hd_class</li>\n<li>console_bd_class</li>\n<li>console_ft_class</li>\n<li>console_controls_class</li>\n<li>console_checkbox_class</li>\n<li>console_pause_class</li>\n<li>console_pause_label_class</li>\n<li>console_button_class</li>\n<li>console_clear_class</li>\n<li>console_collapse_class</li>\n<li>console_title_class</li>\n</ul>", "guessedname": "CHROME_CLASSES", "guessedtype": "property"}, "Console.LOG_LEVEL_ERROR": {"type": "String", "static": "", "description": "Static identifier for logLevel configuration setting to allow only\nincoming messages of logLevel &quot;error&quot; to generate\nConsole entries.", "guessedname": "LOG_LEVEL_ERROR", "guessedtype": "property"}, "_evtCat": {"protected": "", "type": "string", "description": "Category to prefix all event subscriptions to allow for ease of detach\nduring destroy.", "guessedname": "_evtCat", "guessedtype": "property"}, "Console.NAME": {"type": "String", "static": "", "description": "The identity of the widget.", "guessedname": "NAME", "guessedtype": "property"}}, "description": "Console creates a visualization for messages logged through calls to a YUI\ninstance's <code>Y.log( message, category, source )</code> method.  The\ndebug versions of YUI modules will include logging statements to offer some\ninsight into the steps executed during that module's operation.  Including\nlog statements in your code will cause those messages to also appear in the\nConsole.  Use Console to aid in developing your page or application.\nEntry categories &quot;info&quot;, &quot;warn&quot;, and &quot;error&quot;\nare also referred to as the log level, and entries are filtered against the\nconfigured logLevel."}, "Test.Case": {"name": "Test.Case", "constructors": [{"params": [{"type": "", "name": "template", "description": " An object containing any number of test methods, other methods,\nan optional name, and anything else the test case needs."}], "description": "Test case containing various tests to run."}], "namespace": "Test", "module": "test", "guessedname": "Case", "methods": {"tearDown": {"return": {"type": "Void", "description": ""}, "description": "Function to run after each test is executed.", "guessedname": "tearDown", "guessedtype": "function"}, "setUp": {"return": {"type": "Void", "description": ""}, "description": "Function to run before each test is executed.", "guessedname": "setUp", "guessedtype": "function"}, "wait": {"return": {"type": "Void", "description": ""}, "description": "Causes the test case to wait a specified amount of time and then\ncontinue executing the given code.", "param": "{Function} segment (Optional) The function to run after the delay.\nIf omitted, the TestRunner will wait until resume() is called.", "params": [{"type": "Function", "name": "segment", "description": " (Optional) The function to run after the delay.\nIf omitted, the TestRunner will wait until resume() is called."}, {"type": "int", "name": "delay", "description": " (Optional) The number of milliseconds to wait before running\nthe function. If omitted, defaults to zero."}], "guessedname": "wait", "guessedtype": "function"}, "resume": {"return": {"type": "Void", "description": ""}, "description": "Resumes a paused test and runs the given function.", "param": "{Function} segment (Optional) The function to run.\nIf omitted, the test automatically passes.", "params": [{"type": "Function", "name": "segment", "description": " (Optional) The function to run.\nIf omitted, the test automatically passes."}], "guessedname": "resume", "guessedtype": "function"}}, "file": "test.js", "guessedtype": "function", "shortname": "Case", "properties": {"_should": {"description": "Special rules for the test case. Possible subobjects\nare fail, for tests that should fail, and error, for\ntests that should throw an error.", "guessedname": "_should", "guessedtype": "property"}, "name": {"description": "Name for the test case.", "guessedname": "name", "guessedtype": "property"}}, "description": "Test case containing various tests to run."}, "Slider": {"name": "Slider", "constructors": [{"params": [{"type": "Object", "name": "config", "description": "  Configuration object"}], "description": "Create a slider to represent an integer value between a given minimum and\nmaximum.  Sliders may be aligned vertically or horizontally, based on the\n<code>axis</code> configuration."}], "namespace": "", "module": "slider", "guessedname": "Slider", "uses": ["SliderValueRange", "ClickableRail"], "superclass": "SliderBase", "file": "slider.js", "guessedtype": "property", "extends": "SliderBase", "shortname": "Slider", "description": "Create a slider to represent an integer value between a given minimum and\nmaximum.  Sliders may be aligned vertically or horizontally, based on the\n<code>axis</code> configuration."}, "Assert.UnexpectedValue": {"name": "Assert.UnexpectedValue", "constructors": [{"params": [{"type": "String", "name": "message", "description": " The message to display when the error occurs."}, {"type": "Object", "name": "unexpected", "description": " The unexpected value."}], "description": "UnexpectedValue is subclass of Error that is thrown whenever\na value was unexpected in its scope. This typically means that a test\nwas performed to determine that a value was *not* equal to a certain\nvalue."}], "namespace": "Assert", "module": "test", "guessedname": "UnexpectedValue", "methods": {"getMessage": {"return": {"type": "String", "description": "A string describing the error."}, "description": "Returns a fully formatted error for an assertion failure. The message\ncontains information about the unexpected value that was encountered.", "guessedname": "getMessage", "guessedtype": "function"}}, "extends": "Assert.Error", "superclass": "Assert.Error", "file": "test.js", "guessedtype": "function", "shortname": "UnexpectedValue", "properties": {"unexpected": {"type": "Object", "description": "The unexpected value.", "guessedname": "unexpected", "guessedtype": "property"}, "name": {"type": "String", "description": "The name of the error that occurred.", "guessedname": "name", "guessedtype": "property"}}, "description": "UnexpectedValue is subclass of Error that is thrown whenever\na value was unexpected in its scope. This typically means that a test\nwas performed to determine that a value was *not* equal to a certain\nvalue."}, "config": {"name": "config", "namespace": "", "module": "yui", "static": "", "file": "aui.js", "shortname": "config", "properties": {"purgethreshold": {"default": "20", "type": "int", "description": "The number of dynamic nodes to insert by default before\nautomatically removing them.  This applies to script nodes\nbecause remove the node will not make the evaluated script\nunavailable.  Dynamic CSS is not auto purged, because removing\na linked style sheet will also remove the style definitions."}, "cssAttributes": {"type": "string", "description": "Object literal containing attributes to add to dynamically loaded link nodes."}, "force": {"type": "string[]", "description": "A list of modules that should always be loaded when required, even if already \npresent on the page."}, "locale": {"deprecated": "use config.lang instead", "type": "string", "description": "The default locale"}, "win": {"default": "the window hosting YUI", "type": "Window", "description": "The window/frame that this instance should operate in."}, "logExclude": {"type": "object", "description": "A hash of log sources that should be not be logged.  If specified, all sources are logged if not on this list."}, "onCSS": {"type": "function", "description": "Callback for the 'CSSComplete' event.  When dynamically loading YUI \ncomponents with CSS, this property fires when the CSS is finished\nloading but script loading is still ongoing.  This provides an\nopportunity to enhance the presentation of a loading page a little\nbit before the entire loading process is done."}, "filters": {"description": "Hash of per-component filter specification.  If specified for a given component, \nthis overrides the filter config\nFor dynamic loading."}, "skin": {"description": "The 'skin' config let's you configure application level skin\ncustomizations.  It contains the following attributes which\ncan be specified to override the defaults:\n// The default skin, which is automatically applied if not\n// overriden by a component-specific skin definition.\n// Change this in to apply a different skin globally\ndefaultSkin: 'sam', \n// This is combined with the loader base property to get\n// the default root directory for a skin.\nbase: 'assets/skins/',\n// Any component-specific overrides can be specified here,\n// making it possible to load different skins for different\n// components.  It is possible to load more than one skin\n// for a given component as well.\noverrides: {\nslider: ['capsule', 'round']\n}\nFor dynamic loading."}, "pollInterval": {"default": "20", "type": "int", "description": "The default interval when polling in milliseconds."}, "ignore": {"type": "string[]", "description": "A list of modules that should never be dynamically loaded"}, "dateFormat": {"deprecated": "use configuration in DataType.Date.format() instead", "type": "string", "description": "The default date format"}, "charset": {"deprecated": "use jsAttributes cssAttributes", "type": "string", "description": "charset for dynamic nodes"}, "logInclude": {"type": "object", "description": "A hash of log sources that should be logged.  If specified, only log messages from these sources will be logged."}, "yui2": {"default": "2.8.0", "since": "3.1.0", "type": "string", "description": "The default YUI 2 version to build yui2 module urls.  This is for\nintrinsic YUI 2 support via the 2in3 project.  Also @see the '2in3'\nconfig for pulling different revisions of the wrapped YUI 2 \nmodules."}, "windowResizeDelay": {"default": "40", "type": "int", "description": "The default interval when polling in milliseconds."}, "combine": {"default": "true if 'base' is not supplied, false if it is.", "type": "boolean", "description": "Use the YUI combo service to reduce the number of http connections \nrequired to load your dependencies.  Turning this off will\ndisable combo handling for YUI and all module groups configured\nwith a combo service.\nFor dynamic loading."}, "loaderPath": {"default": "loader/loader-min.js", "type": "string", "description": "The loader 'path' attribute to the loader itself.  This is combined\nwith the 'base' attribute to dynamically load the loader component\nwhen boostrapping with the get utility alone."}, "comboBase": {"type": "string", "description": "The YUI combo service base dir. Ex: http://yui.yahooapis.com/combo?\nFor dynamic loading."}, "core": {"type": "string[]", "description": "A list of modules that defines the YUI core (overrides the default)."}, "insertBefore": {"type": "string", "description": "Node or id for a node that should be used as the insertion point for new nodes\nFor dynamic loading."}, "useBrowserConsole": {"default": "true", "type": "boolean", "description": "Log to the browser console if debug is on and the browser has a\nsupported console."}, "jsAttributes": {"type": "string", "description": "Object literal containing attributes to add to dynamically loaded script nodes."}, "base": {"type": "string", "description": "Base directory for dynamic loading"}, "2in3": {"default": "1", "since": "3.1.0", "type": "string", "description": "The 2in3 project is a deployment of the various versions of YUI 2\ndeployed as first-class YUI 3 modules.  Eventually, the wrapper\nfor the modules will change (but the underlying YUI 2 code will\nbe the same), and you can select a particular version of\nthe wrapper modules via this config."}, "injected": {"default": "false", "type": "boolean", "description": "Set to true if the yui seed file was dynamically loaded in \norder to bootstrap components relying on the window load event \nand the 'domready' custom event."}, "gallery": {"since": "3.1.0", "type": "string", "description": "The default gallery version to build gallery module urls"}, "lang": {"type": "string|string[]", "description": "A list of languages in order of preference. This list is matched against\nthe list of available languages in modules that the YUI instance uses to\ndetermine the best possible localization of language sensitive modules.\nLanguages are represented using BCP 47 language tags, such as \"en-GB\" for\nEnglish as used in the United Kingdom, or \"zh-Hans-CN\" for simplified\nChinese as used in China. The list can be provided as a comma-separated\nlist or as an array."}, "doc": {"default": "the document hosting YUI", "type": "Document", "description": "The document associated with the 'win' configuration."}, "bootstrap": {"default": "true", "type": "boolean", "description": "Allows the YUI seed file to fetch the loader component and library\nmetadata to dynamically load additional dependencies."}, "modules": {"see": "modules for the details about the modules part of the\ngroup definition.\n<code>\n&nbsp; groups: {\n&nbsp;     yui2: {\n&nbsp;         // specify whether or not this group has a combo service\n&nbsp;         combine: true,\n&nbsp;\n&nbsp;         // the base path for non-combo paths\n&nbsp;         base: 'http://yui.yahooapis.com/2.8.0r4/build/',\n&nbsp;\n&nbsp;         // the path to the combo service\n&nbsp;         comboBase: 'http://yui.yahooapis.com/combo?',\n&nbsp;\n&nbsp;         // a fragment to prepend to the path attribute when\n&nbsp;         // when building combo urls\n&nbsp;         root: '2.8.0r4/build/',\n&nbsp;\n&nbsp;         // the module definitions\n&nbsp;         modules:  {\n&nbsp;             yui2_yde: {\n&nbsp;                 path: \"yahoo-dom-event/yahoo-dom-event.js\"\n&nbsp;             },\n&nbsp;             yui2_anim: {\n&nbsp;                 path: \"animation/animation.js\",\n&nbsp;                 requires: ['yui2_yde']\n&nbsp;             }\n&nbsp;         }\n&nbsp;     }\n&nbsp; }\n</code>", "type": "object", "description": "A hash of module definitions to add to the list of YUI components.  \nThese components can then be dynamically loaded side by side with\nYUI via the use() method. This is a hash, the key is the module\nname, and the value is an object literal specifying the metdata\nfor the module.  * See Loader.addModule for the supported module\nmetadata fields.  Also @see groups, which provides a way to\nconfigure the base and combo spec for a \n<code>\nmodules: {\n&nbsp; mymod1: {\n&nbsp;   requires: ['node'],\n&nbsp;   fullpath: 'http://myserver.mydomain.com/mymod1/mymod1.js'\n&nbsp; },\n&nbsp; mymod2: {\n&nbsp;   requires: ['mymod1'],\n&nbsp;   fullpath: 'http://myserver.mydomain.com/mymod2/mymod2.js'\n&nbsp; }\n}\n</code>"}, "fetchCSS": {"default": "true", "type": "boolean|string", "description": "Specifies whether or not YUI().use(...) will attempt to load CSS\nresources at all.  Any truthy value will cause CSS dependencies\nto load when fetching script.  The special value 'force' will \ncause CSS dependencies to be loaded even if no script is needed."}, "filter": {"type": "string|object", "description": "A filter to apply to result urls.  This filter will modify the default\npath for all modules.  The default path for the YUI library is the\nminified version of the files (e.g., event-min.js).  The filter property\ncan be a predefined filter or a custom filter.  The valid predefined \nfilters are:\n<dl>\n<dt>DEBUG</dt>\n<dd>Selects the debug versions of the library (e.g., event-debug.js).\nThis option will automatically include the Logger widget</dd>\n<dt>RAW</dt>\n<dd>Selects the non-minified version of the library (e.g., event.js).</dd>\n</dl>\nYou can also define a custom filter, which must be an object literal \ncontaining a search expression and a replace string:\n<pre>\nmyFilter: &#123; \n'searchExp': \"-min\\\\.js\", \n'replaceStr': \"-debug.js\"\n&#125;\n</pre>\nFor dynamic loading."}, "timeout": {"type": "int", "description": "Number of milliseconds before a timeout occurs when dynamically \nloading nodes. If not set, there is no timeout."}, "logFn": {"since": "3.1.0", "type": "Function", "description": "Alternative console log function for use in environments without\na supported native console."}, "root": {"type": "string", "description": "The root path to prepend to module path for the combo service. Ex: 3.0.0b1/build/\nFor dynamic loading."}, "throwFail": {"default": "true", "type": "boolean", "description": "If throwFail is set, Y.fail will generate or re-throw a JS Error.  Otherwise the failure is logged."}}, "description": "The config object contains all of the configuration options for\nthe YUI instance.  This object is supplied by the implementer \nwhen instantiating a YUI instance.  Some properties have default\nvalues if they are not supplied by the implementer."}, "Toolbar": {"name": "Toolbar", "constructors": [{"params": [{"type": "Object", "name": "config", "description": "  Object literal specifying widget configuration properties."}], "description": "A base class for Toolbar, providing:\n<ul>\n<li>Widget Lifecycle (initializer, renderUI, bindUI, syncUI, destructor)</li>\n<li>The ability to manage multiple <a href=\"ButtonItem.html\">ButtonItem</a> widgets as one group</li>\n<li>Managed user interaction states (default, active, hover)</li>\n<li>Keyboard accessible</li>\n</ul>\nQuick Example:<br/>\n<pre><code>var instance = new A.Toolbar({\nchildren: [\n{icon: 'plus', label: 'Add'},\n{icon: 'minus', label: 'Delete'}\n]\n}).render();\n</code></pre>\nCheck the list of <a href=\"Toolbar.html#configattributes\">Configuration Attributes</a> available for\nToolbar."}], "namespace": "", "module": "aui-toolbar", "events": {"activeStateChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "activeStateChange", "description": "Fires when the value for the configuration attribute 'activeState' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "hoverStateChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "hoverStateChange", "description": "Fires when the value for the configuration attribute 'hoverState' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "orientationChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "orientationChange", "description": "Fires when the value for the configuration attribute 'orientation' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "defaultStateChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "defaultStateChange", "description": "Fires when the value for the configuration attribute 'defaultState' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "defaultChildTypeChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "defaultChildTypeChange", "description": "Fires when the value for the configuration attribute 'defaultChildType' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "guessedname": "Toolbar", "methods": {"syncUI": {"protected": "", "description": "Sync the Toolbar UI. Lifecycle.", "guessedname": "syncUI", "guessedtype": "function"}, "_afterAddButton": {"description": "Syncs the UI after a button is added.", "param": "{EventFacade} event", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "guessedname": "_afterAddButton", "guessedtype": "function"}, "_uiSetOrientation": {"description": "Updates the UI for the orientation attribute.", "param": "{String} newVal The new value", "protected": "", "params": [{"type": "String", "name": "newVal", "description": " The new value"}], "guessedname": "_uiSetOrientation", "guessedtype": "function"}, "initializer": {"protected": "", "description": "Construction logic executed during Toolbar instantiation. Lifecycle.", "guessedname": "initializer", "guessedtype": "function"}, "_afterRemoveButton": {"description": "Syncs the UI after a button is removed.", "param": "{EventFacade} event", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "guessedname": "_afterRemoveButton", "guessedtype": "function"}, "bindUI": {"protected": "", "description": "Bind the events on the Toolbar UI. Lifecycle.", "guessedname": "bindUI", "guessedtype": "function"}, "_addByIconId": {"return": {"type": "String", "description": ""}, "description": "Overloads the add method so that if only a string is passed in, it will be\nassumed to be the icon, and will automatically create a configuration\nobject for it.", "param": "{String} icon the icon name or object or array of objects to add to the toolbar", "protected": "", "params": [{"type": "String", "name": "icon", "description": " the icon name or object or array of objects to add to the toolbar"}], "guessedname": "_addByIconId", "guessedtype": "function"}}, "uses": ["WidgetParent"], "superclass": "Component", "file": "aui-toolbar.js", "guessedtype": "property", "extends": "Component", "shortname": "Toolbar", "configs": {"orientation": {"default": "'horizontal'", "type": "String", "description": "Representing the orientation of the progress bar. Could be\n<code>horizontal</code> or <code>vertical</code>.", "guessedname": "orientation", "guessedtype": "property"}, "defaultChildType": {"default": "ButtonItem", "type": "String | Object", "description": "The default type of child widget to render into the Element", "guessedname": "defaultChildType", "guessedtype": "property"}, "defaultState": {"type": "boolean", "description": "Receives a default interaction state.", "guessedname": "defaultState", "guessedtype": "property"}, "activeState": {"type": "boolean", "description": "Receives an interaction state of active when the user clicks on it.", "guessedname": "activeState", "guessedtype": "property"}, "hoverState": {"type": "boolean", "description": "Receives an interaction state of hover during the\n<code>mouseover</code> event.", "guessedname": "hoverState", "guessedtype": "property"}}, "description": "A base class for Toolbar, providing:\n<ul>\n<li>Widget Lifecycle (initializer, renderUI, bindUI, syncUI, destructor)</li>\n<li>The ability to manage multiple <a href=\"ButtonItem.html\">ButtonItem</a> widgets as one group</li>\n<li>Managed user interaction states (default, active, hover)</li>\n<li>Keyboard accessible</li>\n</ul>\nQuick Example:<br/>\n<pre><code>var instance = new A.Toolbar({\nchildren: [\n{icon: 'plus', label: 'Add'},\n{icon: 'minus', label: 'Delete'}\n]\n}).render();\n</code></pre>\nCheck the list of <a href=\"Toolbar.html#configattributes\">Configuration Attributes</a> available for\nToolbar."}, "Panel": {"name": "Panel", "configs": {"icons": {"default": "[]", "type": "Array", "description": "<p>Array of <a href=\"ButtonItem.html\">ButtonItem</a> configuration objects to be displayed as icons\non the Panel title.</p>\nExample:\n<pre><code>icons: [ { icon: 'close', id: 'close' } ]</code></pre>\nFor more information how to use this option see\n<a href=\"ButtonItem.html\">ButtonItem</a>.", "guessedname": "icons", "guessedtype": "property"}, "collapsed": {"default": "false", "type": "boolean", "description": "Whether the panel is displayed collapsed.", "guessedname": "collapsed", "guessedtype": "property"}, "collapsible": {"default": "false", "type": "boolean", "description": "Whether the panel is able to be collapsed.", "guessedname": "collapsible", "guessedtype": "property"}, "title": {"default": "''", "type": "Boolean | String", "description": "The title to be displayed on the Panel.", "guessedname": "title", "guessedtype": "property"}}, "constructors": [{"params": [{"type": "Object", "name": "config", "description": "  Object literal specifying widget configuration properties."}], "description": "<p><img src=\"assets/images/aui-panel/main.png\"/></p>\nA base class for Panel, providing:\n<ul>\n<li>Widget Lifecycle (initializer, renderUI, bindUI, syncUI, destructor)</li>\n<li>Built-in expandable and collapsible behavior</li>\n<li>Prebuilt tool buttons that can be wired up to provide other customized behavior</li>\n<li>Good for building block for application-oriented user interfaces</li>\n<li>Can be easily dropped into any Container or layout</li>\n</ul>\nQuick Example:<br/>\n<pre><code>var instance = new A.Panel({\ncollapsible: true,\ncollapsed: true,\nheaderContent: 'Panel 1',\nbodyContent: 'Content'\n}).render();\n</code></pre>\nCheck the list of <a href=\"Panel.html#configattributes\">Configuration Attributes</a> available for\nPanel."}], "namespace": "", "module": "aui-panel", "events": {"collapsibleChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "collapsibleChange", "description": "Fires when the value for the configuration attribute 'collapsible' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "collapsedChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "collapsedChange", "description": "Fires when the value for the configuration attribute 'collapsed' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "titleChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "titleChange", "description": "Fires when the value for the configuration attribute 'title' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "iconsChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "iconsChange", "description": "Fires when the value for the configuration attribute 'icons' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "guessedname": "Panel", "methods": {"_afterPanelRender": {"description": "Fires after render phase.", "param": "{EventFacade} event", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "guessedname": "_afterPanelRender", "guessedtype": "function"}, "collapse": {"description": "Collapse the panel setting the\n<a href=\"Panel.html#config_collapsed\">collapsed</a> attribute to\n<code>true</code>.", "guessedname": "collapse", "guessedtype": "function"}, "_afterTitleChange": {"description": "Fires after the value of\n<a href=\"Panel.html#config_title\">title</a> change.", "param": "{EventFacade} event", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "guessedname": "_afterTitleChange", "guessedtype": "function"}, "_renderIconButtons": {"protected": "", "description": "Render the <a href=\"Panel.html#config_icons\">icons</a>.", "guessedname": "_renderIconButtons", "guessedtype": "function"}, "_syncCollapsedUI": {"protected": "", "description": "Sync the UI for the collapsed status (i.e., icons, height etc).", "guessedname": "_syncCollapsedUI", "guessedtype": "function"}, "_renderHeaderText": {"protected": "", "description": "Render the Panel header text with the value of\n<a href=\"Panel.html#config_title\">title</a>.", "guessedname": "_renderHeaderText", "guessedtype": "function"}, "initializer": {"protected": "", "description": "Construction logic executed during Panel instantiation. Lifecycle.", "guessedname": "initializer", "guessedtype": "function"}, "_addPanelClass": {"description": "Add css classes neede for the Panel in the passed <code>section</code>.", "param": "{String} section <a href=\"WidgetStdMod.html\">WidgetStdMod</a> section (i.e., body, header, footer).", "protected": "", "params": [{"type": "String", "name": "section", "description": " <a href=\"WidgetStdMod.html\">WidgetStdMod</a> section (i.e., body, header, footer)."}], "guessedname": "_addPanelClass", "guessedtype": "function"}, "toggle": {"description": "Toggle the visibility of the Panel toggling the value of the\n<a href=\"Widget.html#config_visible\">visible</a> attribute.", "guessedname": "toggle", "guessedtype": "function"}, "_syncTitleUI": {"protected": "", "description": "Sync the\n<a href=\"Panel.html#property_headerTextNode\">headerTextNode</a> with the\nvalue of the <a href=\"Panel.html#config_title\">title</a>.", "guessedname": "_syncTitleUI", "guessedtype": "function"}, "_afterCollapsedChange": {"description": "Fires after the value of\n<a href=\"Panel.html#config_collapsed\">collapsed</a> change.", "param": "{EventFacade} event", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "guessedname": "_afterCollapsedChange", "guessedtype": "function"}, "expand": {"description": "Expand the panel setting the\n<a href=\"Panel.html#config_collapsed\">collapsed</a> attribute to\n<code>false</code>.", "guessedname": "expand", "guessedtype": "function"}, "toggleCollapse": {"description": "Toggle the <a href=\"Panel.html#config_collapsed\">collapsed</a> value.\nExpanding and collapsing the Panel.", "guessedname": "toggleCollapse", "guessedtype": "function"}}, "uses": ["WidgetStdMod"], "superclass": "Component", "file": "aui-panel.js", "guessedtype": "function", "extends": "Component", "shortname": "Panel", "properties": {"headerTextNode": {"protected": "", "type": "Node", "description": "Stores the created node for the header of the Panel.", "guessedname": "headerTextNode", "guessedtype": "property"}, "Panel.ATTRS": {"type": "Object", "static": "", "description": "Static property used to define the default attribute\nconfiguration for the Panel.", "guessedname": "ATTRS", "guessedtype": "property"}}, "description": "<p><img src=\"assets/images/aui-panel/main.png\"/></p>\nA base class for Panel, providing:\n<ul>\n<li>Widget Lifecycle (initializer, renderUI, bindUI, syncUI, destructor)</li>\n<li>Built-in expandable and collapsible behavior</li>\n<li>Prebuilt tool buttons that can be wired up to provide other customized behavior</li>\n<li>Good for building block for application-oriented user interfaces</li>\n<li>Can be easily dropped into any Container or layout</li>\n</ul>\nQuick Example:<br/>\n<pre><code>var instance = new A.Panel({\ncollapsible: true,\ncollapsed: true,\nheaderContent: 'Panel 1',\nbodyContent: 'Content'\n}).render();\n</code></pre>\nCheck the list of <a href=\"Panel.html#configattributes\">Configuration Attributes</a> available for\nPanel."}, "Sortable": {"name": "Sortable", "configs": {"opacity": {"type": "String", "description": "The ocpacity to test the proxy item to when dragging.", "guessedname": "opacity", "guessedtype": "property"}, "container": {"type": "String", "description": "A selector query to get the container to listen for mousedown events on. All \"nodes\" should be a child of this container.", "guessedname": "container", "guessedtype": "property"}, "invalid": {"type": "String", "description": "A selector string to test if a list item is invalid and not sortable", "guessedname": "invalid", "guessedtype": "property"}, "handles": {"type": "Array", "description": "Drag handles to pass on to the internal DD.Delegate instance.", "guessedname": "handles", "guessedtype": "property"}, "opacityNode": {"type": "String", "description": "The node to set opacity on when dragging (dragNode or currentNode). Default: currentNode.", "guessedname": "opacityNode", "guessedtype": "property"}, "nodes": {"type": "String", "description": "A selector query to get the children of the \"container\" to make draggable elements from.", "guessedname": "nodes", "guessedtype": "property"}, "id": {"type": "String", "description": "The id of this sortable, used to get a reference to this sortable list from another list.", "guessedname": "id", "guessedtype": "property"}, "moveType": {"type": "String", "description": "How should an item move to another list: insert, swap, move, copy. Default: insert", "guessedname": "moveType", "guessedtype": "property"}}, "constructors": [{"description": "The class allows you to create a Drag & Drop reordered list."}], "namespace": "", "module": "sortable", "events": {"moveTypeChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "moveTypeChange", "description": "Fires when the value for the configuration attribute 'moveType' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "opacityNodeChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "opacityNodeChange", "description": "Fires when the value for the configuration attribute 'opacityNode' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "invalidChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "invalidChange", "description": "Fires when the value for the configuration attribute 'invalid' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "opacityChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "opacityChange", "description": "Fires when the value for the configuration attribute 'opacity' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "handlesChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "handlesChange", "description": "Fires when the value for the configuration attribute 'handles' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "nodesChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "nodesChange", "description": "Fires when the value for the configuration attribute 'nodes' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "containerChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "containerChange", "description": "Fires when the value for the configuration attribute 'container' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "idChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "idChange", "description": "Fires when the value for the configuration attribute 'id' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "guessedname": "Sortable", "methods": {"plug": {"description": "Passthrough to the DD.Delegate.ddplug method", "chainable": "", "param": "Class cls The class to plug", "params": [{"type": "", "name": "Class", "description": " cls The class to plug"}, {"type": "", "name": "Object", "description": " config The class config"}], "guessedname": "plug", "guessedtype": "function"}, "join": {"description": "Join this Sortable with another Sortable instance.\n<ul>\n<li>full: Exchange nodes with both lists.</li>\n<li>inner: Items can go into this list from the joined list.</li>\n<li>outer: Items can go out of the joined list into this list.</li>\n<li>none: Removes the join.</li>\n</ul>", "chainable": "", "param": "Sortable sel The sortable list to join with", "params": [{"type": "", "name": "Sortable", "description": " sel The sortable list to join with"}, {"type": "", "name": "String", "description": " type The type of join to do: full, inner, outer, none. Default: full"}], "guessedname": "join", "guessedtype": "function"}, "_onDragEnd": {"description": "Handles the DragEnd event that cleans up the settings in the drag:start event.", "param": "Event e The Event Object", "params": [{"type": "", "name": "Event", "description": " e The Event Object"}], "private": "", "guessedname": "_onDragEnd", "guessedtype": "function"}, "_join_outer": {"description": "Allows this Sortable to accept items from the passed Sortable.", "param": "Sortable sel The sortable list to join with", "params": [{"type": "", "name": "Sortable", "description": " sel The sortable list to join with"}], "private": "", "guessedname": "_join_outer", "guessedtype": "function"}, "_onDragStart": {"description": "Handles the DragStart event and initializes some settings.", "param": "Event e The Event Object", "params": [{"type": "", "name": "Event", "description": " e The Event Object"}], "private": "", "guessedname": "_onDragStart", "guessedtype": "function"}, "_join_full": {"description": "Joins both of the Sortables together.", "param": "Sortable sel The sortable list to join with", "params": [{"type": "", "name": "Sortable", "description": " sel The sortable list to join with"}], "private": "", "guessedname": "_join_full", "guessedtype": "function"}, "_onDropOver": {"description": "Handles the DropOver event to append a drop node to an empty target", "param": "Event e The Event Object", "params": [{"type": "", "name": "Event", "description": " e The Event Object"}], "private": "", "guessedname": "_onDropOver", "guessedtype": "function"}, "reg": {"description": "Register a Sortable instance with the singleton to allow lookups later.", "param": "Sortable s A Sortable instance.", "static": "", "guessedname": "reg", "guessedtype": "function", "params": [{"type": "", "name": "Sortable", "description": " s A Sortable instance."}]}, "unreg": {"description": "Unregister a Sortable instance with the singleton.", "param": "Sortable s A Sortable instance.", "static": "", "guessedname": "unreg", "guessedtype": "function", "params": [{"type": "", "name": "Sortable", "description": " s A Sortable instance."}]}, "_onDragOver": {"description": "Handles the DragOver event that moves the object in the list or to another list.", "param": "Event e The Event Object", "params": [{"type": "", "name": "Event", "description": " e The Event Object"}], "private": "", "guessedname": "_onDragOver", "guessedtype": "function"}, "_join_inner": {"description": "Allows this Sortable to give items to the passed Sortable.", "param": "Sortable sel The sortable list to join with", "params": [{"type": "", "name": "Sortable", "description": " sel The sortable list to join with"}], "private": "", "guessedname": "_join_inner", "guessedtype": "function"}, "getSortable": {"description": "Get a sortable instance back from a node reference or a selector string.", "param": "{String|Node} node The node instance or selector string to use to find a Sortable instance.", "static": "", "guessedname": "getSortable", "guessedtype": "function", "params": [{"type": "String|Node", "name": "node", "description": " The node instance or selector string to use to find a Sortable instance."}]}, "_join_none": {"description": "Removes the join with the passed Sortable.", "param": "Sortable sel The Sortable to remove the join from", "params": [{"type": "", "name": "Sortable", "description": " sel The Sortable to remove the join from"}], "private": "", "guessedname": "_join_none", "guessedtype": "function"}}, "extends": "Base", "superclass": "Base", "file": "sortable.js", "guessedtype": "function", "shortname": "Sortable", "properties": {"_sortables": {"description": "Hash map of all Sortables on the page.", "private": "", "static": "", "guessedname": "_sortables", "guessedtype": "property", "type": "Array"}, "delegate": {"type": "DD.Delegate", "description": "A reference to the DD.Delegate instance.", "guessedname": "delegate", "guessedtype": "property"}}, "description": "The class allows you to create a Drag & Drop reordered list."}, "TreeNodeTask": {"name": "TreeNodeTask", "constructors": [{"params": [{"type": "Object", "name": "config", "description": "  Object literal specifying widget configuration properties."}], "description": "<p><img src=\"assets/images/aui-treeNodeTask/main.png\"/></p>\nA base class for TreeNodeTask, providing:\n<ul>\n<li>Widget Lifecycle (initializer, renderUI, bindUI, syncUI, destructor)</li>\n<li>3 states checkbox support</li>\n<li>Automatic check/uncheck the parent status based on the children checked status</li>\n</ul>\nCheck the list of <a href=\"TreeNodeTask.html#configattributes\">Configuration Attributes</a> available for\nTreeNodeTask."}], "namespace": "", "module": "aui-tree", "guessedname": "TreeNodeTask", "extends": "TreeNodeCheck", "superclass": "TreeNodeCheck", "file": "aui-tree.js", "guessedtype": "property", "shortname": "TreeNodeTask", "properties": {"TreeNode.NAME": {"type": "String", "static": "", "description": "Static property provides a string to identify the class.", "guessedname": "NAME", "guessedtype": "property"}}, "description": "<p><img src=\"assets/images/aui-treeNodeTask/main.png\"/></p>\nA base class for TreeNodeTask, providing:\n<ul>\n<li>Widget Lifecycle (initializer, renderUI, bindUI, syncUI, destructor)</li>\n<li>3 states checkbox support</li>\n<li>Automatic check/uncheck the parent status based on the children checked status</li>\n</ul>\nCheck the list of <a href=\"TreeNodeTask.html#configattributes\">Configuration Attributes</a> available for\nTreeNodeTask."}, "Assert.ShouldFail": {"name": "Assert.ShouldFail", "constructors": [{"params": [{"type": "String", "name": "message", "description": " The message to display when the error occurs."}], "description": "ShouldFail is subclass of Error that is thrown whenever\na test was expected to fail but did not."}], "namespace": "Assert", "module": "test", "guessedname": "ShouldFail", "extends": "Assert.Error", "superclass": "Assert.Error", "file": "test.js", "guessedtype": "function", "shortname": "ShouldFail", "properties": {"name": {"type": "String", "description": "The name of the error that occurred.", "guessedname": "name", "guessedtype": "property"}}, "description": "ShouldFail is subclass of Error that is thrown whenever\na test was expected to fail but did not."}, "DataSchema.Text": {"name": "DataSchema.Text", "namespace": "", "module": "dataschema", "guessedname": "LANG", "methods": {"apply": {"return": {"type": "Object", "description": "Schema-parsed data."}, "description": "Applies a given schema to given delimited text data.", "param": "schema {Object} Schema to apply.", "static": "", "guessedname": "apply", "guessedtype": "function", "params": [{"type": "Object", "name": "schema", "description": "  Schema to apply."}, {"type": "Object", "name": "data", "description": "  Text data."}]}, "_parseResults": {"return": {"type": "Object", "description": "Parsed data object."}, "description": "Schema-parsed list of results from full data", "param": "schema {Array} Schema to parse against.", "protected": "", "static": "", "guessedname": "_parseResults", "guessedtype": "function", "params": [{"type": "Array", "name": "schema", "description": "  Schema to parse against."}, {"type": "String", "name": "text_in", "description": "  Text to parse."}, {"type": "Object", "name": "data_out", "description": "  In-progress parsed data to update."}]}}, "static": "", "superclass": "DataSchema.Base", "file": "dataschema.js", "guessedtype": "property", "extends": "DataSchema.Base", "shortname": "DataSchema.Text", "description": "Text subclass for the DataSchema Utility."}, "EventTarget": {"name": "EventTarget", "namespace": "", "module": "event-custom", "guessedname": "L", "methods": {"on": {"return": {"type": "", "description": "the event target or a detach handle per 'chain' config"}, "description": "Subscribe to a custom event hosted by this object", "param": "type    {string}   The type of the event", "params": [{"type": "string", "name": "type", "description": "       The type of the event"}, {"type": "Function", "name": "fn", "description": "  The callback"}, {"type": "object", "name": "context", "description": "  optional execution context."}, {"type": "mixed", "name": "arg*", "description": "  0..n additional arguments to supply to the subscriber"}], "guessedname": "on", "guessedtype": "function"}, "addTarget": {"param": "o {EventTarget} the target to add", "params": [{"type": "EventTarget", "name": "o", "description": "  the target to add"}], "description": "Registers another EventTarget as a bubble target.  Bubble order\nis determined by the order registered.  Multiple targets can\nbe specified.\nEvents can only bubble if emitFacade is true.\nIncluded in the event-custom-complex submodule.", "guessedname": "addTarget", "guessedtype": "function"}, "getEvent": {"return": {"type": "CustomEvent", "description": "the custom event or null"}, "description": "Returns the custom event of the provided type has been created, a\nfalsy value otherwise", "param": "type {string} the type, or name of the event", "params": [{"type": "string", "name": "type", "description": "  the type, or name of the event"}, {"type": "string", "name": "prefixed", "description": "  if true, the type is prefixed already"}], "guessedname": "getEvent", "guessedtype": "function"}, "_getType": {"private": "", "description": "If the instance has a prefix attribute and the\nevent type is not prefixed, the instance prefix is\napplied to the supplied type.", "guessedname": "_getType", "guessedtype": "function"}, "removeTarget": {"param": "o {EventTarget} the target to remove", "params": [{"type": "EventTarget", "name": "o", "description": "  the target to remove"}], "description": "Removes a bubble target", "guessedname": "removeTarget", "guessedtype": "function"}, "fire": {"return": {"type": "EventTarget", "description": "the event host"}, "description": "Fire a custom event by name.  The callback functions will be executed\nfrom the context specified when the event was created, and with the \nfollowing parameters.\nIf the custom event object hasn't been created, then the event hasn't \nbeen published and it has no subscribers.  For performance sake, we \nimmediate exit in this case.  This means the event won't bubble, so \nif the intention is that a bubble target be notified, the event must \nbe published on this object first.\nThe first argument is the event type, and any additional arguments are\npassed to the listeners as parameters.  If the first of these is an\nobject literal, and the event is configured to emit an event facade,\nthat object is mixed into the event facade and the facade is provided \nin place of the original object.", "param": "type {String|Object} The type of the event, or an object that contains\na 'type' property.", "params": [{"type": "String|Object", "name": "type", "description": "  The type of the event, or an object that contains\na 'type' property."}, {"type": "Object*", "name": "arguments", "description": "  an arbitrary set of parameters to pass to \nthe handler.  If the first of these is an object literal and the event is\nconfigured to emit an event facade, the event facade will replace that\nparameter after the properties the object literal contains are copied to\nthe event facade."}], "guessedname": "fire", "guessedtype": "function"}, "unsubscribeAll": {"description": "Removes all listeners from the specified event.  If the event type\nis not specified, all listeners from all hosted custom events will\nbe removed.", "deprecated": "use detachAll", "param": "type {string}   The type, or name of the event", "params": [{"type": "string", "name": "type", "description": "    The type, or name of the event"}], "guessedname": "unsubscribeAll", "guessedtype": "function"}, "after": {"return": {"type": "", "description": "the event target or a detach handle per 'chain' config"}, "description": "Subscribe to a custom event hosted by this object.  The\nsupplied callback will execute after any listeners add\nvia the subscribe method, and after the default function,\nif configured for the event, has executed.", "param": "type    {string}   The type of the event", "params": [{"type": "string", "name": "type", "description": "       The type of the event"}, {"type": "Function", "name": "fn", "description": "  The callback"}, {"type": "object", "name": "context", "description": "  optional execution context."}, {"type": "mixed", "name": "arg*", "description": "  0..n additional arguments to supply to the subscriber"}], "guessedname": "after", "guessedtype": "function"}, "getTargets": {"return": {"type": "", "description": "EventTarget[]"}, "description": "Returns an array of bubble targets for this object.", "guessedname": "getTargets", "guessedtype": "function"}, "publish": {"return": {"type": "CustomEvent", "description": "the custom event"}, "description": "Creates a new custom event of the specified type.  If a custom event\nby that name already exists, it will not be re-created.  In either\ncase the custom event is returned.", "param": "type {string} the type, or name of the event", "params": [{"type": "string", "name": "type", "description": "  the type, or name of the event"}, {"type": "object", "name": "opts", "description": "  optional config params.  Valid properties are:\n<ul>\n<li>\n'broadcast': whether or not the YUI instance and YUI global are notified when the event is fired (false)\n</li>\n<li>\n'bubbles': whether or not this event bubbles (true)\nEvents can only bubble if emitFacade is true.\n</li>\n<li>\n'context': the default execution context for the listeners (this)\n</li>\n<li>\n'defaultFn': the default function to execute when this event fires if preventDefault was not called\n</li>\n<li>\n'emitFacade': whether or not this event emits a facade (false)\n</li>\n<li>\n'prefix': the prefix for this targets events, e.g., 'menu' in 'menu:click' \n</li>\n<li>\n'fireOnce': if an event is configured to fire once, new subscribers after\nthe fire will be notified immediately.\n</li>\n<li>\n'preventable': whether or not preventDefault() has an effect (true)\n</li>\n<li>\n'preventedFn': a function that is executed when preventDefault is called\n</li>\n<li>\n'queuable': whether or not this event can be queued during bubbling (false)\n</li>\n<li>\n'silent': if silent is true, debug messages are not provided for this event.\n</li>\n<li>\n'stoppedFn': a function that is executed when stopPropagation is called\n</li>\n<li>\n'monitored': specifies whether or not this event should send notifications about\nwhen the event has been attached, detached, or published.\n</li>\n<li>\n'type': the event type (valid option if not provided as the first parameter to publish)\n</li>\n</ul>"}], "guessedname": "publish", "guessedtype": "function"}, "detachAll": {"param": "type {string}   The type, or name of the event", "params": [{"type": "string", "name": "type", "description": "    The type, or name of the event"}], "description": "Removes all listeners from the specified event.  If the event type\nis not specified, all listeners from all hosted custom events will\nbe removed.", "guessedname": "detachAll", "guessedtype": "function"}, "subscribe": {"deprecated": "use on", "description": "subscribe to an event", "guessedname": "subscribe", "guessedtype": "function"}, "_monitor": {"private": "", "description": "This is the entry point for the event monitoring system.\nYou can monitor 'attach', 'detach', 'fire', and 'publish'.  \nWhen configured, these events generate an event.  click ->\nclick_attach, click_detach, click_publish -- these can\nbe subscribed to like other events to monitor the event\nsystem.  Inividual published events can have monitoring\nturned on or off (publish can't be turned off before it\nit published) by setting the events 'monitor' config.", "guessedname": "_monitor", "guessedtype": "function"}, "unsubscribe": {"deprecated": "use detach", "description": "detach a listener", "guessedname": "unsubscribe", "guessedtype": "function"}, "before": {"return": {"type": "", "description": "detach handle"}, "description": "Executes the callback before a DOM event, custom event\nor method.  If the first argument is a function, it\nis assumed the target is a method.  For DOM and custom\nevents, this is an alias for Y.on.\nFor DOM and custom events:\ntype, callback, context, 0-n arguments\nFor methods:\ncallback, object (method host), methodName, context, 0-n arguments", "guessedname": "before", "guessedtype": "function"}, "detach": {"return": {"type": "EventTarget", "description": "the host"}, "description": "Detach one or more listeners the from the specified event", "param": "type {string|Object}   Either the handle to the subscriber or the \ntype of event.  If the type\nis not specified, it will attempt to remove\nthe listener from all hosted events.", "params": [{"type": "string|Object", "name": "type", "description": "    Either the handle to the subscriber or the \ntype of event.  If the type\nis not specified, it will attempt to remove\nthe listener from all hosted events."}, {"type": "Function", "name": "fn", "description": "    The subscribed function to unsubscribe, if not\nsupplied, all subscribers will be removed."}, {"type": "Object", "name": "context", "description": "     The custom object passed to subscribe.  This is\noptional, but if supplied will be used to\ndisambiguate multiple listeners that are the same\n(e.g., you subscribe many object using a function\nthat lives on the prototype)"}], "guessedname": "detach", "guessedtype": "function"}, "bubble": {"return": {"type": "boolean", "description": "the aggregated return value from Event.Custom.fire"}, "description": "Propagate an event.  Requires the event-custom-complex module.", "param": "evt {Event.Custom} the custom event to propagate", "params": [{"type": "Event.Custom", "name": "evt", "description": "  the custom event to propagate"}], "guessedname": "bubble", "guessedtype": "function"}, "_parseType": {"private": "", "description": "Returns an array with the detach key (if provided),\nand the prefixed event name from _getType\nY.on('detachcategory| menu:click', fn)", "guessedname": "_parseType", "guessedtype": "function"}, "once": {"return": {"type": "", "description": "the event target or a detach handle per 'chain' config"}, "description": "Listen to a custom event hosted by this object one time.  \nThis is the equivalent to <code>on</code> except the\nlistener is immediatelly detached when it is executed.", "param": "type    {string}   The type of the event", "params": [{"type": "string", "name": "type", "description": "       The type of the event"}, {"type": "Function", "name": "fn", "description": "  The callback"}, {"type": "object", "name": "context", "description": "  optional execution context."}, {"type": "mixed", "name": "arg*", "description": "  0..n additional arguments to supply to the subscriber"}], "guessedname": "once", "guessedtype": "function"}}, "param": "opts a configuration object", "file": "event-custom.js", "guessedtype": "property", "shortname": "EventTarget", "config": "emitFacade {boolean} if true, all events will emit event \nfacade payloads by default (default false)", "description": "EventTarget provides the implementation for any object to\npublish, subscribe and fire to custom events, and also\nalows other EventTargets to target the object with events\nsourced from the other object.\nEventTarget is designed to be used with Y.augment to wrap \nEventCustom in an interface that allows events to be listened to \nand fired by name.  This makes it possible for implementing code to\nsubscribe to an event that either has not been created yet, or will\nnot be created at all."}, "DataType.XML": {"name": "DataType.XML", "description": "DataType.XML provides a set of utility functions to operate against XML documents.", "namespace": "", "module": "datatype", "guessedname": "LANG", "static": "", "file": "datatype-min.js", "guessedtype": "property", "shortname": "DataType.XML", "methods": {"parse": {"return": {"type": "XMLDoc", "description": "XML Document."}, "description": "Converts data to type XMLDocument.", "param": "data {String} Data to convert.", "params": [{"type": "String", "name": "data", "description": "  Data to convert."}], "guessedname": "parse", "guessedtype": "function"}, "format": {"return": {"type": "String", "description": "String."}, "description": "Converts data to type XMLDocument.", "param": "data {XMLDoc} Data to convert.", "params": [{"type": "XMLDoc", "name": "data", "description": "  Data to convert."}], "guessedname": "format", "guessedtype": "function"}}}, "Test.Reporter": {"name": "Test.Reporter", "constructors": [{"params": [{"type": "String", "name": "url", "description": " The URL to submit the results to."}, {"type": "Function", "name": "format", "description": " (Optiona) A function that outputs the results in a specific format.\nDefault is Y.Test.Format.XML."}], "description": "An object capable of sending test results to a server."}], "namespace": "Test", "module": "test", "guessedname": "Reporter", "methods": {"report": {"return": {"type": "Void", "description": ""}, "description": "Sends the report to the server.", "param": "{Object} results The results object created by TestRunner.", "params": [{"type": "Object", "name": "results", "description": " The results object created by TestRunner."}], "guessedname": "report", "guessedtype": "function"}, "destroy": {"return": {"type": "Void", "description": ""}, "description": "Cleans up the memory associated with the TestReporter, removing DOM elements\nthat were created.", "guessedname": "destroy", "guessedtype": "function"}, "addField": {"return": {"type": "Void", "description": ""}, "description": "Adds a field to the form that submits the results.", "param": "{String} name The name of the field.", "params": [{"type": "String", "name": "name", "description": " The name of the field."}, {"type": "Variant", "name": "value", "description": " The value of the field."}], "guessedname": "addField", "guessedtype": "function"}}, "file": "test.js", "guessedtype": "function", "shortname": "Reporter", "properties": {"url": {"type": "String", "description": "The URL to submit the data to.", "guessedname": "url", "guessedtype": "property"}, "_form": {"guessedname": "_form", "type": "HTMLFormElement", "description": "The form element used to submit the results.", "private": "", "guessedtype": "property"}, "_fields": {"guessedname": "_fields", "type": "Object", "description": "Extra fields to submit with the request.", "private": "", "guessedtype": "property"}, "_iframe": {"guessedname": "_iframe", "type": "HTMLIFrameElement", "description": "Iframe used as a target for form submission.", "private": "", "guessedtype": "property"}, "format": {"type": "Function", "description": "The formatting function to call when submitting the data.", "guessedname": "format", "guessedtype": "property"}}, "description": "An object capable of sending test results to a server."}, "WidgetStdMod": {"name": "WidgetStdMod", "namespace": "", "module": "widget-stdmod", "events": {"headerContentChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "headerContentChange", "description": "Fires when the value for the configuration attribute 'headerContent' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "bodyContentChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "bodyContentChange", "description": "Fires when the value for the configuration attribute 'bodyContent' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "fillHeightChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "fillHeightChange", "description": "Fires when the value for the configuration attribute 'fillHeight' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "footerContentChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "footerContentChange", "description": "Fires when the value for the configuration attribute 'footerContent' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "configs": {"bodyContent": {"default": "undefined", "type": "{String | Node}", "description": "The content to be added to the body section. This will replace any existing content\nin the body. If you want to append, or insert new content, use the <a href=\"#method_setStdModContent\">setStdModContent</a> method.", "guessedname": "bodyContent", "guessedtype": "property"}, "footerContent": {"default": "undefined", "type": "{String | Node}", "description": "The content to be added to the footer section. This will replace any existing content\nin the footer. If you want to append, or insert new content, use the <a href=\"#method_setStdModContent\">setStdModContent</a> method.", "guessedname": "footerContent", "guessedtype": "property"}, "fillHeight": {"default": "WidgetStdMod.BODY", "type": "{String}", "description": "The section (WidgetStdMod.HEADER, WidgetStdMod.BODY or WidgetStdMod.FOOTER) which should be resized to fill the height of the standard module, when a \nheight is set on the Widget. If a height is not set on the widget, then all sections are sized based on \ntheir content.", "guessedname": "fillHeight", "guessedtype": "property"}, "headerContent": {"default": "undefined", "type": "{String | Node}", "description": "The content to be added to the header section. This will replace any existing content\nin the header. If you want to append, or insert new content, use the <a href=\"#method_setStdModContent\">setStdModContent</a> method.", "guessedname": "headerContent", "guessedtype": "property"}}, "methods": {"_addNodeRef": {"description": "Helper method to add nodes, to another node.\nThe child node(s) are added either before, after or replaces the existing node content \nbased on the value of the <code>where</code> argument.", "param": "{Node} node The section Node to be updated.", "params": [{"type": "Node", "name": "node", "description": " The section Node to be updated."}, {"type": "Node|NodeList", "name": "children", "description": " The new content Node, or NodeList to be added to section Node provided."}, {"type": "String", "name": "where", "description": " Optional. Either WidgetStdMod.AFTER, WidgetStdMod.BEFORE or WidgetStdMod.REPLACE.\nIf not provided, the content will replace existing content in the Node."}], "private": "", "guessedname": "_addNodeRef", "guessedtype": "function"}, "_afterHeaderChange": {"description": "Default attribute change listener for the headerContent attribute, responsible\nfor updating the UI, in response to attribute changes.", "param": "{EventFacade} e The event facade for the attribute change", "protected": "", "params": [{"type": "EventFacade", "name": "e", "description": " The event facade for the attribute change"}], "guessedname": "_afterHeaderChange", "guessedtype": "function"}, "_findStdModSection": {"return": {"type": "Node", "description": "The rendered node for the given section, or null if not found."}, "description": "Helper method to to find the rendered node for the given section,\nif it exists.", "private": "", "params": [{"type": "String", "name": "section", "description": " The section for which the render Node is to be found. Either WidgetStdMod.HEADER, WidgetStdMod.BODY or WidgetStdMod.FOOTER."}], "param": "{String} section The section for which the render Node is to be found. Either WidgetStdMod.HEADER, WidgetStdMod.BODY or WidgetStdMod.FOOTER.", "guessedname": "_findStdModSection", "guessedtype": "function"}, "_afterFooterChange": {"description": "Default attribute change listener for the footerContent attribute, responsible\nfor updating the UI, in response to attribute changes.", "param": "{EventFacade} e The event facade for the attribute change", "protected": "", "params": [{"type": "EventFacade", "name": "e", "description": " The event facade for the attribute change"}], "guessedname": "_afterFooterChange", "guessedtype": "function"}, "_syncUIStdMod": {"protected": "", "description": "Synchronizes the UI to match the Widgets standard module state.\n<p>\nThis method is invoked after syncUI is invoked for the Widget class\nusing YUI's aop infrastructure.\n</p>", "guessedname": "_syncUIStdMod", "guessedtype": "function"}, "_uiSetStdMod": {"description": "Updates the rendered UI, adding the provided content (either an HTML string, or node reference),\nto the specified section. The content is either added before, after or replaces existing content\nin the section, based on the value of the <code>where</code> argument.", "param": "{String} section The section to be updated. Either WidgetStdMod.HEADER, WidgetStdMod.BODY or WidgetStdMod.FOOTER.", "protected": "", "params": [{"type": "String", "name": "section", "description": " The section to be updated. Either WidgetStdMod.HEADER, WidgetStdMod.BODY or WidgetStdMod.FOOTER."}, {"type": "String | Node", "name": "content", "description": " The new content (either as an HTML string, or Node reference) to add to the section"}, {"type": "String", "name": "where", "description": " Optional. Either WidgetStdMod.AFTER, WidgetStdMod.BEFORE or WidgetStdMod.REPLACE.\nIf not provided, the content will replace existing content in the section."}], "guessedname": "_uiSetStdMod", "guessedtype": "function"}, "setStdModContent": {"param": "{String} section The standard module section whose content is to be updated. Either WidgetStdMod.HEADER, WidgetStdMod.BODY or WidgetStdMod.FOOTER.", "params": [{"type": "String", "name": "section", "description": " The standard module section whose content is to be updated. Either WidgetStdMod.HEADER, WidgetStdMod.BODY or WidgetStdMod.FOOTER."}, {"type": "String | Node", "name": "content", "description": " The content to be added, either an HTML string or a Node reference."}, {"type": "String", "name": "where", "description": " Optional. Either WidgetStdMod.AFTER, WidgetStdMod.BEFORE or WidgetStdMod.REPLACE.\nIf not provided, the content will replace existing content in the section."}], "description": "Updates the body section of the standard module with the content provided (either an HTML string, or node reference).\n<p>\nThis method can be used instead of the corresponding section content attribute if you'd like to retain the current content of the section,\nand insert content before or after it, by specifying the <code>where</code> argument.\n</p>", "guessedname": "setStdModContent", "guessedtype": "function"}, "_insertStdModSection": {"description": "Helper method to insert the Node for the given section into the correct location in the contentBox.", "param": "{Node} contentBox A reference to the Widgets content box.", "params": [{"type": "Node", "name": "contentBox", "description": " A reference to the Widgets content box."}, {"type": "String", "name": "section", "description": " The section to create/render. Either WidgetStdMod.HEADER, WidgetStdMod.BODY or WidgetStdMod.FOOTER."}, {"type": "Node", "name": "sectionNode", "description": " The Node for the section."}], "private": "", "guessedname": "_insertStdModSection", "guessedtype": "function"}, "_getPreciseHeight": {"return": {"type": "Number", "description": "The height of the Node including borders and padding, possibly a float."}, "description": "Helper method to obtain the precise height of the node provided, including padding and border.\nThe height could be a sub-pixel value for certain browsers, such as Firefox 3.", "private": "", "params": [{"type": "Node", "name": "node", "description": " The node for which the precise height is required."}], "param": "{Node} node The node for which the precise height is required.", "guessedname": "_getPreciseHeight", "guessedtype": "function"}, "fillHeight": {"param": "{Node} node The node which should be resized to fill out the height\nof the Widget bounding box. Should be a standard module section node which belongs\nto the widget.", "params": [{"type": "Node", "name": "node", "description": " The node which should be resized to fill out the height\nof the Widget bounding box. Should be a standard module section node which belongs\nto the widget."}], "description": "Sets the height on the provided header, body or footer element to \nfill out the height of the Widget. It determines the height of the \nwidgets bounding box, based on it's configured height value, and \nsets the height of the provided section to fill out any \nspace remaining after the other standard module section heights \nhave been accounted for.\n<p><strong>NOTE:</strong> This method is not designed to work if an explicit \nheight has not been set on the Widget, since for an \"auto\" height Widget, \nthe heights of the header/body/footer will drive the height of the Widget.</p>", "guessedname": "fillHeight", "guessedtype": "function"}, "_getStdModTemplate": {"return": {"type": "Node", "description": "The new Node instance for the section"}, "description": "Gets a new Node reference for the given standard module section, by cloning\nthe stored template node.", "param": "{String} section The section to create a new node for. Either WidgetStdMod.HEADER, WidgetStdMod.BODY or WidgetStdMod.FOOTER.", "protected": "", "params": [{"type": "String", "name": "section", "description": " The section to create a new node for. Either WidgetStdMod.HEADER, WidgetStdMod.BODY or WidgetStdMod.FOOTER."}], "guessedname": "_getStdModTemplate", "guessedtype": "function"}, "getStdModNode": {"return": {"type": "Node", "description": "The node reference for the section, or null if not set."}, "description": "Returns the node reference for the given section. Note: The DOM is not queried for the node reference. The reference\nstored by the widget instance is returned if set.", "param": "{String} section The section whose node reference is required. Either WidgetStdMod.HEADER, WidgetStdMod.BODY or WidgetStdMod.FOOTER.", "params": [{"type": "String", "name": "section", "description": " The section whose node reference is required. Either WidgetStdMod.HEADER, WidgetStdMod.BODY or WidgetStdMod.FOOTER."}], "guessedname": "getStdModNode", "guessedtype": "function"}, "_applyStdModParsedConfig": {"private": "", "description": "This method is injected before the _applyParsedConfig step in \nthe application of HTML_PARSER, and sets up the state to \nidentify whether or not we should remove the current DOM content\nor not, based on whether or not the current content attribute value\nwas extracted from the DOM, or provided by the user configuration", "guessedname": "_applyStdModParsedConfig", "guessedtype": "function"}, "_addNodeHTML": {"description": "Helper method to add the given HTML string to the node reference provided.\nThe HTML is added either before, after or replaces the existing node content \nbased on the value of the <code>where</code> argument.", "param": "{Node} node The section Node to be updated.", "params": [{"type": "Node", "name": "node", "description": " The section Node to be updated."}, {"type": "String", "name": "html", "description": " The new content HTML string to be added to the section Node."}, {"type": "String", "name": "where", "description": " Optional. Either WidgetStdMod.AFTER, WidgetStdMod.BEFORE or WidgetStdMod.REPLACE.\nIf not provided, the content will replace Nodes existing content."}], "private": "", "guessedname": "_addNodeHTML", "guessedtype": "function"}, "_parseStdModHTML": {"return": {"type": "String", "description": "Inner HTML string with the contents of the section"}, "description": "Utility method, used by WidgetStdMods HTML_PARSER implementation\nto extract data for each section from markup.", "private": "", "params": [{"type": "String", "name": "section", "description": ""}], "param": "{String} section", "guessedname": "_parseStdModHTML", "guessedtype": "function"}, "_renderStdMod": {"return": {"type": "Node", "description": "A reference to the added section node"}, "description": "Creates the DOM node for the given section, and inserts it into the correct location in the contentBox.", "param": "{String} section The section to create/render. Either WidgetStdMod.HEADER, WidgetStdMod.BODY or WidgetStdMod.FOOTER.", "protected": "", "params": [{"type": "String", "name": "section", "description": " The section to create/render. Either WidgetStdMod.HEADER, WidgetStdMod.BODY or WidgetStdMod.FOOTER."}], "guessedname": "_renderStdMod", "guessedtype": "function"}, "_bindUIStdMod": {"protected": "", "description": "Binds event listeners responsible for updating the UI state in response to \nWidget standard module related state changes.\n<p>\nThis method is invoked after bindUI is invoked for the Widget class\nusing YUI's aop infrastructure.\n</p>", "guessedname": "_bindUIStdMod", "guessedtype": "function"}, "_fillHeight": {"private": "", "description": "Updates the rendered UI, to resize the current section specified by the fillHeight attribute, so\nthat the standard module fills out the Widget height. If a height has not been set on Widget,\nthe section is not resized (height is set to \"auto\").", "guessedname": "_fillHeight", "guessedtype": "function"}, "_renderUIStdMod": {"protected": "", "description": "Creates/Initializes the DOM for standard module support.\n<p>\nThis method is invoked after renderUI is invoked for the Widget class\nusing YUI's aop infrastructure.\n</p>", "guessedname": "_renderUIStdMod", "guessedtype": "function"}, "_uiSetFillHeight": {"description": "Updates the rendered UI, to resize the provided section so that the standard module fills out \nthe specified widget height. Note: This method does not check whether or not a height is set \non the Widget.", "param": "{String} fillSection A valid section specifier - one of WidgetStdMod.HEADER, WidgetStdMod.BODY or WidgetStdMod.FOOTER", "protected": "", "params": [{"type": "String", "name": "fillSection", "description": " A valid section specifier - one of WidgetStdMod.HEADER, WidgetStdMod.BODY or WidgetStdMod.FOOTER"}], "guessedname": "_uiSetFillHeight", "guessedtype": "function"}, "_validateFillHeight": {"return": {"type": "", "description": "true if valid, false if not"}, "description": "Default validator for the fillHeight attribute. Verifies that the \nvalue set is a valid section specifier - one of WidgetStdMod.HEADER, WidgetStdMod.BODY or WidgetStdMod.FOOTER,\nor a falsey value if fillHeight is to be disabled.", "param": "{String} val The section which should be setup to fill height, or false/null to disable fillHeight", "protected": "", "params": [{"type": "String", "name": "val", "description": " The section which should be setup to fill height, or false/null to disable fillHeight"}], "guessedname": "_validateFillHeight", "guessedtype": "function"}, "_afterBodyChange": {"description": "Default attribute change listener for the bodyContent attribute, responsible\nfor updating the UI, in response to attribute changes.", "param": "{EventFacade} e The event facade for the attribute change", "protected": "", "params": [{"type": "EventFacade", "name": "e", "description": " The event facade for the attribute change"}], "guessedname": "_afterBodyChange", "guessedtype": "function"}, "_afterFillHeightChange": {"description": "Default attribute change listener for the fillHeight attribute, responsible\nfor updating the UI, in response to attribute changes.", "param": "{EventFacade} e The event facade for the attribute change", "protected": "", "params": [{"type": "EventFacade", "name": "e", "description": " The event facade for the attribute change"}], "guessedname": "_afterFillHeightChange", "guessedtype": "function"}, "_getStdModContent": {"return": {"type": "Node", "description": "The child node collection of the standard module section."}, "description": "Retrieves the child nodes (content) of a standard module section", "private": "", "params": [{"type": "String", "name": "section", "description": " The standard module section whose child nodes are to be retrieved. Either WidgetStdMod.HEADER, WidgetStdMod.BODY or WidgetStdMod.FOOTER."}], "param": "{String} section The standard module section whose child nodes are to be retrieved. Either WidgetStdMod.HEADER, WidgetStdMod.BODY or WidgetStdMod.FOOTER.", "guessedname": "_getStdModContent", "guessedtype": "function"}}, "param": "{Object} The user configuration object", "file": "widget-stdmod.js", "shortname": "WidgetStdMod", "properties": {"WidgetStdMod.HEADER": {"type": "String", "static": "", "description": "Constant used to refer the the standard module header, in methods which expect a section specifier", "guessedname": "HEADER", "guessedtype": "property"}, "WidgetStdMod.REPLACE": {"type": "String", "static": "", "description": "Constant used to specify insertion position, when adding content to sections of the standard module in\nmethods which expect a \"where\" argument.\n<p>\n<em>Replaces</em> the sections existing content, with new content.\n</p>", "guessedname": "REPLACE", "guessedtype": "property"}, "WidgetStdMod.ATTRS": {"type": "Object", "static": "", "description": "Static property used to define the default attribute \nconfiguration introduced by WidgetStdMod.", "guessedname": "ATTRS", "guessedtype": "property"}, "WidgetStdMod.BEFORE": {"type": "String", "static": "", "description": "Constant used to specify insertion position, when adding content to sections of the standard module in\nmethods which expect a \"where\" argument.\n<p>\nInserts new content <em>before</em> the sections existing content.\n</p>", "guessedname": "BEFORE", "guessedtype": "property"}, "WidgetStdMod.HTML_PARSER": {"type": "Object", "static": "", "description": "The HTML parsing rules for the WidgetStdMod class.", "guessedname": "HTML_PARSER", "guessedtype": "property"}, "WidgetStdMod.SECTION_CLASS_NAMES": {"type": "Object", "static": "", "description": "Static hash of default class names used for the header,\nbody and footer sections of the standard module, keyed by\nthe section identifier (WidgetStdMod.STD_HEADER, WidgetStdMod.STD_BODY, WidgetStdMod.STD_FOOTER)", "guessedname": "SECTION_CLASS_NAMES", "guessedtype": "property"}, "WidgetStdMod.FOOTER": {"type": "String", "static": "", "description": "Constant used to refer the the standard module footer, in methods which expect a section specifier", "guessedname": "FOOTER", "guessedtype": "property"}, "WidgetStdMod.TEMPLATES": {"type": "Object", "static": "", "description": "The template HTML strings for each of the standard module sections. Section entries are keyed by the section constants,\nWidgetStdMod.HEADER, WidgetStdMod.BODY, WidgetStdMod.FOOTER, and contain the HTML to be added for each section.\ne.g.\n<pre>\n{\nheader : '&lt;div class=\"yui-widget-hd\"&gt;&lt;/div&gt;',\nbody : '&lt;div class=\"yui-widget-bd\"&gt;&lt;/div&gt;',\nfooter : '&lt;div class=\"yui-widget-ft\"&gt;&lt;/div&gt;'\n}\n</pre>", "guessedname": "TEMPLATES", "guessedtype": "property"}, "WidgetStdMod.BODY": {"type": "String", "static": "", "description": "Constant used to refer the the standard module body, in methods which expect a section specifier", "guessedname": "BODY", "guessedtype": "property"}, "WidgetStdMod.AFTER": {"type": "String", "static": "", "description": "Constant used to specify insertion position, when adding content to sections of the standard module in \nmethods which expect a \"where\" argument.\n<p>\nInserts new content <em>before</em> the sections existing content.\n</p>", "guessedname": "AFTER", "guessedtype": "property"}}, "description": "Widget extension, which can be used to add Standard Module support to the \nbase Widget class, through the <a href=\"Base.html#method_build\">Base.build</a> \nmethod.\n<p>\nThe extension adds header, body and footer sections to the Widget's content box and \nprovides the corresponding methods and attributes to modify the contents of these sections.\n</p>"}, "Plugin.Console": {"name": "Plugin.Console", "configs": {"height": {"default": "\"300px\"", "type": "{String | Number}", "description": "String with units, or number, representing the height of the Console,\ninclusive of header and footer. If a number is provided, the default\nunit, defined by Widget's DEF_UNIT, property is used.", "guessedname": "height", "guessedtype": "property"}, "consoleLimit": {"default": "300", "type": "Number", "description": "Maximum number of Console entries allowed in the Console body at one\ntime.  This is used to keep acquired messages from exploding the\nDOM tree and impacting page performance.", "guessedname": "consoleLimit", "guessedtype": "property"}, "width": {"default": "\"300px\"", "type": "{String | Number}", "description": "String with units, or number, representing the width of the Console.\nIf a number is provided, the default unit, defined by Widget's\nDEF_UNIT, property is used.", "guessedname": "width", "guessedtype": "property"}, "logLevel": {"default": "Y.config.logLevel or Console.LOG_LEVEL_INFO", "type": "String", "description": "Minimum entry log level to render into the Console.  The initial\nlogLevel value for all Console instances defaults from the\nY.config.logLevel YUI configuration, or Console.LOG_LEVEL_INFO if\nthat configuration is not set.\nPossible values are &quot;info&quot;, &quot;warn&quot;,\n&quot;error&quot; (case insensitive), or their corresponding statics\nConsole.LOG_LEVEL_INFO and so on.", "guessedname": "logLevel", "guessedtype": "property"}, "printLimit": {"default": "50", "type": "Number", "description": "Maximum number of entries printed in each iteration of the print\nloop. This is used to prevent excessive logging locking the page UI.", "guessedname": "printLimit", "guessedtype": "property"}, "collapsed": {"default": "false", "type": "Boolean", "description": "Controls the collapsed state of the Console", "guessedname": "collapsed", "guessedtype": "property"}, "useBrowserConsole": {"default": "false", "type": "{Boolean}", "description": "Pass through to the YUI instance useBrowserConsole configuration.\nBy default this is set to false, which will disable logging to the\nbrowser console when a Console instance is created.  If the\nlogSource is not a YUI instance, this has no effect.", "guessedname": "useBrowserConsole", "guessedtype": "property"}, "logSource": {"default": "Y", "type": "EventTarget", "description": "Object that will emit the log events.  By default the YUI instance.\nTo have a single Console capture events from all YUI instances, set\nthis to the Y.Global object.", "guessedname": "logSource", "guessedtype": "property"}, "printTimeout": {"default": "100", "type": "Number", "description": "Millisecond timeout between iterations of the print loop, moving\nentries from the buffer to the UI.", "guessedname": "printTimeout", "guessedtype": "property"}, "defaultSource": {"default": "\"global\"", "type": "String", "description": "If a source is not specified in the Y.log(..) statement, this\nsource will be used.", "guessedname": "defaultSource", "guessedtype": "property"}, "paused": {"default": "false", "type": "boolean", "description": "Boolean to pause the outputting of new messages to the console.\nWhen paused, messages will accumulate in the buffer.", "guessedname": "paused", "guessedtype": "property"}, "newestOnTop": {"default": "true", "type": "Boolean", "description": "New entries should display at the top of the Console or the bottom?", "guessedname": "newestOnTop", "guessedtype": "property"}, "logEvent": {"default": "\"yui:log\"", "type": "String", "description": "Name of the custom event that will communicate log messages.", "guessedname": "logEvent", "guessedtype": "property"}, "style": {"default": "'separate'", "type": "{String}", "description": "Allows the Console to flow in the document.  Available values are\n'inline', 'block', and 'separate' (the default).", "guessedname": "style", "guessedtype": "property"}, "startTime": {"default": "The moment the console module is <code>use</code>d", "type": "Date", "description": "The baseline time for this Console instance, used to measure elapsed\ntime from the moment the console module is <code>use</code>d to the\nmoment each new entry is logged (not rendered).\nThis value is reset by the instance method myConsole.reset().", "guessedname": "startTime", "guessedtype": "property"}, "entryTemplate": {"default": "Console.ENTRY_TEMPLATE", "type": "String", "description": "Markup template used to create the DOM structure for Console entries.", "guessedname": "entryTemplate", "guessedtype": "property"}, "scrollIntoView": {"default": "true", "type": "Boolean", "description": "When new entries are added to the Console UI, should they be\nscrolled into view?", "guessedname": "scrollIntoView", "guessedtype": "property"}, "lastTime": {"default": "The moment the console module is <code>use</code>d", "type": "Date", "description": "The precise time the last entry was logged.  Used to measure elapsed\ntime between log messages.", "guessedname": "lastTime", "guessedtype": "property"}, "defaultCategory": {"default": "\"info\"", "type": "String", "description": "If a category is not specified in the Y.log(..) statement, this\ncategory will be used. Categories &quot;info&quot;,\n&quot;warn&quot;, and &quot;error&quot; are also called log level.", "guessedname": "defaultCategory", "guessedtype": "property"}, "strings": {"type": "Object", "description": "Collection of strings used to label elements in the Console UI.\nDefault collection contains the following name:value pairs:\n<ul>\n<li>title : &quot;Log Console&quot;</li>\n<li>pause : &quot;Pause&quot;</li>\n<li>clear : &quot;Clear&quot;</li>\n<li>collapse : &quot;Collapse&quot;</li>\n<li>expand : &quot;Expand&quot;</li>\n</ul>", "guessedname": "strings", "guessedtype": "property"}}, "constructors": [{"params": [{"type": "Object", "name": "conf", "description": "  Configuration object (see Configuration attributes)"}], "description": "Console creates a visualization for messages logged through calls to a YUI\ninstance's <code>Y.log( message, category, source )</code> method.  The\ndebug versions of YUI modules will include logging statements to offer some\ninsight into the steps executed during that module's operation.  Including\nlog statements in your code will cause those messages to also appear in the\nConsole.  Use Console to aid in developing your page or application.\nEntry categories &quot;info&quot;, &quot;warn&quot;, and &quot;error&quot;\nare also referred to as the log level, and entries are filtered against the\nconfigured logLevel."}], "namespace": "Plugin", "module": "console", "events": {"scrollIntoViewChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "scrollIntoViewChange", "description": "Fires when the value for the configuration attribute 'scrollIntoView' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "heightChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "heightChange", "description": "Fires when the value for the configuration attribute 'height' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "lastTimeChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "lastTimeChange", "description": "Fires when the value for the configuration attribute 'lastTime' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "consoleLimitChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "consoleLimitChange", "description": "Fires when the value for the configuration attribute 'consoleLimit' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "newestOnTopChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "newestOnTopChange", "description": "Fires when the value for the configuration attribute 'newestOnTop' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "stringsChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "stringsChange", "description": "Fires when the value for the configuration attribute 'strings' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "logSourceChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "logSourceChange", "description": "Fires when the value for the configuration attribute 'logSource' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "logLevelChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "logLevelChange", "description": "Fires when the value for the configuration attribute 'logLevel' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "startTimeChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "startTimeChange", "description": "Fires when the value for the configuration attribute 'startTime' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "defaultSourceChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "defaultSourceChange", "description": "Fires when the value for the configuration attribute 'defaultSource' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "entryTemplateChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "entryTemplateChange", "description": "Fires when the value for the configuration attribute 'entryTemplate' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "logEventChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "logEventChange", "description": "Fires when the value for the configuration attribute 'logEvent' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "printLimitChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "printLimitChange", "description": "Fires when the value for the configuration attribute 'printLimit' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "defaultCategoryChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "defaultCategoryChange", "description": "Fires when the value for the configuration attribute 'defaultCategory' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "pausedChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "pausedChange", "description": "Fires when the value for the configuration attribute 'paused' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "printTimeoutChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "printTimeoutChange", "description": "Fires when the value for the configuration attribute 'printTimeout' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "useBrowserConsoleChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "useBrowserConsoleChange", "description": "Fires when the value for the configuration attribute 'useBrowserConsole' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "collapsedChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "collapsedChange", "description": "Fires when the value for the configuration attribute 'collapsed' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "reset": {"preventable": "_defResetFn", "params": [{"type": "Event.Facade", "name": "event", "description": "  Event Facade object"}], "description": "Triggers the reset behavior via the default logic in _defResetFn.", "guessedname": "defaultFn", "guessedtype": "property"}, "styleChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "styleChange", "description": "Fires when the value for the configuration attribute 'style' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "entry": {"preventable": "_defEntryFn", "params": [{"type": "Event.Facade", "name": "event", "description": "  An Event Facade object with the following attribute specific properties added:\n<dl>\n<dt>message</dt>\n<dd>The message data normalized into an object literal (see _normalizeMessage)</dd>\n</dl>"}], "description": "Transfers a received message to the print loop buffer.  Default\nbehavior defined in _defEntryFn.", "guessedname": "defaultFn", "guessedtype": "property"}, "widthChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "widthChange", "description": "Fires when the value for the configuration attribute 'width' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "guessedname": "getCN", "methods": {"_normalizeMessage": {"return": {"type": "", "description": "Object the message object"}, "description": "Create a log entry message from the inputs including the following keys:\n<ul>\n<li>time - this moment</li>\n<li>message - leg message</li>\n<li>category - logLevel or custom category for the message</li>\n<li>source - when provided, the widget or util calling Y.log</li>\n<li>sourceAndDetail - same as source but can include instance info</li>\n<li>localTime - readable version of time</li>\n<li>elapsedTime - ms since last entry</li>\n<li>totalTime - ms since Console was instantiated or reset</li>\n</ul>", "protected": "", "params": [{"type": "Event", "name": "e", "description": "  custom event containing the log message"}], "guessedname": "_normalizeMessage", "guessedtype": "function"}, "_uiUpdateCollapsed": {"protected": "", "params": [{"type": "Boolean", "name": "v", "description": "  true for collapsed, false for expanded"}], "description": "Updates the UI to reflect the new Collapsed state", "guessedname": "_uiUpdateCollapsed", "guessedtype": "function"}, "_afterStringsChange": {"protected": "", "params": [{"type": "Event", "name": "e", "description": "  Custom event for the attribute change"}], "description": "Updates the UI if changes are made to any of the strings in the strings\nattribute.", "guessedname": "_afterStringsChange", "guessedtype": "function"}, "_setUseBrowserConsole": {"return": {"type": "Boolean", "description": "true|false if logSource is a YUI instance"}, "description": "Setter method for useBrowserConsole attributes.  Only functional if the\nlogSource attribute points to a YUI instance.  Passes the value down to\nthe YUI instance.  NOTE: multiple Console instances cannot maintain\nindependent useBrowserConsole values, since it is just a pass through to\nthe YUI instance configuration.", "protected": "", "params": [{"type": "Boolean", "name": "v", "description": "  false to disable browser console printing (default)"}], "guessedname": "_setUseBrowserConsole", "guessedtype": "function"}, "initializer": {"protected": "", "description": "Constructor code.  Set up the buffer and entry template, publish\ninternal events, and subscribe to the configured logEvent.", "guessedname": "initializer", "guessedtype": "function"}, "_cancelPrintLoop": {"protected": "", "description": "Clears the timeout for printing buffered messages.", "guessedname": "_cancelPrintLoop", "guessedtype": "function"}, "_trimOldEntries": {"protected": "", "description": "Removes the oldest message entries from the UI to maintain the limit\nspecified in the consoleLimit configuration.", "guessedname": "_trimOldEntries", "guessedtype": "function"}, "_getUseBrowserConsole": {"protected": "", "return": {"type": "Boolean", "description": "or null if logSource is not a YUI instance"}, "description": "Getter method for useBrowserConsole attribute.  Just a pass through to\nthe YUI instance configuration setting.", "guessedname": "_getUseBrowserConsole", "guessedtype": "function"}, "_defResetFn": {"protected": "", "description": "Clears the console, resets the startTime attribute, enables and\nunpauses the widget.", "guessedname": "_defResetFn", "guessedtype": "function"}, "_encodeHTML": {"return": {"type": "", "description": "String the encoded string"}, "description": "Returns the input string with ampersands (&amp;), &lt, and &gt; encoded\nas HTML entities.", "protected": "", "params": [{"type": "String", "name": "s", "description": "  the raw string"}], "guessedname": "_encodeHTML", "guessedtype": "function"}, "_uiSetHeight": {"protected": "", "params": [{"type": "String|Number", "name": "v", "description": "  the new height"}], "description": "Set the height of the Console container.  Set the body height to the difference between the configured height and the calculated heights of the header and footer.\nOverrides Widget.prototype._uiSetHeight.", "guessedname": "_uiSetHeight", "guessedtype": "function"}, "_onCollapseClick": {"protected": "", "params": [{"type": "Event", "name": "e", "description": "  DOM event facade for the click event"}], "description": "Event handler for clicking on the Collapse/Expand button. Sets the\n&quot;collapsed&quot; attribute accordingly.", "guessedname": "_onCollapseClick", "guessedtype": "function"}, "log": {"chainable": "", "params": [{"type": "MIXED", "name": "arg*", "description": "  (all arguments passed through to <code>Y.log</code>)"}], "description": "Wrapper for <code>Y.log</code>.", "guessedname": "log", "guessedtype": "function"}, "_initBody": {"protected": "", "description": "Create the DOM structure for the console body&#8212;where messages are\nrendered.", "guessedname": "_initBody", "guessedtype": "function"}, "_onLogEvent": {"protected": "", "params": [{"type": "String", "name": "msg", "description": "  the log message"}, {"type": "String", "name": "cat", "description": "  OPTIONAL the category or logLevel of the message"}, {"type": "String", "name": "src", "description": "  OPTIONAL the source of the message (e.g. widget name)"}], "description": "Responds to log events by normalizing qualifying messages and passing\nthem along through the entry event for buffering etc.", "guessedname": "_onLogEvent", "guessedtype": "function"}, "_afterPausedChange": {"protected": "", "params": [{"type": "Event", "name": "e", "description": "  Custom event for the attribute change"}], "description": "Updates the UI and schedules or cancels the print loop.", "guessedname": "_afterPausedChange", "guessedtype": "function"}, "_validateStyle": {"return": {"type": "Boolean", "description": "pass/fail"}, "description": "Validates input value for style attribute.  Accepts only values 'inline',\n'block', and 'separate'.", "protected": "", "params": [{"type": "String", "name": "style", "description": "  the proposed value"}], "guessedname": "_validateStyle", "guessedtype": "function"}, "destructor": {"protected": "", "description": "Tears down the instance, flushing event subscriptions and purging the UI.", "guessedname": "destructor", "guessedtype": "function"}, "_initHead": {"protected": "", "description": "Create the DOM structure for the header elements.", "guessedname": "_initHead", "guessedtype": "function"}, "_afterConsoleLimitChange": {"protected": "", "params": [{"type": "Event", "name": "e", "description": "  Custom event for the attribute change"}], "description": "Calls this._trimOldEntries() in response to changes in the configured\nconsoleLimit attribute.", "guessedname": "_afterConsoleLimitChange", "guessedtype": "function"}, "_uiSizeCB": {"protected": "", "description": "Over-ride default content box sizing to do nothing, since we're sizing\nthe body section to fill out height ourselves.", "guessedname": "_uiSizeCB", "guessedtype": "function"}, "bindUI": {"protected": "", "description": "Set up event listeners to wire up the UI to the internal state.", "guessedname": "bindUI", "guessedtype": "function"}, "_defEntryFn": {"protected": "", "params": [{"type": "Event", "name": "e", "description": "  The Custom event carrying the message in its payload"}], "description": "Buffers incoming message objects and schedules the printing.", "guessedname": "_defEntryFn", "guessedtype": "function"}, "_validateLogSource": {"return": {"type": "Boolean", "description": "true if the input is an object with an <code>on</code>\nmethod"}, "description": "Validator for logSource attribute.", "protected": "", "params": [{"type": "Object", "name": "v", "description": "  the desired logSource"}], "guessedname": "_validateLogSource", "guessedtype": "function"}, "_htmlEscapeMessage": {"return": {"type": "", "description": "Object the message object with proper escapement"}, "description": "Performs HTML escaping on strings in the message object.", "protected": "", "params": [{"type": "Object", "name": "m", "description": "  the normalized message object"}], "guessedname": "_htmlEscapeMessage", "guessedtype": "function"}, "collapse": {"chainable": "", "description": "Collapses the body and footer.", "guessedname": "collapse", "guessedtype": "function"}, "_onPauseClick": {"protected": "", "params": [{"type": "Event", "name": "e", "description": "  DOM event facade for the click event"}], "description": "Event handler for clicking on the Pause checkbox to update the paused\nattribute.", "guessedname": "_onPauseClick", "guessedtype": "function"}, "_afterVisibleChange": {"protected": "", "params": [{"type": "Event", "name": "e", "description": "  the visibleChange event"}], "description": "Makes adjustments to the UI if needed when the Console is hidden or shown", "guessedname": "_afterVisibleChange", "guessedtype": "function"}, "scrollToLatest": {"chainable": "", "description": "Scrolls to the most recent entry", "guessedname": "scrollToLatest", "guessedtype": "function"}, "_onClearClick": {"protected": "", "params": [{"type": "Event", "name": "e", "description": "  DOM event facade for the click event"}], "description": "Event handler for clicking on the Clear button.  Pass-through to\n<code>this.clearConsole()</code>.", "guessedname": "_onClearClick", "guessedtype": "function"}, "_schedulePrint": {"protected": "", "description": "Sets an interval for buffered messages to be output to the console.", "guessedname": "_schedulePrint", "guessedtype": "function"}, "_uiUpdateFromHideShow": {"protected": "", "params": [{"type": "Boolean", "name": "v", "description": "  true for visible, false for hidden"}], "description": "Recalculates dimensions and updates appropriately when shown", "guessedname": "_uiUpdateFromHideShow", "guessedtype": "function"}, "_createEntryHTML": {"return": {"type": "", "description": "String"}, "description": "Translates message meta into the markup for a console entry.", "protected": "", "params": [{"type": "Object", "name": "m", "description": "  object literal containing normalized message metadata"}], "guessedname": "_createEntryHTML", "guessedtype": "function"}, "expand": {"chainable": "", "description": "Expands the body and footer if collapsed.", "guessedname": "expand", "guessedtype": "function"}, "_uiUpdatePaused": {"protected": "", "params": [{"type": "Boolean", "name": "on", "description": "  the new checked state"}], "description": "Checks or unchecks the paused checkbox", "guessedname": "_uiUpdatePaused", "guessedtype": "function"}, "reset": {"chainable": "", "description": "Clears the console and resets internal timers.", "guessedname": "reset", "guessedtype": "function"}, "syncUI": {"description": "Sync the UI state to the current attribute state.", "guessedname": "syncUI", "guessedtype": "function"}, "_afterCollapsedChange": {"protected": "", "params": [{"type": "Event", "name": "e", "description": "  Custom event for the attribute change"}], "description": "Updates the className of the contentBox, which should trigger CSS to\nhide or show the body and footer sections depending on the new value.", "guessedname": "_afterCollapsedChange", "guessedtype": "function"}, "_initFoot": {"protected": "", "description": "Create the DOM structure for the footer elements.", "guessedname": "_initFoot", "guessedtype": "function"}, "printBuffer": {"chainable": "", "params": [{"type": "Number", "name": "limit", "description": "  (optional) max number of buffered entries to write"}], "description": "Outputs buffered messages to the console UI.  This is typically called\nfrom a scheduled interval until the buffer is empty (referred to as the\nprint loop).  The number of buffered messages output to the Console is\nlimited to the number provided as an argument.  If no limit is passed,\nall buffered messages are rendered.", "guessedname": "printBuffer", "guessedtype": "function"}, "_setLogLevel": {"return": {"type": "", "description": "String One of Console.LOG_LEVEL_INFO, _WARN, or _ERROR"}, "description": "Setter method for logLevel attribute.  Acceptable values are\n&quot;error&quot, &quot;warn&quot, and &quot;info&quot (case\ninsensitive).  Other values are treated as &quot;info&quot;.", "protected": "", "params": [{"type": "String", "name": "v", "description": "  the desired log level"}], "guessedname": "_setLogLevel", "guessedtype": "function"}, "clearConsole": {"chainable": "", "description": "Clear the console of messages and flush the buffer of pending messages.", "guessedname": "clearConsole", "guessedtype": "function"}, "_isInLogLevel": {"protected": "", "description": "Determine if incoming log messages are within the configured logLevel\nto be buffered for printing.", "guessedname": "_isInLogLevel", "guessedtype": "function"}, "renderUI": {"protected": "", "description": "Generate the Console UI.", "guessedname": "renderUI", "guessedtype": "function"}}, "extends": "Widget", "superclass": "Widget", "file": "console.js", "guessedtype": "property", "shortname": "Console", "properties": {"_printLoop": {"description": "Holds the object API returned from <code>Y.later</code> for the print\nloop interval.", "default": "null", "protected": "", "guessedname": "_printLoop", "guessedtype": "property", "type": "Object"}, "Console.LOG_LEVEL_INFO": {"type": "String", "static": "", "description": "Static identifier for logLevel configuration setting to allow all\nincoming messages to generate Console entries.", "guessedname": "LOG_LEVEL_INFO", "guessedtype": "property"}, "Console.BODY_TEMPLATE": {"type": "String", "static": "", "description": "Markup template used to generate the DOM structure for the Console body\n(where the messages are inserted) when it is rendered.  The template\nincludes only the {placeholder} &quot;console_bd_class&quot;, which is\nconstributed by Console.CHROME_CLASSES.", "guessedname": "BODY_TEMPLATE", "guessedtype": "property"}, "Console.HEADER_TEMPLATE": {"type": "String", "static": "", "description": "Markup template used to generate the DOM structure for the header\nsection of the Console when it is rendered.  The template includes\nthese {placeholder}s:\n<ul>\n<li>console_button_class - contributed by Console.CHROME_CLASSES</li>\n<li>console_collapse_class - contributed by Console.CHROME_CLASSES</li>\n<li>console_hd_class - contributed by Console.CHROME_CLASSES</li>\n<li>console_title_class - contributed by Console.CHROME_CLASSES</li>\n<li>str_collapse - pulled from attribute strings.collapse</li>\n<li>str_title - pulled from attribute strings.title</li>\n</ul>", "guessedname": "HEADER_TEMPLATE", "guessedtype": "property"}, "buffer": {"description": "Array of normalized message objects awaiting printing.", "default": "null", "protected": "", "guessedname": "buffer", "guessedtype": "property", "type": "Array"}, "Console.ENTRY_TEMPLATE": {"type": "String", "static": "", "description": "Default markup template used to create the DOM structure for Console\nentries. The markup contains {placeholder}s for content and classes\nthat are replaced via Y.substitute.  The default template contains\nthe {placeholder}s identified in Console.ENTRY_CLASSES as well as the\nfollowing placeholders that will be populated by the log entry data:\n<ul>\n<li>cat_class</li>\n<li>src_class</li>\n<li>totalTime</li>\n<li>elapsedTime</li>\n<li>localTime</li>\n<li>sourceAndDetail</li>\n<li>message</li>\n</ul>", "guessedname": "ENTRY_TEMPLATE", "guessedtype": "property"}, "_body": {"description": "Reference to the Node instance that will house the console messages.", "default": "null", "protected": "", "guessedname": "_body", "guessedtype": "property", "type": "Node"}, "_head": {"description": "Reference to the Node instance containing the header contents.", "default": "null", "protected": "", "guessedname": "_head", "guessedtype": "property", "type": "Node"}, "Console.LOG_LEVEL_WARN": {"type": "String", "static": "", "description": "Static identifier for logLevel configuration setting to allow only\nincoming messages of logLevel &quot;warn&quot; or &quot;error&quot;\nto generate Console entries.", "guessedname": "LOG_LEVEL_WARN", "guessedtype": "property"}, "_foot": {"description": "Reference to the Node instance containing the footer contents.", "default": "null", "protected": "", "guessedname": "_foot", "guessedtype": "property", "type": "Node"}, "Console.ENTRY_CLASSES": {"type": "Object", "static": "", "description": "Map (object) of classNames used to populate the placeholders in the\nConsole.ENTRY_TEMPLATE markup when rendering a new Console entry.\n<p>By default, the keys contained in the object are:</p>\n<ul>\n<li>entry_class</li>\n<li>entry_meta_class</li>\n<li>entry_cat_class</li>\n<li>entry_src_class</li>\n<li>entry_time_class</li>\n<li>entry_content_class</li>\n</ul>", "guessedname": "ENTRY_CLASSES", "guessedtype": "property"}, "Console.FOOTER_TEMPLATE": {"type": "String", "static": "", "description": "Markup template used to generate the DOM structure for the footer\nsection of the Console when it is rendered.  The template includes\nmany of the {placeholder}s from Console.CHROME_CLASSES as well as:\n<ul>\n<li>id_guid - generated unique id, relates the label and checkbox</li>\n<li>str_pause - pulled from attribute strings.pause</li>\n<li>str_clear - pulled from attribute strings.clear</li>\n</ul>", "guessedname": "FOOTER_TEMPLATE", "guessedtype": "property"}, "Console.ATTRS": {"type": "Object", "static": "", "description": "Static property used to define the default attribute configuration of\nthe Widget.", "guessedname": "ATTRS", "guessedtype": "property"}, "Console.CHROME_CLASSES": {"type": "Object", "static": "", "description": "Map (object) of classNames used to populate the placeholders in the\nConsole.HEADER_TEMPLATE, Console.BODY_TEMPLATE, and\nConsole.FOOTER_TEMPLATE markup when rendering the Console UI.\n<p>By default, the keys contained in the object are:</p>\n<ul>\n<li>console_hd_class</li>\n<li>console_bd_class</li>\n<li>console_ft_class</li>\n<li>console_controls_class</li>\n<li>console_checkbox_class</li>\n<li>console_pause_class</li>\n<li>console_pause_label_class</li>\n<li>console_button_class</li>\n<li>console_clear_class</li>\n<li>console_collapse_class</li>\n<li>console_title_class</li>\n</ul>", "guessedname": "CHROME_CLASSES", "guessedtype": "property"}, "Console.LOG_LEVEL_ERROR": {"type": "String", "static": "", "description": "Static identifier for logLevel configuration setting to allow only\nincoming messages of logLevel &quot;error&quot; to generate\nConsole entries.", "guessedname": "LOG_LEVEL_ERROR", "guessedtype": "property"}, "_evtCat": {"protected": "", "type": "string", "description": "Category to prefix all event subscriptions to allow for ease of detach\nduring destroy.", "guessedname": "_evtCat", "guessedtype": "property"}, "Console.NAME": {"type": "String", "static": "", "description": "The identity of the widget.", "guessedname": "NAME", "guessedtype": "property"}}, "description": "Console creates a visualization for messages logged through calls to a YUI\ninstance's <code>Y.log( message, category, source )</code> method.  The\ndebug versions of YUI modules will include logging statements to offer some\ninsight into the steps executed during that module's operation.  Including\nlog statements in your code will cause those messages to also appear in the\nConsole.  Use Console to aid in developing your page or application.\nEntry categories &quot;info&quot;, &quot;warn&quot;, and &quot;error&quot;\nare also referred to as the log level, and entries are filtered against the\nconfigured logLevel."}, "DataType.Date.Locale": {"name": "DataType.Date.Locale", "deprecated": "- use Y.config.lang to request one of many built-in languages instead.", "namespace": "", "module": "datatype", "guessedname": "YDateEn", "static": "", "file": "datatype-min.js", "guessedtype": "property", "shortname": "DataType.Date.Locale", "requires": "oop", "description": "The Date.Locale class is a container for all localised date strings\nused by Y.DataType.Date. It is used internally, but may be extended\nto provide new date localisations.\nTo create your own Locale, follow these steps:\n<ol>\n<li>Find an existing locale that matches closely with your needs</li>\n<li>Use this as your base class.  Use Y.DataType.Date.Locale[\"en\"] if nothing\nmatches.</li>\n<li>Create your own class as an extension of the base class using\nY.merge, and add your own localisations where needed.</li>\n</ol>\nSee the Y.DataType.Date.Locale[\"en-US\"] and Y.DataType.Date.Locale[\"en-GB\"]\nclasses which extend Y.DataType.Date.Locale[\"en\"].\nFor example, to implement locales for French french and Canadian french,\nwe would do the following:\n<ol>\n<li>For French french, we have no existing similar locale, so use\nY.DataType.Date.Locale[\"en\"] as the base, and extend it:\n<pre>\nY.DataType.Date.Locale[\"fr\"] = Y.merge(Y.DataType.Date.Locale, {\na: [\"dim\", \"lun\", \"mar\", \"mer\", \"jeu\", \"ven\", \"sam\"],\nA: [\"dimanche\", \"lundi\", \"mardi\", \"mercredi\", \"jeudi\", \"vendredi\", \"samedi\"],\nb: [\"jan\", \"f&eacute;v\", \"mar\", \"avr\", \"mai\", \"jun\", \"jui\", \"ao&ucirc;\", \"sep\", \"oct\", \"nov\", \"d&eacute;c\"],\nB: [\"janvier\", \"f&eacute;vrier\", \"mars\", \"avril\", \"mai\", \"juin\", \"juillet\", \"ao&ucirc;t\", \"septembre\", \"octobre\", \"novembre\", \"d&eacute;cembre\"],\nc: \"%a %d %b %Y %T %Z\",\np: [\"\", \"\"],\nP: [\"\", \"\"],\nx: \"%d.%m.%Y\",\nX: \"%T\"\n});\n</pre>\n</li>\n<li>For Canadian french, we start with French french and change the meaning of \\%x:\n<pre>\nY.DataType.Date.Locale[\"fr-CA\"] = Y.merge(Y.DataType.Date.Locale[\"fr\"], {\nx: \"%Y-%m-%d\"\n});\n</pre>\n</li>\n</ol>\nWith that, you can use your new locales:\n<pre>\nvar d = new Date(\"2008/04/22\");\nY.DataType.Date.format(d, { format: \"%A, %d %B == %x\", locale: \"fr\" });\n</pre>\nwill return:\n<pre>\nmardi, 22 avril == 22.04.2008\n</pre>\nAnd\n<pre>\nY.DataType.Date.format(d, {format: \"%A, %d %B == %x\", locale: \"fr-CA\" });\n</pre>\nWill return:\n<pre>\nmardi, 22 avril == 2008-04-22\n</pre>"}, "ProgressBar": {"name": "ProgressBar", "configs": {"ratio": {"readonly": "", "type": "number", "description": "Calculate the ratio based on <code>max</code> and\n<code>min</code> values.", "guessedname": "ratio", "guessedtype": "property"}, "orientation": {"default": "'horizontal'", "type": "String", "description": "Display orientation of the progressbar (i.e. vertical or\nhorizontal).", "guessedname": "orientation", "guessedtype": "property"}, "min": {"default": "0", "type": "int", "description": "Represents the lowest value for the bar. The bar will be\ntotally collapsed when reaching this value. Values lower than\nthis will be ignored.", "guessedname": "min", "guessedtype": "property"}, "max": {"default": "100", "type": "int", "description": "Represents the top value for the bar. The bar will be fully\nextended when reaching this value. Values higher than this will\nbe ignored.", "guessedname": "max", "guessedtype": "property"}, "value": {"default": "0", "type": "int | String", "description": "The value for the bar. Valid values are in between the minValue\nand maxValue attributes.", "guessedname": "value", "guessedtype": "property"}, "label": {"default": "''", "type": "String", "description": "Display label of the progressbar. If not specified try to query\nusing HTML_PARSER an element inside contentBox which matches\n<code>aui-progressbar-text</code> and get its innerHTML to be\nused as label.", "guessedname": "label", "guessedtype": "property"}, "statusNode": {"default": "Generated div element.", "type": "String", "description": "DOM Node to display the satus bar of the progressbar. If not\nspecified try to query using HTML_PARSER an element inside\ncontentBox which matches <code>aui-progressbar-status</code>.", "guessedname": "statusNode", "guessedtype": "property"}, "step": {"readonly": "", "type": "number", "description": "Calculate the progressbar step based on <code>ratio</code>\nvalue.", "guessedname": "step", "guessedtype": "property"}, "height": {"default": "25", "type": "int | String", "description": "Display height of the progressbar.", "guessedname": "height", "guessedtype": "property"}, "textNode": {"default": "Generated div element.", "type": "String", "description": "DOM Node to display the text of the progressbar. If not\nspecified try to query using HTML_PARSER an element inside\ncontentBox which matches <code>aui-progressbar-text</code>.", "guessedname": "textNode", "guessedtype": "property"}}, "constructors": [{"params": [{"type": "Object", "name": "config", "description": "  Object literal specifying widget configuration properties."}], "description": "<p><img src=\"assets/images/aui-progressbar/main.png\"/></p>\nA base class for Progressbar, providing:\n<ul>\n<li>Widget Lifecycle (initializer, renderUI, bindUI, syncUI, destructor)</li>\n<li>A visual means of showing progress of an ongoing operation</li>\n<li>Can be enhanced via CSS styles to provide different colors, shapes and textures</li>\n<li>The bar can move horizontally or vertically</li>\n<li>The movement can be enhanced by using the Animation utility</li>\n</ul>\nQuick Example:<br/>\n<pre><code>var progress = new A.ProgressBar({\nboundingBox: '#boudingBox',\norientation: 'horizontal',\nwidth: 300\n})\n.render();\n</code></pre>\nCheck the list of <a href=\"ProgressBar.html#configattributes\">Configuration Attributes</a> available for\nProgressBar."}], "namespace": "", "module": "aui-progressbar", "events": {"stepChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "stepChange", "description": "Fires when the value for the configuration attribute 'step' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "heightChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "heightChange", "description": "Fires when the value for the configuration attribute 'height' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "orientationChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "orientationChange", "description": "Fires when the value for the configuration attribute 'orientation' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "minChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "minChange", "description": "Fires when the value for the configuration attribute 'min' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "valueChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "valueChange", "description": "Fires when the value for the configuration attribute 'value' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "labelChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "labelChange", "description": "Fires when the value for the configuration attribute 'label' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "ratioChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "ratioChange", "description": "Fires when the value for the configuration attribute 'ratio' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "maxChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "maxChange", "description": "Fires when the value for the configuration attribute 'max' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "statusNodeChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "statusNodeChange", "description": "Fires when the value for the configuration attribute 'statusNode' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "textNodeChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "textNodeChange", "description": "Fires when the value for the configuration attribute 'textNode' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "guessedname": "ProgressBar", "methods": {"_uiSetValue": {"description": "Invoked automatically by the UI_ATTRS Widget API when bind or sync the\n<code>value</code> attribute.", "param": "{String} val Progress value", "protected": "", "params": [{"type": "String", "name": "val", "description": " Progress value"}], "guessedname": "_uiSetValue", "guessedtype": "function"}, "_renderStatusNode": {"protected": "", "description": "Render the <code>statusNode</code> of the progressbar.", "guessedname": "_renderStatusNode", "guessedtype": "function"}, "_getStep": {"protected": "", "return": {"type": "number", "description": ""}, "description": "Calculate the progressbar step based on <code>ratio</code>\nvalue.", "guessedname": "_getStep", "guessedtype": "function"}, "_uiSetLabel": {"description": "Invoked automatically by the UI_ATTRS Widget API when bind or sync the\n<code>label</code> attribute.", "param": "{String} val Display label", "protected": "", "params": [{"type": "String", "name": "val", "description": " Display label"}], "guessedname": "_uiSetLabel", "guessedtype": "function"}, "_uiSetOrientation": {"description": "Invoked automatically by the UI_ATTRS Widget API when bind or sync the\n<code>orientation</code> attribute.", "param": "{String} val Orientation", "protected": "", "params": [{"type": "String", "name": "val", "description": " Orientation"}], "guessedname": "_uiSetOrientation", "guessedtype": "function"}, "_getContentBoxSize": {"protected": "", "return": {"type": "number", "description": ""}, "description": "Calculate the contentBox size based on the\n<code>orientation</code> of the progressbar. If the orientation\nis HORIZONTAL get the width, if the orientation is VERTICAL get\nthe height.", "guessedname": "_getContentBoxSize", "guessedtype": "function"}, "_uiSizeTextNode": {"protected": "", "description": "Sync the size of the ProgressBar when some UI attribute change.", "guessedname": "_uiSizeTextNode", "guessedtype": "function"}, "_getRatio": {"protected": "", "return": {"type": "number", "description": ""}, "description": "Calculate the ratio based on <code>max</code> and\n<code>min</code> values.", "guessedname": "_getRatio", "guessedtype": "function"}, "_getPixelStep": {"protected": "", "return": {"type": "number", "description": ""}, "description": "Calculate the number of pixels to set the <code>statusNode</code>.", "guessedname": "_getPixelStep", "guessedtype": "function"}, "renderUI": {"protected": "", "description": "Create the DOM structure for the ProgressBar. Lifecycle.", "guessedname": "renderUI", "guessedtype": "function"}}, "extends": "Base", "superclass": "Base", "file": "aui-progressbar.js", "guessedtype": "property", "shortname": "ProgressBar", "properties": {"ProgressBar.ATTRS": {"type": "Object", "static": "", "description": "Static property used to define the default attribute\nconfiguration for the ProgressBar.", "guessedname": "ATTRS", "guessedtype": "property"}, "ProgressBar.HTML_PARSER": {"type": "Object", "static": "", "description": "Object hash, defining how attribute values are to be parsed from\nmarkup contained in the widget's content box.", "guessedname": "HTML_PARSER", "guessedtype": "property"}, "ProgressBar.NAME": {"type": "String", "static": "", "description": "Static property provides a string to identify the class.", "guessedname": "NAME", "guessedtype": "property"}}, "description": "<p><img src=\"assets/images/aui-progressbar/main.png\"/></p>\nA base class for Progressbar, providing:\n<ul>\n<li>Widget Lifecycle (initializer, renderUI, bindUI, syncUI, destructor)</li>\n<li>A visual means of showing progress of an ongoing operation</li>\n<li>Can be enhanced via CSS styles to provide different colors, shapes and textures</li>\n<li>The bar can move horizontally or vertically</li>\n<li>The movement can be enhanced by using the Animation utility</li>\n</ul>\nQuick Example:<br/>\n<pre><code>var progress = new A.ProgressBar({\nboundingBox: '#boudingBox',\norientation: 'horizontal',\nwidth: 300\n})\n.render();\n</code></pre>\nCheck the list of <a href=\"ProgressBar.html#configattributes\">Configuration Attributes</a> available for\nProgressBar."}, "EventHandle": {"name": "EventHandle", "constructors": [{"params": [{"type": "CustomEvent", "name": "evt", "description": "  the custom event"}, {"type": "Subscriber", "name": "sub", "description": "  the subscriber"}], "description": "Return value from all subscribe operations"}], "namespace": "", "module": "event-custom", "methods": {"detach": {"description": "Detaches this subscriber", "guessedname": "detach", "guessedtype": "function"}, "monitor": {"return": {"type": "EventHandle", "description": "return value from the monitor event subscription"}, "description": "Monitor the event state for the subscribed event.  The first parameter\nis what should be monitored, the rest are the normal parameters when\nsubscribing to an event.", "param": "what {string} what to monitor ('attach', 'detach', 'publish')", "params": [{"type": "string", "name": "what", "description": "  what to monitor ('attach', 'detach', 'publish')"}], "guessedname": "monitor", "guessedtype": "function"}}, "file": "event-custom.js", "shortname": "EventHandle", "properties": {"evt": {"type": "CustomEvent", "description": "The custom event", "guessedname": "evt", "guessedtype": "property"}, "sub": {"type": "Subscriber", "description": "The subscriber object", "guessedname": "sub", "guessedtype": "property"}}, "description": "Return value from all subscribe operations"}, "Do.Error": {"name": "Do.Error", "deprecated": "use Y.Do.Halt or Y.Do.Prevent", "namespace": "", "module": "event-custom", "guessedname": "Error", "file": "event-custom.js", "guessedtype": "property", "shortname": "Do.Error", "description": "Return an Error object when you want to terminate the execution\nof all subsequent method calls."}, "Plugin.ConsoleFilters": {"name": "Plugin.ConsoleFilters", "configs": {"category": {"type": "Object", "description": "<p>Map of entry categories to their visibility status.  Update a\nparticular category's visibility by setting the subattribute to true\n(visible) or false (hidden).</p>\n<p>For example, yconsole.filter.set('category.info', false) to hide\nlog entries with the category/logLevel of 'info'.</p>\n<p>Similarly, yconsole.filter.get('category.warn') will return a\nboolean indicating whether that category is currently being included\nin the UI.</p>\n<p>Unlike the YUI instance configuration's logInclude and logExclude\nproperties, filtered entries are only hidden from the UI, but\ncan be made visible again.</p>", "guessedname": "category", "guessedtype": "property"}, "source": {"type": "Object", "description": "<p>Map of entry sources to their visibility status.  Update a\nparticular sources's visibility by setting the subattribute to true\n(visible) or false (hidden).</p>\n<p>For example, yconsole.filter.set('sources.slider', false) to hide\nlog entries originating from Y.Slider.</p>", "guessedname": "source", "guessedtype": "property"}, "defaultVisibility": {"default": "true", "type": "{Boolean}", "description": "Default visibility applied to new categories and sources.", "guessedname": "defaultVisibility", "guessedtype": "property"}, "cacheLimit": {"default": "Number.POSITIVE_INFINITY", "type": "{Number}", "description": "Maximum number of entries to store in the message cache.  Use this to\nlimit the memory footprint in environments with heavy log usage.\nBy default, there is no limit (Number.POSITIVE_INFINITY).", "guessedname": "cacheLimit", "guessedtype": "property"}}, "namespace": "Plugin", "module": "console-filters", "events": {"defaultVisibilityChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "defaultVisibilityChange", "description": "Fires when the value for the configuration attribute 'defaultVisibility' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "sourceChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "sourceChange", "description": "Fires when the value for the configuration attribute 'source' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "cacheLimitChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "cacheLimitChange", "description": "Fires when the value for the configuration attribute 'cacheLimit' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "categoryChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "categoryChange", "description": "Fires when the value for the configuration attribute 'category' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "methods": {"_createCheckbox": {"protected": "", "params": [{"type": "Node", "name": "container", "description": "  the parentNode of the new checkbox and label"}, {"type": "String", "name": "name", "description": "  the identifier of the filter"}], "description": "Creates a checkbox and label from the ConsoleFilters.FILTER_TEMPLATE for\nthe provided type and name.  The checkbox and label are appended to the\ncontainer node passes as the first arg.", "guessedname": "_createCheckbox", "guessedtype": "function"}, "initializer": {"protected": "", "description": "Initialize entries collection and attach listeners to host events and\nmethods.", "guessedname": "initializer", "guessedtype": "function"}, "_setCacheLimit": {"return": {"type": "Number", "description": ""}, "description": "Setter method for cacheLimit attribute.  Basically a validator to ensure\nnumeric input.", "protected": "", "params": [{"type": "Number", "name": "v", "description": "  Maximum number of entries"}], "guessedname": "_setCacheLimit", "guessedtype": "function"}, "_onCategoryCheckboxClick": {"protected": "", "params": [{"type": "Event", "name": "e", "description": "  the DOM event"}], "description": "Passes checkbox clicks on to the category attribute.", "guessedname": "_onCategoryCheckboxClick", "guessedtype": "function"}, "_uiSetCheckbox": {"protected": "", "params": [{"type": "String", "name": "type", "description": "  'category' or 'source'"}, {"type": "String", "name": "item", "description": "  the name of the filter (e.g. 'info', 'event')"}, {"type": "Boolean", "name": "checked", "description": "  value to set the checkbox's checked property"}], "description": "Updates the checked property of a filter checkbox of the specified type.\nIf no checkbox is found for the input params, one is created.", "guessedname": "_uiSetCheckbox", "guessedtype": "function"}, "_onEntry": {"protected": "", "params": [{"type": "Event", "name": "e", "description": "  the custom event object"}], "description": "Ensures a filter is set up for any new categories or sources and\ncollects the messages in _entries.  If the message is stamped with a\ncategory or source that is currently being filtered out, the message\nwill not pass to the Console's print buffer.", "guessedname": "_onEntry", "guessedtype": "function"}, "refreshConsole": {"description": "Repopulates the Console with entries appropriate to the current filter\nsettings.", "guessedname": "refreshConsole", "guessedtype": "function"}, "destructor": {"protected": "", "description": "Removes the plugin UI and unwires events.", "guessedname": "destructor", "guessedtype": "function"}, "_afterCategoryChange": {"protected": "", "params": [{"type": "Event", "name": "e", "description": "  the attribute change event object"}], "description": "Triggers the Console to update if a known category filter\nchanges value (e.g. visible => hidden).  Updates the appropriate\ncheckbox's checked state if necessary.", "guessedname": "_afterCategoryChange", "guessedtype": "function"}, "showSource": {"params": [{"type": "String", "name": "src*", "description": "  1..n sources to allow to display in the UI"}], "description": "Shows any number of sources in the UI.  Convenience method for\nmyConsole.filter.set('source.foo', true); set('source.bar', true);\nand so on.", "guessedname": "showSource", "guessedtype": "function"}, "bindUI": {"protected": "", "description": "Binds to checkbox click events and internal attribute change events to\nmaintain the UI state.", "guessedname": "bindUI", "guessedtype": "function"}, "showCategory": {"params": [{"type": "String", "name": "cat*", "description": "  1..n categories to allow to display in the UI"}], "description": "Shows any number of categories in the UI.  Convenience method for\nmyConsole.filter.set('category.foo', true); set('category.bar', true);\nand so on.", "guessedname": "showCategory", "guessedtype": "function"}, "_validateCategory": {"return": {"type": "", "description": "Boolean"}, "description": "Validates category updates are objects and the subattribute is not too\ndeep.", "protected": "", "params": [{"type": "String", "name": "cat", "description": "  the new category:visibility map"}, {"type": "String", "name": "v", "description": "  the subattribute path updated"}], "guessedname": "_validateCategory", "guessedtype": "function"}, "_onSourceCheckboxClick": {"protected": "", "params": [{"type": "Event", "name": "e", "description": "  the DOM event"}], "description": "Passes checkbox clicks on to the source attribute.", "guessedname": "_onSourceCheckboxClick", "guessedtype": "function"}, "_validateSource": {"return": {"type": "", "description": "Boolean"}, "description": "Validates source updates are objects and the subattribute is not too\ndeep.", "protected": "", "params": [{"type": "String", "name": "cat", "description": "  the new source:visibility map"}, {"type": "String", "name": "v", "description": "  the subattribute path updated"}], "guessedname": "_validateSource", "guessedtype": "function"}, "hideCategory": {"params": [{"type": "String", "name": "cat*", "description": "  1..n categories to filter out of the UI"}], "description": "Hides any number of categories from the UI.  Convenience method for\nmyConsole.filter.set('category.foo', false); set('category.bar', false);\nand so on.", "guessedname": "hideCategory", "guessedtype": "function"}, "syncUI": {"description": "Updates the UI to be in accordance with the current state of the plugin.", "guessedname": "syncUI", "guessedtype": "function"}, "_afterClearConsole": {"protected": "", "description": "Flushes the cached entries after a call to the Console's clearConsole().", "guessedname": "_afterClearConsole", "guessedtype": "function"}, "_afterCacheLimitChange": {"protected": "", "params": [{"type": "Event", "name": "e", "description": "  the attribute change event object"}], "description": "Trims the cache of entries to the appropriate new length.", "guessedname": "_afterCacheLimitChange", "guessedtype": "function"}, "_afterSourceChange": {"protected": "", "params": [{"type": "Event", "name": "e", "description": "  the attribute change event object"}], "description": "Triggers the Console to update if a known source filter\nchanges value (e.g. visible => hidden).  Updates the appropriate\ncheckbox's checked state if necessary.", "guessedname": "_afterSourceChange", "guessedtype": "function"}, "_filterBuffer": {"protected": "", "description": "Flushes the Console's print buffer of any entries that have a category\nor source that is currently being excluded.", "guessedname": "_filterBuffer", "guessedtype": "function"}, "hideSource": {"params": [{"type": "String", "name": "src*", "description": "  1..n sources to filter out of the UI"}], "description": "Hides any number of sources from the UI.  Convenience method for\nmyConsole.filter.set('source.foo', false); set('source.bar', false);\nand so on.", "guessedname": "hideSource", "guessedtype": "function"}, "renderUI": {"protected": "", "description": "Adds the category and source filter sections to the Console footer.", "guessedname": "renderUI", "guessedtype": "function"}}, "file": "console-filters-debug.js", "shortname": "ConsoleFilters", "properties": {"ConsoleFilters.NAME": {"description": "Plugin name.", "default": "'consoleFilters'", "static": "", "guessedname": "NAME", "guessedtype": "property", "type": "String"}, "_entries": {"protected": "", "type": "Array", "description": "Collection of all log messages passed through since the plugin's\ninstantiation.  This holds all messages regardless of filter status.\nUsed as a single source of truth for repopulating the Console body when\nfilters are changed.", "guessedname": "_entries", "guessedtype": "property"}, "ConsoleFilters.SOURCES_TEMPLATE": {"type": "String", "static": "", "description": "Markup template used to create the container for the source filters.", "guessedname": "SOURCES_TEMPLATE", "guessedtype": "property"}, "ConsoleFilters.CHROME_CLASSES": {"description": "Classnames used by the templates when creating nodes.", "protected": "", "static": "", "guessedname": "CHROME_CLASSES", "guessedtype": "property", "type": "Object"}, "ConsoleFilters.FILTER_TEMPLATE": {"type": "String", "static": "", "description": "Markup template used to create the category and source filter checkboxes.", "guessedname": "FILTER_TEMPLATE", "guessedtype": "property"}, "_categories": {"protected": "", "type": "Node", "description": "The container node created to house the category filters.", "guessedname": "_categories", "guessedtype": "property"}, "ConsoleFilters.CATEGORIES_TEMPLATE": {"type": "String", "static": "", "description": "Markup template used to create the container for the category filters.", "guessedname": "CATEGORIES_TEMPLATE", "guessedtype": "property"}, "ConsoleFilters.NS": {"description": "The namespace hung off the host object that this plugin will inhabit.", "default": "'filter'", "static": "", "guessedname": "NS", "guessedtype": "property", "type": "String"}, "_sources": {"protected": "", "type": "Node", "description": "The container node created to house the source filters.", "guessedname": "_sources", "guessedtype": "property"}, "_cacheLimit": {"description": "Maximum number of entries to store in the message cache.", "default": "Infinity", "protected": "", "guessedname": "_cacheLimit", "guessedtype": "property", "type": "{Number}"}}, "description": "<p>Provides Plugin.ConsoleFilters plugin class.</p>\n<p>This plugin adds the ability to control which Console entries display by filtering on category and source. Two groups of checkboxes are added to the Console footer, one for categories and the other for sources.  Only those messages that match a checked category or source are displayed.</p>"}, "QueryString": {"name": "QueryString", "namespace": "", "module": "querystring", "guessedname": "QueryString", "methods": {"stringify": {"submodule": "querystring-stringify-simple", "description": "<p>Converts an arbitrary value to a Query String representation.</p>\n<p>Objects with cyclical references will trigger an exception.</p>", "param": "obj {Variant} any arbitrary value to convert to query string", "static": "", "guessedname": "stringify", "guessedtype": "function", "params": [{"type": "Variant", "name": "obj", "description": "  any arbitrary value to convert to query string"}, {"type": "String", "name": "sep", "description": "  (optional) Character that should join param k=v pairs together. Default: \"&\""}, {"type": "String", "name": "eq", "description": "   (optional) Character that should join keys to their values. Default: \"=\""}, {"type": "String", "name": "name", "description": "  (optional) Name of the current key, for handling children recursively."}]}}, "static": "", "file": "querystring.js", "guessedtype": "property", "shortname": "QueryString", "description": "<p>The QueryString module adds support for serializing JavaScript objects into\nquery strings and parsing JavaScript objects from query strings format.</p>\n<p>The QueryString namespace is added to your YUI instance including static methods\nY.QueryString.parse(..) and Y.QueryString.stringify(..).</p>\n<p>The <code>querystring</code> module is a rollup of <code>querystring-parse</code> and\n<code>querystring-stringify</code>.</p>\n<p>As their names suggest, <code>querystring-parse</code> adds support for parsing\nQuery String data (Y.QueryString.parse) and <code>querystring-stringify</code> for serializing\nJavaScript data into Query Strings (Y.QueryString.stringify).  You may choose to\ninclude either of the submodules individually if you don't need the\ncomplementary functionality, or include the rollup for both.</p>"}, "WidgetPositionAlign": {"name": "WidgetPositionAlign", "namespace": "", "module": "widget-position-align", "events": {"alignChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "alignChange", "description": "Fires when the value for the configuration attribute 'align' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "centeredChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "centeredChange", "description": "Fires when the value for the configuration attribute 'centered' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "configs": {"centered": {"default": "false", "type": "{boolean | node}", "description": "A convenience attribute, which can be used as a shortcut for the align attribute.\nIf set to true, the Widget is centered in the viewport. If set to a node reference or valid selector string,\nthe Widget will be centered within the node. If set the false, no center positioning is applied.", "guessedname": "centered", "guessedtype": "property"}, "align": {"default": "null", "type": "Object", "desciption": "The align attribute is used to align a reference point on the widget, with the refernce point on another node, or the viewport. \nThe object which align expects has the following properties:\n<dl>\n<dt>node</dt>\n<dd>\nThe node to which the Widget is to be aligned. If set to null, or not provided, the Widget is aligned to the viewport\n</dd>\n<dt>points</dt>\n<dd>\n<p>\nA two element array, defining the two points on the Widget and node/viewport which are to be aligned. The first element is the point on the Widget, and the second element is the point on the node/viewport.\nSupported alignment points are defined as static properties on <code>WidgetPositionAlign</code>.\n</p>\n<p>\ne.g. <code>[WidgetPositionAlign.TR, WidgetPositionAlign.TL]</code> aligns the Top-Right corner of the Widget with the\nTop-Left corner of the node/viewport, and <code>[WidgetPositionAlign.CC, WidgetPositionAlign.TC]</code> aligns the Center of the \nWidget with the Top-Center edge of the node/viewport.\n</p>\n</dd>\n</dl>", "guessedname": "align", "guessedtype": "property"}}, "methods": {"_doAlign": {"description": "Helper method, used to align the given point on the widget, with the XY page co-ordinates provided.", "param": "{String} widgetPoint Supported point constant (e.g. WidgetPositionAlign.TL)", "params": [{"type": "String", "name": "widgetPoint", "description": " Supported point constant (e.g. WidgetPositionAlign.TL)"}, {"type": "Number", "name": "x", "description": " X page co-ordinate to align to"}, {"type": "Number", "name": "y", "description": " Y page co-ordinate to align to"}], "private": "", "guessedname": "_doAlign", "guessedtype": "function"}, "centered": {"param": "{Node | String} node Optional. A node reference or selector string defining the node \ninside which the Widget is to be centered. If not passed in, the Widget will be centered in the \nviewport.", "params": [{"type": "Node | String", "name": "node", "description": " Optional. A node reference or selector string defining the node \ninside which the Widget is to be centered. If not passed in, the Widget will be centered in the \nviewport."}], "description": "Centers the container in the viewport, or if a node is passed in,\nthe node.", "guessedname": "centered", "guessedtype": "function"}, "align": {"param": "{Node | String | null} node A reference (or selector string) for the Node which with the Widget is to be aligned.\nIf null is passed in, the Widget will be aligned with the viewport.", "params": [{"type": "Node | String | null", "name": "node", "description": " A reference (or selector string) for the Node which with the Widget is to be aligned.\nIf null is passed in, the Widget will be aligned with the viewport."}, {"type": "Array[2]", "name": "points", "description": " A two element array, specifying the points on the Widget and node/viewport which need to be aligned. \nThe first entry is the point on the Widget, and the second entry is the point on the node/viewport which need to align.\nValid point references are defined as static constants on the WidgetPositionAlign class. \ne.g. [WidgetPositionAlign.TL, WidgetPositionAlign.TR] will align the top-left corner of the Widget with the top-right corner of the node/viewport."}], "description": "Aligns the Widget to the provided node (or viewport) using the provided\npoints. The method can be invoked directly, however it will result in \nthe align attribute being out of sync with current position of the of Widget.", "guessedname": "align", "guessedtype": "function"}, "_setAlignCenter": {"return": {"type": "Number", "description": "The attribute value being set."}, "description": "Default setter for center attribute changes. Sets up the appropriate value, and passes \nit through the to the align attribute.", "param": "{boolean | node} The attribute value being set.", "protected": "", "params": [{"type": "boolean | node", "name": "The", "description": " attribute value being set."}], "guessedname": "_setAlignCenter", "guessedtype": "function"}, "_syncUIPosAlgin": {"protected": "", "description": "Synchronizes the UI to match the Widgets align configuration.\nThis method in invoked after syncUI is invoked for the Widget class\nusing YUI's aop infrastructure.", "guessedname": "_syncUIPosAlgin", "guessedtype": "function"}, "_bindUIStack": {"protected": "", "description": "Binds event listeners responsible for updating the UI state in response to \nWidget extended positioning related state changes.\n<p>\nThis method is invoked after bindUI is invoked for the Widget class\nusing YUI's aop infrastructure.\n</p>", "guessedname": "_bindUIPosAlign", "guessedtype": "function"}, "_uiSetAlign": {"description": "Updates the UI to reflect the align value passed in (see the align attribute documentation, for the object stucture expected)", "param": "{Node | null} The node to align to, or null to indicate the viewport", "protected": "", "params": [{"type": "Node | null", "name": "The", "description": " node to align to, or null to indicate the viewport"}], "guessedname": "_uiSetAlign", "guessedtype": "function"}, "_afterAlignChange": {"description": "Default attribute change listener for the align attribute, responsible\nfor updating the UI, in response to attribute changes.", "param": "{EventFacade} e The event facade for the attribute change", "protected": "", "params": [{"type": "EventFacade", "name": "e", "description": " The event facade for the attribute change"}], "guessedname": "_afterAlignChange", "guessedtype": "function"}}, "param": "{Object} User configuration object", "file": "widget-position-align.js", "shortname": "WidgetPositionAlign", "properties": {"WidgetPositionAlign.BR": {"description": "Constant used to specify the bottom-right corner for alignment", "value": "\"br\"", "static": "", "guessedname": "BR", "guessedtype": "property", "type": "String"}, "WidgetPositionAlign.RC": {"description": "Constant used to specify the right edge, center point for alignment", "value": "\"rc\"", "static": "", "guessedname": "RC", "guessedtype": "property", "type": "String"}, "WidgetPositionAlign.ATTRS": {"type": "Object", "static": "", "description": "Static property used to define the default attribute \nconfiguration introduced by WidgetPositionAlign.", "guessedname": "ATTRS", "guessedtype": "property"}, "WidgetPositionAlign.TR": {"description": "Constant used to specify the top-right corner for alignment", "value": "\"tr\"", "static": "", "guessedname": "TR", "guessedtype": "property", "type": "String"}, "WidgetPositionAlign.BC": {"description": "Constant used to specify the bottom edge, center point for alignment", "value": "\"bc\"", "static": "", "guessedname": "BC", "guessedtype": "property", "type": "String"}, "WidgetPositionAlign.CC": {"description": "Constant used to specify the center of widget/node/viewport for alignment", "value": "\"cc\"", "static": "", "guessedname": "CC", "guessedtype": "property", "type": "String"}, "WidgetPositionAlign.LC": {"description": "Constant used to specify the left edge, center point for alignment", "value": "\"lc\"", "static": "", "guessedname": "LC", "guessedtype": "property", "type": "String"}, "WidgetPositionAlign.TL": {"description": "Constant used to specify the top-left corner for alignment", "value": "\"tl\"", "static": "", "guessedname": "TL", "guessedtype": "property", "type": "String"}, "WidgetPositionAlign.TC": {"description": "Constant used to specify the top edge-center point for alignment", "value": "\"tc\"", "static": "", "guessedname": "TC", "guessedtype": "property", "type": "String"}, "WidgetPositionAlign.BL": {"description": "Constant used to specify the bottom-left corner for alignment", "value": "\"bl\"", "static": "", "guessedname": "BL", "guessedtype": "property", "type": "String"}}, "description": "Widget extension, which can be used to add extended XY positioning support to the base Widget class,\nthrough the <a href=\"Base.html#method_build\">Base.build</a> method. This extension requires that \nthe WidgetPosition extension be added to the Widget (before WidgetPositionAlign, if part of the same \nextension list passed to Base.build)."}, "AsyncQueue": {"name": "AsyncQueue", "constructors": [{"params": [{"type": "Function|Object", "name": "callback*", "description": "  0..n callbacks to seed the queue"}], "description": "<p>A specialized queue class that supports scheduling callbacks to execute\nsequentially, iteratively, even asynchronously.</p>\n<p>Callbacks can be function refs or objects with the following keys.  Only\nthe <code>fn</code> key is required.</p>\n<ul>\n<li><code>fn</code> -- The callback function</li>\n<li><code>context</code> -- The execution context for the callbackFn.</li>\n<li><code>args</code> -- Arguments to pass to callbackFn.</li>\n<li><code>timeout</code> -- Millisecond delay before executing callbackFn.\n(Applies to each iterative execution of callback)</li>\n<li><code>iterations</code> -- Number of times to repeat the callback.\n<li><code>until</code> -- Repeat the callback until this function returns\ntrue.  This setting trumps iterations.</li>\n<li><code>autoContinue</code> -- Set to false to prevent the AsyncQueue from\nexecuting the next callback in the Queue after\nthe callback completes.</li>\n<li><code>id</code> -- Name that can be used to get, promote, get the\nindexOf, or delete this callback.</li>\n</ul>"}], "namespace": "", "module": "async-queue", "events": {"complete": {"description": "Event fired after the last queued callback is executed."}}, "guessedname": "AsyncQueue", "methods": {"_initEvents": {"protected": "", "description": "Initializes the instance events.", "guessedname": "_initEvents", "guessedtype": "function"}, "_defRemoveFn": {"description": "<p>Default functionality for the &quot;remove&quot; event.  Removes the\ncallback from the queue.</p>\n<p>The event object will contain a property &quot;callback&quot;, which\nholds the id of a callback or the callback object itself.</p>", "param": "e {Event} the custom event", "protected": "", "params": [{"type": "Event", "name": "e", "description": "  the custom event"}], "guessedname": "_defRemoveFn", "guessedtype": "function"}, "pause": {"chainable": "", "return": {"type": "AsyncQueue", "description": "the AsyncQueue instance"}, "description": "Pause the execution of the queue after the execution of the current\ncallback completes.  If called from code outside of a queued callback,\nclears the timeout for the pending callback. Paused queue can be\nrestarted with q.run()", "guessedname": "pause", "guessedtype": "function"}, "run": {"chainable": "", "return": {"type": "AsyncQueue", "description": "the AsyncQueue instance"}, "description": "Sets the queue in motion.  All queued callbacks will be executed in\norder unless pause() or stop() is called or if one of the callbacks is\nconfigured with autoContinue: false.", "guessedname": "run", "guessedtype": "function"}, "_schedule": {"return": {"type": "Boolean", "description": "whether the run loop should continue"}, "description": "Schedules the execution of asynchronous callbacks.", "param": "callback {Object} the callback object to execute", "protected": "", "params": [{"type": "Object", "name": "callback", "description": "  the callback object to execute"}], "guessedname": "_schedule", "guessedtype": "function"}, "_defShiftFn": {"description": "Default functionality for the &quot;shift&quot; event.  Shifts the\ncallback stored in the event object's <em>callback</em> property from\nthe queue if it is the first item.", "param": "e {Event} The event object", "protected": "", "params": [{"type": "Event", "name": "e", "description": "  The event object"}], "guessedname": "_defShiftFn", "guessedtype": "function"}, "_execute": {"return": {"type": "Boolean", "description": "whether the run loop should continue"}, "description": "Handles the execution of callbacks. Returns a boolean indicating\nwhether it is appropriate to continue running.", "param": "callback {Object} the callback object to execute", "protected": "", "params": [{"type": "Object", "name": "callback", "description": "  the callback object to execute"}], "guessedname": "_execute", "guessedtype": "function"}, "stop": {"chainable": "", "return": {"type": "AsyncQueue", "description": "the AsyncQueue instance"}, "description": "Stop and clear the queue after the current execution of the\ncurrent callback completes.", "guessedname": "stop", "guessedtype": "function"}, "_init": {"protected": "", "description": "Initializes the AsyncQueue instance properties and events.", "guessedname": "_init", "guessedtype": "function"}, "remove": {"return": {"type": "AsyncQueue", "description": "the AsyncQueue instance"}, "description": "Removes the callback from the queue.  If the queue is active, the\nremoval is scheduled to occur after the current callback has completed.", "chainable": "", "param": "callback {String|Object} the callback object or a callback's id", "params": [{"type": "String|Object", "name": "callback", "description": "  the callback object or a callback's id"}], "guessedname": "remove", "guessedtype": "function"}, "next": {"return": {"type": "Function", "description": "the callback to execute"}, "description": "Returns the next callback needing execution.  If a callback is\nconfigured to repeat via iterations or until, it will be returned until\nthe completion criteria is met.\nWhen the queue is empty, null is returned.", "guessedname": "next", "guessedtype": "function"}, "indexOf": {"return": {"type": "Number", "description": "index of the callback or -1 if not found"}, "description": "Returns the current index of a callback.  Pass in either the id or\ncallback function from getCallback.", "param": "callback {String|Function} the callback or its specified id", "params": [{"type": "String|Function", "name": "callback", "description": "  the callback or its specified id"}], "guessedname": "indexOf", "guessedtype": "function"}, "add": {"return": {"type": "AsyncQueue", "description": "the AsyncQueue instance"}, "description": "Add any number of callbacks to the end of the queue. Callbacks may be\nprovided as functions or objects.", "chainable": "", "param": "callback* {Function|Object} 0..n callbacks", "params": [{"type": "Function|Object", "name": "callback*", "description": "  0..n callbacks"}], "guessedname": "add", "guessedtype": "function"}, "_defExecFn": {"description": "Default functionality for the &quot;execute&quot; event.  Executes the\ncallback function", "param": "e {Event} the event object", "protected": "", "params": [{"type": "Event", "name": "e", "description": "  the event object"}], "guessedname": "_defExecFn", "guessedtype": "function"}, "getCallback": {"return": {"type": "Object", "description": "the callback object"}, "description": "Retrieve a callback by its id.  Useful to modify the configuration\nwhile the queue is running.", "param": "id {String} the id assigned to the callback", "params": [{"type": "String", "name": "id", "description": "  the id assigned to the callback"}], "guessedname": "getCallback", "guessedtype": "function"}, "_defPromoteFn": {"description": "<p>Default functionality for the &quot;promote&quot; event.  Promotes the\nnamed callback to the head of the queue.</p>\n<p>The event object will contain a property &quot;callback&quot;, which\nholds the id of a callback or the callback object itself.</p>", "param": "e {Event} the custom event", "protected": "", "params": [{"type": "Event", "name": "e", "description": "  the custom event"}], "guessedname": "_defPromoteFn", "guessedtype": "function"}, "_prepare": {"return": {"type": "Function", "description": "a decorated function wrapper to execute the callback"}, "description": "Creates a wrapper function to execute the callback using the aggregated \nconfiguration generated by combining the static AsyncQueue.defaults, the\ninstance defaults, and the specified callback settings.\nThe wrapper function is decorated with the callback configuration as\nproperties for runtime modification.", "param": "callback {Object|Function} the raw callback", "protected": "", "params": [{"type": "Object|Function", "name": "callback", "description": "  the raw callback"}], "guessedname": "_prepare", "guessedtype": "function"}, "promote": {"return": {"type": "AsyncQueue", "description": "the AsyncQueue instance"}, "description": "Promotes the named callback to the top of the queue. If a callback is\ncurrently executing or looping (via until or iterations), the promotion\nis scheduled to occur after the current callback has completed.", "chainable": "", "param": "callback {String|Object} the callback object or a callback's id", "params": [{"type": "String|Object", "name": "callback", "description": "  the callback object or a callback's id"}], "guessedname": "promote", "guessedtype": "function"}, "_defAddFn": {"description": "Default functionality for the &quot;add&quot; event.  Adds the callbacks\nin the event facade to the queue. Callbacks successfully added to the\nqueue are present in the event's <code>added</code> property in the\nafter phase.", "param": "e {Event} the event object", "protected": "", "params": [{"type": "Event", "name": "e", "description": "  the event object"}], "guessedname": "_defAddFn", "guessedtype": "function"}, "isRunning": {"return": {"type": "Boolean", "description": "true if queue is waiting for a \nfrom any initiated transactions"}, "description": "Determines if the queue is waiting for a callback to complete execution.", "guessedname": "isRunning", "guessedtype": "function"}, "size": {"return": {"type": "Number", "description": ""}, "description": "Returns the number of callbacks in the queue.", "guessedname": "size", "guessedtype": "function"}}, "extends": "EventTarget", "superclass": "EventTarget", "file": "async-queue.js", "guessedtype": "function", "shortname": "AsyncQueue", "properties": {"AsyncQueue.defaults": {"type": "{Object}", "static": "", "description": "<p>Static default values used to populate callback configuration properties.\nPreconfigured defaults include:</p>\n<ul>\n<li><code>autoContinue</code>: <code>true</code></li>\n<li><code>iterations</code>: 1</li>\n<li><code>timeout</code>: 10 (10ms between callbacks)</li>\n<li><code>until</code>: (function to run until iterations &lt;= 0)</li>\n</ul>", "guessedname": "defaults", "guessedtype": "property"}, "_running": {"protected": "", "type": "{Boolean|Object} true for synchronous callback execution, the\nreturn handle from Y.later for async callbacks.\nOtherwise false.", "description": "Used to indicate the queue is currently executing a callback.", "guessedname": "_running", "guessedtype": "property"}, "defaults": {"type": "{Object}", "description": "Callback defaults for this instance.  Static defaults that are not\noverridden are also included.", "guessedname": "defaults", "guessedtype": "property"}}, "description": "<p>A specialized queue class that supports scheduling callbacks to execute\nsequentially, iteratively, even asynchronously.</p>\n<p>Callbacks can be function refs or objects with the following keys.  Only\nthe <code>fn</code> key is required.</p>\n<ul>\n<li><code>fn</code> -- The callback function</li>\n<li><code>context</code> -- The execution context for the callbackFn.</li>\n<li><code>args</code> -- Arguments to pass to callbackFn.</li>\n<li><code>timeout</code> -- Millisecond delay before executing callbackFn.\n(Applies to each iterative execution of callback)</li>\n<li><code>iterations</code> -- Number of times to repeat the callback.\n<li><code>until</code> -- Repeat the callback until this function returns\ntrue.  This setting trumps iterations.</li>\n<li><code>autoContinue</code> -- Set to false to prevent the AsyncQueue from\nexecuting the next callback in the Queue after\nthe callback completes.</li>\n<li><code>id</code> -- Name that can be used to get, promote, get the\nindexOf, or delete this callback.</li>\n</ul>"}, "ClickableRail": {"name": "ClickableRail", "configs": {"clickableRail": {"default": "true", "type": "{Boolean}", "description": "Enable or disable clickable rail support.", "guessedname": "clickableRail", "guessedtype": "property"}}, "namespace": "", "module": "slider", "methods": {"_defRailMouseDownFn": {"description": "Default behavior for the railMouseDown event.  Centers the thumb at\nthe click location and passes control to the DDM to behave as though\nthe thumb itself were clicked in preparation for a drag operation.", "param": "e {Event} the EventFacade for the railMouseDown custom event", "protected": "", "params": [{"type": "Event", "name": "e", "description": "  the EventFacade for the railMouseDown custom event"}], "guessedname": "_defRailMouseDownFn", "guessedtype": "function"}, "_resolveThumb": {"return": {"type": "Y.DD.Drag", "description": "the Drag instance that should be moved"}, "description": "Resolves which thumb to actuate if any.  Override this if you want to\nsupport multiple thumbs.  By default, returns the Drag instance for\nthe thumb stored by the Slider.", "param": "e {DOMEvent} the mousedown event object", "protected": "", "params": [{"type": "DOMEvent", "name": "e", "description": "  the mousedown event object"}], "guessedname": "_resolveThumb", "guessedtype": "function"}, "_getThumbDestination": {"return": {"type": "Array", "description": "the [top, left] pixel position of the destination"}, "description": "Calculates the top left position the thumb should be moved to to\nalign the click XY with the center of the specified node.", "param": "e {DOMEvent} The mousedown event object", "protected": "", "params": [{"type": "DOMEvent", "name": "e", "description": "  The mousedown event object"}, {"type": "Node", "name": "node", "description": "  The node to position"}], "guessedname": "_getThumbDestination", "guessedtype": "function"}, "_bindClickableRail": {"protected": "", "description": "Attaches DOM event subscribers to support rail interaction.", "guessedname": "_bindClickableRail", "guessedtype": "function"}, "_onRailMouseDown": {"description": "Dispatches the railMouseDown event.", "param": "e {DOMEvent} the mousedown event object", "protected": "", "params": [{"type": "DOMEvent", "name": "e", "description": "  the mousedown event object"}], "guessedname": "_onRailMouseDown", "guessedtype": "function"}, "_unbindClickableRail": {"protected": "", "description": "Detaches DOM event subscribers for cleanup/destruction cycle.", "guessedname": "_unbindClickableRail", "guessedtype": "function"}, "_initClickableRail": {"protected": "", "description": "Initializes the internal state and sets up events.", "guessedname": "_initClickableRail", "guessedtype": "function"}}, "file": "slider.js", "shortname": "ClickableRail", "events": {"railMouseDown": {"preventable": "_defRailMouseDownFn", "description": "Broadcasts when the rail has received a mousedown event and\ntriggers the thumb positioning.  Use\n<code>e.preventDefault()</code> or\n<code>set(&quot;clickableRail&quot;, false)</code> to prevent\nthe thumb positioning."}, "clickableRailChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "clickableRailChange", "description": "Fires when the value for the configuration attribute 'clickableRail' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "description": "Slider extension that allows clicking on the Slider's rail element,\ntriggering the thumb to align with the location of the click."}, "Array": {"name": "Array", "namespace": "", "module": "yui", "methods": {"hash": {"return": {"type": "object", "description": "the hash"}, "description": "Returns an object using the first array as keys, and\nthe second as values.  If the second array is not\nprovided the value is set to true for each.", "param": "k {Array} keyset", "static": "", "guessedname": "hash", "guessedtype": "function", "params": [{"type": "Array", "name": "k", "description": "  keyset"}, {"type": "Array", "name": "v", "description": "  optional valueset"}]}, "indexOf": {"return": {"type": "int", "description": "the index of the item that contains the value or -1"}, "description": "Returns the index of the first item in the array\nthat contains the specified value, -1 if the\nvalue isn't found.", "param": "a {Array} the array to search", "static": "", "guessedname": "indexOf", "guessedtype": "property", "params": [{"type": "Array", "name": "a", "description": "  the array to search"}, {"type": "", "name": "val", "description": " the value to search for"}]}, "some": {"return": {"type": "boolean", "description": "true if the function returns true on\nany of the items in the array"}, "description": "Executes the supplied function on each item in the array.\nReturning true from the processing function will stop the \nprocessing of the remaining\nitems.", "param": "a {Array} the array to iterate", "static": "", "guessedname": "some", "guessedtype": "property", "params": [{"type": "Array", "name": "a", "description": "  the array to iterate"}, {"type": "Function", "name": "f", "description": "  the function to execute on each item. The function \nreceives three arguments: the value, the index, the full array."}, {"type": "", "name": "o", "description": " Optional context object"}]}, "()": {"return": {"type": "Array", "description": "the resulting array"}, "description": "Y.Array(o) returns an array:\n- Arrays are return unmodified unless the start position is specified.\n- \"Array-like\" collections (@see Array.test) are converted to arrays\n- For everything else, a new array is created with the input as the sole item\n- The start position is used if the input is or is like an array to return\na subset of the collection.", "param": "o the item to arrayify", "static": "", "guessedname": "YArray", "guessedtype": "function", "params": [{"type": "", "name": "o", "description": " the item to arrayify"}, {"type": "int", "name": "i", "description": "  if an array or array-like, this is the start index"}, {"type": "boolean", "name": "arraylike", "description": "  if true, it forces the array-like fork.  This\ncan be used to avoid multiple Array.test calls."}], "todo": "this will not automatically convert elements that are also collections\nsuch as forms and selects.  Passing true as the third param will\nforce a conversion."}, "each": {"return": {"type": "YUI", "description": "the YUI instance"}, "description": "Executes the supplied function on each item in the array.", "param": "a {Array} the array to iterate", "static": "", "guessedname": "each", "guessedtype": "property", "params": [{"type": "Array", "name": "a", "description": "  the array to iterate"}, {"type": "Function", "name": "f", "description": "  the function to execute on each item.  The \nfunction receives three arguments: the value, the index, the full array."}, {"type": "", "name": "o", "description": " Optional context object"}]}, "test": {"return": {"type": "int", "description": "a number indicating the results:\n0: Not an array or an array-like collection\n1: A real array. \n2: array-like collection."}, "description": "Evaluates the input to determine if it is an array, array-like, or \nsomething else.  This is used to handle the arguments collection \navailable within functions, and HTMLElement collections", "static": "", "guessedname": "test", "guessedtype": "function", "todo": "current implementation (intenionally) will not implicitly \nhandle html elements that are array-like (forms, selects, etc)."}, "numericSort": {"description": "Numeric sort convenience function.\nY.ArrayAssert.itemsAreEqual([1, 2, 3], [3, 1, 2].sort(Y.Array.numericSort));", "guessedname": "numericSort", "guessedtype": "function"}}, "file": "aui.js", "shortname": "Array", "description": "Adds the following array utilities to the YUI instance.  Additional\narray helpers can be found in the collection component."}, "EventFacade": {"file": "event-custom.js", "description": "Wraps and protects a custom event for use when emitFacade is set to true.\nRequires the event-custom-complex module", "namespace": "", "module": "event-custom", "methods": {"stopImmediatePropagation": {"description": "Stops the propagation to the next bubble target and\nprevents any additional listeners from being exectued\non the current target.", "guessedname": "stopImmediatePropagation", "guessedtype": "function"}, "stopPropagation": {"description": "Stops the propagation to the next bubble target", "guessedname": "stopPropagation", "guessedtype": "function"}, "preventDefault": {"description": "Prevents the event's default behavior", "guessedname": "preventDefault", "guessedtype": "function"}, "halt": {"param": "immediate {boolean} if true additional listeners\non the current target will not be executed", "params": [{"type": "boolean", "name": "immediate", "description": "  if true additional listeners\non the current target will not be executed"}], "description": "Stops the event propagation and prevents the default\nevent behavior.", "guessedname": "halt", "guessedtype": "function"}}, "param": "e {Event} the custom event", "guessedname": "EventFacade", "guessedtype": "function", "shortname": "EventFacade", "properties": {"relatedTarget": {"type": "Node", "propery": "relatedTarget", "description": "Node reference to the relatedTarget", "guessedname": "relatedTarget", "guessedtype": "property"}, "type": {"type": "string", "description": "The event type, this can be overridden by the fire() payload", "guessedname": "type", "guessedtype": "property"}, "details": {"type": "Array", "description": "The arguments passed to fire", "guessedname": "details", "guessedtype": "property"}, "currentTarget": {"type": "Node", "propery": "currentTarget", "description": "Node reference for the element that the listener was attached to.", "guessedname": "currentTarget", "guessedtype": "property"}, "target": {"type": "Node", "propery": "target", "description": "Node reference for the targeted eventtarget", "guessedname": "target", "guessedtype": "property"}}, "name": "EventFacade"}, "DataSourceTextSchema": {"name": "DataSourceTextSchema", "namespace": "", "module": "datasource", "guessedname": "DataSourceTextSchema", "methods": {"_beforeDefDataFn\n<dl>\n<dt>tId (Number)</dt> <dd>Unique transaction ID.</dd>\n<dt>request (Object)</dt> <dd>The request.</dd>\n<dt>callback (Object)</dt> <dd>The callback object with the following properties:\n<dl>\n<dt>success (Function)</dt> <dd>Success handler.</dd>\n<dt>failure (Function)</dt> <dd>Failure handler.</dd>\n</dl>\n</dd>\n<dt>data (Object)</dt> <dd>Raw data.</dd>\n</dl>": {"protected": "", "description": "Parses raw data into a normalized response.", "guessedname": "_beforeDefDataFn", "guessedtype": "function"}, "initializer": {"description": "Internal init() handler.", "param": "config {Object} Config object.", "params": [{"type": "Object", "name": "config", "description": "  Config object."}], "private": "", "guessedname": "initializer", "guessedtype": "function"}}, "extends": "Plugin.Base", "superclass": "Plugin.Base", "file": "datasource.js", "guessedtype": "function", "shortname": "DataSourceTextSchema", "properties": {"NS": {"description": "The namespace for the plugin. This will be the property on the host which\nreferences the plugin instance.", "value": "\"schema\"", "static": "", "guessedname": "NS", "guessedtype": "property", "type": "String", "final": ""}, "NAME": {"description": "Class name.", "value": "\"dataSourceTextSchema\"", "static": "", "guessedname": "NAME", "guessedtype": "property", "type": "String", "final": ""}}, "description": "Adds schema-parsing to the DataSource Utility."}}, "version": "1.0.1", "namespaces": ["Plugin", "Test", "Assert", "Test.Format", "Coverage.Format", "YAHOO.widget", "plugin", "DD"]}